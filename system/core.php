<?php $_stopwatch = microtime (); define ('E2_VERSION',4045); define ('E2_RELEASE','2.11a'); define ('CACHE',1); define ('BUILDER_OBFUSCATE',1); define ('BUILDER_FLATTEN',1); define ('BUILT', !strstr (__FILE__,'all.php')); define ('E2_RUN_ID',chr (rand (65,90))); function e2m_error404 () { global$_config,$_strings; if($_config['try_redirect_to_all']) { $c = 'all/'. urldecode ($_GET['go']); zq ($c); } header ('HTTP/1.1 404 Not found'); $v['class']='404'; $v['heading']=$_strings['pt--page-not-found']; $v['title']=$_strings['pt--page-not-found']; return $v; } class AeArbitraryNotesCollectionView { private $name = ''; private $isCached = false; private $hasRun = false; private $sql = null; private $currentURL = null; private $cacheFilename = null; private $cacheExpiresFilename = null; private $cacheable = []; private $viewExpiration = null; private $notesCTree = null; private $filterOutIDs = []; public function __construct ($name){ $this->name = $name; } public function setSQLRequest ($sql){ $this->sql = $sql; } public function setCurrentURL ($currentURL){ $this->currentURL = $currentURL; } public function setCacheFilename ($cacheFilename){ $this->isCached = true; $this->cacheFilename = $cacheFilename; } public function setCacheExpiresFilename ($cacheExpiresFilename){ $this->cacheExpiresFilename = $cacheExpiresFilename; } public function setViewExpiration ($viewExpiration){ $this->viewExpiration = $viewExpiration; } public function setFilterOutIDs ($filterOutIDs){ $this->filterOutIDs = $filterOutIDs; } public function orderNotesCTreeByVerticality () { if (!$this->hasRun)$this -> run (); usort ($this->notesCTree, function ($b,$y){ if (empty ($b['images'][0]['verticality']))$n = 0; else $n = $b['images'][0]['verticality']; if (empty ($y['images'][0]['verticality']))$m = 0; else $m = $y['images'][0]['verticality']; return (int)round (($m - $n)*10000); }); } public function getNotesCTree () { if (!$this->hasRun)$this -> run (); return$this->notesCTree; } private function prepareCacheableData () { $f = [ 'notes-records' => function () { $d = []; try { mm ($this->sql,'get "'. $this->name .'" list'); foreach (dm () as $s){ if (yf ($s)==='public'){ $d[] = $s; } } } catch (AeMySQLException $e){ v3 ($e); if(Log::$a)__log ('Could not get list from database'); } return $d; }, ]; if($this->isCached and is_file ($this->cacheFilename)) { $this->cacheable = @unserialize (file_get_contents ($this->cacheFilename)) or $this->cacheable = []; } $q = true; if (!empty ($this->cacheExpiresFilename)) { if($this->isCached and is_file ($this->cacheExpiresFilename)) { $l = time (); $z = (int) @file_get_contents ($this->cacheExpiresFilename); if(Log::$a)__log ('List expires '. date ('r',$z) .', now '. date ('r',$l)); $q = ($l < $z); } } $k = false; foreach ($f as $x => $e_){ if (!array_key_exists ($x,$this->cacheable) or !$q){ if(Log::$a)__log ('Build cache: "'. $x .'"'); $this->cacheable[$x]=$e_ (); $k = true; } else { if(Log::$a)__log ('Retrieved from cache: "'. $x .'"'); } } if($this->isCached and $k){ e3 ($this->cacheFilename,serialize ($this->cacheable)); if($this->cacheExpiresFilename){ @e3 ($this->cacheExpiresFilename,time () + $this->viewExpiration); } } } private function run () { $this->hasRun = true; if(Log::$a)__log ('AeArbitraryNotesCollectionView "'. $this->name .'" run {'); if(Log::$a)__log ('Cacheable data {'); $this -> prepareCacheableData (); if(Log::$a)__log ('}'); if(Log::$a)__log ('Uncacheable data {'); $this->notesCTree = []; foreach($this->cacheable['notes-records'] as $s){ if(in_array ($s['ID'],$this->filterOutIDs)) continue; $noteView = new AeNoteView ($s); $r = $noteView -> getNoteCTree (); $r['current?'] = ($r['href']==$this->currentURL); $this->notesCTree[] = $r; AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($s['ID']); } if(Log::$a)__log ('}'); if(Log::$a)__log ('}'); } } class AeDatabaseConfiguration { public $server; public $host; public $port = null; public $user; public $password; public $name; public $source; public $backup_dir; private $prefix = null; private $subset = null; public function __construct ( string $source, string $backup_dir, string $server, string $user, string $password, string $name, string $prefix = null, string $subset = null ) { $this->source = $source; $this->backup_dir = $backup_dir; $this->server = $server; list ($this->host,$this->port)=xm ($this->server); if ((string)$this->port === '') { $this->port = null; } $this->user = $user; $this->password = $password; $this->name = $name; $this->prefix = $prefix; $this->subset = $subset; } public function hasPrefixSpecified () { return$this->prefix !== null; } public function getPrefix () { if($this->prefix === null){ throw new LogicException ('Assertion failed: database configuration has no prefix'); } return$this->prefix; } public function setPrefix ($prefix){ $this->prefix = $prefix; } public function hasSubsetSpecified () { return$this->subset !== null; } public function setSubset ($subset){ $this->subset = $subset; } public function getSubset () { if($this->subset === null){ throw new LogicException ('Assertion failed: database configuration has no subset'); } return$this->subset; } public function getDatabaseParamsArray () { return [ 'server' => $this->server, 'user_name' => $this->user, 'passw' => $this->password, 'name' => $this->name, ]; } public function getServerKeyString () { return$this->user .'@'. $this->server; } public function getDatabaseKeyString () { return$this -> getServerKeyString () .'/'. $this->name; } public function getTablesKeyString () { return$this -> getDatabaseKeyString () .'/'. $this -> getPrefix () .'...'; } public function __toString () { return$this -> getTablesKeyString () .'?'. $this -> getSubset (); } } class AeEnv { private static $t = false; public static $j = ''; public static $h = 'http'; public static $g = ''; public static $server = ''; public static $w = ''; public static $u = ''; public static $i = 'http'; public static $base_url = ''; public static $o = ''; private static function updateBaseURL () { if (!self::$t) throw new LogicException ('AeEnv not initialized'); self::$base_url = self::$i. '://'. self::$server . self::$w . '/'; self::$o = self::$base_url; if(self::$u !== (string)''){ self::$o .= self::$u .'/'; } } public static function examine ($p){ list (self::$server, ) = explode (':',$p['HTTP_HOST']); self::$w = substr ( $p['PHP_SELF'], 0,strpos ($p['PHP_SELF'],'/index.php') ); self::$i = ( !empty ($p['HTTPS']) && $p['HTTPS']!=='off' or $p['SERVER_PORT']==443 or isset ($p['HTTP_X_FORWARDED_PROTO']) && $p['HTTP_X_FORWARDED_PROTO']=='https' or isset ($p['HTTP_X_HTTPS']) && ($p['HTTP_X_HTTPS']) ) ? 'https' : 'http'; if(getenv ('E2_USER_SUBPATH')) { self::$u = getenv ('E2_USER_SUBPATH'); } elseif(getenv ('REDIRECT_E2_USER_SUBPATH')) { self::$u = getenv ('REDIRECT_E2_USER_SUBPATH'); } self::$t = true; self::updateBaseURL (); self::$j = self::$server; self::$h = self::$i; self::$g = self::$base_url; } public static function setPrefersHTTPS ($cv){ if (!self::$t) throw new LogicException ('AeEnv not initialized'); if ((bool)$cv){ self::$i = 'https'; self::updateBaseURL (); } } public static function setPreferredServer ($vv){ if (!self::$t) throw new LogicException ('AeEnv not initialized'); if ($vv !== null and $_SERVER['HTTP_HOST']!==$vv){ self::$server = $vv; self::updateBaseURL (); } } public static function showDie () { if (!self::$t) throw new LogicException ('AeEnv not initialized'); echo '<pre>'; echo '<b>server</b>: "'. self::$server. '"<br />'; echo '<b>server_used</b>: "'. self::$j. '"<br />'; echo '<b>folder</b>: "'. self::$w. '"<br />'; echo '<b>user_subpath</b>: "'. self::$u. '"<br />'; echo '<b>protocol_used</b>: "'. self::$h. '"<br />'; echo '<b>protocol</b>: "'. self::$i. '"<br />'; echo '<b>base_url_used</b>: "'. self::$g. '"<br />'; echo '<b>base_url</b>: "'. self::$base_url. '"<br />'; echo '</pre>'; die; } } class AeFileManager { private static $bv = null; private static $yv = null; private static $nv = null; private static $mv = [ '.', ]; private static $fv = [ '', LOGS_DIRNAME, BACKUP_DIRNAME, ]; private static $dv = [ '', CACHES_DIRNAME, BACKUP_DIRNAME, ]; private static $sv = [ PICTURES_DIRNAME, THUMBNAILS_DIRNAME, PICTURES_DIRNAME .'remote/', THUMBNAILS_DIRNAME .'remote/', VIDEO_DIRNAME, AUDIO_DIRNAME, AVATARS_DIRNAME, USERPIC_DIRNAME, ]; private static $av = [ 'updating.psa', ]; private static $qv = [ 'password-hash.psa', 'password-wait.psa', 'last-comment.psa', 'new-uploads.psa', 'settings.json', 'bsi.psa', 'auth.psa', 'scheduled.psa', 'license.psa', 'checklist.psa', ]; private static function ready () { return self::$bv !== null and self::$yv !== null and self::$nv !== null; } public static function writtenDirectories ($yv = null,$nv = null){ if (!self::ready ()) return []; if ($yv === null)$yv = self::$yv; if ($nv === null)$nv = self::$nv; $lv = self::$mv; foreach(self::$fv as $zv){ $lv[] = self::$bv . $zv; } foreach(self::$dv as $zv){ $lv[] = $yv . $zv; } foreach(self::$sv as $zv){ $lv[] = $nv . $zv; } $lv = array_unique ($lv); return $lv; } public static function writtenFiles ($yv = null,$nv = null){ if (!self::ready ()) return []; if ($yv === null)$yv = self::$yv; if ($nv === null)$nv = self::$nv; $kv = []; foreach(self::$av as $xv){ $kv[] = self::$bv . $xv; } foreach(self::$qv as $xv){ $kv[] = $yv . $xv; } $kv = array_unique ($kv); return $kv; } public static function setInstancePath ($bv){ self::$bv = $bv; } public static function setUserPath ($yv){ self::$yv = $yv; } public static function setMediaPath ($nv){ self::$nv = $nv; } public static function forceAllDirectories () { if (!self::ready ()) return false; foreach(self::writtenDirectories () as $ev){ @cq ($ev); } } public static function forceInstanceDirectories () { if (!self::ready ()) return false; foreach(self::$fv as $zv){ @cq (self::$bv . $zv); } } public static function forceUserDirectories ($yv = null){ if (!self::ready ()) return false; if ($yv === null)$yv = self::$yv; foreach(self::$dv as $zv){ @cq ($yv . $zv); } } public static function forceMediaDirectories ($nv = null){ if (!self::ready ()) return false; if ($nv === null)$nv = self::$nv; foreach(self::$sv as $zv){ @cq ($nv . $zv); } } public static function getPathsWithNoWritePermissions ($yv = null,$nv = null){ if (!self::ready ()) return []; if ($yv === null)$yv = self::$yv; if ($nv === null)$nv = self::$nv; clearstatcache (); $rv = []; foreach(self::writtenDirectories ($yv,$nv) as $tv){ if(is_dir ($tv) and !is_writable ($tv)) { $rv[] = $tv; } } foreach(self::writtenFiles ($yv,$nv) as $tv){ if(is_file ($tv) and !is_writable ($tv)) { $rv[] = $tv; } } return $rv; } } class AeLayoutDiversityManager { private static $layoutsUseIndexes = []; private static $layoutsUseIndex = 1; private static $layoutsUseMaxIndex = 1; public static function addLayoutsUsed ($jv){ self::$layoutsUseIndexes[$jv]=self::$layoutsUseIndex; self::$layoutsUseIndex ++; self::$layoutsUseMaxIndex ++; } public static function hasLayoutBeenUsed ($jv){ if (isset (self::$layoutsUseIndexes[$jv])) return true; } public static function getLayoutsUseRecency ($jv){ if (isset (self::$layoutsUseIndexes[$jv])) { return self::$layoutsUseIndexes[$jv]-self::$layoutsUseMaxIndex; } } } class AeMainMenuManager { private static $currentTags = []; private static $parentTags = []; static $isFavouritesCurrent = false; static $isFavouritesParent = false; static $isMostCommentedCurrent = false; static $isMostCommentedParent = false; static $isPopularCurrent = false; static $isPopularParent = false; static $isTagsCurrent = false; static $isTagsParent = false; static $isCalendarCurrent = false; static $isCalendarParent = false; public static function addCurrentTag ($hv){ self::$currentTags[] = $hv; } public static function addParentTag ($hv){ self::$parentTags[] = $hv; } public static function isCurrentTag ($hv){ if (!empty (self::$currentTags)) { return in_array ($hv,self::$currentTags); } return false; } public static function isParentTag ($hv){ if (!empty (self::$parentTags)) { return in_array ($hv,self::$parentTags); } return false; } } class AeModel { private static $gv = [ 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'pkey1' => "INT UNSIGNED DEFAULT '1' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v39' => "VARCHAR(39) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". DEFAULT_FORMATTER ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ]; private static $wv = [ 'Actions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityID', 'pkey'], ['Stamp', 'time'], ['ReadCount', 'int'], ], 'Aliases' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityType', 'v1'], ['EntityID', 'pkey'], ['Alias', 'v64'], ['Stamp', 'time'], ], 'Comments' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['Text', 'text'], ['Reply', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ['IsReplyVisible', '0'], ['IsReplyFavourite', '0'], ['IsAnswerAware', '1'], ['IsSubscriber', '0'], ['IsSpamSuspect', '0'], ['IsNew', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['ReplyStamp', 'time'], ['ReplyLastModified', 'time'], ['IP', 'v39'], ['IsGIPUsed', '0'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ], 'GIPsSessions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['AuthorProfileLink', 'v255'], ['SessionToken', 'v255'], ['Stamp', 'time'], ], 'Keywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Keyword', 'v255'], ['OriginalAlias', 'v64'], ['PageTitle', 'v255'], ['Description', 'text'], ['Summary', 'text'], ['Uploads', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ], 'Notes' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Title', 'v255'], ['Text', 'text'], ['Summary', 'text'], ['FormatterID', 'fid'], ['OriginalAlias', 'v64'], ['Uploads', 'text'], ['IsPublished', '0'], ['IsCommentable', '0'], ['IsVisible', '1'], ['IsFavourite', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['Offset', 'int'], ['IsDST', '0'], ['IsIndexed', '0'], ['IsExternal', '0'], ['ReadCount', 'uint'], ['SourceID', 'pkey'], ['SourceNoteID', 'pkey'], ['SourceNoteURL', 'v255'], ['SourceNoteJSONURL', 'v255'], ['SourceNoteData', 'text'], ], 'NotesKeywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['KeywordID', 'pkey'], ], 'Sources' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['TrueID', 'pkey'], ['Title', 'v255'], ['AuthorName', 'v255'], ['URL', 'v255'], ['PictureURL', 'v255'], ['IsWhiteListed', '0'], ['IsTrusted', '0'], ], ]; private static $uv = [ 'Actions' => [ ['unique', ['EntityID','Stamp']], ['index', ['SubsetID']], ], 'Aliases' => [ ['index', ['SubsetID']], ['index', ['Alias']], ['index', ['EntityID']], ], 'Comments' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'GIPsSessions' => [ ['unique', ['SubsetID','GIP','GIPAuthorID']], ['index', ['SubsetID']], ], 'Keywords' => [ ['index', ['SubsetID']], ], 'Notes' => [ ['fulltext', ['Title','Text']], ['index', ['SubsetID']], ['index', ['Stamp']], ['index', ['SourceID']], ['index', ['SourceNoteID']], ], 'NotesKeywords' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'Sources' => [ ['index', ['SubsetID']], ], ]; private static $iv = [ 'index' => 'INDEX', 'unique' => 'UNIQUE INDEX', 'fulltext' => 'FULLTEXT', ]; private static $ov = [ 'index' => 'KEY', 'unique' => 'UNIQUE KEY', 'fulltext' => 'FULLTEXT KEY', ]; public static function unprefixedCoreTablesNames () { return array_keys (self::$wv); } public static function unprefixedEssentialTablesNames () { return [ 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ]; } public static function assertUnprefixedTableName ($pv){ if (!array_key_exists ($pv,self::$wv)) { throw new LogicException ('Table "'. $pv .'" is not part of the model'); } } public static function columnsByUnprefixedTableName ($pv){ self::assertUnprefixedTableName ($pv); return self::$wv[$pv]; } public static function indexesByUnprefixedTableName ($pv){ self::assertUnprefixedTableName ($pv); return self::$uv[$pv]; } public static function softFieldsByUnprefixedTableName ($pv){ self::assertUnprefixedTableName ($pv); $cb = []; foreach(self::$wv[$pv] as $x){ if (!in_array ($x[1], ['key'])) { $cb[] = $x[0]; } } return $cb; } public static function columnsAndIndexesSQLByUnprefixedTableName ($pv){ self::assertUnprefixedTableName ($pv); $vb = []; foreach(self::columnsByUnprefixedTableName ($pv) as $bb){ list ($name,$yb)=$bb; $vb[] = "`". $name ."` ". self::expandColumnDefinition ($yb); } foreach(self::indexesByUnprefixedTableName ($pv) as $nb){ list ($type,$mb)=$nb; $fb = implode ('',$mb); $db = self::indexCreateSQLByIndexType ($type).' `'. $fb .'` (`'. implode ('`, `',$mb) .'`)'; $vb[] = $db; } return "(". implode (", ",$vb) .")"; } public static function expandColumnDefinition ($sb){ return self::$gv[$sb]; } public static function indexCheckSQLByIndexType ($ab){ return self::$ov[$ab]; } public static function indexCreateSQLByIndexType ($ab){ return self::$iv[$ab]; } } class AeNoteReadCountsProvider { private static $dataByNoteID = []; private static $hasRun = false; private static $sql = null; public static function setSQLRequestTemplateToMapIDsToReadCounts ($sql){ self::$sql = $sql; } public static function requestDeferredReadCountForNoteID ($noteID){ self::$dataByNoteID[$noteID]=true; } public static function getReadCountForNoteID ($noteID){ if(self::$sql === null) return false; if (!self::$hasRun)self :: run (); if (empty (self::$dataByNoteID[$noteID])) return false; return self::$dataByNoteID[$noteID]; } private static function run () { self::$hasRun = true; $qb = []; foreach(self::$dataByNoteID as$note_id => $lb){ $qb[] = "(`ID` = ". $note_id . ")"; } if (!count ($qb)) return; $qb = implode (' OR ',$qb); try { mm ( self::$sql ." AND (". $qb .")", 'get all requested read counts for notes' ); $zb = dm (); foreach ($zb as $kb){ self::$dataByNoteID[$kb['ID']] = $kb['ReadCount']; } } catch (AeMySQLException $e){ v3 ($e); if(Log::$a)__log ('Could not get requested read counts for notes'); } } } class AeNoteView { private $noteRecord = []; private $isCached = false; private $hasRun = false; private $cacheFilename = null; private $noteCTree = null; private $highlightedTags = null; private $cacheable = []; private $OGImages = []; private $wantRichText = false; private $wantCommentsLink = false; private $wantNewCommentsCount = false; private $wantReadHref = false; private $wantPreviewHref = false; private $wantControls = false; private $wantHiddenTags = false; private $wantSharingButtons = false; private $wantRelatedNotes = false; private $filterOutRelatedNoteIDs = []; private $useLocalHref = false; public function __construct ($noteRecord){ $this->noteRecord = $noteRecord; if(CACHE_NOTES){ $this->isCached = true; $this->cacheFilename = e2_note_cache_filename_with_id_($noteRecord['ID']); } } public function setHighlightedTags ($highlightedTags){ $this->highlightedTags = $highlightedTags; } public function setWantRichText ($wantRichText){ $this->wantRichText = $wantRichText; } public function setWantCommentsLink ($wantCommentsLink){ $this->wantCommentsLink = $wantCommentsLink; } public function setWantNewCommentsCount ($wantNewCommentsCount){ $this->wantNewCommentsCount = $wantNewCommentsCount; } public function setWantReadHref ($wantReadHref){ $this->wantReadHref = $wantReadHref; } public function setWantPreviewHref ($wantPreviewHref){ $this->wantPreviewHref = $wantPreviewHref; } public function setWantControls ($wantControls){ $this->wantControls = $wantControls; } public function setWantHiddenTags ($wantHiddenTags){ $this->wantHiddenTags = $wantHiddenTags; } public function setWantSharingButtons ($wantSharingButtons){ $this->wantSharingButtons = $wantSharingButtons; } public function setWantRelatedNotes ($wantRelatedNotes){ $this->wantRelatedNotes = $wantRelatedNotes; } public function setFilterOutRelatedNoteIDs ($filterOutRelatedNoteIDs){ $this->filterOutRelatedNoteIDs = $filterOutRelatedNoteIDs; } public function setUseLocalHref ($useLocalHref){ $this->useLocalHref = $useLocalHref; } public function getNoteCTree () { if (!$this->hasRun)$this -> run (); return$this->noteCTree; } private function prepareCacheableData () { $f = [ 'title' => function () { return dy ( htmlspecialchars ($this->noteRecord['Title'],ENT_NOQUOTES,'UTF-8') ); }, 'text-format-info' => function () { return ay ( $this->noteRecord['FormatterID'], $this->noteRecord['Text'], 'full' ); }, 'summary' => function () { if ((string)$this->noteRecord['Summary']!==''){ return dy (htmlspecialchars ($this->noteRecord['Summary'],ENT_NOQUOTES,'UTF-8')); } else { return bf ($this->cacheable['text-format-info']['text-final']); } }, 'comments-count' => function () { if (!$this->noteRecord['IsPublished']) { return false; } else { return ab ($this->noteRecord['ID']); } }, 'tags-data' => function () { $xb = ps ($this->noteRecord['ID']); $eb['ctree'] = []; $eb['all-resnames-uploads'] = []; foreach ($xb as $rb => $tb){ $eb['ctree'][] = [ 'visible?' => (bool)$tb['IsVisible'], 'name' => htmlspecialchars ($tb['Keyword'],ENT_NOQUOTES,'UTF-8'), 'href' => lq ('e2m_tag', array ('*tag' => $tb)), ]; $eb['all-resnames-uploads']=array_merge ( $eb['all-resnames-uploads'], g3 ('tag',$tb['ID']) ); } $eb['all-resnames-uploads']=array_unique ( $eb['all-resnames-uploads'] ); return $eb; }, ]; if($this->isCached and is_file ($this->cacheFilename)) { $this->cacheable = @unserialize (file_get_contents ($this->cacheFilename)) or $this->cacheable = []; } $k = false; foreach ($f as $x => $e_){ if (!array_key_exists ($x,$this->cacheable)) { if(Log::$a)__log ('Build cache: "'. $x .'"'); $this->cacheable[$x]=$e_ (); $k = true; } else { if(Log::$a)__log ('Retrieved from cache: "'. $x .'"'); } } if($this->isCached and $k){ e3 ($this->cacheFilename,serialize ($this->cacheable)); } } private function run () { $this->hasRun = true; if(Log::$a)__log ('AeNoteView run {'); if(Log::$a)__log ('Cacheable data {'); $this -> prepareCacheableData (); if(Log::$a)__log ('}'); if(Log::$a)__log ('Uncacheable data {'); $jb = false; if($this->noteRecord['IsPublished']) { if ((string)$this->noteRecord['OriginalAlias']!==''){ $jb = lq ('e2m_note', ['alias' => $this->noteRecord['OriginalAlias']]); } else { $hb = $this->noteRecord; $hb['__force_ymdn']=true; $jb = lq ('e2m_note', ['*note' => $hb]); } } $gb = ha ($this->noteRecord); $wb = [(int)$this->noteRecord['LastModified'],$gb]; $l = ( $this->noteRecord['IsPublished'] ? [(int)$this->noteRecord['Stamp'],$gb]:$wb ); $ub = yf ($this->noteRecord); $ib = @$this->cacheable['text-format-info']['meta']['resources-detected']; if (!is_array ($ib))$ib = []; if(count ($ib)) { j2 ($ib); } $ob = a2 ($ib); $pb = @unserialize ($this->noteRecord['Uploads']) or $pb = []; $c3 = array_merge ( q2 ( $ib,$pb ), $this->cacheable['tags-data']['all-resnames-uploads'] ); $v3 = t3 ($c3); $b3 = a2 ($c3); $y3 = $this->noteRecord['SourceNoteData']; $y3 = @json_decode ($y3,true); $n3 = @$y3['og_images'][0] or $n3 = ''; if($this->noteRecord['IsExternal']) { $m3 = py ($this->noteRecord); } else { $m3 = []; } $f3 = false; $d3 = $this->cacheable['tags-data']['ctree']; foreach ($d3 as $s3 => $a3){ if($this->highlightedTags !== null){ $d3[$s3]['current?']=in_array ($d3[$s3]['name'],$this->highlightedTags); } if (!$this->wantHiddenTags and !$d3[$s3]['visible?']) { unset ($d3[$s3]); } } if($this->wantSharingButtons and $ub === 'public'){ $q3 = ws ($v3); } else { $q3 = false; } if($this->wantNewCommentsCount){ $l3 = sb ($this->noteRecord['ID']); } else { $l3 = false; } $this->noteCTree = [ 'id' => (int)$this->noteRecord['ID'], 'title' => (string)$this->cacheable['title'], 'href' => lq ('e2m_note', ['*note' => $this->noteRecord]), 'href-original' => $jb, 'time' => $l, 'last-modified' => $wb, 'text' => (string)$this->cacheable['text-format-info']['text-final'], 'format-info' => $this->cacheable['text-format-info']['meta'], 'summary' => (string)$this->cacheable['summary'], 'snippet-text' => (string)$this->cacheable['summary'], 'draft?' => $ub === 'draft', 'scheduled?' => $ub === 'scheduled', 'public?' => $ub === 'public', 'hidden?' => $ub === 'hidden', 'current?' => false, 'favourite?' => (bool) ($this->noteRecord['IsFavourite'] and $ub !== 'draft'), 'images' => l2 ($ob), 'thumbs' => z2 ($ob), 'source-main-image-url' => (string)$n3, 'og-images' => $v3, 'og-images-thumbs' => z2 ($b3), 'tags' => $d3, 'sharing-buttons' => $q3, 'related' => $f3, 'read-href' => ($this->wantReadHref and $this->noteRecord['IsPublished'])? lq ('e2m_note_read', ['*note' => $this->noteRecord]) : false, 'preview-href' => ($this->wantPreviewHref and ($ub !== 'public'))? lq ('e2m_note', [ '*note' => $this->noteRecord, 'preview-key' => ff ($this->noteRecord) ]) : false, 'comments-count' => $this->cacheable['comments-count'], 'comments-count-text' => is_int ($this->cacheable['comments-count'])? e2l_get_string ('gs--n-comments', [ 'number' => $this->cacheable['comments-count'] ]) : '', 'new-comments-count' => $l3, 'new-comments-count-text' => is_int ($l3)? e2l_get_string ('gs--comments-n-new', [ 'number' => $l3 ]) : '', 'comments-link?' => (bool) ( $this->wantCommentsLink and $this->noteRecord['IsPublished'] and ( xb ($this->noteRecord) or ($this->cacheable['comments-count']>0) ) ), ]; if($this->noteRecord['IsExternal']) { $this->noteCTree = array_merge ($this->noteCTree,$m3); $this->noteCTree['href-original']=$this->noteCTree['href-external']; if (!$this->useLocalHref){ $this->noteCTree['href']=$this->noteCTree['href-external']; } } if($this->wantControls){ $this->noteCTree['edit-href']=lq ( 'e2m_note_edit', array ('*note' => $this->noteRecord) ); if($this->noteRecord['IsPublished'] and !$this->noteRecord['IsVisible']) { $this->noteCTree['show-action']=lq ('e2s_note_flag', [ '*note' => $this->noteRecord, 'flag' => 'IsVisible', 'value' => 1 ]); } if($this->noteRecord['IsPublished']) { $this->noteCTree['favourite-toggle-action']=lq ( 'e2s_note_flag_favourite', [ '*note' => $this->noteRecord, 'value' => !$this->noteRecord['IsFavourite'] ] ); } } $this->noteCTree['href-comments']=$this->noteCTree['href'] .'#comments'; if(Log::$a)__log ('}'); AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($this->noteRecord['ID']); if(Log::$a)__log ('}'); } } class AePageableNotesView { private $candy; private $parameters; private $pageExists = false; private $isCached = false; private $hasRun = false; private $sql = null; private $sql_count = null; private $highlightedTags = null; private $cacheFilename = null; private $prevPageTitle = null; private $nextPageTitle = null; private $totalNotes = null; private $totalPages = null; private $notesCTree = null; private $pagesCTree = null; private $wantPaging = false; private $wantNewCommentsCount = false; private $wantReadHrefs = false; private $wantPreviewHrefs = false; private $wantControls = false; private $wantHiddenTags = false; private $wantRelatedNotes = false; private $useLocalHrefs = false; private $page = 1; private $limit = 10; public function __construct ($candy,$parameters){ $this->candy = $candy; $this->parameters = $parameters; if (empty ($parameters['page'])) { $this->page = 1; } else { $this->page = (int)$parameters['page']; } } public function setSQLCountRequest ($sql_count){ if(strpos ($sql_count,"SELECT COUNT(*) Total FROM ")!==0){ die ('AePageableNotesView: Count request must start with "SELECT COUNT(*) Total FROM "'); } $this->sql_count = $sql_count; } public function setLimitlessSQLRequest ($sql){ if(strstr ($sql,"LIMIT")) { die ('AePageableNotesView: Request must not contain "LIMIT"'); } $this->sql = $sql; if($this->sql_count === null){ if(strpos ($sql,"SELECT * ")===0){ $this->sql_count = "SELECT COUNT(*) Total ". substr ($sql,9); } else { die ('AePageableNotesView: setSQLCountRequest () must be used'); } } } public function setPortionSize ($limit){ $this->limit = abs ((int)$limit); } public function setNextPrevPageTitles ($nextPageTitle,$prevPageTitle){ $this->nextPageTitle = $nextPageTitle; $this->prevPageTitle = $prevPageTitle; } public function setHighlightedTags ($highlightedTags){ $this->highlightedTags = $highlightedTags; } public function setCacheFilename ($cacheFilename){ $this->isCached = true; $this->cacheFilename = $cacheFilename; } public function setWantPaging ($wantPaging){ $this->wantPaging = $wantPaging; } public function setWantNewCommentsCount ($wantNewCommentsCount){ $this->wantNewCommentsCount = $wantNewCommentsCount; } public function setWantReadHrefs ($wantReadHrefs){ $this->wantReadHrefs = $wantReadHrefs; } public function setWantPreviewHrefs ($wantPreviewHrefs){ $this->wantPreviewHrefs = $wantPreviewHrefs; } public function setWantControls ($wantControls){ $this->wantControls = $wantControls; } public function setWantHiddenTags ($wantHiddenTags){ $this->wantHiddenTags = $wantHiddenTags; } public function setWantRelatedNotes ($wantRelatedNotes){ $this->wantRelatedNotes = $wantRelatedNotes; } public function setUseLocalHrefs ($useLocalHrefs){ $this->useLocalHrefs = $useLocalHrefs; } public function isExistingPage () { if (!$this->hasRun)$this -> run (); return$this->pageExists; } public function isFirstPage () { return$this->page === 1; } public function isFirstPageOfEmptyView () { if (!$this->hasRun)$this -> run (); return$this->page === 1 and $this->totalPages === 0; } public function getTotalNotes () { if (!$this->hasRun)$this -> run (); return$this->totalNotes; } public function getTotalPages () { if (!$this->hasRun)$this -> run (); return$this->totalPages; } public function getNotesCTree () { if (!$this->hasRun)$this -> run (); return$this->notesCTree; } public function getPagesCTree () { if (!$this->hasRun)$this -> run (); return$this->pagesCTree; } private function prepareCacheableData () { $this->totalNotes = 0; if($this->limit){ $z3 = ($this->page - 1)*$this->limit; $this->sql .= ' LIMIT '. $z3 .', '. $this->limit; } mm ($this->sql_count,'count total notes of "'. $this->candy .'" list'); $k3 = dm (); $this->totalNotes = $k3 ? (int)$k3[0]['Total']:0; mm ($this->sql,'get limited full notes "'. $this->candy .'" list'); $x3 = dm (); $e3 = []; foreach ($x3 as $s3 => $s){ $e3[] = $s['ID']; } $this->notesCTree = []; foreach ($x3 as $s3 => $s){ $noteView = new AeNoteView ($s); $noteView -> setWantNewCommentsCount ($this->wantNewCommentsCount); $noteView -> setWantReadHref ($this->wantReadHrefs); $noteView -> setWantPreviewHref ($this->wantPreviewHrefs); $noteView -> setWantControls ($this->wantControls); $noteView -> setWantHiddenTags ($this->wantHiddenTags); $noteView -> setWantCommentsLink (true); $noteView -> setWantRelatedNotes ($this->wantRelatedNotes); $noteView -> setFilterOutRelatedNoteIDs ($e3); $noteView -> setHighlightedTags ($this->highlightedTags); $noteView -> setUseLocalHref ($this->useLocalHrefs); $this->notesCTree[] = $noteView -> getNoteCTree (); } $this->pagesCTree = []; if ( $this->limit and $this->totalPages = (int)ceil ($this->totalNotes / $this->limit) ) { $this->pagesCTree['timeline?']=true; $this->pagesCTree['count'] = (int)$this->totalPages; $this->pagesCTree['this'] = (int)$this->page; if($this->wantPaging){ $this->pagesCTree['earlier-title']=$this->nextPageTitle; $this->pagesCTree['later-title']=$this->prevPageTitle; $r3 = $this->parameters; if($this->page < $this->totalPages){ $r3['page']=$this->page + 1; $this->pagesCTree['earlier-href']=lq ($this->candy,$r3); } if($this->page > 1){ $r3['page']=$this->page - 1; $this->pagesCTree['later-href']=lq ($this->candy,$r3); } } } } private function run () { $this->hasRun = true; if($this->isCached and is_file ($this->cacheFilename)) { $t3 = @unserialize (file_get_contents ($this->cacheFilename)); $this->totalNotes = @$t3['notes_total']; $this->notesCTree = @$t3['notes_ctree']; $this->pagesCTree = @$t3['pages_ctree']; $this->totalPages = @$this->pagesCTree['count']; } if ( is_int ($this->totalNotes) and is_array ($this->notesCTree) and is_array ($this->pagesCTree) and is_int ($this->totalPages) ) { if(Log::$a)__log ('Retrieved cached CTree'); } else { $this -> prepareCacheableData (); if($this->isCached){ e3 ($this->cacheFilename,serialize ([ 'notes_total' => $this->totalNotes, 'notes_ctree' => $this->notesCTree, 'pages_ctree' => $this->pagesCTree, ])); } } foreach($this->notesCTree as $j3){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($j3['id']); if (empty ($j3['related']['each'])) continue; foreach ($j3['related']['each'] as $h3){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($h3['id']); } } $this->pageExists = ( $this->totalPages > 0 and $this->page >= 1 and $this->page <= $this->totalPages ); } } class AeRequest { public $method = 'GET'; public $url = ''; public $candy = ''; public $parameters = []; public function __construct ($p,$g3){ $this->method = $p['REQUEST_METHOD']; $w3 = urldecode ($g3['go']); if(substr ($w3,0,strlen (AeEnv::$u)) === AeEnv::$u){ $w3 = substr ($w3,strlen (AeEnv::$u)); } $this->url = ( AeEnv::$h .'://'. AeEnv::$j . AeEnv::$w . AeEnv::$u . '/'. $w3 ); list ($this->candy,$this->parameters)=zq ($w3); } public function toBeFulfilledByService () { return substr ($this->candy,0,4)=='e2s_'; } public function requiresInstallation () { return !in_array ($this->candy, [ 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', ]); } public function requiresVersionMatch () { return$this->requiresInstallation(); } public function requiresScheduleCheckBeforeServing () { return$this->requiresInstallation(); } public function shouldSlowDownAJAXResponse () { return in_array ($this->candy, [ 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_userpic_remove', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2s_note_flag_favourite', 'e2s_comment_flag_ajax', 'e2s_tag_flag_ajax', ]); } public function requiresSignIn () { return ( !empty ($this->candy) and is_callable ($this->candy) and $this->requiresInstallation () and !in_array ($this->candy, [ 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_tags', 'e2m_tag', 'e2m_untagged', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_popular', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_sitemap_xml', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_error404', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_retrieve', 'e2s_notify', 'e2s_dump', ]) ); } public function allowedInReadOnlyMode () { return !in_array ($this->candy, [ 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2s_note_flag_favourite', 'e2s_note_flag', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2s_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ]); } public function replaceWith ($u3){ $this->candy = $u3; } } function c () { global$_config; $i3 = [ 'new-note-href' => lq ('e2m_write'), 'drafts-href' => lq ('e2m_drafts', ['page' => 1]), 'drafts-count' => (int)vf (false,true), 'settings-href' => lq ('e2m_settings'), 'theme-preview-href' => lq ('e2m_theme_preview', array ('theme' => '')), 'password-href' => lq ('e2m_password', array ('recovery-key' => '')), 'database-href' => lq ('e2m_database'), 'timezone-href' => lq ('e2m_timezone'), 'sessions-href' => lq ('e2m_sessions'), 'sign-out-href' => lq ('e2m_sign_out'), ]; if (hs ()) { $i3['get-backup-href']=lq ('e2m_get_backup'); } if (@$_config['read_only']) { unset ($i3['new-note-href']); unset ($i3['settings-href']); unset ($i3['timezone-href']); } if (!$_config['allow_themes_preview']) { unset ($i3['theme-preview-href']); } $databaseConfiguration = oq (); if($databaseConfiguration->source !== 'settings' or !$_config['allow_db_config']) { unset ($i3['database-href']); } list ($l3,$o3,$p3)=lb (); if ($l3){ $i3['new-comments-count']=$l3; $i3['new-comments-href']=$p3; } return $i3; } function v ($cy,AeDatabaseConfiguration $databaseConfiguration,$vy){ static $by = null; $yy = ( $cy === USER_DIR and $databaseConfiguration == oq () ); if ($vy){ if ($cy !== false){ @unlink ($cy . CACHE_FILENAME_ALIASMAP); } if ($yy)$by = null; return; } if ($yy and is_array ($by)) { return $by; } $ny = null; if(CACHE_ALIASMAP and is_file ($cy . CACHE_FILENAME_ALIASMAP)) { $ny = @unserialize (file_get_contents ($cy . CACHE_FILENAME_ALIASMAP)); } if(is_array ($ny)) { if ($yy)$by = $ny; return $ny; } if(Log::$a)__log ('Build aliasmap {'); $ny = []; fm ( $databaseConfiguration, "SELECT `EntityType`, `EntityID`, `Alias` ". "FROM `". $databaseConfiguration -> getPrefix () . "Aliases` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `Stamp` IN (". "SELECT MAX(`Stamp`) `MaxStamp` ". "FROM `". $databaseConfiguration -> getPrefix () . "Aliases` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "GROUP BY `EntityType`, `EntityID`". ")", 'get all active aliases' ); foreach (dm () as $my){ $fy = $my['EntityType'].$my['EntityID']; $ny[$fy]=$my['Alias']; } fm ( $databaseConfiguration, "SELECT `ID`, `Stamp`, `Offset`, `IsDST`, `OriginalAlias` ". "FROM `". $databaseConfiguration -> getPrefix () . "Notes` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `IsPublished` = 1 ". "ORDER BY `Stamp`", 'get all notes to cache y/d/m/n urls' ); $dy = 0; $sy = false; foreach (dm () as $ay){ $fy = 'n'. $ay['ID']; $qy = pa ( 'Y/m/d',$ay['Stamp'],ha ($ay) ); if ($qy !== $sy)$dy = 0; $dy ++; $ly = $qy .'/'. $dy; if (empty ($ny[$fy])) { $ny[$fy]=$ly; } else { if ((string)$ay['OriginalAlias']===''){ $ny[$fy . '-ymdn']=$ly; } } $sy = $qy; } fm ( $databaseConfiguration, "SELECT `ID`, `OriginalAlias` ". "FROM `". $databaseConfiguration -> getPrefix () . "Keywords` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset (), 'get original active aliases for tags' ); foreach (dm () as $tb){ $fy = 't'. $tb['ID']; if (empty ($ny[$fy])) { $ny[$fy]=$tb['OriginalAlias']; } } if(CACHE_ALIASMAP)e3 ($cy . CACHE_FILENAME_ALIASMAP,serialize ($ny)); if ($yy)$by = $ny; if(Log::$a)__log ('}'); return $ny; } function b ($vy = false){ return v (USER_DIR,oq (), $vy); } function e2_alias_of_note_with_id_($zy){ $ky = b () ['n'. $zy]; if(preg_match ( '/^(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)$/s', $ky ))$ky = ''; return $ky; } function e2ali__alias_from_title_($source){ global$_config; $xy = $source; if(array_key_exists ('autoreplace_for_aliases',$_config)) { $xy = strtr ( $xy, $_config['autoreplace_for_aliases'] ); } $xy = k1 ($xy); $xy = str_replace ('\'','',$xy); $xy = str_replace ('’','',$xy); $xy = str_replace (chr (146),'',$xy); $ey = ''; for ($rb = 0; $rb < strlen ($xy); ++ $rb){ if ( (ord ($xy[$rb]) >= 48 and ord ($xy[$rb]) <= 57) or (ord ($xy[$rb]) >= 65 and ord ($xy[$rb]) <= 90) or (ord ($xy[$rb]) >= 97 and ord ($xy[$rb]) <= 122) or 0 ) { $ey .= $xy[$rb]; } else { $ey .= '-'; } } $ey = preg_replace ('/\-+/','-',$ey); $ey = trim ($ey,'-'); $ey = strtolower ($ey); if ($ey == '-')$ey = ''; $ey = substr ($ey,0,ALIAS_MAX_LENGTH); return $ey; } function m (AeDatabaseConfiguration $databaseConfiguration,$ky){ if ((string)$ky === '') return false; fm ( $databaseConfiguration, "SELECT * FROM `". $databaseConfiguration -> getPrefix () . "Aliases` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `Alias` = '". $ky ."' ". "ORDER BY `Stamp` LIMIT 1", 'get alias record for alias "'. $ky .'"' ); $x3 = dm (); if(count ($x3)==1){ return $x3[0]; } else { return false; } } function f ($ky){ if ((string)$ky === '') return false; if(Log::$a)__log ('Get entity type and id from alias "'. $ky .'"'); $ry = @array_flip (b ()); $fy = (string) @$ry[$ky]; if ( strlen ($fy)>0 and ($fy[0]=='n' or $fy[0]=='t') ) { $kb = [ 'type' => $fy[0], 'id' => (int)substr ($fy,1) ]; return $kb; } $my = m (oq (), $ky); if (!$my) return false; $kb = [ 'type' => $my['EntityType'], 'id' => (int)$my['EntityID'], ]; if(Log::$a)__log ('Got entity type "'. $kb['type'] .'" and id "'. $kb['id'] .'"'); return $kb; } function d ( $cy,AeDatabaseConfiguration $databaseConfiguration, $gy,$hy,$ty,$source,$jy = 1 ){ if(Log::$a)__log ('Aliases: "'. $gy .'" available alias for source "'. $source. '"'); $wy = $hy . $ty; if ($gy === 'set' and $wy === '') return false; $ey = e2ali__alias_from_title_($source); if($source !== '' and $ey === ''){ $ey = (string)$jy; } elseif ($jy > 1){ $uy = '-'. $jy; $ey = substr ($ey,0,ALIAS_MAX_LENGTH - strlen ($uy)) . $uy; } $ny = v ($cy,$databaseConfiguration,false); if ($my = m ($databaseConfiguration,$ey)) { $iy = $my['EntityType'].$my['EntityID']; if ( $wy === $iy or $ey !== $ny[$iy] ) { if ($gy == 'find') return $ey; if ($gy == 'set'){ if(Log::$a)__log ('Aliases: update alias timestamp'); ym ($databaseConfiguration,'Aliases', [ 'ID' => $my['ID'], 'EntityType' => $hy, 'EntityID' => $ty, 'Alias' => $ey, 'Stamp' => time (), ]); v ($cy,$databaseConfiguration,true); return $ey; } } else { return d ($cy,$databaseConfiguration,$gy,$hy,$ty,$source,$jy + 1); } } else { if ($wy !== '' and $ey == ''){ if(preg_match ( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $ny [$wy] )) { if(Log::$a)__log ('Aliases: d/m/y/n was already used for this entity'); return ''; } } if(Log::$a)__log ('Aliases: it’s an empty alias, and it was not being used for this entity'); if ( $hy == 't' and $oy = da ($databaseConfiguration,$ey) ) { if ($oy['ID']!=$ty){ return d ($cy,$databaseConfiguration,$gy,$hy,$ty,$source,$jy + 1); } } if ($gy == 'find') return $ey; if ($gy == 'set'){ bm ($databaseConfiguration,'Aliases', [ 'EntityType' => $hy, 'EntityID' => $ty, 'Alias' => $ey, 'Stamp' => time (), ]); v ($cy,$databaseConfiguration,true); return $ey; } } return ''; } function e2_delete_aliases_for_entity_($type,$zy){ global$_config; mm ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = '". $type ."' ". "AND `EntityID`=". ((int)$zy), 'delete aliases of note' ); } function a () { static $py; $cn = ss (); if (empty ($py)) { $py = md5 (AeEnv::$o .'email'. $cn); } return $py; } function q () { static $vn; $cn = ss (); if (empty ($vn)) { $vn = md5 (AeEnv::$o .'nospam'. $cn . date ('n-Y')); } return $vn; } function l () { static $bn; $cn = ss (); if(empty($bn)) { $bn = md5 (AeEnv::$o .'nospam'. $cn . date ('n-Y',strtotime('-1 month'))); } return $bn; } function z ($note_id){ $cn = ss (); return q1 ('comment_'. md5 (AeEnv::$o .'nospam_cookie'. $cn . $note_id)); } function k () { $yn = $_SERVER['HTTP_USER_AGENT']; $cn = ss (); return md5 (AeEnv::$o .'nospam_cookie'. $cn . $yn); } function x () { if ( array_key_exists ('email',$_POST) and $_POST['email']!=='' ) return true; $vn = q (); $bn = l (); if ( !array_key_exists ($vn,$_POST) and !array_key_exists ($bn,$_POST) ) return true; if ( ( array_key_exists ($vn,$_POST) and $_POST[$vn]!=='' ) or ( array_key_exists ($bn,$_POST) and $_POST[$bn]!=='' ) ) return true; if ( !array_key_exists ('comment',$_POST) or (strlen ($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($note_id){ if ( !array_key_exists (z ($note_id),$_COOKIE) or ($_COOKIE[z ($note_id)] !== k ()) ) return true; return false; } function e2m_year ($parameters = array ()) { global$_strings,$_config; $nn = $parameters['year']; $mn = e2l_get_string ('pt--nth-year', array ('year' => $nn)); if (!j ($nn)) { return e2m_error404 (); } AeMainMenuManager :: $isCalendarCurrent = false; AeMainMenuManager :: $isCalendarParent = true; $fn_ = gmmktime (0,0,0,1,1,$nn - 1); $dn = gmmktime (0,0,0,1,1,$nn + 1); list ($sn,$an)=e2__fruitful_neighbours_with_ymd_($nn); $qn = 'e2m_year'; if ($sn){ $ln['prev-href']=lq ( $qn,e2__parameters_with_timestamp_($sn) ); $ln['prev-jump?'] = (bool) (gmdate ('Y',$fn_)!=gmdate ('Y',$sn)); $ln['prev-title']=gmdate ('Y',$sn); } if ($an){ $ln['next-href']=lq ( $qn,e2__parameters_with_timestamp_($an) ); $ln['next-jump?'] = (bool) (gmdate ('Y',$dn)!=gmdate ('Y',$an)); $ln['next-title']=gmdate ('Y',$an); } $ln['timeline?']=false; $ln['this']=$nn; $ln['this-title']=$nn; list ($zn,$kn)=n1 ($nn); $cb = [ 'title' => $mn, 'heading' => $mn, 'pages' => $ln, 'year' => (int)$nn, 'calendar' => t ($nn,false,false), ]; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". nf (cs ()). "AND `Stamp` BETWEEN ". $zn ." ". "AND ". $kn ." ". "ORDER BY `Stamp`", 'get all notes for the year' ); $x3 = dm (); $xn = w (true,$x3,$nn); if(count ($xn)) { $cb['notes-list']=$xn; } else { $cb['nothing']=$_strings['gs--no-such-notes']; } return $cb; } function e2m_month ($parameters = array ()) { global$_strings,$_config; $nn = $parameters['year']; $en = $parameters['month']; $mn = e2l_get_string ( 'pt--nth-month-of-nth-year', array ('year' => $nn,'month' => $en) ); if (!j ($nn,$en)) { return e2m_error404 (); } AeMainMenuManager :: $isCalendarCurrent = false; AeMainMenuManager :: $isCalendarParent = true; $fn_ = gmmktime (0,0,0,$en - 1,1,$nn); $dn = gmmktime (0,0,0,$en + 1,1,$nn); list ($sn,$an)=e2__fruitful_neighbours_with_ymd_($nn,$en); $qn = 'e2m_month'; if ($sn){ $ln['prev-href']=lq ( $qn,e2__parameters_with_timestamp_($sn) ); $ln['prev-jump?'] = (bool) (gmdate ('Y/m',$fn_)!=gmdate ('Y/m',$sn)); $ln['prev-title']=e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$sn),'month' => gmdate ('n',$sn) ) ); } if ($an){ $ln['next-href']=lq ( $qn,e2__parameters_with_timestamp_($an) ); $ln['next-jump?'] = (bool) (gmdate ('Y/m',$dn)!=gmdate ('Y/m',$an)); $ln['next-title']=e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$an),'month' => gmdate ('n',$an) ) ); } $ln['timeline?']=false; $ln['this-title']=$mn; list ($zn,$kn)=n1 ($nn,$en); $cb = [ 'title' => $mn, 'heading' => $mn, 'calendar' => t ($nn,$en,false), 'pages' => $ln, 'year' => (int)$nn, 'month' => (int)$en, ]; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". nf (cs ()). "AND `Stamp` BETWEEN ". $zn ." ". "AND ". $kn ." ". "ORDER BY `Stamp`", 'get all notes for the month' ); $x3 = dm (); $xn = w (true,$x3,$nn,$en); if(count ($xn)) { $cb['notes-list']=$xn; } else { $cb['nothing']=$_strings['gs--no-such-notes']; } return $cb; } function e2m_day ($parameters = array ()) { global$_strings,$_config,$_current_url; $nn = (int)$parameters['year']; $en = (int)$parameters['month']; $rn = (int)$parameters['day']; if (!(j ($nn,$en,$rn))) { return e2m_error404 (); } AeMainMenuManager :: $isCalendarCurrent = false; AeMainMenuManager :: $isCalendarParent = true; if($_current_url === p ()) { AeMainMenuManager :: $isCalendarCurrent = true; AeMainMenuManager :: $isCalendarParent = false; } $mn = e2l_get_string ( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $nn,'month' => $en,'day' => $rn) ); $fn_ = gmmktime (0,0,0,$en,$rn - 1,$nn); $dn = gmmktime (0,0,0,$en,$rn + 1,$nn); list ($sn,$an)=e2__fruitful_neighbours_with_ymd_($nn,$en,$rn); $qn = 'e2m_day'; if ($sn){ $ln['prev-href']=lq ( $qn,e2__parameters_with_timestamp_($sn) ); $ln['prev-jump?'] = (bool) (gmdate ('Y/m/d',$fn_)!=gmdate ('Y/m/d',$sn)); $ln['prev-title']=e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$sn),'month' => gmdate ('n',$sn),'day' => gmdate ('j',$sn), ) ); } if ($an){ $ln['next-href']=lq ( $qn,e2__parameters_with_timestamp_($an) ); $ln['next-jump?'] = (bool) (gmdate ('Y/m/d',$dn)!=gmdate ('Y/m/d',$an)); $ln['next-title']=e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$an),'month' => gmdate ('n',$an),'day' => gmdate ('j',$an), ) ); } $ln['timeline?']=false; $ln['this-title']=$mn; $cb = [ 'title' => $mn, 'heading' => $mn, 'pages' => $ln, 'calendar' => t ($nn,$en,$rn), ]; $x3 = wm ($nn,$en,$rn); $x3 = array_reverse ($x3); $tn = cs (); $xn = []; foreach ($x3 as $s3 => $ay){ if (!( yf ($ay)==='public' or ($tn and $ay['IsPublished']) )) continue; $noteView = new AeNoteView ($ay); $noteView -> setWantNewCommentsCount ($tn); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($tn and !@$_config['read_only']); $noteView -> setWantHiddenTags ($tn); $noteView -> setWantCommentsLink (true); $xn[] = $noteView -> getNoteCTree (); } if(count ($xn)) { $cb['notes']=$xn; } else { $cb['nothing']=$_strings['gs--no-such-notes']; } return $cb; } function r ($jn){ global$_config; $xn = null; if(CACHE_FULLLIST and is_file (USER_DIR . CACHE_FILENAME_FULLLIST)) { $xn = @unserialize (file_get_contents (USER_DIR . CACHE_FILENAME_FULLLIST)); if(Log::$a)__log ('Retrieving full notes list from cache...'); } if (!is_array ($xn)) { if(Log::$a)__log ('Retrieving full notes list from database...'); mm ( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". nf (). "ORDER BY `Stamp`", 'get full notes list' ); $x3 = dm (); $xn = w ($jn,$x3); if ($jn){ if(CACHE_FULLLIST)e3 (USER_DIR . CACHE_FILENAME_FULLLIST,serialize ($xn)); } } return $xn; } function e2m_everything ($parameters = array ()) { global$_strings; $xn = r (true); $hn = count ($xn); $mn = e2l_get_string ('pt--n-posts', array ('number' => $hn)); $cb = [ 'title' => $mn, 'heading' => $mn, ]; if(count ($xn)) { $cb['notes-list']=$xn; } else { $cb['nothing']=$_strings['gs--no-notes']; } return $cb; } function e2m_sitemap_xml ($parameters = array ()) { global$_config; $xn = r (false); if (@$_config['dev_xml_as_text']) { header ('Content-Type: text/plain'); } else { header ('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; if(count ($xn)) { $gn = @$xn[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. lq ('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo gmdate ('Y-m-d\TH:i:s\Z',$gn[0]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($xn as $r){ echo '<url>'."\r\n"; echo '<loc>'; echo $r['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo gmdate ('Y-m-d\TH:i:s\Z',$r['last-modified'][0]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function t ($nn,$en,$rn){ if(is_numeric ($en)) { $wn = pa ( 't',gmmktime (0,0,0,$en,1,$nn), ga () ); } else { $wn = 0; } $un = cv ('start'); $in = pa ( 'Y',$un['stamp'],$un['timezone'] ); $on = c1 ('Y',time ()); $pn = c1 ('m',time ()); if ((int)$nn == (int)$in){ $cm = pa ('m',$un['stamp'],$un['timezone']); } else { $cm = 1; } if ((int)$nn == (int)$on){ $pn = c1 ('m',time ()); } else { $pn = 12; } if ((int)$nn == (int)$in and (int)$en == (int)$cm){ $vm = pa ('d',$un['stamp'],$un['timezone']); } else { $vm = 1; } if ((int)$nn == (int)$on and (int)$en == (int)$pn){ $bm = c1 ('d',time ()); } else { $bm = $wn; } if(1){ $ym = u (); for ($rb = $in; $rb <= $on; ++ $rb){ $nm = gmmktime (0,0,0,1,1,$rb); $mm[$rb] = [ 'number' => $rb, 'start-time' => [$nm,ga ()], 'href' => lq ('e2m_year', [ 'year' => gmdate ('Y',$nm), ]), 'this?' => (bool) ($rb == $nn), 'real?' => true, 'fruitful?' => @in_array (gmdate ('Y',$nm),$ym), ]; } $fm['years']=$mm; } if(1){ $dm = i ($nn); for ($rb = 1; $rb <= 12; ++ $rb){ $nm = gmmktime (0,0,0,$rb,1,$nn); $sm[$rb] = [ 'number' => $rb, 'start-time' => [$nm,ga ()], 'href' => lq ('e2m_month', [ 'year' => gmdate ('Y',$nm), 'month' => gmdate ('m',$nm), ]), 'this?' => (bool) ($rb == $en), 'real?' => $rb >= $cm and $rb <= $pn, 'fruitful?' => @in_array (gmdate ('n',$nm),$dm), ]; } $fm['months']=$sm; } if ($wn){ $am = o ($nn,$en); for ($rb = 1; $rb <= $wn; ++ $rb){ $nm = gmmktime (0,0,0,$en,$rb,$nn); $qm[$rb] = [ 'number' => $rb, 'start-time' => [$nm,ga ()], 'href' => lq ('e2m_day', [ 'year' => gmdate ('Y',$nm), 'month' => gmdate ('m',$nm), 'day' => gmdate ('d',$nm), ]), 'this?' => (bool) ($rb == $rn), 'real?' => $rb >= $vm and $rb <= $bm, 'fruitful?' => @in_array (gmdate ('d',$nm),$am), ]; } $fm['days']=$qm; } return $fm; } function j ($nn,$en = false,$rn = false){ $un = cv ('start'); if ($un === false){ return false; } $lm = pa ('Y',$un['stamp'],$un['timezone']); $zm = c1 ('Y',time ()); if ($en === false){ return (bool) ( $nn >= $lm and $nn <= $zm ); } else { $km = pa ('n',$un['stamp'],$un['timezone']); $xm = c1 ('n',time ()); if ($rn === false){ return (bool) ( $en >= 1 and $en <= 12 and ( ($nn > $lm and $nn < $zm) or ($nn == $lm and $en >= $km) or ($nn == $zm and $en <= $xm) ) ); } else { $em = pa ('j',$un['stamp'],$un['timezone']); $rm = c1 ('j',time ()); if(1){ return (bool) ( checkdate ($en,$rn,$nn) and ( ($nn > $lm and $nn < $zm) or ($nn == $lm and $en > $km) or ($nn == $lm and $en == $km and $rn >= $em) or ($nn == $zm and $en < $xm) or ($nn == $zm and $en == $xm and $rn <= $rm) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($tm,$jm = false,$hm = false){ global$_db,$_config; list ($gm,$wm)=n1 ($tm,$jm,$hm); $um = SECONDS_IN_A_DAY; if ($hm === false)$um = SECONDS_IN_A_MONTH; if ($jm === false)$um = SECONDS_IN_A_YEAR; $im = $om = null; mm ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` < '". ($wm - $um) ."' ". nf (cs ()). "ORDER BY Stamp DESC", 'get previous fruitful neighbour with ymd' ); while ($pm = mysqli_fetch_array ($_db['result'],MYSQLI_ASSOC)) { list ($nn,$en,$rn)=explode ('/', pa ('Y/n/j',$pm['Stamp'],ha ($pm)) ); $cf = $tm * 10000 + ($jm? ($jm * 100):0) + ($hm? $hm : 0); $vf = $nn * 10000 + ($jm? ($en * 100):0) + ($hm? $rn : 0); if ($vf < $cf){ $im = gmmktime (0,0,0,$en,$rn,$nn); break; } } mm ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` > '". ($gm + $um) ."' ". nf (cs ()). "ORDER BY Stamp", 'get next fruitful neighbour with ymd' ); while ($pm = mysqli_fetch_array ($_db['result'],MYSQLI_ASSOC)) { list ($nn,$en,$rn)=explode ('/', pa ('Y/n/j',$pm['Stamp'],ha ($pm)) ); $cf = $tm * 10000 + ($jm? ($jm * 100):0) + ($hm? $hm : 0); $vf = $nn * 10000 + ($jm? ($en * 100):0) + ($hm? $rn : 0); if ($vf > $cf){ $om = gmmktime (0,0,0,$en,$rn,$nn); break; } } return [$im,$om]; } function e2__parameters_with_timestamp_($bf){ list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode ('/',gmdate ('Y/m/d',$bf)); return$parameters; } function w ($jn,$yf,$nn = false,$en = false){ $xn = []; $nf = []; foreach ($yf as $s3 => $ay){ $r['href'] = lq ('e2m_note', array ('*note' => $ay)); $r['time'] = array ((int)$ay['Stamp'],ha ($ay)); $r['last-modified'] = array ((int)min ($ay['LastModified'],time ()), ha ($ay)); $r['favourite?'] = (bool) ($ay['IsFavourite'] && $ay['IsPublished']); $mf = yf ($ay); $r['draft?'] = $mf === 'draft'; $r['scheduled?'] = $mf === 'scheduled'; $r['public?'] = $mf === 'public'; $r['hidden?'] = $mf === 'hidden'; if(array_key_exists ('SourceNoteURL',$ay) and @$ay['SourceNoteURL']!=''){ $r['href']=$ay['SourceNoteURL']; $r['href-original']=$ay['SourceNoteURL']; } if ( ($nn and $en and ( ((int)$nn) .'/'. ((int)$en) == pa ('Y/n',$ay['Stamp'],ha ($ay)) )) or ($nn and !$en and ( (int)$nn == pa ('Y',$ay['Stamp'],ha ($ay)) )) or (!$nn and !$en) ) { $xn[] = $r; $nf[] = str_replace ("\n",' ',$ay['Title']); } } if(Log::$a)__log ('Will do typography'); if ($jn){ $ff = implode ("\n",$nf); $ff = dy (htmlspecialchars ($ff,ENT_NOQUOTES,'UTF-8')); $nf = explode ("\n",$ff); } foreach ($xn as $s3 => $a3){ $xn[$s3]['title']=$nf[$s3]; } $xn = array_reverse ($xn); return $xn; } function u () { global$_config; mm ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". nf (cs ()), 'get all notes list years with notes' ); $x3 = dm (); $df = []; foreach ($x3 as $sf){ $af = (int)pa ('Y',$sf['Stamp'],ha ($sf)); $df[$af]=true; } $df = array_keys ($df); sort ($df); return $df; } function i ($tm){ global$_config; list ($qf,$lf)=n1 ($tm); mm ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $qf. "' AND '". $lf ."' ". nf (cs ()), 'get all notes for the year '. $tm .' to list months with notes' ); $x3 = dm (); $zf = array (); foreach ($x3 as $sf){ if ( ((int)$tm) == pa ('Y',$sf['Stamp'],ha ($sf)) ) { $kf = (int)pa ('n',$sf['Stamp'],ha ($sf)); $zf[$kf]=true; } } $zf = array_keys ($zf); sort ($zf); return $zf; } function o ($tm,$jm){ global$_config; list ($xf,$ef)=n1 ($tm,$jm); mm ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $xf ."' AND '". $ef ."' ". nf (cs ()), 'get all notes for the month '.$jm.' of the year '. $tm .' to list days with notes' ); $x3 = dm (); $rf = array (); foreach ($x3 as $sf){ if ( ((int)$tm) .'/'. ((int)$jm) == pa ('Y/n',$sf['Stamp'],ha ($sf)) ) { $tf = (int)pa ('j',$sf['Stamp'],ha ($sf)); $rf[$tf]=true; } } $rf = array_keys ($rf); sort ($rf); return $rf; } function p () { $jf = cv ('end'); return lq ('e2m_day', [ 'year' => pa ( 'Y',$jf['stamp'],$jf['timezone'] ), 'month' => pa ( 'm',$jf['stamp'],$jf['timezone'] ), 'day' => pa ( 'd',$jf['stamp'],$jf['timezone'] ), ]); } function cv ($hf){ global$_config; $gf = 'p1'; if (!cs ()) { $gf = 'p1v1'; } $wf = USER_DIR . CACHES_DIRNAME . $hf .'-stamp-'. $gf .'.e2time.psa'; if(CACHE_EDGE_TIMEINFO and is_file ($wf)) { $cb = @unserialize (file_get_contents ($wf)); } if(is_array (@$cb)) { return $cb; } else { $cb = array ( 'stamp' => time (), 'timezone' => wa (), ); $uf = (($hf == 'end')? ' DESC' : ''); mm ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". nf (cs ()). "ORDER BY `Stamp`". $uf ." LIMIT 1", 'get '. $hf .' timestamp' ); $x3 = dm (); if(count ($x3)) { $cb = array ( 'stamp' => $x3[0]['Stamp'], 'timezone' => ha ($x3[0]), ); if(CACHE_EDGE_TIMEINFO)e3 ($wf,serialize ($cb)); return $cb; } return $cb; } } function vv ($url,$if_ = false){ if($_SERVER['HTTP_USER_AGENT']===E2_UA_STRING){ if(Log::$a)__log ('Spawn not allowed when requested by Aegea itself'); return false; } if(Log::$a)__log ('Spawn: Curl '. $url .' using '. ($if_? 'post' : 'get') .'...'); if(function_exists ('curl_init')) { $of = curl_init (); $pf = !ini_get ('open_basedir'); $pf = ($pf and !$if_); curl_setopt_array ($of, array ( CURLOPT_URL => $url, CURLOPT_POST => $if_, CURLOPT_POSTREDIR => false, CURLOPT_POSTFIELDS => '', CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => ys (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $pf, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($of); $c2 = curl_errno ($of); $v2 = curl_error ($of); $b2 = curl_getinfo ($of); curl_close ($of); if(Log::$a)__log ('Spawn: Curl returns: ['. print_r ($b2,true) .'] ['. $content .'], (errno='. $c2 .', errstr='. $v2 .')...'); return $b2; } else { if(Log::$a)__log ('Spawn: Curl functions are not available'); } } function e2_check_timeout(){ static $y2; if(is_null($y2)) { $n2 = ini_get('max_execution_time'); if ($n2){ $y2 = time()+$n2 - 5; } else { $y2 = 0; } } return ($y2 == 0)?true : $y2 >= time(); } function e2_write_dump_header($m2){ $b2 = ( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($m2,$b2); return true; } function e2_write_dump_footer($m2){ $f2 = 'COMMIT;' .PHP_EOL; $f2 .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" . PHP_EOL . "/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" . PHP_EOL . "/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;" . PHP_EOL . "/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" . PHP_EOL; fwrite($m2,$f2); return true; } function e2_get_table_definition($d2,$s2){ $a2 = null; $x3 = mysqli_query($d2,"SHOW CREATE TABLE `{$s2}`"); if ($x3){ $q2 = mysqli_fetch_array($x3); $a2 = $q2['Create Table']; } return $a2; } function e2_write_table_definition($m2,$d2,$s2){ $l2 = e2_get_table_definition($d2,$s2); if(e2_check_timeout() && $l2){ fwrite($m2,$l2); fwrite($m2,';'); fwrite($m2,PHP_EOL . PHP_EOL); return true; } return false; } function e2_get_table_data($d2,$s2,$z3,$limit){ $z2 = "SELECT * FROM `{$s2}` LIMIT {$z3}, {$limit}"; $x3 = mysqli_query($d2,$z2); if (!$x3){ return false; } $k2 = ''; $x2 = "INSERT INTO `{$s2}` VALUES"; while ($e2_ = mysqli_fetch_row($x3)) { $r2 = array(); foreach($e2_ as $cv){ $r2[] = is_null($cv)?"NULL" : "'" . mysqli_real_escape_string($d2,$cv)."'"; } $k2 .= $x2 . '(' . join(', ',$r2).');' . PHP_EOL; } return $k2; } function e2_table_disable_keys($s2){ return "ALTER TABLE `{$s2}` DISABLE KEYS;" . PHP_EOL; } function e2_table_enable_keys($s2){ return "ALTER TABLE `{$s2}` ENABLE KEYS;" . PHP_EOL; } function e2_get_total_records($d2,$s2){ $s3 = mysqli_fetch_row(mysqli_query($d2,"SELECT COUNT(*) FROM `{$s2}`")); return $s3[0]; } function e2_backup_select_chuck_size_for_table_($s2){ $limit = 5000; if(substr ($s2, -7)==='Actions')$limit = 50000; if(substr ($s2, -7)==='Aliases')$limit = 20000; if(substr ($s2, -7)==='NotesKeywords')$limit = 50000; if(Log::$a)__log ('Backup: chunk size '. (int)$limit); return$limit; } function e2_write_table_data($m2,$d2,$s2,$subset){ $t2 = e2_get_total_records($d2,$s2); $z3 = 0; $limit = e2_backup_select_chuck_size_for_table_($s2); $x3 = true; $j2 = 20000; $h2 = 30; if ($t2){ $g2 = e2_table_disable_keys($s2); fwrite($m2,$g2); } $k2 = "INSERT INTO `{$s2}` VALUES"; $w2 = $t2; while ($w2 > 0){ $z2 = "SELECT * FROM `{$s2}` "; if ((int)$subset > 0){ $z2 .= "WHERE `SubsetID` = {$subset} "; } $z2 .= "ORDER BY `ID` LIMIT {$z3}, {$limit}"; $x3 = mysqli_query($d2,$z2); $u2 = mysqli_num_rows($x3); if (!$x3 || !e2_check_timeout()) { $x3 = false; break; } $i2 = array(); $o2 = 0; $p2 = 0; while ($e2_ = mysqli_fetch_row($x3)) { if (!e2_check_timeout()) { $x3 = false; break; } $u2--; $mb = array(); foreach($e2_ as $cv){ $mb[] = is_null($cv)?"NULL" : "'" . mysqli_real_escape_string($d2,$cv)."'"; } $lb = '(' . join(', ',$mb).')'; $o2 += strlen($lb); $i2[] = $lb; $p2++; if ( ($o2 >= $j2) || ($p2 >= $h2) || ($u2 == 0)) { $z2 = $k2 . join(', ',$i2).';'; fwrite($m2,$z2); fwrite($m2,PHP_EOL); $o2 = 0; $p2 = 0; $i2 = array(); } } $z3 += $limit; $w2 -= $limit; } if ($t2){ $cd = e2_table_enable_keys($s2); fwrite($m2,$cd); } return $x3; } function e2_backup($d2,$vd,$subset,$bd){ $yd = tmpfile(); e2_write_dump_header($yd); if(Log::$a)__log ('Backup: wrote header'); $nd = true; foreach($vd as $s2){ if ((int)$subset > 0){ if(Log::$a)__log ('Backup: table '. $s2 .', subset '. $subset); } else { if(Log::$a)__log ('Backup: table '. $s2 .', all subsets'); } $md = e2_write_table_definition($yd,$d2,$s2); if(Log::$a)__log ('Backup: wrote table definition with result '. @(int)$md); $fd = e2_write_table_data($yd,$d2,$s2,$subset); if(Log::$a)__log ('Backup: wrote table data with result '. @(int)$fd); $nd = $md && $fd; if ($nd === false){ break; } } if(Log::$a)__log ('Backup: wrote data with running == '. (int)$nd); if ($nd){ e2_write_dump_footer($yd); fseek($yd,0); $m2 = fopen($bd,'w+'); while ($nd && ($lb = fread($yd,1024))) { if(e2_check_timeout()) { fwrite($m2,$lb); } else { $nd = false; } } fclose($m2); } fclose($yd); return $nd; } function xv () { global$settings,$_lang,$_config,$_strings; if(Log::$a)__log ('Blog information'); $dd['author']=htmlspecialchars (rv (), ENT_NOQUOTES,'UTF-8'); if(array_key_exists ('blog_subtitle',$settings)) { $sd = qy ($settings['blog_subtitle'],'full'); $ad = $sd['text-final']; $dd['subtitle']=$ad; $dd['subtitle-format-info']=$sd['meta']; b2 (@$sd['meta']['links-required']); } $dd['title']=htmlspecialchars (ev (), ENT_NOQUOTES,'UTF-8'); $dd['userpic-set?']=false; $dd['userpic-changeable?']=cs (); if ($dd['userpic-href']=tv ()) { $dd['userpic-set?']=true; $dd['userpic-large-href']=tv ('large'); $dd['userpic-square-href']=tv ('square'); $dd['userpic-changeable-href']=$dd['userpic-href']; } else { unset ($dd['userpic-href']); } if (cs ()) { $dd['userpic-upload-action']=lq ('e2j_userpic_upload'); $dd['userpic-remove-action']=lq ('e2j_userpic_remove'); } $dd['href']=lq ('e2m_frontpage', array ('page' => 1)); $dd['rss-href']=lq ('e2m_rss'); $dd['jsonfeed-href']=lq ('e2m_json'); $dd['language']=$_lang; $dd['show-follow-button?']=false; $dd['license-expired?']=false; $ld = array (time (), wa ()); $zd = c1 ('Y',$ld[0]); $dd['now']=$ld; $kd = $zd; $xd = cv ('start'); if(array_key_exists ('stamp',$xd)) { $kd = c1 ('Y',$xd['stamp']); $dd['start-time'] = array ((int)$xd['stamp'],$xd['timezone']); } $ed = false; $rd = vf (true,true); if ($rd !== null){ if (cs ()) { $td = vf (true,false); if ($td !== null){ $ed = ($rd + $td == 0); } } else { $ed = ($rd == 0); } } $dd['notes-count'] = (int)$rd; if ($dd['notes-count']>0){ $dd['selected-href']=lq ('e2m_favourites', ['page' => 1]); $dd['most-commented-href']=lq ('e2m_most_commented', ['page' => 1]); $dd['popular-href']=lq ('e2m_popular', ['page' => 1]); $dd['calendar-href']=p (); $dd['random-note-href']=mf (); } $dd['virgin?']=$ed; $jd = $_config['years_range_separator']? $_config['years_range_separator']:$_strings['gs--range-separator']; $dd['years-range']=$kd . (($kd == $zd)? '':($jd . $zd)); if(AeEnv::$w){ $dd['parent-site-href']=substr (AeEnv::$w, (int)strpos ('/',AeEnv::$w)); } return $dd; } function ev () { global$settings,$_strings; if ( array_key_exists ('blog_title',$settings) and trim ($settings['blog_title']) != '' ) { return trim ($settings['blog_title']); } else { return$_strings['e2--default-blog-title']; } } function rv () { global$settings,$_strings; if ( array_key_exists ('author',$settings) and trim ($settings['author']) != '' ) { return trim ($settings['author']); } else { return$_strings['e2--default-blog-author']; } } function tv ($size = ''){ global$_config; $hd = false; $gd = $_config['path_media'].USERPIC_DIRNAME; if(is_file ($gd .'userpic@2x.jpg')) { $hd = 'userpic@2x.jpg'; } elseif(is_file ($gd .'userpic@2x.png')) { $hd = 'userpic@2x.png'; } if($size == 'large' and is_file ($gd .'userpic-large@2x.jpg')) { $hd = 'userpic-large@2x.jpg'; } elseif($size == 'square' and is_file ($gd .'userpic-square@2x.jpg')) { $hd = 'userpic-square@2x.jpg'; } if ($hd === false) return false; $wd = $gd . $hd; $ud = AeEnv::$base_url . USERPIC_DIRNAME . $hd; $id = stat ($wd); if ($id['mtime'])$ud .= '?'. $id['mtime']; return $ud; } function jv () { global$_config,$_stopwatch,$od; $pd = round (yq () - $_stopwatch,3); return [ 'show?' => ($_config['display_stat'] > (int) !cs ()), 'generation-time' => str_replace ('.',',',$pd), 'peak-memory-mb' => str_replace ('.',',',round ((memory_get_peak_usage () / 1024 / 1024)*100)/100), 'db-query-count' => (int) @$od, ]; } function e2m_info () { global$settings,$_template; if (!isset ($_template))qf (); $cs = array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (cn () !== null), 'server_name' => AeEnv::$server, 'folder_on_server' => AeEnv::$w, '---', 'default formatter' => DEFAULT_FORMATTER, '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr (md5 (file_get_contents ('system/neasden/neasden.php')), 0,4), '---', ); echo '<pre>'; foreach ($cs as $s3 => $a3){ if ($a3 == '---'){ echo "\n"; continue; } echo str_pad ($s3,24); echo '\''; print_r ($a3); echo '\''; echo "\n"; } echo '</pre>'; die; } function hv ($s){ global$_config; if (@$_config['broadcast_url'] and !$s['IsExternal']) { if($_config['log_broadcast']) { Log::$a = true; if(Log::$a)dn ('broadcast'); } if(Log::$a)__log ('Broadcast-async note: '. $s['Title']); $url = lq ('e2m_note_broadcast', array ('*note' => $s)); if(Log::$a)__log ('Broadcast will spawn url: '. $url); vv ($url); } } function gv ($vs){ global$_config; if (!$vs) return false; $url = $_config['broadcast_url']; $url .= '?src='. urlencode ($vs); if($_config['log_broadcast']) { Log::$a = true; if(Log::$a)dn ('broadcast'); } if(Log::$a)__log ('Broadcast: Curl '. $url .'...'); if(function_exists ('curl_init')) { $of = curl_init (); $pf = !ini_get ('open_basedir'); curl_setopt_array ($of, array ( CURLOPT_URL => $url, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => ys (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $pf, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($of); $c2 = curl_errno ($of); $v2 = curl_error ($of); $b2 = curl_getinfo ($of); curl_close ($of); if(Log::$a)__log ('Broadcast: Curl returns: ['. print_r ($b2,true) .'] ['. $content .'], (errno='. $c2 .', errstr='. $v2 .')...'); if ($c2 === 0) return true; } else { if(Log::$a)__log ('Spawn: Curl functions are not available'); } return false; } function wv ($s){ if (!$s) return false; $vs = lq ('e2m_note_json', array ('*note' => $s)); return gv ($vs); } function e2m_note_broadcast ($parameters = array ()) { global$_config; if (@$_config['broadcast_url']) { if(array_key_exists ('*note',$parameters)) { $vs = lq ('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif(array_key_exists ('alias',$parameters)) { $vs = lq ('e2m_note_json', array ('alias' => $parameters['alias'])); } if (gv ($vs)) { die ('Broadcasted.'); } else { die ('Could not broadcast.'); } } else { return e2m_error404 (); } } function e2_cache_filename_with_id_($zy,$gf){ return str_replace ('*',$zy,$gf); } function e2_note_cache_filename_with_id_($zy){ return e2_cache_filename_with_id_($zy,USER_DIR . CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($note_id,$bs){ if(is_numeric ($note_id)) { if(Log::$a)__log ('Caches: Drop caches for note id '. $note_id); @unlink (e2_note_cache_filename_with_id_($note_id)); @unlink (e2_note_cache_filename_with_id_($note_id .'-comments')); @unlink (e2_note_cache_filename_with_id_($note_id .'-comments-author')); } else { o1 (USER_DIR . CACHE_FILENAMES_NOTES); o1 (USER_DIR . CACHE_FILENAMES_NOTES_COMMENTS); o1 (USER_DIR . CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } vb (); if ($bs !== false){ bb (); o1 (USER_DIR . CACHE_FILENAMES_NOTES_RELATED); o1 (USER_DIR . CACHE_FILENAMES_POPULAR_WITH_TAG); o1 (USER_DIR . CACHE_FILENAMES_TAG); o1 (USER_DIR . CACHE_FILENAMES_TAG_AUTHOR); @unlink (USER_DIR . CACHE_FILENAME_POPULAR); @unlink (USER_DIR . CACHE_FILENAME_FRONTPAGE); @unlink (USER_DIR . CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink (USER_DIR . CACHE_FILENAME_FRONTPAGE_FEED); @unlink (USER_DIR . CACHE_FILENAME_FULLLIST); @unlink (USER_DIR . CACHE_FILENAME_TAGS); @unlink (USER_DIR . CACHE_FILENAME_TAGS_FULL); @unlink (USER_DIR . CACHE_FILENAME_TAGS_AUTHOR); @unlink (USER_DIR . CACHE_FILENAME_TAGS_AUTHOR_FULL); } if ($bs !== true){ @unlink (USER_DIR . CACHE_FILENAME_DRAFTS); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } @unlink (USER_DIR . CACHE_FILENAME_LASTMODIFIEDS); } function e2_drop_caches_for_tag_($ys){ if(is_numeric ($ys)) { @unlink (e2_cache_filename_with_id_($ys,USER_DIR . CACHE_FILENAMES_TAG)); @unlink (e2_cache_filename_with_id_($ys,USER_DIR . CACHE_FILENAMES_TAG_AUTHOR)); } else { o1 (USER_DIR . CACHE_FILENAMES_TAG); o1 (USER_DIR . CACHE_FILENAMES_TAG_AUTHOR); } @unlink (USER_DIR . CACHE_FILENAME_FAVTAGS); @unlink (USER_DIR . CACHE_FILENAME_TAGS); @unlink (USER_DIR . CACHE_FILENAME_TAGS_FULL); @unlink (USER_DIR . CACHE_FILENAME_TAGS_AUTHOR); @unlink (USER_DIR . CACHE_FILENAME_TAGS_AUTHOR_FULL); } function cb () { if(Log::$a)__log ('Caches: Drop notes caches'); e2_drop_caches_for_note_(null,null); } function vb () { if(Log::$a)__log ('Caches: Drop notes counts cache'); o1 (USER_DIR . CACHE_FILENAMES_NOTES_COUNTS); } function bb () { if(Log::$a)__log ('Caches: Drop egde time info cache'); o1 (USER_DIR . CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache () { if(Log::$a)__log ('Caches: Drop all kinds of caches'); o1 (USER_DIR . CACHES_DIRNAME . '*'); return true; } function e2m_comment ($parameters = []) { s1 (lq ('e2m_note',$parameters)); } function e2m_comment_edit ($parameters = []) { return yb ('edit',$parameters); } function yb ($ns,$parameters = []) { global$_strings; $ms = $fs = $_strings['pt--new-comment']; $ds = 'new'; if ($ns == 'edit'){ $ss = e2_commentrec_with_parameters_($parameters); $as_ = $_strings['fb--save-changes']; $ay = $ss['noterec']; $ms = $fs = $_strings['pt--edit-comment']; $qs = mb ($ay,$ss,$parameters['comment-number']); if (!$ss){ return e2m_error404 (); } $ls = [ '.note-id' => $ss['NoteID'], '.comment-id' => $ss['ID'], '.comment-number' => $parameters['comment-number'], '.already-subscribed?' => false, '.gip' => $ss['GIP'], 'create:edit?' => false, 'form-action' => lq ('e2s_comment_process'), 'submit-text' => $as_, 'show-subscribe?' => true, 'subscribe?' => (bool)$ss['IsSubscriber'], 'name' => htmlspecialchars ($ss['AuthorName'],ENT_COMPAT,'UTF-8'), 'email' => htmlspecialchars ($ss['AuthorEmail'],ENT_COMPAT,'UTF-8'), 'text' => htmlspecialchars ($ss['Text'],ENT_COMPAT,'UTF-8'), 'email-field-name' => a (), ]; if ('' != trim ($ss['IP'])) { $ls['ip']=$ss['IP']; } } $cb = [ 'title' => $ms, 'heading' => $fs, 'form' => 'form-comment', 'form-comment' => $ls, ]; if (!empty ($qs)) { $cb['comments'] = ['each' => ['only' => $qs]]; } return $cb; } function e2m_comment_reply ($parameters = []) { global$_strings; $ss = e2_commentrec_with_parameters_($parameters); if (!$ss){ return e2m_error404 (); } $ay = $ss['noterec']; $qs = mb ($ay,$ss,$parameters['comment-number']); $qs['replying?'] = (bool)true; $zs = ($ss['Reply']=='' or !$ss['IsReplyVisible']); $ms = $zs? $_strings['pt--reply-to-comment']:$_strings['pt--edit-reply-to-comment']; $ks = [ '.note-id' => $ay['ID'], '.comment-id' => $ss['ID'], '.reply-action' => $zs? 'new' : 'edit', 'form-action' => lq ('e2s_comment_edit_reply'), 'submit-text' => $zs? $_strings['fb--publish']:$_strings['fb--save-changes'], 'create:edit?' => (bool) ($zs), 'reply-text' => htmlspecialchars ($ss['Reply'],ENT_COMPAT,'UTF-8'), 'emailing-possible?' => MAIL_ENABLED, 'mail-back?' => (bool) ($zs), ]; return [ 'title' => $ms, 'heading' => $ms, 'comments' => ['each' => ['only' => $qs]], 'form' => 'form-comment-reply', 'form-comment-reply' => $ks, ]; } function e2m_comment_delete ($parameters = []) { global$_config; $ss = e2_commentrec_with_parameters_($parameters); $note_id = $ss['NoteID']; if (!$ss){ return e2m_error404 (); } e2_drop_caches_for_note_($note_id,true); @unlink (USER_DIR. '/last-comment.psa'); mm ( "DELETE FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$ss['ID']). "'" ); a1 (); } function e2m_comment_reply_delete ($parameters = []) { global$_strings,$settings,$_config; $ss = e2_commentrec_with_parameters_($parameters); if (!$ss){ return e2m_error404 (); } mm ( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$ss['ID']) ); a1 (); } function e2m_unsubscribe ($parameters){ global$_strings,$_config; $uf = "ORDER BY `ID` DESC"; $xs = false; $ay = $parameters['*note']; $note_id = $ay['ID']; $es = $parameters['unsubscribe-email']; $rs = $parameters['unsubscribe-key']; $es = str_replace (' ','+',$es); if($note_id){ mm ( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $note_id ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`='". sm ($es) ."' ". $uf, 'get subscriber’s comments ids' ); $x3 = dm (); if(count ($x3)<1) { $cb['unsubscribe']['error-message']=$_strings['gs--you-are-not-subscribed']; } else { $ts = @$x3[0]; $js = md5 ($ts['ID'].$ts['Stamp'] .'x'); if ($rs == $js){ mm ( "UPDATE `". $_config['db_table_prefix']."Comments` ". "SET `IsSubscriber`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $note_id ." ". "AND `AuthorEmail` = '". sm ($es). "'", 'unsubscribe' ); $xs = true; $cb['unsubscribe']['note-title']=dy ( htmlspecialchars ($ay['Title'],ENT_COMPAT,'UTF-8') ); $cb['unsubscribe']['note-href']=lq ( 'e2m_note', ['*note' => $ay] ); } if (!$xs){ $cb['unsubscribe']['error-message']=$_strings['gs--unsubscription-didnt-work']; } } } else { $cb['unsubscribe']['error-message']=$_strings['gs--post-not-found']; } if ($xs){ $ms = $_strings['pt--unsubscription-done']; } else { $ms = $_strings['pt--unsubscription-failed']; } $cb['unsubscribe']['success?']=$xs; $cb['title']=$ms; $cb['heading']=$ms; return $cb; } function e2m_comment_flag ($parameters){ nb ($parameters); s1 (lq ('e2m_note',$parameters)); } function e2s_comment_flag_ajax ($parameters){ r1 ([ 'flag-name' => 'comment', 'candy-name' => 'e2s_comment_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ nb ($parameters); }, 'redirect-candy' => 'e2m_note', ]); } function nb ($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_note',$parameters)); } wd (); $ss = e2_commentrec_with_parameters_($parameters); $note_id = $ss['NoteID']; if (!$ss) throw new AeException ('Comment record not cound from parameters'); e2_drop_caches_for_note_($note_id,true); ym ( oq (), 'Comments', [ 'ID' => $ss['ID'], $parameters['flag'] => (int) ($parameters['value']==1), ] ); } function e2s_comment_process () { global$_strings; $hs = true; $gs = ''; try { $note_id = rb (); } catch (AeFormIncompleteException $e){ hb ($_strings['er--name-email-text-required'],E2E_USER_ERROR); s1 (lq ('e2m_note', ['*note' => jm ($e->note_id)])); } catch (AeFormNoteNotCommentableException $e){ $hs = false; $ws = $_strings['gs--comment-post-not-commentable']; $us = $_strings['gs--comment-post-not-commentable-description']; $gs = $e->comment_text; } catch (AeFormDuplicateCommentException $e){ $hs = false; $ws = $_strings['gs--comment-double-post']; $us = $_strings['gs--comment-double-post-description']; $gs = $e->comment_text; } catch (AeFormCommentTooLongException $e){ $hs = false; $ws = $_strings['gs--comment-too-long']; $us = $_strings['gs--comment-too-long-description']; $gs = $e->comment_text; } catch (AeFormCommentIsSpamSuspectException $e){ $hs = false; $ws = $_strings['gs--comment-spam-suspect']; $us = $_strings['gs--comment-spam-suspect-description']; $gs = $e->comment_text; } if ($hs){ if($note_id){ s1 (lq ('e2m_note', ['*note' => jm ($note_id)])); } else { s1 (); } } else { $cb['title']=$ws; $cb['heading']=$ws; $cb['form']='form-unaccepted-comment'; $cb['form-unaccepted-comment'] = [ 'reason' => $us, 'text' => @htmlspecialchars ($gs,ENT_COMPAT,'UTF-8'), ]; return $cb; } die; } function e2s_comment_edit_reply () { global$_config; wd (); $is = @$_POST['text']; if(trim ($is)=='')$is = ''; $note_id = @$_POST['note-id']; $ay = jm ($note_id); $ds = @$_POST['comment-id']; $ss = fb ($ds); $os = isset ($_POST['mail-back']); $ps = time (); if (@$_POST['reply-action']=='new'){ $ca = time (); } @unlink (e2_note_cache_filename_with_id_($note_id .'-comments')); @unlink (e2_note_cache_filename_with_id_($note_id .'-comments-author')); if ($ss){ mm ( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='". sm ($is) ."', ". ( isset ($ca)? ( "`ReplyStamp`='". $ca ."', " ) : ( "" ) ). "`ReplyLastModified`='". $ps ."', ". "`IsReplyVisible`='1' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$ds), 'update comment reply' ); $va = lq ('e2m_note', ['*note' => $ay]); if ($os and $is != ''){ $ba['comment-time'] = [$ss['Stamp'],wa ()]; $ba['commenter']=$ss['AuthorName']; $ba['commenter-email']=$ss['AuthorEmail']; $ba['comment-text']=$ss['Text']; $ba['note-title']=dy ($ay['Title']); $ba['reply-time'] = [time (), wa ()]; $ba['blog-author']=rv (); $ba['note-href']=$va; $ba['comment-href']=$va; $ba['reply-text']=$is; if(1){ $ya = qn ( 'comment-reply',$ba ); $na = e2l_get_string ( 'em--comment-reply', $ba ); $ma = $ss['AuthorEmail']; $fa = 'From: '. ln (); zn ($ma,$na,$ya,$fa); } if(1){ unset ($ba['commenter-email']); $fa = 'From: '. ln (); foreach (kb ($ay,$ss['AuthorEmail']) as $da){ $sa = $da['AuthorEmail']; $aa = md5 ($da['ID'].$da['Stamp'].'x'); $ba['unsubscribe-href']=lq ('e2m_unsubscribe', [ '*note' => $ay, 'unsubscribe-email' => $sa, 'unsubscribe-key' => $aa, ] ); $ma = $sa; $ya = qn ('comment-reply-to-public',$ba); $na = e2l_get_string ( 'em--comment-reply-to-public-subject', $ba ); zn ($ma,$na,$ya,$fa); } } } s1 ($va); } else { a1 (); } die; } function mb ($ay,$ts,$qa){ global$_config; if(Log::$a)__log ('Package comment '. $ts['ID'] .'...'); if ($ay === null){ $ay = jm ($ts['NoteID']); } $ba['number']=$qa; $la = !empty ($ts['IsGIPUsed']); $ba['gip-used?']=$la; $ba['gip']=$ba['gip-used?']?$ts['GIP']:''; $ba['name']=htmlspecialchars ($ts['AuthorName'],ENT_NOQUOTES,'UTF-8'); $ba['userpic-set?']=false; if ($la){ $za = AVATARS_DIRNAME . $ts['GIP'] .'-'. $ts['GIPAuthorID'] .'.jpg'; if(is_file ($_config['path_media'].$za)) { $ba['userpic-set?']=true; $ba['userpic-href']=AeEnv::$base_url . $za; } } $ba['name-href']=''; if ( $la and $ka = e2_get_user_profile_url ( $ts['GIP'],$ts['GIPAuthorID'],$ts['AuthorProfileLink'] ) ) { $ba['name-href']=$ka; } if (cs ()) { $ba['email']=htmlspecialchars ($ts['AuthorEmail'],ENT_NOQUOTES,'UTF-8'); if ('' != trim ($ts['IP'])) { $ba['ip']=$ts['IP']; } } $ba['author-name']=rv (); $ba['new?']=false; $ba['important?'] = (bool)$ts['IsFavourite']; $ba['reply-visible?'] = (bool) ($ts['IsVisible'] && $ts['IsReplyVisible']); $ba['reply-important?'] = (bool)$ts['IsReplyFavourite']; $ba['spam-suspect?'] = (bool)$ts['IsSpamSuspect']; $xa = [(int)$ts['Stamp'],ha ($ay)]; $ba['time']=$xa; $ba['last-modified']=$xa; if ($ts['LastModified']) $ba['last-modified'] = [(int)$ts['LastModified'],ha ($ay)]; if ($ts['ReplyStamp']) $ba['reply-time'] = [(int)$ts['ReplyStamp'],ha ($ay)]; if ($ts['ReplyLastModified']) $ba['reply-last-modified'] = [(int)$ts['ReplyLastModified'],ha ($ay)]; if (cs ()) { $ba['subscriber?'] = (bool)$ts['IsSubscriber']; $ba['new?'] = (bool)$ts['IsNew']; $ba['first-new?']=false; if (!@$_config['read_only']) { $ba['important-toggle-action']=lq ('e2s_comment_flag_ajax', [ '*note' => $ay,'comment-number' => $qa, 'flag' => 'IsFavourite', 'value' => !$ts['IsFavourite'] ]); $ba['reply-important-toggle-action']=lq ('e2s_comment_flag_ajax', [ '*note' => $ay,'comment-number' => $qa, 'flag' => 'IsReplyFavourite', 'value' => !$ts['IsReplyFavourite'] ]); $ba['edit-href']=lq ('e2m_comment_edit', [ '*note' => $ay,'comment-number' => $qa, ]); $ba['removed-action']=lq ('e2s_comment_flag_ajax', [ '*note' => $ay,'comment-number' => $qa, 'flag' => 'IsVisible', 'value' => 0 ]); $ba['removed-reply-action']=lq ('e2s_comment_flag_ajax', [ '*note' => $ay,'comment-number' => $qa, 'flag' => 'IsReplyVisible', 'value' => 0 ]); $ba['replaced-action']=lq ('e2s_comment_flag_ajax', [ '*note' => $ay,'comment-number' => $qa, 'flag' => 'IsVisible', 'value' => 1 ]); $ba['replaced-reply-action']=lq ('e2s_comment_flag_ajax', [ '*note' => $ay,'comment-number' => $qa, 'flag' => 'IsReplyVisible', 'value' => 1 ]); $ea = lq ('e2m_comment_reply', [ '*note' => $ay,'comment-number' => $qa ]); if ($ts['Reply']=='' or !$ts['IsReplyVisible']) { $ba['reply-href']=$ea; } else { $ba['edit-reply-href']=$ea; } } } if(mb_strlen ($ts['Text']) > $_config['max_comment_length']) { $ts['Text']=mb_substr ($ts['Text'],0,$_config['max_comment_length']); } $ra = $ay['FormatterID']==='raw' ? 'neasden' : $ay['FormatterID']; $sd = ay ($ra,$ts['Text'],'simple'); $ba['text']=$sd['text-final']; $ba['reply']=''; $ba['replying?'] = (bool)false; $ba['replied?'] = (bool) ( (trim ($ts['Reply']) != '') && ($ts['IsReplyVisible']) ); if ((string)$ts['Reply']!==''){ $sd = ay ($ay['FormatterID'],$ts['Reply'],'full'); $ba['reply']=$sd['text-final']; } if(Log::$a)__log ('Comments: done'); return $ba; } function fb ($zy){ global$_config; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $zy ."'" ); $zb = dm (); if(count ($zb)>0){ return $zb[0]; } else { return false; } } function db ($s){ global$_strings,$settings; $ta = (string) @$_COOKIE[q1 ('commenter_name')]; $ja = (string) @$_COOKIE[q1 ('commenter_email')]; $ha = (string) @$_COOKIE[q1 ('commenter_ph')]; $ga = false; if ($ja and $ha){ foreach (kb ($s) as $da){ $js = md5 ($da['ID'].$da['Stamp'] .'x'); if ( $da['AuthorEmail']==$ja and $ha == $js ) { $ga = true; break; } } } $as_ = $_strings['fb--submit']; $vn = q (); $ls = [ '.note-id' => $s['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool)$ga, 'cookie-name' => z ($s['ID']), 'cookie-value' => k (), 'email-field-name' => a (), 'nospam-field-name-part-1' => substr ($vn,0,4), 'nospam-field-name-part-2' => substr ($vn,4), 'create:edit?' => true, 'form-action' => lq ('e2s_comment_process'), 'submit-text' => $as_, 'show-subscribe?' => (bool) !$ga, 'emailing-possible?' => MAIL_ENABLED, 'subscribe?' => (bool)$ga, 'subscription-status' => $ga? $_strings['gs--you-are-already-subscribed']:'', 'name' => htmlspecialchars ($ta,ENT_COMPAT,'UTF-8'), 'email' => htmlspecialchars ($ja,ENT_COMPAT,'UTF-8'), 'text' => '', 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => [], ]; $wa = false; $ua = ''; foreach(e2_list_gips () as $ia){ if (!is_file (SYSTEM_DIR .'gips/'. $ia .'.json')) { continue; } $oa = e2_is_logged_in ($ia); $ls['gips'][$ia] = ( e2_get_gip_auth_url ($ia) ); if ($oa){ $wa = true; $pa = e2_get_gip_session ($ia); $ua = $pa['GIP']; $ls['name']=htmlspecialchars ( $pa['AuthorName'],ENT_COMPAT,'UTF-8' ); } } if (!$ls['email-comments-enabled?'] and !count ($ls['gips'])) { return false; } $ls['email-comments-only?'] = (count ($ls['gips']) === 0); $ls['logged-in?']=$wa; $ls['logged-in-gip']=$ua; $ls['logout-url']=$wa ? lq('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $ls; } function sb ($note_id){ return qb ($note_id,'`IsNew` = 1'); } function ab ($note_id){ return qb ($note_id,'`IsVisible` = 1'); } function qb ($note_id,$c1){ global$_config; if (!is_numeric ($note_id)) return 0; $v1 = 0; mm ( "SELECT count(*) ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $note_id ." ". "AND (". $c1. ")", 'count comments' ); $x3 = dm (); $x3 = (int)$x3[0]['count(*)']; $v1 = $x3; return (int)$v1; } function lb () { global$_config; if(Log::$a)__log ('Count new comments'); $b1 = 0; $y1 = ''; $n1 = ''; try { mm ( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsNew`=1 ORDER BY `Stamp` DESC", 'count new comments for author menu' ); $x3 = dm (); $b1 = count ($x3); while ($b1-- > 0){ if ($ay = jm ($x3[$b1]['NoteID'])) { $n1 = lq ('e2m_note', ['*note' => $ay]); break; } } $b1 ++; } catch (AeMySQLException $e){ v3 ($e); if(Log::$a)__log ('Could not count new comments or provide link to the latest one'); } return [(int)$b1,$y1,$n1]; } function zb ($note_id){ global$_config; if(Log::$a)__log ('Comments: getting comments for note '. $note_id); mm ( "SELECT c.*, g.`AuthorProfileLink` ". "FROM `". $_config['db_table_prefix']."Comments` c ". "LEFT JOIN `". $_config['db_table_prefix']."GIPsSessions` g ". "ON c.`SubsetID`=g.`SubsetID` ". "AND c.`GIP`=g.`GIP` ". "AND c.`GIPAuthorID`=g.`GIPAuthorID` ". "WHERE c.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$note_id . " ". "ORDER BY `Stamp`", 'get comments including deleted' ); $x3 = dm (); return $x3; } function kb ($ay,$m1 = ''){ global$_config; $uf = "ORDER BY `ID` DESC"; $cb = $f1 = []; mm ( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `IsVisible`, ". "`AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$ay['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `IsVisible`=1 ". "AND `AuthorEmail`!='". sm ($m1) ."' ". $uf, 'get subscribers by note' ); $x3 = dm (); foreach ($x3 as $da){ if (!in_array ($da['AuthorEmail'],$f1)) { $cb[] = $da; } $f1[] = $da['AuthorEmail']; } return $cb; } function xb ($ay,$d1 = NOTE_COMMENTABLE_NOW){ global$settings,$_config; $s1 = true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($ay['Stamp']<time () - $_config['comment_freshness_days']*SECONDS_IN_A_DAY) $s1 = false; $a1 = $ay['IsCommentable']; if ($d1 == NOTE_COMMENTABLE_NOW_CONDITIONALLY){ $a1 = true; } return ( yf ($ay)==='public' and $s1 and $a1 ); } function e2_commentrec_with_parameters_($parameters = []) { $ay = $parameters['*note']; $q1 = zb ($ay['ID']); $ss = @$q1[$parameters['comment-number']-1]; if ($ss){ $ss['noterec']=$ay; return $ss; } } function rb () { global$settings,$_config; if(Log::$a)__log ('Process comment form'); wd (); $py = a (); $note_id = $ds = $name = $es = $l1 = ''; if(array_key_exists ('note-id',$_POST)) $note_id = trim (@$_POST['note-id']); if(array_key_exists ('comment-id',$_POST)) $ds = trim (@$_POST['comment-id']); if(array_key_exists ('comment-number',$_POST)) $qa = trim (@$_POST['comment-number']); if(array_key_exists ('name',$_POST)) $name = trim (@$_POST['name']); if(array_key_exists ($py,$_POST)) $es = trim (@$_POST[$py]); if(array_key_exists ('text',$_POST)) $l1 = trim (@$_POST['text']); if ($ds === 'new'){ $z1 = e2_get_logged_gip_name (); if ($z1){ $pa = e2_get_gip_session ($z1); $name = trim ($pa['AuthorName']); $es = ''; $k1 = $pa['GIPAuthorID']; } } else { if(array_key_exists ('gip',$_POST))$z1 = trim (@$_POST['gip']); } $x1 = ( (array_key_exists ('already-subscribed',$_POST) and $_POST['already-subscribed']) or (array_key_exists ('subscribe',$_POST) and $_POST['subscribe']) ); $gn = time (); if (!is_numeric ($note_id)) { throw new AeFormInconsistentException (); } if (!is_numeric ($ds) and $ds !== 'new'){ throw new AeFormInconsistentException (); } if ($ds !== 'new' and !cs ()) { throw new AeFormInconsistentException (); } if ( $l1 == '' or (!$z1 and ((string)$name === '' or (string)$es === '')) ) { throw new AeFormIncompleteException ($note_id); } if ($ds == 'new' and !$z1){ l1 ('commenter_name',$name); l1 ('commenter_email',$es); } $e1 = ($ds === 'new' and ( x () or e2_cookie_data_is_spam_suspicios_for_note_id_($note_id) )); if ($ds == 'new'){ $r1 = @unserialize (file_get_contents (USER_DIR. '/last-comment.psa')); if(md5 ($name . $es . $l1) == @$r1['md5']) { throw new AeFormDuplicateCommentException ($l1); } if ( isset ($_config['max_comment_length']) and strlen (@$_POST['text']) > ($_config['max_comment_length']) ) { throw new AeFormCommentTooLongException ($l1); } $ay = jm ($note_id); if ($ds == 'new' and !xb ($ay)) { throw new AeFormNoteNotCommentableException ($l1); } if ($e1){ throw new AeFormCommentIsSpamSuspectException ($l1); } } e2_drop_caches_for_note_($note_id,true); if ($ds == 'new'){ $ss = [ 'NoteID' => (int)$note_id, 'AuthorName' => $name, 'AuthorEmail' => $es, 'Text' => $l1, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int)$x1, 'IsSpamSuspect' => (int)$e1, 'IsNew' => 1, 'Stamp' => (int)time (), 'LastModified' => (int)time (), 'IP' => sm (ud ()), 'IsGIPUsed' => intval (!empty ($z1) && !empty ($k1)), 'GIP' => !empty ($z1)?sm ($z1):'', 'GIPAuthorID' => !empty ($k1)?sm ($k1):'', ]; $ss = bm (oq (), 'Comments',$ss); $ds = $ss['ID']; $r1 = [ 'id' => $ds, 'md5' => md5 ($name . $es . $l1), ]; @e3 (USER_DIR. 'last-comment.psa',serialize ($r1)); $t1 = md5 ($ss['ID'].$ss['Stamp'].'x'); l1 ('commenter_ph',$t1); $ay = jm ($note_id); $va = lq ('e2m_note', ['*note' => $ay]); $ba['comment-time'] = [$gn,wa ()]; $ba['commenter']=$name; $ba['commenter-email']=$es; $ba['comment-text']=$l1; $ba['note-title']=$ay['Title']; $ba['note-href']=$va; $ba['comment-href']=$va; $ba['comments-disable-href']=lq ('e2s_note_flag', [ '*note' => $ay, 'flag' => 'IsCommentable', 'value' => 0 ]); $ba['reply-href']=lq ( 'e2m_comment_reply', [ '*note' => $ay, 'comment-number' => $qa ] ); if (isset ($settings['author_email']) and @$settings['notifications']['new_comments']) { $ya = qn ( 'comment-new-to-author',$ba ); $na = e2l_get_string ( 'em--comment-new-to-author-subject', $ba ); $ma = $settings['author_email']; $fa = 'From: '. ln () ."\r\n". 'Reply-to: '. $name .' <'. $es .">"; zn ($ma,$na,$ya,$fa); } if (!$e1){ unset ($ba['commenter-email']); $fa = 'From: '. ln (); foreach (kb ($ay,$es) as $da){ $sa = $da['AuthorEmail']; $aa = md5 ($da['ID'].$da['Stamp'].'x'); $ba['unsubscribe-href']=lq ('e2m_unsubscribe', [ '*note' => $ay, 'unsubscribe-email' => $sa, 'unsubscribe-key' => $aa ] ); $ma = $sa; $ya = qn ('comment-new-to-public',$ba); $na = e2l_get_string ( 'em--comment-new-to-public-subject', $ba ); zn ($ma,$na,$ya,$fa); } } } else { $j1 = [ 'ID' => $ds, 'Text' => $l1, 'IsVisible' => 1, 'IsSubscriber' => ((int)$x1), 'LastModified' => time (), ]; if (!empty ($name))$j1['AuthorName']=$name; if (!empty ($es))$j1['AuthorEmail']=$es; ym (oq (), 'Comments',$j1); } return (int)$note_id; } define ('E2_UA_STRING','Aegea '. E2_RELEASE .' (v'. E2_VERSION . (defined ('E2_EDITION')?'e':'') .')'); define ('E2_MINIMUM_PHP','5.6'); define ('E2_MINIMUM_MYSQL','5.6'); define ('E2_MINIMUM_MARIADB','10.1'); define ('E2E_STRANGE_ERROR',10); define ('E2E_USER_ERROR',20); define ('E2E_PERMISSIONS_ERROR',30); define ('E2E_MESSAGE',100); define ('E2E_DIAGNOSTICS_MESSAGE',110); define ('DEFAULT_TEMPLATE','acute'); define ('DEFAULT_FORMATTER','neasden'); define ('E2_NEW_FILES_RIGHTS',0777); define ('E2_JSON_STYLE',JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); define ('DEFAULT_ITEMS_PER_PAGE',10); define ('MAX_ITEMS_PER_PAGE',100); define ('SYSTEM_DIR','system/'); define ('SYSTEM_DEFAULTS_DIR','system/default/'); define ('SYSTEM_THEME_DIR','system/theme/'); define ('LANGUAGES_DIRNAME','languages/'); define ('LIBRARY_DIRNAME','library/'); define ('THEMES_DIRNAME','themes/'); define ('EXTRAS_DIRNAME','extras/'); define ('SCRIPTS_SUBDIR','js/'); define ('LOGS_DIRNAME','logs/'); define ('CACHES_DIRNAME','caches/'); define ('BACKUP_DIRNAME','backup/'); define ('MAIN_LOG_FILENAME','main.log'); define ('PICTURES_DIRNAME','pictures/'); define ('THUMBNAILS_DIRNAME','pictures/thumbs/'); define ('AVATARS_DIRNAME','pictures/avatars/'); define ('USERPIC_DIRNAME','pictures/userpic/'); define ('VIDEO_DIRNAME','video/'); define ('AUDIO_DIRNAME','audio/'); define ('LICENSE_FILENAME','license.psa'); define ('THUMB_WIDTH',180); define ('THUMB_HEIGHT',120); define ('THUMB_JPG_QUALITY',50); define ('SCALED_IMAGE_JPG_QUALITY',80); define ('USERPIC_WIDTH',80); define ('USERPIC_HEIGHT',80); define ('USERPIC_JPG_QUALITY',80); define ('VIDEO_ICON_FILENAME','images/video.svg'); define ('AUDIO_ICON_FILENAME','images/audio.svg'); define ('VIDEO_ICON_WIDTH',180); define ('VIDEO_ICON_HEIGHT',120); define ('AUDIO_ICON_WIDTH',120); define ('AUDIO_ICON_HEIGHT',120); define ('ALIAS_MAX_LENGTH',64); define ('CACHE_ALIASMAP',CACHE and true); define ('CACHE_NOTES',CACHE and true); define ('CACHE_NOTES_RELATED',CACHE and true); define ('CACHE_NOTES_COMMENTS',CACHE and true); define ('CACHE_POPULAR',CACHE and true); define ('CACHE_POPULAR_WITH_TAG',CACHE and true); define ('CACHE_RANDOM_NOTE',CACHE and true); define ('CACHE_TAGS',CACHE and true); define ('CACHE_FAVTAGS',CACHE and true); define ('CACHE_NOTES_COUNTS',CACHE and true); define ('CACHE_EDGE_TIMEINFO',CACHE and true); define ('CACHE_FRONTPAGE',CACHE and true); define ('CACHE_FRONTPAGE_FEED',CACHE and true); define ('CACHE_TAG',CACHE and true); define ('CACHE_FULLLIST',CACHE and true); define ('CACHE_DRAFTS',CACHE and true); define ('CACHE_DRAFTS_ALIAS_USE_COUNTS',CACHE and true); define ('CACHE_LASTMODIFIEDS',CACHE and true); define ('CACHE_INDEXED_FLAG',CACHE and true); define ('CACHE_FILENAME_ALIASMAP',CACHES_DIRNAME . 'aliasmap.psa'); define ('CACHE_FILENAMES_NOTES',CACHES_DIRNAME . 'note-*.psa'); define ('CACHE_FILENAMES_NOTES_RELATED',CACHES_DIRNAME . 'note-*-related.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS',CACHES_DIRNAME . 'note-*-comments.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR',CACHES_DIRNAME . 'note-*-comments-author.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COUNTS',CACHES_DIRNAME . 'notes-count-*.txt'); define ('CACHE_FILENAMES_EDGE_TIMEINFO',CACHES_DIRNAME . '*.e2time.psa'); define ('CACHE_FILENAME_POPULAR',CACHES_DIRNAME . 'popular.ctree.psa'); define ('CACHE_FILENAME_POPULAR_EXPIRES',CACHES_DIRNAME . 'popular-expires.txt'); define ('CACHE_FILENAME_RANDOM_NOTE',CACHES_DIRNAME . 'random-note.psa'); define ('CACHE_FILENAMES_POPULAR_WITH_TAG',CACHES_DIRNAME . 'popular-*.ctree.psa'); define ('CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES',CACHES_DIRNAME . 'popular-*-expires.txt'); define ('CACHE_FILENAME_TAGS',CACHES_DIRNAME . 'tags.ctree.psa'); define ('CACHE_FILENAME_TAGS_FULL',CACHES_DIRNAME . 'tags-full.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR',CACHES_DIRNAME . 'tags-author.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR_FULL',CACHES_DIRNAME . 'tags-author-full.ctree.psa'); define ('CACHE_FILENAME_FAVTAGS',CACHES_DIRNAME . 'favtags.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE',CACHES_DIRNAME . 'frontpage.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_AUTHOR',CACHES_DIRNAME . 'frontpage-author.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_FEED',CACHES_DIRNAME . 'frontpage-feed.psa'); define ('CACHE_FILENAMES_TAG',CACHES_DIRNAME . 'tag-*.ctree.psa'); define ('CACHE_FILENAMES_TAG_AUTHOR',CACHES_DIRNAME . 'tag-*-author.ctree.psa'); define ('CACHE_FILENAME_FULLLIST',CACHES_DIRNAME . 'notes-list.ctree.psa'); define ('CACHE_FILENAME_DRAFTS',CACHES_DIRNAME . 'drafts.psa'); define ('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS',CACHES_DIRNAME . 'drafts-auc.psa'); define ('CACHE_FILENAME_LASTMODIFIEDS',CACHES_DIRNAME . 'last-modifieds-by-id.psa'); define ('CACHE_FILENAME_INDEXED_FLAG',CACHES_DIRNAME . 'indexed.flag'); define ('FP_NO_ID_OR_NEW', -1); define ('FP_INSERT_ERROR', -10); define ('FP_UPDATE_ERROR', -11); define ('FP_EMPTY_FIELD', -20); define ('FP_TITLE_OR_TEXT_EMPTY', -21); define ('FP_NOT_COMMENTABLE', -30); define ('FP_COMMENT_DOUBLE_POST', -101); define ('FP_COMMENT_TOO_LONG', -102); define ('FP_COMMENT_SPAM_SUSPECT', -103); define ('NOTE_COMMENTABLE_NOW', -1); define ('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define ('SECONDS_IN_A_MINUTE',60); define ('SECONDS_IN_AN_HOUR',3600); define ('SECONDS_IN_A_DAY',86400); define ('SECONDS_IN_A_WEEK',604800); define ('SECONDS_IN_A_MONTH',2592000); define ('SECONDS_IN_A_YEAR',31536000); function e2m_drafts ($parameters){ global$_strings,$_config; $draftsView = new AePageableNotesView ('e2m_drafts',$parameters); $draftsView -> setPortionSize ((int)$_config['drafts_per_page']); $draftsView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $draftsView -> setWantPaging (true); $draftsView -> setUseLocalHrefs (true); if($draftsView -> isFirstPage () and CACHE_DRAFTS){ $draftsView -> setCacheFilename (USER_DIR . CACHE_FILENAME_DRAFTS); } $draftsView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `LastModified` DESC" ); $h1 = $draftsView -> getNotesCTree (); if(count ($h1)) { if(Log::$a)__log ('Thumbnails {'); foreach ($h1 as $s3 => $a3){ $h1[$s3]['thumbs']=z2 (@$a3['format-info']['resources-detected']); } if(Log::$a)__log ('}'); } $ms = $_strings['pt--drafts']; if($parameters['page']>1){ $ms .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $cb = [ 'title' => $ms, 'heading' => $_strings['pt--drafts'], 'notes' => $h1, 'pages' => $draftsView -> getPagesCTree (), ]; if(count ($h1) >= 5){ $cb['secret-link-promo']=e2l_get_string ( 'pm--secret-link', ['url' => $_config['paid_features_url']] ); } if($draftsView -> isFirstPageOfEmptyView ()) { $cb['nothing']=$_strings['gs--no-drafts']; } elseif (!$draftsView -> isExistingPage ()) { return e2m_error404 (); } return $cb; } function tb ($g1){ global$_config; if(Log::$a)__log ('Drafts: find duplicate OriginalAliases...'); if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $w1 = @unserialize (file_get_contents (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if(CACHE_DRAFTS_ALIAS_USE_COUNTS and @is_array ($w1)) { if(Log::$a)__log ('Drafts: retrieve cached'); } else { if(Log::$a)__log ('Drafts: assemle cacheable...'); $w1 = array (); mm ( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `ID`", 'get original aliases of drafts to calculate use counts' ); $x3 = dm (); $xn = array (); foreach ($x3 as $s3 => $ay){ @$w1[$ay['OriginalAlias']] ++; } if(CACHE_DRAFTS_ALIAS_USE_COUNTS){ e3 (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS,serialize ($w1)); } } return $w1[$g1]; } function jb () { global$_strings; $u1 = 'https://'. $_strings['e2--website-host'] .'/'; $i1 = '('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; return [ 'built?' => BUILT, 'installed?' => (cn () !== null), 'version' => 'v'. E2_VERSION, 'version-description' => $_strings['e2--vname-aegea'] .' '. $i1, 'user-folder-name' => hq (), 'cookie-prefix' => q1 (), 'href' => $u1, 'about' => ( '<span title="E2 '.$i1 .'">'. $_strings['e2--powered-by'] .' '. '<a href="'. $u1 .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> '. '<span class="e2-svgi">'. if_ ('aegea') .'</span></a></span>' ), ]; } function hb ($o1,$type = E2E_STRANGE_ERROR){ global$errors,$_config; if (!isset ($errors))$errors = []; $p1 = (!cs ()+1 <= (int)$_config['show_call_stack']); if ($o1){ if ($o1[0]!='<')$o1 = '<p>' . $o1 .'</p>'; $cq = array ( 'description' => $o1, 'type' => $type, ); if($type == E2E_STRANGE_ERROR and $p1){ $cq['backtrace']=debug_backtrace (); } $errors[] = $cq; } return true; } function gb ($vq){ global$_strings; if(count ($vq)==0) return false; $bq = ''; $bq .= '<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $bq .= '<ul>'; foreach ($vq as $tv){ if ($tv == '.')$tv = ''; $bq .= '<li><tt>./'. $tv .'</tt></li>'; } $bq .= '</ul>'; return $bq; } function wb ($yq,$o1,$nq = false,$mq = false,$fq = []) { global$errors; if (!(error_reporting () & $yq) or ($yq & 8)) return; $nq = str_replace (__DIR__,'',$nq); hb ($nq .', line '. $mq .'<br />Error '. $yq .': '. $o1); $errors[count ($errors)-1]['phpcode']=$yq; } function ub ($dq,$sq,$m2,$pm){ if (!(error_reporting () & $dq)) return; throw new ErrorException($sq,0,$dq,$m2,$pm); } function ib () { global$errors,$_config; if (!isset ($errors))$errors = []; @session_start (); if(is_array (@$_SESSION['errors'])) { $e = array_merge (@$_SESSION['errors'],$errors); } else { $e = $errors; } $p1 = (!cs ()+1 <= (int)$_config['show_call_stack']); if (@$_config['store_backtrace'] and $p1 and $e != NULL){ @e3 ('backtrace.psa',serialize ($e)); } else { @unlink ('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset($_SESSION['errors']); $cb = array (); $aq = false; if(count ($e)>0){ foreach($e as $rb => $qq){ if ($qq['type']==E2E_STRANGE_ERROR){ $qq['class']='serious'; $aq = true; if ($p1){ $qq['backtrace']=pb ($qq['backtrace']); } } if ($qq['type']==E2E_MESSAGE){ $qq['class']='info'; } $e[$rb]=$qq; } $cb['each']=$e; if ( $aq and @$_config['store_backtrace'] and $p1 and is_file ('debug.php') ) { $cb['debug-link']='debug.php'; } } return $cb; } function ob () { $errors = ib (); foreach($errors['each'] as $lq){ echo '<p>'. $lq['description'] .'</p>'; } die; } function pb ($zq){ if (!is_array ($zq)) return 'No backtrace info'; $zq = array_reverse ($zq); $zq = array_splice ($zq,0,count ($zq)-1); $e = '<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($zq as $rb => $kq){ $xq = @$kq['args'] or $xq = array (); $eq = array (); foreach ($xq as $rq){ $eq[] = var_export ($rq,true); } $m2 = @$kq['file']; $m2 = str_replace ($_SERVER['DOCUMENT_ROOT'],'',$m2); $pm = (@$kq['line']? (' #'. $kq['line']) : '?'); $e .= '<div style="margin: .25em 0 .5em '. $rb*3 .'em">'; $e .= '<span style="float: right; color: #666"> '. $m2 . $pm .'</span>'; $e .= '<tt><b>'. @$kq['function'] .' (</b>'; if(count ($eq)) { $tq = str_replace ("array (\n)",'array ()',$eq); $tq = implode (', ',$tq); if(0){ $tq = highlight_string ('<?'. $tq .'?'.'>',true); $tq = substr ($tq,77, -28); } $tq = str_replace ('&nbsp;',' ',$tq); $tq = nl2br ($tq); $e .= '<div style="margin: 0 0 0 1.12em">'. $tq .'</div>'; } $e .= '<b>)</b> &rarr;</tt></div>'; } $e .= '</p>'; return$e; } class AeException extends \Exception {} class AeMySQLException extends AeException {} class AeMySQLNotFoundException extends AeMySQLException {} class AeMySQLTooOldException extends AeMySQLException {} class AeMySQLCannotConnectException extends AeMySQLException {} class AeMySQLAccessDeniedException extends AeMySQLCannotConnectException {} class AeMySQLQueryException extends AeMySQLException {} class AeMySQLNoDataException extends AeMySQLException {} class AeMySQLNotMigrateableException extends AeMySQLException {} class AeMySQLCorruptedUpdateRecordCallException extends AeMySQLException {} class AeRecordNotFoundException extends AeException {} class AeInstallException extends AeException {} class AeInstallAlreadyInstalledException extends AeInstallException {} class AeInstallDatabaseOccupiedException extends AeInstallException {} class AeBackupFailedException extends AeException {} class AeWritePermissionsException extends AeException {} class AeNotSavedException extends AeWritePermissionsException {} class AeTokenException extends AeException {} class AeOlbaException extends AeException {} class AeOlbaTemplateMissingException extends AeOlbaException {} class AeStubException extends AeException {} class AeFormException extends AeException {} class AeFormInconsistentException extends AeFormException {} class AeFormIncompleteException extends AeFormException { public $note_id = ''; function __construct ($note_id){ $this->note_id = $note_id; parent::__construct (); } } class AeFormCommentUnacceptableException extends AeFormException { public $comment_text = ''; function __construct ($comment_text){ $this->comment_text = $comment_text; parent::__construct (); } } class AeFormDuplicateCommentException extends AeFormCommentUnacceptableException {} class AeFormCommentTooLongException extends AeFormCommentUnacceptableException {} class AeFormNoteNotCommentableException extends AeFormCommentUnacceptableException {} class AeFormCommentIsSpamSuspectException extends AeFormCommentUnacceptableException {} function c3 ($jq,$hq = false){ $gq = substr (__DIR__,0,strrpos (__DIR__,'/')); $wq = ''; $uq = []; foreach(array_reverse ($jq -> getTrace ()) as $iq){ $oq['where']=str_replace ( $gq .'/','',$iq['file'] ) .':'. $iq['line']; $pq = []; foreach ($iq['args'] as $cl){ $pq[] = htmlspecialchars ( str_replace ("\n","\n  ",var_export ($cl,true)), ENT_NOQUOTES,'UTF-8' ); } $vl = ''; if(count ($pq)) { $vl = ("\n". '  '. implode (",\n  ",$pq). "\n" ); } $oq['call']=$iq['function'] .' ('. $vl .')'; $uq[] = $oq; } do { if ((string)$jq -> getMessage () !== ''){ $wq .= $jq -> getMessage () ."\n"; } $wq .= "\n";; $wq .= ( get_class ($jq) .' in '. str_replace ( $gq .'/','',$jq -> getFile () ) .':'. $jq -> getLine (). "\n" ); if ($jq -> getCode ()) { $wq .= 'Code: '. $jq -> getCode () ."\n"; } $bl = ''; $rb = 1; foreach ($uq as $pm){ $bl .= $rb++ .'. '. $pm['where'] .' '. $pm['call']. "\n"; if (!$hq)$bl .= "\n";; } $wq .= "\n";; } while ($jq = $jq -> getPrevious ()); if ($hq){ $bl = preg_replace ('/^.*?$/smu','│            $0',$bl); $wq .= '┌─'. "\n"; $wq .= $bl; $wq .= '└─'; } else { $wq .= $bl; } return $wq; } function v3 ($jq,$sq = ''){ global$_config; if($_config['dev_verbose'] > (int) !cs ()) { hb ('<pre>'. c3 ($jq) .'</pre>'); } if($_config['log_errors']) { Log::$a = true; if(Log::$a)dn ('error-$'); } if(Log::$a)__log ('Exception caught: '. c3 ($jq,true)); if(Log::$a)dn (''); if ((string)$sq !== ''){ if(Log::$a)__log ($sq); } } function b3 ($jq){ global$_config,$content; $content['title']=':-('; $content['exception-message']=$jq -> getMessage (); $yl['error']['message']=':-('; if (($_config['dev_verbose'] > (int) !cs ())) { $content['exception-string']=c3 ($jq); $yl['error']['message']=nl2br (c3 ($jq)); } if($_config['log_errors']) { Log::$a = true; if(Log::$a)dn ('error-$'); } if(Log::$a)__log ('Panic: '. c3 ($jq,true)); if(Log::$a)__log (':-('); if(array_key_exists ('result',$_POST) and ($_POST['result']=='ajaxresult')) { $cb = json_encode ($yl); } else { $cb = rf ('panic',true); } echo $cb; die; } function y3 ($jq){ b3 ($jq); } function e2m_most_commented ($parameters = []) { global$settings,$_strings,$_config; $tn = cs (); $mostCommentedView = new AePageableNotesView ('e2m_most_commented',$parameters); $mostCommentedView -> setPortionSize ($settings['appearance']['notes_per_page']); $mostCommentedView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $mostCommentedView -> setWantNewCommentsCount ($tn); $mostCommentedView -> setWantReadHrefs ($_config['count_reads']); $mostCommentedView -> setWantControls ($tn and !@$_config['read_only']); $mostCommentedView -> setWantHiddenTags ($tn); AeMainMenuManager :: $isMostCommentedCurrent = $mostCommentedView->isFirstPage (); AeMainMenuManager :: $isMostCommentedParent = !$mostCommentedView->isFirstPage (); $nl = $_config['hot_period']; $ml = time () - n3 ($_config['hot_period']); $mostCommentedView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". nf ($tn). "AND `ID` IN ( ". "SELECT `NoteID` FROM ( ". "SELECT `NoteID`, COUNT(*) `CommentsCount` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND `Stamp` > ". $ml . " ". "GROUP BY `NoteID` ". "ORDER BY `CommentsCount` DESC ". ") As MostCommentedNotesIDs ". ")" ); $cb = [ 'title' => e2l_get_string ('pt--most-commented', ['period' => $nl]), 'heading' => e2l_get_string ('pt--most-commented', ['period' => $nl]), 'notes' => $mostCommentedView -> getNotesCTree (), 'pages' => $mostCommentedView -> getPagesCTree (), ]; if($mostCommentedView -> isFirstPageOfEmptyView ()) { $cb['nothing']=$_strings['gs--no-such-notes']; } elseif (!$mostCommentedView -> isExistingPage ()) { return e2m_error404 (); } return $cb; } function e2m_favourites ($parameters = []) { global$settings,$_config,$_strings; $tn = cs (); $favouritesView = new AePageableNotesView ('e2m_favourites',$parameters); $favouritesView -> setPortionSize ($settings['appearance']['notes_per_page']); $favouritesView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $favouritesView -> setWantPaging (true); $favouritesView -> setWantNewCommentsCount ($tn); $favouritesView -> setWantReadHrefs ($_config['count_reads']); $favouritesView -> setWantControls ($tn and !@$_config['read_only']); $favouritesView -> setWantHiddenTags ($tn); AeMainMenuManager :: $isFavouritesCurrent = $favouritesView->isFirstPage (); AeMainMenuManager :: $isFavouritesParent = !$favouritesView->isFirstPage (); $favouritesView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `IsFavourite`=1 ". nf ($tn). "ORDER BY `Stamp` DESC" ); $ms = $_strings['pt--favourites']; if($parameters['page']>1){ $ms .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $cb = [ 'title' => $ms, 'heading' => $_strings['pt--favourites'], 'notes' => $favouritesView -> getNotesCTree (), 'pages' => $favouritesView -> getPagesCTree (), ]; if($favouritesView -> isFirstPageOfEmptyView ()) { $cb['nothing']=$_strings['gs--no-favourites']; } elseif (!$favouritesView -> isExistingPage ()) { return e2m_error404 (); } return $cb; } function n3 ($nl){ if ('year' == $nl) return SECONDS_IN_A_YEAR; elseif ('month' == $nl) return SECONDS_IN_A_MONTH; elseif ('week' == $nl) return SECONDS_IN_A_DAY * 7; elseif ('day' == $nl) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function e2m_json ($parameters = array ()) { list ($fl,$gn)=q3 (); $dl = json_encode ($fl,E2_JSON_STYLE); x3 ($dl,$gn,'json'); } function e2m_rss ($parameters = array ()) { list ($fl,$gn)=q3 (); $sl = e2feeds__rss_using_jsonfeed_array_($fl); x3 ($sl,$gn,'rss'); } function e2m_tag_json ($parameters = array ()) { if(array_key_exists ('*tag',$parameters)) { $tb = $parameters['*tag']; } else { return e2m_error404 (); } list ($fl,$gn)=l3 ($tb); $dl = json_encode ($fl,E2_JSON_STYLE); x3 ($dl,$gn,'json'); } function e2m_tag_rss ($parameters = array ()) { if(array_key_exists ('*tag',$parameters)) { $tb = $parameters['*tag']; } else { return e2m_error404 (); } list ($fl,$gn)=l3 ($tb); $sl = e2feeds__rss_using_jsonfeed_array_($fl); x3 ($sl,$gn,'rss'); } function e2m_note_json ($parameters = array ()) { global$settings,$_current_url; $ay = $parameters['*note']; if ($ay == false) return e2m_error404 (); $tn = cs (); if (!( yf ($ay)==='public' or ($tn and $ay['IsPublished']) )) return e2m_error404 (); $gn = $ay['Stamp']; $al = e2_jsonfeed_item_array_from_noterec_($ay); $ql = array ($al); $fl = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($ql); $fl['title']=ev (); $fl['_rss_description']=a3 (); $fl['home_page_url']=lq ('e2m_frontpage', array ('page' => 1)); $fl['feed_url']=$_current_url; x3 (json_encode ($fl,E2_JSON_STYLE),$gn,'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($ql){ global$_lang,$_config,$settings; $cb = [ 'version' => 'https://jsonfeed.org/version/1', 'title' => null, '_rss_description' => null, '_rss_language' => $_lang, '_itunes_email' => '', '_itunes_categories_xml' => '', '_itunes_image' => '', '_itunes_explicit' => '', 'home_page_url' => null, 'feed_url' => null, 'icon' => tv (), 'author' => array ( 'name' => rv (), 'url' => lq ('e2m_frontpage', array ('page' => 1)), 'avatar' => tv (), ), 'items' => $ql, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ]; return $cb; } function e2_jsonfeed_item_array_from_noterec_($ay){ $url = lq ('e2m_note', array ('*note' => $ay)); $ll = ( c1 ('Y-m-d\TH:i:s',$ay['Stamp']) . f1 ($ay['Stamp'],':') ); $zl = ( c1 ('Y-m-d\TH:i:s',$ay['LastModified']) . f1 ($ay['LastModified'],':') ); $kl = ( c1 ('D, d M Y H:i:s ',$ay['Stamp']) . f1 ($ay['Stamp']) ); $sd = ay ($ay['FormatterID'], @$ay['Text'],'full-rss'); $noteView = new AeNoteView ($ay); $j3 = $noteView -> getNoteCTree (); $v3 = $j3['og-images']; $v = array ( 'id' => (string)$ay['ID'], 'url' => $url, 'title' => dy ($ay['Title']), 'content_html' => $sd['text-final'], 'date_published' => $ll, 'date_modified' => $zl, ); if ($ay['IsExternal']) { $el = py ($ay); $v['url']=$el['href-external']; $v['author'] = array ( 'name' => $el['author'], 'url' => $el['author-href'], 'avatar' => $el['userpic-href'], ); } if(count ($v3)>0){ $v['image']=$v3[0]; } $v['_date_published_rfc2822']=$kl; $v['_rss_guid_is_permalink']='false'; $v['_rss_guid'] = (string)$ay['ID']; $v['_e2_data'] = array ( 'is_favourite' => (bool)$ay['IsFavourite'], 'links_required' => $sd['meta']['links-required'], 'og_images' => $v3, ); return $v; } function d3 ($rl,$ms,$n1){ global$_newsfeeds; if (!isset ($_newsfeeds))$_newsfeeds = []; $tl = ''; if ($rl == 'rss')$tl = 'application/rss+xml'; if ($rl == 'json')$tl = 'application/json'; $_newsfeeds[] = [ 'type' => $tl, 'title' => htmlspecialchars ($ms,ENT_NOQUOTES,'UTF-8'), 'href' => $n1 ]; } function s3 () { global$_config; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". nf (). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get recent public noterecs for RSS or JSONFeed' ); return dm (); } function a3 () { global$settings; if (!empty ($settings['meta_description'])) { $jl = strip_tags (dy (htmlspecialchars ($settings['meta_description'],ENT_NOQUOTES,'UTF-8'))); } elseif (!empty ($settings['blog_subtitle'])) { $sd = qy ($settings['blog_subtitle'],'full'); $jl = $sd['text-final']; $jl = bf ($jl); } else { $jl = ev (); } return $jl; } function q3 () { global$settings,$_current_url; $gn = 0; $ql = array (); $fl = array (); $wf = USER_DIR . CACHE_FILENAME_FRONTPAGE_FEED; if(CACHE_FRONTPAGE_FEED and is_file ($wf)) { if(Log::$a)__log ('Feed array (RSS, JSON): cached'); $fl = @unserialize (file_get_contents ($wf)); $gn = filemtime ($wf); } else { if(Log::$a)__log ('Feed array (RSS, JSON): not cached, will need to build'); $yf = s3 (); foreach ($yf as $ay){ $ql[] = e2_jsonfeed_item_array_from_noterec_($ay); $gn = max ($gn,$ay['Stamp']); } $fl = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($ql); $fl['title']=ev (); $fl['_rss_description']=a3 (); $fl['home_page_url']=lq ('e2m_frontpage', array ('page' => 1)); $fl['feed_url']=$_current_url; if(CACHE_FRONTPAGE_FEED)e3 ($wf,serialize ($fl)); } return array ($fl,$gn); } function l3 ($tb){ global$_config,$_strings,$_current_url; $gn = 0; $ql = array (); mm ( "SELECT n.* ". "FROM `". $_config['db_table_prefix']."Notes` n ". "INNER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (nk.`KeywordID` = ". $tb['ID'] .") ". "AND n.`IsPublished` = 1 ". nf (cs ()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get tag noterecs for RSS or JSONFeed' ); $yf = dm (); foreach ($yf as $ay){ $ql[] = e2_jsonfeed_item_array_from_noterec_($ay); $gn = max ($gn,$ay['Stamp']); } if ((string)$tb['Summary']!==''){ $jl = strip_tags (dy (htmlspecialchars ($tb['Summary'],ENT_NOQUOTES,'UTF-8'))); } else if ((string)$tb['Description']!==''){ $sd = qy ($tb['Description'],'full'); $jl = $sd['text-final']; $jl = bf ($jl); } else { $jl = a3 (); } $hl = htmlspecialchars ($tb['PageTitle'],ENT_COMPAT,'UTF-8'); if ((string)$hl !== ''){ $ms = $hl; } else { $ms = ( ev () .': '. $_strings['gs--posts-tagged'] .' '. htmlspecialchars ($tb['Keyword'],ENT_COMPAT,'UTF-8') ); } $fl = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($ql); $fl['title']=$ms; $fl['_rss_description']=$jl; $fl['home_page_url']=lq ('e2m_tag', array ('*tag' => $tb)); $fl['feed_url']=$_current_url; return array ($fl,$gn); } function e2feeds__rss_using_jsonfeed_array_($content){ $gl = USER_DIR . 'rss/rss.tmpl.php'; if (!is_file ($gl)) { $gl = SYSTEM_DEFAULTS_DIR . 'rss/rss.tmpl.php'; } if(is_file ($gl)) { ob_start (); include $gl; $sl = ob_get_contents (); ob_end_clean (); } return $sl; } function k3 ($sl){ $sl = str_replace ("\x0",'',$sl); for ($rb = 0; $rb < strlen ($sl); ++$rb){ if(ord ($sl[$rb]) < 32 and !in_array (ord ($sl[$rb]), array (10,13))) { $sl[$rb]=''; } } return $sl; } function x3 ($wl,$gn,$rl){ global$_config; $ul = gmdate ('r',$gn); $il = md5 ($gn); if ($rl == 'rss'){ if (@$_config['dev_xml_as_text']) { header ('Content-Type: text/plain'); } else { header ('Content-Type: application/xml; charset=utf-8'); } } elseif ($rl == 'json'){ header ('Content-Type: application/json'); } else { header ('Content-Type: text/plain'); } header ('Last-modified: '. $ul); header ('Etag: '. $il); header ('Cache-Control: public'); header ('Expires: '. date ('r',$gn + SECONDS_IN_A_DAY)); $ol = isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes ($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $pl = isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes ($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$ol && !$pl or $pl && $pl != $il or $ol && $ol != $ul ) { if ($rl == 'rss'){ $wl = k3 ($wl); } ini_set ('zlib.output_compression',0); echo $wl; ini_set ('zlib.output_compression',1); } else { header ('HTTP/1.1 304 Not Modified'); } die; } define ('CROP_NONE',0); define ('CROP_SQUARE',1); function e3 ($m2,$c4){ @cq (dirname ($m2)); if (!@file_put_contents ($m2,$c4,LOCK_EX)) { return false; } @chmod ($m2,E2_NEW_FILES_RIGHTS); return true; } function e2s_retrieve ($parameters){ $url = base64_decode (strtr ($parameters['url'],'-_','+/')); if(Log::$a)__log ('Retrieve: '. $url); r2 ($url,PROVIDE_MEDIA_NOW); die; } function r3 ( $hy,$v4,$ib ){ $b4 = []; if(is_array ($ib)) { $b4 = s2 ($ib); } $y4 = @unserialize ( $v4['Uploads'] ) or $y4 = []; $n4 = array_diff ($b4,$y4); if(count ($n4)>0){ u3 ($hy,$v4['ID'],'add',$n4); } return $n4; } function t3 ($m4){ $rv = []; foreach (l2 ($m4) as $f4){ $rv[] = $f4['src']; } return $rv; } function j3 ($name,$d4){ global$_config; $name = k1 ($name); if(preg_match('//u',$name))$name = cl ($name,false); if ($d4 == 'image'){ $w = $_config['path_media'].PICTURES_DIRNAME; } elseif ($d4 == 'video'){ $w = $_config['path_media'].VIDEO_DIRNAME; } elseif ($d4 == 'audio'){ $w = $_config['path_media'].AUDIO_DIRNAME; } else { return false; } $s4 = ''; for ($rb = 0; $rb < strlen ($name); $rb++) { if($name[$rb]=='?'){ $s4 .= ''; } elseif($name[$rb]==' '){ $s4 .= '-'; } elseif(ord ($name[$rb]) <= 127){ $s4 .= $name[$rb]; } } if ($s4 == '')$s4 = $d4; if ($s4[0]=='.')$s4 = $d4 . $s4; return $s4; } function h3 ($a4){ global$_config; if(Log::$a)__log ('Count references for upload <'. $a4 .'>'); if(is_file (USER_DIR . 'new-uploads.psa')) { $q4 = @unserialize (file_get_contents (USER_DIR . 'new-uploads.psa')); } $l4 = '%'. str_replace ('%','#%',$a4) .'%'; mm ( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Text` LIKE '". $l4 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $l4 ."' ESCAPE '#')", 'get notes where uploads may be referenced' ); $x3 = dm (); $z4 = @unserialize ($x3[0]['Uploads']); if (!is_array ($z4)) { foreach ($x3 as $ay){ $sd = ay ( $ay['FormatterID'], @$ay['Text'],'full-rss' ); $z4 = r3 ( 'note',$ay, $sd['meta']['resources-detected'] ); } } mm ( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Description` LIKE '". $l4 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $l4 ."' ESCAPE '#')", 'get tags where uploads may be referenced' ); $x3 = dm (); $k4 = @unserialize ($x3[0]['Uploads']); if (!is_array ($k4)) { foreach ($x3 as $tb){ $sd = qy ( @$tb['Description'],'full-rss' ); $k4 = r3 ( 'tag',$tb, $sd['meta']['resources-detected'] ); } } if (!is_array ($q4))$q4 = []; if (!is_array ($z4))$z4 = []; if (!is_array ($k4))$k4 = []; $x4 = array_merge ($q4,$z4,$k4); if(Log::$a)__log ('References found in relevant entries: '. var_export ($x4,true)); if(in_array ($a4,$x4)) { if(Log::$a)__log ('Still referenced, do not delete file'); return true; } return false; } function g3 ($e4,$zy){ global$_config; if ($e4 == 'note' and $zy == 'new'){ if(is_file (USER_DIR . 'new-uploads.psa')) { $x4 = @unserialize (file_get_contents (USER_DIR . 'new-uploads.psa')); } } elseif ($e4 == 'note'){ mm ( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $zy ); $x3 = dm (); $x4 = @unserialize ($x3[0]['Uploads']); } elseif ($e4 == 'tag'){ mm ( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $zy ); $x3 = dm (); $x4 = @unserialize ($x3[0]['Uploads']); } if (!is_array ($x4))$x4 = []; return $x4; } function w3 ($e4,$zy,$x4){ global$_config; if ($e4 == 'note' and $zy == 'new'){ if (!@e3 (USER_DIR . 'new-uploads.psa',serialize ($x4))) { hb ('ERROR',E2E_PERMISSIONS_ERROR); } } elseif ($e4 == 'note'){ mm ( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `Uploads`='". serialize ($x4) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $zy ); } elseif ($e4 == 'tag'){ mm ( "UPDATE `". $_config['db_table_prefix']."Keywords` ". "SET `Uploads`='". serialize ($x4) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $zy ); } else { return false; } if (!is_array ($x4))$x4 = []; return $x4; } function u3 ($e4,$zy,$action,$r4){ $x4 = []; if(Log::$a)__log ('Register upload: <'. $e4.', '. $zy.', '. $action.', '. $r4 .'>'); $x4 = g3 ($e4,$zy); $x4 = e1 ($x4,$action,$r4); w3 ($e4,$zy,$x4); } function i3 ($pv,$t4,$ib){ $y4 = @unserialize ($t4['Uploads']) or $y4 = []; $j4 = s2 ($ib); $x4 = e1 ($y4,'add',$j4); $x4 = serialize ($x4); if ($x4 != $t4['Uploads']) { $t4['Uploads']=$x4; ym (oq (), $pv,$t4); } } function e2j_file_upload ($parameters = []) { global$_config,$_strings; @cq ($_config['path_media'].PICTURES_DIRNAME); @chmod ($_config['path_media'].PICTURES_DIRNAME,$_config['uploaded_files_mode']); @cq ($_config['path_media'].VIDEO_DIRNAME); @chmod ($_config['path_media'].VIDEO_DIRNAME,$_config['uploaded_files_mode']); @cq ($_config['path_media'].AUDIO_DIRNAME); @chmod ($_config['path_media'].AUDIO_DIRNAME,$_config['uploaded_files_mode']); $yl = [ 'success' => false ]; if(count ($_FILES)>0){ foreach($_FILES as $m2){ if (!$m2['error']) { if(Log::$a)__log ('Ajax file upload: <'. $m2['name'].'>'); $yl['data']['file-kind']='image'; $w = $_config['path_media'].PICTURES_DIRNAME; if (cd ($m2['name'])) { $yl['data']['file-kind']='video'; $w = $_config['path_media'].VIDEO_DIRNAME; } elseif (vd ($m2['name'])) { $yl['data']['file-kind']='audio'; $w = $_config['path_media'].AUDIO_DIRNAME; } $h4 = ( array_key_exists ('overwrite',$_GET) and is_file ($w . $m2['name']) ); $g4 = false; $yl['data']['overwrite'] = (int)$h4; if(Log::$a)__log ('Ajax file upload: Overwrite is resolved to <'. (int)$h4.'>'); $s4 = j3 ($m2['name'],$yl['data']['file-kind']); if(Log::$a)__log ('Ajax file upload: Safe name is <'. $s4.'>'); if(is_file ($w . $s4)) { if(file_get_contents ($w . $s4)==file_get_contents ($m2['tmp_name'])) { if(Log::$a)__log ('Ajax file upload: Existing file is the same'); $g4 = true; } elseif (!$h4){ $s4 = yd ($w,$s4); } } if (!$g4){ move_uploaded_file ($m2['tmp_name'],$w . $s4); @chmod ($w . $s4,$_config['uploaded_files_mode']); } if(Log::$a)__log ('Ajax file upload: File kind is <'. $yl['data']['file-kind'].'>'); if ($yl['data']['file-kind']=='image'){ $w4 = pathinfo ($s4,PATHINFO_EXTENSION); if (md ($w4,'jpg')) { $u4 = $s4; } else { $u4 = $s4 .'.jpg'; $u4 = yd ( $_config['path_media'].PICTURES_DIRNAME,$u4 ); } $i4 = $_config['path_media'].PICTURES_DIRNAME . $s4; $o4 = $_config['path_media'].PICTURES_DIRNAME . $u4; if(Log::$a)__log ('Ajax file upload: Process uploaded image <'. $i4 .'>'. ' to possibly <'. $o4.'>'); $o4 = e2img_filename_by_processing ( $i4, $o4, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); $p4 = $m2['size']; if (!md ($o4,$i4)) { @unlink ($i4); $s4 = $u4; $p4 = stat ($o4)['size']; } if ($h4){ @unlink (g2 ($s4)); } if ($cz = e2img_filename_by_processing ( $o4, g2 ($s4), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY )) { if(Log::$a)__log ('Ajax file upload: thumbnail, done as '. $cz); list ($vz,$bz)=e2_getimagesize ($cz); if(Log::$a)__log ('Ajax file upload: image size '. $vz .'×'. $bz); if (!$vz)$vz = THUMB_WIDTH/2; if (!$bz)$bz = THUMB_HEIGHT/2; list ($vz,$bz)=e2_fit_metrics_to_constraints ( [$vz,$bz], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $yl['success']=true; $yl['data']['new-name']=$s4; $yl['data']['filesize']=round ($p4 / 1024) .' '. $_strings['gs--kb']; $yl['data']['thumb']=o3 ($cz); $yl['data']['width']=$vz; $yl['data']['height']=$bz; u3 ($parameters['entity'],$parameters['entity-id'],'add', [$s4]); } else { if(Log::$a)__log ('Ajax file upload: couldn’t create thumbnail'); @unlink ($w . $s4); $yl['error']['message']=_S ('er--cannot-create-thumbnail'); } } if ($yl['data']['file-kind']=='video'){ if(Log::$a)__log ('Ajax file upload: video, done'); $yl['success']=true; $yl['data']['new-name']=$s4; $yl['data']['filesize']=round ($m2['size']/1024) .' '. $_strings['gs--kb']; $yl['data']['thumb']=SYSTEM_THEME_DIR . VIDEO_ICON_FILENAME; $yl['data']['width']=VIDEO_ICON_WIDTH/2; $yl['data']['height']=VIDEO_ICON_HEIGHT/2; u3 ($parameters['entity'],$parameters['entity-id'],'add', [$s4]); } if ($yl['data']['file-kind']=='audio'){ if(Log::$a)__log ('Ajax file upload: audio, done'); $yl['success']=true; $yl['data']['new-name']=$s4; $yl['data']['filesize']=round ($m2['size']/1024) .' '. $_strings['gs--kb']; $yl['data']['thumb']=SYSTEM_THEME_DIR . AUDIO_ICON_FILENAME; $yl['data']['width']=AUDIO_ICON_WIDTH/2; $yl['data']['height']=AUDIO_ICON_HEIGHT/2; u3 ($parameters['entity'],$parameters['entity-id'],'add', [$s4]); } } elseif(4 != $m2['error']) { $yl['error']['message'] = ( ny ($m2['error']) ); } } } else { if(Log::$a)__log ('Ajax file upload error: no files'); $yl['error']['message']='No files were received by server'; } $yl = json_encode ($yl); die ($yl); } function o3 ($yz){ global$_config; $nz = strlen ($_config['path_media']); if ($nz and substr ($yz,0,$nz)==$_config['path_media']) { return substr ($yz,$nz); } else { return AeEnv::$base_url . $yz; } } function p3 () { return [ 'userpic.original.png', 'userpic.original.jpg', 'userpic@2x.png', 'userpic@2x.jpg', 'userpic-large@2x.jpg', 'userpic-square@2x.jpg', ]; } function cy () { global$_config; foreach (p3 () as $hd){ @unlink ($_config['path_media'].USERPIC_DIRNAME . $hd); } } function e2j_userpic_remove () { if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_settings')); } cy (); $yl = json_encode (['success' => true]); die ($yl); } function e2j_userpic_upload () { global$_config,$_strings; $yl = ['success' => false]; if(count ($_FILES)!=1){ if(Log::$a)__log ('Ajax userpic upload error: no or too many files'); $yl['error']['message']=$_strings['er--cannot-upload-no-or-too-many-files']; $yl = json_encode ($yl); die ($yl); } $m2 = array_pop ($_FILES); if (!$m2['error']) { if(Log::$a)__log ('Ajax userpic upload: <'. $m2['name'].'>'); $mz = pathinfo ($m2['name']); $w4 = strtolower ($mz['extension']); if ($w4 != 'png')$w4 = 'jpg'; $wd = 'userpic.original.'. $w4; $gd = $_config['path_media'].USERPIC_DIRNAME; cy (); move_uploaded_file ($m2['tmp_name'],$gd . $wd); @chmod ($gd . $wd,$_config['uploaded_files_mode']); copy ( $gd . $wd, $gd .'userpic-large@2x.jpg' ); $fz = e2img_filename_by_processing ( $gd .'userpic-large@2x.jpg', $gd .'userpic-large@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_NONE, USERPIC_JPG_QUALITY ); copy ( $gd . $wd, $gd .'userpic-square@2x.jpg' ); $dz = e2img_filename_by_processing ( $gd .'userpic-square@2x.jpg', $gd .'userpic-square@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_SQUARE, USERPIC_JPG_QUALITY ); $sz = e2img_filename_by_processing ( $gd . $wd, $gd .'userpic@2x.jpg', [USERPIC_WIDTH,USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); if ($dz){ $az = str_replace (USER_DIR,USER_URLPATH,$dz); $yl = [ 'success' => true, 'data' => [ 'new-image-src' => $az, ] ]; } else { $yl['error']['message']=_S ('er--supported-only-png-jpg-gif'); } } elseif(4 != $m2['error']) { $yl['error']['message'] = ( ny ($m2['error']) ); } $yl = json_encode ($yl); die ($yl); } function e2j_file_remove ($parameters){ global$_config; if (!array_key_exists ('file',$_POST)) { $yl = [ 'success' => false ]; $yl = json_encode ($yl); die ($yl); } $m2 = $_POST['file']; $yl = [ 'success' => true ]; $yl = json_encode ($yl); u3 ($parameters['entity'],$parameters['entity-id'],'remove',$m2); if (!h3 ($m2)) { if (vd ($m2)) { if(Log::$a)__log ('Not referenced, deleting '. $_config['path_media'].AUDIO_DIRNAME . $m2); @unlink ($_config['path_media'].AUDIO_DIRNAME . $m2); } elseif (cd ($m2)) { if(Log::$a)__log ('Not referenced, deleting '. $_config['path_media'].VIDEO_DIRNAME . $m2); @unlink ($_config['path_media'].VIDEO_DIRNAME . $m2); } else { $sz = bd ($m2,'thumb@2x'); if(Log::$a)__log ('Not referenced, deleting '. $_config['path_media'].PICTURES_DIRNAME . $m2); @unlink ($_config['path_media'].PICTURES_DIRNAME . $m2); if(Log::$a)__log ('Not referenced, deleting '. $_config['path_media'].THUMBNAILS_DIRNAME . $m2); @unlink ($_config['path_media'].THUMBNAILS_DIRNAME . $sz); } } die ($yl); } function vy () { global$_config; if (!$_config['files_total_size_limit']) return false; $qz = 0; foreach(glob ($_config['path_media'].PICTURES_DIRNAME .'/*') as $m2){ $lz = stat ($m2); $qz += $lz['size']; } foreach(glob ($_config['path_media'].VIDEO_DIRNAME .'/*') as $m2){ $lz = stat ($m2); $qz += $lz['size']; } foreach(glob ($_config['path_media'].AUDIO_DIRNAME .'/*') as $m2){ $lz = stat ($m2); $qz += $lz['size']; } $zz = $_config['files_total_size_limit']; $kz = x1 ($qz,$zz); return [$qz,$zz,$kz]; } function by ($xz){ $ez = true; if (list ($qz,$zz,$kz)=$xz){ $ez = ($zz - $qz)>0; } return $ez; } function yy ($xz,$rz = false){ $tz = ''; if (list ($qz,$zz,$kz)=$xz){ $xz = [ 'used' => round ($qz / 1024 / 1024), 'total' => round ($zz / 1024 / 1024), 'percent' => $kz ]; if ($rz or ($zz - $qz)<1024 * 1024 * 10){ if ($qz < $zz){ $tz = e2l_get_string ('gs--used',$xz); } else { $tz = e2l_get_string ('gs--used-all',$xz); } } } return $tz; } function ny ($lq){ global$_strings; if ($lq == UPLOAD_ERR_INI_SIZE){ $sq = $_strings['er--cannot-upload-file-too-big']; } elseif ($lq == UPLOAD_ERR_FORM_SIZE){ $sq = $_strings['er--cannot-upload-file-too-big']; } else { $sq = e2l_get_string ('er--cannot-upload', ['error' => $lq]); } return $sq; } function dy ($l1){ include_once 'system/neasden/neasden.php'; $Nn = new Neasden; $Nn->profile_name = 'kavychki'; return$Nn->format ($l1); } function sy ($p7,$l1,$cx){ include_once 'system/neasden/neasden.php'; if ($l1 === '') return array (); if ($p7 == 'neasden'){ $Nn = new Neasden; $Nn->profile_name = $cx; $Nn->format ($l1); return$Nn->resources_detected; } else { return array (); } } function ay ($p7,$l1,$cx){ include_once 'system/neasden/neasden.php'; if(Log::$a)__log ('Format: format with formatter "'. $p7 .'" in context "'. $cx.'"'); $meta = []; if ($p7 == 'neasden'){ $Nn = new Neasden; $Nn->profile_name = $cx; $l1 = $Nn->format ($l1); $meta = [ 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ]; } return array ( 'text-final' => $l1, 'meta' => $meta, ); } function qy ($l1,$cx){ return ay (DEFAULT_FORMATTER,$l1,$cx); } function e2m_frontpage ($parameters = []) { global$settings,$_strings,$_config; if(Log::$a)__log ('Frontpage {'); $tn = cs (); $frontpageView = new AePageableNotesView ('e2m_frontpage',$parameters); $frontpageView -> setPortionSize ($settings['appearance']['notes_per_page']); $frontpageView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $frontpageView -> setWantPaging (true); $frontpageView -> setWantNewCommentsCount ($tn); $frontpageView -> setWantReadHrefs ($_config['count_reads']); $frontpageView -> setWantControls ($tn and !@$_config['read_only']); $frontpageView -> setWantHiddenTags ($tn); $frontpageView -> setWantRelatedNotes (true); if(CACHE_FRONTPAGE and $frontpageView -> isFirstPage ()) { if ($tn){ $frontpageView -> setCacheFilename (USER_DIR . CACHE_FILENAME_FRONTPAGE_AUTHOR); } else { $frontpageView -> setCacheFilename (USER_DIR . CACHE_FILENAME_FRONTPAGE); } } $frontpageView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". nf ($tn). "ORDER BY `Stamp` DESC" ); $ms = ev (); if($parameters['page']>1){ $ms .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $cb = [ 'title' => $ms, 'heading' => '', 'notes' => $frontpageView -> getNotesCTree (), 'pages' => $frontpageView -> getPagesCTree (), 'frontpage?' => $frontpageView -> isFirstPage (), ]; if ( !$frontpageView -> isExistingPage () and !$frontpageView -> isFirstPageOfEmptyView () ) { return e2m_error404 (); } if(Log::$a)__log ('} // Frontpage'); return $cb; } abstract class E2GIP { protected $gip_cookie_name = 'gip'; protected $gip_token_cookie_name = 'gip_access_token'; protected $gip_token = null; abstract public function get_auth_url(); abstract public static function get_profile_url($zy,$vx); abstract public function callback(); const PHP_VERSION_VK_FEATURE = 70100; public static function set_session_data($cn,$cv){ if(session_status()==PHP_SESSION_NONE){ session_start(); } $_SESSION[$cn]=$cv; } public static function get_session_data($cn,$bx = false){ if(session_status()==PHP_SESSION_NONE){ session_start(); } if(!isset($_SESSION[$cn])) { return null; } $cv = $_SESSION[$cn]; if($bx){ unset($_SESSION[$cn]); } return $cv; } public static function get_gips_order(){ return [ 'twitter' => 0, 'facebook' => 1, 'vk' => 2, 'telegram' => 3 ]; } public function get_config($cn){ $yx = 'gips/'. $this->type .'.json'; $dl = false; foreach ([USER_DIR,INSTANCE_DIR,SYSTEM_DIR] as $nx){ if(is_file ($nx . $yx)) { $dl = @file_get_contents ($nx . $yx); break; } } if ($dl !== false){ $cb = json_decode ($dl,true,512,JSON_BIGINT_AS_STRING)[$cn]; if ($cb) return $cb; } return null; } public function get_callback_url(){ return lq('e2m_gip_sign_in_callback', array('provider' => $this->type)); } protected function get_proxy_param(){ global$settings; $mx = DEFAULT_LANGUAGE; if(array_key_exists ('language',$settings))$mx = $settings['language']; return '?language=' . $mx . '&type=' . $this->type . '&callback_url=' . urlencode($this->get_callback_url()); } public function get_gip_session_data(){ global$_config; $fx = $this->gip_token ? $this->gip_token : $_COOKIE[q1($this->gip_token_cookie_name)]; mm ( "SELECT * FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '". $this->type ."' ". "AND `SessionToken` = '" . sm($fx)."' ". "ORDER BY `ID` DESC LIMIT 1", 'get GIP session data' ); $x3 = dm (); return $x3 ? $x3[0] : array(); } public function is_logged_in(){ if(empty($_COOKIE[q1($this->gip_cookie_name)]) || !in_array($_COOKIE[q1($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[q1($this->gip_cookie_name)] != $this->type || empty($_COOKIE[q1($this->gip_token_cookie_name)])) { return false; } $lb = $this->get_gip_session_data(); return (bool)$lb; } protected function save_session($zy,$name,$accessToken,$dx = '',$userEmail = '',$userLink = ''){ $bf = time(); bm ( oq (), 'GIPsSessions', [ 'GIP' => $this->type, 'GIPAuthorID' => $zy, 'AuthorName' => $name, 'AuthorEmail' => $userEmail, 'AuthorProfileLink' => $userLink, 'SessionToken' => $accessToken, 'Stamp' => $bf, ], 'INSERT', 'ON DUPLICATE KEY UPDATE '. '`SessionToken` = "' . sm($accessToken).'", '. '`AuthorName` = "' . sm($name).'", '. '`Stamp` = "' . $bf . '"' ); l1($this->gip_cookie_name,$this->type); l1($this->gip_token_cookie_name,$accessToken); if(isset($userEmail) && !empty($userEmail))l1('commenter_email',$userEmail); $this->gip_token = $accessToken; } public static function get_logout_key(){ if ($sx = self::get_session_data('logout_key')) { return $sx; } $sx = md5(microtime()); self::set_session_data('logout_key',$sx); return $sx; } public static function is_valid_logout_key($cn){ $ax = self::get_session_data('logout_key',true); if (empty($ax) || empty($cn) || $ax != $cn){ return false; } return true; } public function logout(){ global$_config; l1($this->gip_cookie_name); l1($this->gip_token_cookie_name); mm ( "DELETE FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '" . $this->type . "' ". "AND `SessionToken` = '" . sm($_COOKIE[q1($this->gip_token_cookie_name)]) . "'", 'logout' ); } public function get_avatar_width(){ return USERPIC_WIDTH; } public function get_avatar_height(){ return USERPIC_HEIGHT; } public function save_avatar($zy,$qx){ global$_config; if (!preg_match ('/^https?\:\/\//i',$qx)) return; $qx = str_replace ("\0",'',$qx); $zy = preg_replace ('/[^a-zA-Z0-9._-]/','',$zy); $zy = substr ($zy,0,64); @cq ($_config['path_media'].AVATARS_DIRNAME); @chmod ($_config['path_media'].AVATARS_DIRNAME,$_config['uploaded_files_mode']); $wd = $_config['path_media'].AVATARS_DIRNAME . $this->type .'-'. $zy .'.jpg'; if ($lx = file_get_contents ($qx)) { file_put_contents ($wd,$lx); } return $wd; } } function e2m_gip_sign_in($lb){ global$_config,$settings; $type = $lb['provider']; $zx = e2_get_gip_instance($type); if (!$zx)a1 (); header('Location: ' . $zx->get_auth_url()); die; } function e2m_gip_sign_in_callback($lb){ global$_config; $type = $lb['provider']; $zx = e2_get_gip_instance($type); if (!$zx){ die ('Unknown provider'); } $kx = $zx->callback(); echo '<script>'; if ($kx === true){ $pa = $zx->get_gip_session_data(); $xx = [ 'name' => $pa['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => lq('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized(' . json_encode($xx).');'; } else { echo 'alert (\''. $kx. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($lb){ global$_config; $sx = $lb['provider']; if (!E2GIP::is_valid_logout_key($sx)) { die('invalid logout key'); } $zx = e2_get_logged_gip(); if($zx){ $zx->logout(); } a1(); } function e2_list_gips(){ static $ex = null; if(!is_null($ex)) { return $ex; } $rx = SYSTEM_DIR. 'gips/'; if (!is_dir ($rx)) return []; $tx = opendir($rx); $ex = []; $jx = E2GIP::get_gips_order(); $hx = count($jx); while (($m2 = readdir($tx)) !== false){ if(pathinfo($m2,PATHINFO_EXTENSION)!='php') continue; $gx = pathinfo($m2,PATHINFO_FILENAME); if ($gx == 'vk'){ if(PHP_VERSION_ID < E2GIP::PHP_VERSION_VK_FEATURE) continue; } $cn = isset($jx[$gx]) ? $jx[$gx] : ++$hx; $ex[$cn]=$gx; } closedir($tx); ksort($ex); return $ex; } function e2_get_gip_class_name($type){ return "E2GIP" . ucfirst($type); } function e2_get_gip_instance($type){ if (!in_array($type,e2_list_gips())) { return false; } $wx = e2_get_gip_class_name($type); $zx = new $wx; return $zx; } function e2_get_gip_auth_url($type){ return lq('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type = ''){ $ux = !$type ? e2_list_gips() : array($type); foreach($ux as$type){ $zx = e2_get_gip_instance($type); if ($zx && $zx->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip(){ foreach(e2_list_gips() as$type){ $zx = e2_get_gip_instance($type); if ($zx && $zx->is_logged_in()) { return $zx; } } return false; } function e2_get_logged_gip_name(){ foreach(e2_list_gips() as$type){ $zx = e2_get_gip_instance($type); if ($zx && $zx->is_logged_in()) { return$type; } } return false; } function e2_get_user_profile_url($type,$zy,$vx){ $wx = e2_get_gip_class_name($type); return $wx::get_profile_url($zy,$vx); } function e2_get_gip_session($type){ $zx = e2_get_gip_instance($type); if (!$zx || !$zx->is_logged_in()) { return false; } return $zx->get_gip_session_data(); } foreach(e2_list_gips() as $ia){ require_once 'system/gips/' . $ia . '.php'; } function e2s_notify () { global$_config; if($_config['holborn']) { $ix = @$_GET['src']; if ($ix == ''){ if(Log::$a)__log ('Holborn: No src URL'); die; } $dl = file_get_contents ($ix); $dl = iy ($dl); $ox = json_decode ($dl,true); if (!$ox){ if(Log::$a)__log ('Holborn: No meaningful info from '. $ix .' ('. json_last_error () .')'); if ($px = wy ($ix)) { if(Log::$a)__log ('Holborn: Delete note with ID '. $px['ID']); tm ($px['ID']); } die; } gy ($ox,$ix); } die; } function e2m_sources ($parameters){ global$_config; $ce = $_GET['ord']; if (!$ce)$ce = 'ID'; $ce = "`". sm ($ce) ."`"; mm ( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix']."Sources` " . "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY ". $ce ); $x3 = dm (); foreach ($x3 as $iq){ $ve = $iq['ID']; if ($iq['ID']!=$iq['TrueID'])$ve .= '<br />'. $iq['TrueID']; $source = array ( 'id' => $ve, 'userpic-href' => $iq['PictureURL'], 'href' => $iq['URL'], 'href-display' => str_replace ('/','/<wbr>',$iq['URL']), 'href-filtered' => str_replace ('/','/<wbr>',$iq['_URLX']), 'title' => $iq['Title'], 'author' => $iq['AuthorName'], 'true?' => $iq['ID']==$iq['TrueID'], 'whitelisted?' => (bool)$iq['IsWhiteListed'], 'trusted?' => (bool)$iq['IsTrusted'], ); if (!$iq['IsTrusted']) { $source['trust-url']=lq ( 'e2m_source_trust', array ('source' => $iq['ID']) ); } if ($iq['IsTrusted']) { $source['premoderate-url']=lq ( 'e2m_source_premoderate', array ('source' => $iq['ID']) ); } $source['ban-url']=lq ( 'e2m_source_ban', array ('source' => $iq['ID']) ); $source['forget-url']=lq ( 'e2m_source_forget', array ('source' => $iq['ID']) ); $be[] = $source; } $cb = array ( 'title' => 'Sources', 'heading' => 'Sources', ); if(count ($be)) { $cb['sources']=$be; } else { $cb['nothing']='No sources'; } return $cb; } function e2m_source_trust ($parameters){ global$_config; $ye = $parameters['source']; mm ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ye, 'trust source' ); mm ( "UPDATE  ". $_config['db_table_prefix']."Notes ". "SET `IsPublished`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ye, 'publish all notes from the just trusted source' ); cb (); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); @unlink (USER_DIR . CACHE_FILENAME_INDEXED_FLAG); s1 (); } function e2m_source_premoderate ($parameters){ global$_config; $ye = $parameters['source']; mm ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ye, 'distrust source, set to premoderation' ); cb (); s1 (); } function e2m_source_ban ($parameters){ global$_config; $ye = $parameters['source']; mm ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ye, 'ban source' ); mm ( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ye, 'delete all notes from the just banned source' ); cb (); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); s1 (); } function e2m_source_forget ($parameters){ global$_config; $ye = $parameters['source']; mm ( "DELETE FROM  ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ye, 'forget source' ); mm ( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ye, 'delete all notes from the just forgotten source' ); cb (); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); s1 (); } function gy ($ne,$ix){ global$_config; $me = oy (array ( 'author' => $ne['author']['name'], 'title' => $ne['title'], 'href' => $ne['author']['url'], 'userpic-href' => $ne['author']['avatar'], )); if (!$me['IsWhiteListed']) return; if(preg_match ('/\+(\d\d)\:(\d\d)/',$ne['items'][0]['date_published'],$fe)) { $z3 = $fe[1]*SECONDS_IN_AN_HOUR + $fe[2]*SECONDS_IN_A_MINUTE; } $de = @$ne['items'][0]['_e2_data'] or $de = array (); $de = json_encode ($de); $se = $me['IsTrusted']; $ay = array ( 'Title' => $ne['items'][0]['title'], 'Text' => $ne['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime ($ne['items'][0]['date_published']), 'Offset' => (int)$z3, 'IsDST' => 0, 'LastModified' => strtotime ($ne['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $se, 'IsExternal' => 1, 'SourceID' => $me['ID'], 'SourceNoteID' => $ne['items'][0]['id'], 'SourceNoteURL' => $ne['items'][0]['url'], 'SourceNoteJSONURL' => $ix, 'SourceNoteData' => $de, ); $note_id = $ne['items'][0]['id']; if ( $px = uy ($me['ID'],$note_id) ) { $ay['ID']=$px['ID']; ym (oq (), 'Notes',$ay); } else { $ay = bm (oq (), 'Notes',$ay); } if ($se){ if (ld ($ay)) { $ay['IsIndexed']='1'; ym (oq (), 'Notes',$ay); } } e2_drop_caches_for_note_($ay['ID'],$se); if($_config['backup_automatically']) { am (); } } function wy ($ix){ global$_config; mm ( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceNoteJSONURL`='". sm ($ix) ."' ". "LIMIT 1", 'get note ID by source JSON URL' ); $x3 = dm (); return $x3[0]; } function uy ($ye,$ae){ global$_config; mm ( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`= '". $ye ."' ". "AND `SourceNoteID`= '". $ae ."' ". "LIMIT 1", 'get note ID by source ID and source note ID' ); $x3 = dm (); return $x3[0]; } function iy ($dl){ for ($rb = 0; $rb <= 31; ++$rb){ $dl = str_replace (chr ($rb),'',$dl); } $dl = str_replace (chr (127),'',$dl); if(0 === strpos (bin2hex ($dl),'efbbbf')) { $dl = substr ($dl,3); } return $dl; } function oy ($qe){ global$_config; $le = false; mm ( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `URL`= '". $qe['href'] ."' ". "LIMIT 1", 'get source record by the URL from blog info' ); $x3 = dm (); if(count ($x3)) { $le = $x3[0]; if ($le['ID']!=$le['TrueID']) { mm ( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`= '". $le['TrueID'] ."' ". "LIMIT 1", 'get true source record by using the TrueID of just found record' ); $x3 = dm (); if(count ($x3)) { $le = $x3[0]; } } } $me = array ( 'Title' => $qe['title'], 'AuthorName' => $qe['author'], 'PictureURL' => $qe['userpic-href'], ); if ($le !== false){ if ( $le['Title']!==$qe['title'] or $le['AuthorName']!==$qe['author'] or $le['PictureURL']!==$qe['userpic-href'] ) { $me['ID']=$le['ID']; ym (oq (), 'Sources',$me); } return $le; } else { $me['URL']=$qe['href']; $me['IsWhiteListed']=1; $me['IsTrusted']=0; $me = bm (oq (), 'Sources',$me); $me['TrueID']=$me['ID']; ym (oq (), 'Sources',$me); return $me; } } function py ($ay){ global$_config; $ba = array (); if (@$ay['IsExternal']) { if(array_key_exists ('SourceID',$ay)) { mm ( "SELECT * FROM `". $_config['db_table_prefix']."Sources` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $ay['SourceID'] ."'", 'get source by id' ); $zb = dm (); $ba['source']=$zb[0]['Title']; $ba['source-id'] = (int)$ay['SourceID']; $ba['source-true-id'] = (int)$zb[0]['TrueID']; $ba['source-whitelisted?'] = (bool)$zb[0]['IsWhiteListed']; $ba['source-trusted?'] = (bool)$zb[0]['IsTrusted']; if (!$zb[0]['IsTrusted']) { $ba['source-trust-url']=lq ( 'e2m_source_trust', array ('source' => $ay['SourceID']) ); } if ($zb[0]['IsTrusted']) { $ba['source-premoderate-url']=lq ( 'e2m_source_premoderate', array ('source' => $ay['SourceID']) ); } $ba['source-ban-url']=lq ( 'e2m_source_ban', array ('source' => $ay['SourceID']) ); $ba['source-forget-url']=lq ( 'e2m_source_forget', array ('source' => $ay['SourceID']) ); $ba['author']=$zb[0]['AuthorName']; $ba['author-href']=$zb[0]['URL']; $ba['userpic-href']=$zb[0]['PictureURL']; } if(array_key_exists ('SourceNoteURL',$ay) and @$ay['SourceNoteURL']!=''){ $ba['href-external']=$ay['SourceNoteURL']; } } return $ba; } function e2img_filename_by_processing ( $ze,$ke, $xe,$ee,$re ) { global$_config; if(Log::$a)__log ('Process image: "'. $ze .'" -> "'. $ke .'"'); if (!is_file ($ze)) return false; $te = stat ($ze)['size']; if (!o2 ($ze)) { if(Log::$a)__log ('Process image: SVG, no processing'); return $ze; } if(is_file ($ke) and !md ($ze,$ke)) { if(Log::$a)__log ('Process image: Already exists'); return $ke; } if (!extension_loaded ('gd')) return false; $je = pathinfo ($ke); if (!@cq ($je['dirname'])) { if(Log::$a)__log ( 'Process image: Can’t create directory <'. $je['dirname'] .'>' ); return false; } if(Log::$a)__log ('Process image: Detecting image type'); $type = e2img__type_of_file ($ze); if (!$type) return false; $he = 'imagecreatefrom'. $type; if (!function_exists ($he)) { if(Log::$a)__log ('Process image: Function does not exist ('. $he .')'); return false; } if(Log::$a)__log ('Process image: Opening original image ('. $he .')'); $ge = call_user_func ($he,$ze); if (!$ge) return false; if ($we = e2img__orientation_of_file ($ze)) { if(Log::$a)__log ('Process image: Needs orientation fix'); $ge = e2img__res_rotate ($ge, -$we); } $ue = [imagesx ($ge),imagesy ($ge)]; $ie = $ue; $oe = [0,0,0,0]; if ($ee == CROP_SQUARE){ if(Log::$a)__log ('Process image: Needs crop'); list ($ie,$oe) = ( e2img__crop_metrics_to_square ($ie) ); } $ie = e2_fit_metrics_to_constraints ( $ie,$xe ); if ( $we === 0 and $ie === $ue ) { if(Log::$a)__log ('Process image: No changes necessary, leaving original'); return $ze; } if(Log::$a)__log (var_export ($ie,true)); if(Log::$a)__log (var_export ($oe,true)); $pe = e2img__create_copy_resampled ( $ge, $ie, $oe, $type ); imagejpeg ($pe,$ke,$re); if (!is_file ($ke)) { if(Log::$a)__log ('Process image: File not created by imagejpeg'); return false; } if ($ke !== $ze){ if ($we === 0){ $c6 = stat ($ke)['size']; if ($c6 >= $te){ if(Log::$a)__log ('Process image: Conversion to JPEG made file bigger, back up'); @unlink ($ke); $ke = $ze; } } } @chmod ($ke,$_config['uploaded_files_mode']); if(Log::$a)__log ('Process image: Done'); return $ke; } function e2img__create_copy_resampled ( $ge,$ie,$oe,$type ) { list ($v6,$b6)=$ie; list ($y6,$n6,$m6,$f6)=$oe; $pe = imagecreatetruecolor ($v6,$b6); if($type === 'png'){ imagefill ($pe,0,0,imagecolorallocate ($pe,255,255,255)); imagealphablending ($pe,true); } $d6 = imagesx ($ge); $s6 = imagesy ($ge); imagecopyresampled ( $pe, $ge, 0,0, 0 + $y6,0 + $n6, $v6,$b6, $d6 - $m6,$s6 - $f6 ); imageinterlace ($pe,1); return $pe; } function e2img__type_of_file ($wd){ $a6 = @getimagesize ($wd); if (!$a6) return false; if ($a6[2]==IMAGETYPE_GIF) return 'gif'; if ($a6[2]==IMAGETYPE_JPEG) return 'jpeg'; if ($a6[2]==IMAGETYPE_PNG) return 'png'; if ($a6[2]==IMAGETYPE_WEBP) return 'webp'; return false; } function e2img__orientation_of_file ($wd){ if (!function_exists ('exif_read_data')) return 0; if (($q6 = @exif_read_data ($wd)) === false) return 0; if (@$q6['Orientation']==3) return -180; if (@$q6['Orientation']==6) return -270; if (@$q6['Orientation']==8) return -90; return 0; } function e2img__res_rotate ($l6,$we){ $z6 = imagerotate ($l6,$we,0); if ($z6 !== false){ imagedestroy ($l6); $l6 = $z6; } return $l6; } function e2_fit_metrics_to_constraints ( $k6,$xe ) { if ($xe === false)$xe = [0,0]; list ($vz,$bz)=$k6; list ($x6,$e6)=$xe; $r6 = [1]; if ($x6)$r6[] = $x6 / $vz; if ($e6)$r6[] = $e6 / $bz; $t6 = min ($r6); if ($t6 < 1){ $vz = (int)round ($vz * $t6); $bz = (int)round ($bz * $t6); } return [$vz,$bz]; } function e2_getimagesize_jpeg ($wd){ $j6 = @fopen ($wd,'r'); if ($j6 === false){ throw new \RuntimeException (error_get_last ()['message']); } try { if (!flock ($j6,LOCK_SH)) { throw new \RuntimeException ('Cannot lock the file: '. $wd); } $b2 = fread ($j6,2); if ($b2 !== "\xFF\xD8"){ throw new \RuntimeException ('Unknown format: '. $wd); } for (;;) { $h6 = @unpack ('H4segment/nlen',fread ($j6,4)); if ($h6 === false){ throw new \RuntimeException ('Unknown format: '. $wd); } $nz = $h6['len']; $g6 = $h6['segment']; if(strpos ($g6,'ffc')===0){ $w6 = @unpack ('Cbits/nheight/nwidth',fread ($j6,$nz - 2)); if ($w6 === false){ throw new \RuntimeException ('Unknown format: '. $wd); } return [$w6['width'],$w6['height']]; } if(fseek($j6,$nz - 2,SEEK_CUR)!==0){ throw new \RuntimeException ('Cannot find start of frame: '. $wd); } } } finally { fclose ($j6); } } function e2_getimagesize ($wd){ $vz = $bz = 0; if (u2 ($wd)) { try { list ($vz,$bz)=e2_getimagesize_jpeg ($wd); } catch (\Exception $e){ list ($vz,$bz)=getimagesize ($wd); } } elseif (o2 ($wd)) { list ($vz,$bz)=getimagesize ($wd); } elseif (cd ($wd)) { try { require_once SYSTEM_DIR . LIBRARY_DIRNAME .'getid3/getid3.php'; $a6 = new getid3 (); $a6 = $a6->analyze ($wd); $vz = $a6['video']['resolution_x']; $bz = $a6['video']['resolution_y']; } catch (\Exception $e){} } elseif (p2 ($wd)) { if(function_exists ('simplexml_load_string')) { $u6 = simplexml_load_string (file_get_contents ($wd)); if ($u6){ $i6 = $u6->attributes (); list ($vz,$bz) = [(string)$i6 -> width, (string)$i6 -> height]; } } } if(substr ($wd,strrpos ($wd,'.')-3,3)=='@2x'){ $vz = (int)floor ($vz / 2); $bz = (int)floor ($bz / 2); } $o6 = round (($bz > 0) ? ($vz / $bz):1,2); $p6 = round (($vz > 0) ? ($bz / $vz):1,2); return [$vz,$bz,$o6,$p6]; } function e2img__crop_metrics_to_square ($k6){ $cr = $vr = $br = $yr = 0; list ($vz,$bz)=$k6; if ($vz > $bz){ $br = $vz - $bz; $cr = floor ($br / 2); $bz = $vz; } elseif ($vz < $bz){ $yr = $bz - $vz; $vr = floor ($br / 2); $vz = $bz; } $oe = [$cr,$vr,$br,$yr]; $nr = [$vz,$bz]; return [$nr,$oe]; } function e2m_install () { global$_strings,$_config; qf (DEFAULT_TEMPLATE); $cb = []; if(Log::$a)__log ('Installer: not installed, present user with form'); $mr['server'] = @$_COOKIE[q1 ('install_db_server')]; $mr['user_name'] = @$_COOKIE[q1 ('install_db_user_name')]; $mr['passw']=qs (@$_COOKIE[q1 ('install_db_passw')]); $mr['name'] = @$_COOKIE[q1 ('install_db_name')]; $cb = [ 'title' => $_strings['pt--install'], 'heading' => $_strings['pt--install'], 'form-install' => [ 'form-action' => lq ('e2s_install'), 'form-check-db-config-action' => lq ('e2j_check_db_config'), 'form-list-databases-action' => lq ('e2j_list_databases'), 'submit-text' => $_strings['fb--begin'], 'db-server' => htmlspecialchars (@$mr['server']? $mr['server']:'localhost'), 'db-user' => htmlspecialchars (@$mr['user_name']? $mr['user_name']:'root'), 'db-password' => '', 'db-database' => htmlspecialchars (@$mr['name']), ] ]; return $cb; } function cn () { static $zx = null; if ($zx === null){ $zx = @unserialize ( @file_get_contents (INSTANCE_DIR . 'instance.psa') ) or $zx = null; } return $zx; } function vn ($fr){ static $zx = null; $zx = cn (); $zx['version']=$fr; if (e3 (INSTANCE_DIR . 'instance.psa',serialize ($zx))) { return $zx; } else { die ('Cannot instantiate v'. $fr .': probably permission denied'); } } function e2s_instantiate ($parameters){ global$_strings; if (cn () !== null){ die ('Remove the file "'. INSTANCE_DIR . 'instance.psa" first'); } else { if(is_numeric ($parameters['version'])) { if (vn ($parameters['version'])) { hb ($_strings['gs--instantiated-version'] .' v'. $parameters['version'],E2E_MESSAGE); s1 (lq ('e2m_frontpage', array ('page' => 1))); } } } die ('Could not create instance of engine'); } function e2_install ($databaseConfiguration,$lb){ global$_strings,$_config,$settings; if ( cn () !== null and oq () !== null and od () ) { throw new AeInstallAlreadyInstalledException ('Instance already created and db params set'); } $databaseConfiguration -> setPrefix ($_config['db_table_prefix']); $databaseConfiguration -> setSubset ($_config['db_table_subset']); if(array_key_exists ('db_plain_password',$lb)) { $databaseConfiguration->password = as_ ($lb['db_plain_password']); } if($_config['log_installs']) { Log::$a = true; if(Log::$a)dn ('install-$'); } if(Log::$a)__log ('Installer: force directories'); AeFileManager::forceAllDirectories (); if(Log::$a)__log ('Installer: write password hash'); if (!@e3 (USER_DIR . 'password-hash.psa',serialize (sha1 ($lb['password'])))) { throw new AeNotSavedException; } $settings['db']=$databaseConfiguration -> getDatabaseParamsArray (); $settings['template']=DEFAULT_TEMPLATE; $settings['language']=DEFAULT_LANGUAGE; nm ($databaseConfiguration,'check database during installation'); $dr = un ($databaseConfiguration); $sr = false; if ($dr['occupied']) { if ($dr['migrateable'] and $lb['allow_migration']) { $sr = true; if(Log::$a)__log ('Installer: data exists and migrateable'); } else { if(Log::$a)__log ('Installer: incomplete data in the database'); throw new AeInstallDatabaseOccupiedException ('Database already has some data'); } } if ($sr){ if(Log::$a)__log ('Installer: no need to create tables, will migrate'); try { jn ($databaseConfiguration); } catch (AeMySQLException $e){ v3 ($e,'Could not migrate'); hb ($_strings['er--double-check-db-params']); } jd ($databaseConfiguration); } else { if(Log::$a)__log ('Installer: create tables'); foreach(AeModel::unprefixedCoreTablesNames () as $pv){ vm ($databaseConfiguration,$pv); } } if(Log::$a)__log ('Installer: write settings'); if (!@e3 (USER_DIR . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { throw new AeNotSavedException; } if(Log::$a)__log ('Installer: search index'); $ar = ed (oq ()); try { $ar -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$a)__log ('Installer: Rose not available'); } e2_drop_all_kinds_of_cache (); sd (USER_DIR); km ($databaseConfiguration); if(Log::$a)__log ('Installer: instantiate'); vn (E2_VERSION); if(Log::$a)__log ('Installer: complete'); } function e2s_install () { global$_strings,$_db,$_config; if ( cn () !== null and oq () !== null and od () ) { s1 (); } $databaseConfiguration = js ( USER_DIR . BACKUP_DIRNAME, $_POST, $_config['db_table_prefix'], $_config['db_table_subset'] ); foreach($databaseConfiguration -> getDatabaseParamsArray () as $s3 => $a3){ l1 ('install_db_'. $s3,$a3); } if (!array_key_exists ('password',$_POST) or trim ($_POST['password']) == ''){ hb ($_strings['er--no-password-entered'],E2E_USER_ERROR); s1 (lq ('e2m_frontpage')); } $qr = trim ($_POST['password']); @session_start (); $lr = false; try { e2_install ($databaseConfiguration, [ 'allow_migration' => true, 'password' => $qr, ]); $lr = true; } catch (AeMySQLCannotConnectException $e){ hb ( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error () .' ('. mysqli_connect_errno () .')' ); } catch (AeMySQLTooOldException $e){ hb (e2l_get_string ('er--dbs-version-too-old', [ 'dbs' => $_db['software'], 'v1' => $_db['version'], 'v2' => $_db['version-minimum'], ])); } catch (AeMySQLException $e){ hb ($_strings['er--cannot-find-db'] .' '. $databaseConfiguration->name); } catch (AeInstallDatabaseOccupiedException $e){ hb ($_strings['er--db-data-incomplete-install']); } catch (AeNotSavedException $e){ hb ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); } catch (AeInstallException $e){ } bn (); if (!$lr)s1 (lq ('e2m_frontpage', ['page' => 1])); $zr['sessions'] = [[ 'stamp' => time (), 'remote_ip' => ud (), 'key_hash' => pd (true), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]]; if (!bs ($zr)) { hb ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } vv (lq ('e2s_bsi_step', array ())); s1 (); } function bn () { if ((strpos ($_SERVER['SERVER_SOFTWARE'],'Apache')!==0)) return; if(Log::$a)__log ('Running on Apache'); $kr = SYSTEM_DEFAULTS_DIR . 'default.htaccess'; $xr = false; if (!is_file ($kr)) { echo 'File not found: '.$kr. '. Please use the full Aegea installation package.'; die; } if(is_file ('.htaccess')) { if(Log::$a)__log ('There is an .htaccess file in the installation directory'); $er = file_get_contents ($kr); $rr = file_get_contents ('.htaccess'); if ($rr != $er){ $xr = true; $tr = $jr = '.htaccess.old'; $hr = 1; while (is_file ($jr)) { $jr = $tr .'.'. $hr ++; } if(Log::$a)__log ('Existing .htaccess wrong, backing up as <'. $jr .'>'); if (!@rename ('.htaccess',$jr)) { if(Log::$a)__log ('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $xr = true; } if ($xr){ if(Log::$a)__log ('Writing a correct .htaccess file'); if (!@copy ($kr,'.htaccess')) { if(Log::$a)__log ('Fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } @chmod ('.htaccess',E2_NEW_FILES_RIGHTS); } } function e2j_check_db_config () { global$_db,$_strings,$_config; $databaseConfiguration = js ( USER_DIR . BACKUP_DIRNAME, $_POST, $_config['db_table_prefix'], $_config['db_table_subset'] ); $yl = [ 'success' => true, 'data' => [ 'message' => '', 'db-responding' => false, 'db-connected' => false, 'db-found' => false, 'db-compatible' => false, 'db-occupied' => false, 'db-migrateable' => false, ] ]; try { nm ($databaseConfiguration,'connect to check DB config (try 1)'); } catch (AeMySQLAccessDeniedException $e){ $yl['data']['db-responding']=true; $yl = json_encode ($yl); die ($yl); } catch (AeMySQLCannotConnectException $e){ $yl = json_encode ($yl); die ($yl); } catch (AeMySQLTooOldException $e){ $yl['data']['db-responding']=true; $yl['data']['db-connected']=true; $yl['data']['message']=e2l_get_string ('er--dbs-version-too-old', [ 'dbs' => $_db['software'], 'v1' => $_db['version'], 'v2' => $_db['version-minimum'], ]); $yl = json_encode ($yl); die ($yl); } catch (AeMySQLNotFoundException $e){ $yl['data']['db-responding']=true; $yl['data']['db-connected']=true; if($databaseConfiguration->name){ $yl = json_encode ($yl); die ($yl); } else { $gr = on ($databaseConfiguration); if(count ($gr)>0){ $yl['data']['db-found']=true; $databaseConfiguration->name = $gr[0]; } else { $yl = json_encode ($yl); die ($yl); } } } $yl['data']['db-responding']=true; $yl['data']['db-connected']=true; $yl['data']['db-found']=true; $yl['data']['db-compatible']=true; try { nm ($databaseConfiguration,'connect to check DB config (try 2)'); } catch (AeMySQLException $e){ $yl = json_encode ($yl); die ($yl); } $yl['data']['db-good']=true; $dr = un ($databaseConfiguration); if ($dr['occupied']) { if ($dr['migrateable']) { $yl['data']['message']=$_strings['gs--data-exists']; } else { $yl['data']['db-good']=false; $yl['data']['message']=$_strings['er--db-data-incomplete-install']; } } $yl = json_encode ($yl); die ($yl); } function e2j_list_databases () { global$_config; $databaseConfiguration = js ( USER_DIR . BACKUP_DIRNAME, $_POST, $_config['db_table_prefix'], $_config['db_table_subset'] ); $yl = [ 'success' => true, 'data' => [ 'databases-list' => on ($databaseConfiguration), ] ]; $yl = json_encode ($yl); die ($yl); } if(substr (@$_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2)=='ru'){ define ('DEFAULT_LANGUAGE','ru'); } else { define ('DEFAULT_LANGUAGE','en'); } function e2l_get_string ($wr,$lb){ global$_strings; $name = $_strings[$wr]; if(preg_match_all ('/\$\[(.+?)\]/u',$name,$fe,PREG_SET_ORDER)) { foreach ($fe as $ur){ $ir = $ur[1]; $p7 = ''; if(strstr ($ir,'.')) list ($ir,$p7)=explode ('.',$ir,2); if(array_key_exists ($ir,$lb)) { if ($p7){ $name = str_replace ($ur[0],e2l__format_value ($p7,$lb[$ir],$wr),$name); } else { $name = str_replace ($ur[0],$lb[$ir],$name); } } } } return$name; } function e2l__format_value ($p7,$cv,$wr){ @list ($p7,$or_)=explode ('.',$p7,2); $pr = 'e2lstr_'. $p7; if(function_exists ($pr)) { return call_user_func ($pr,$cv,$or_,$wr); } else { return $cv; } return $cv; } function yn () { global$_lang,$settings; if ( array_key_exists ('language',$settings) and is_file ($ct = SYSTEM_DIR . LANGUAGES_DIRNAME . $settings['language'] .'.php') ) { $_lang = $settings['language']; include $ct; } elseif(is_file ($ct = SYSTEM_DIR . LANGUAGES_DIRNAME . DEFAULT_LANGUAGE .'.php')) { $_lang = DEFAULT_LANGUAGE; include $ct; } else { die ('Language file missing: '. $ct); } return e2l_load_strings (); } class Log { public static $a = false; public static $ft = false; } function fn_ () { global$_config; $dt = INSTANCE_DIR . LOGS_DIRNAME . MAIN_LOG_FILENAME; if ( $_config['write_log'] and ($_config['write_log_create'] or is_file ($dt)) ) { Log::$a = true; Log::$ft = true; } else { Log::$a = false; Log::$ft = false; } if (!Log::$a) return; @cq (INSTANCE_DIR . LOGS_DIRNAME); if($_config['write_log_reset']) { @file_put_contents ($dt,''); @chmod ($dt,E2_NEW_FILES_RIGHTS); } if (@$_config['write_log_limit'] and is_file ($dt)) { $id = @stat ($dt); $id = $id['size']; if ($id > $_config['write_log_limit']) { @rename ($dt,$dt .'.bak'); @chmod ($dt .'.bak',E2_NEW_FILES_RIGHTS); @file_put_contents ($dt,''); } } __log ('────────────────────────────────────────────────────────────────────────────────'); } function dn ($st = false) { static $at = false; if ($st === false) return $at; if ($st === '') return $at = false; $wd = str_replace ( '$',gmdate ('Y-m-d-\a\t-H-i-s'),$st ); return $at = $wd; } function __log ($l1){ static $lt; global$_stopwatch; $zt = dn (); $dt = INSTANCE_DIR . LOGS_DIRNAME . MAIN_LOG_FILENAME; $kt = ''; $xt = str_pad (round (yq () - $_stopwatch,5),10,' ',STR_PAD_RIGHT); if ($l1[0]=='}'){ -- $lt; if ($lt < 0)$lt = 0; } $et = ( E2_RUN_ID .' '. $kt .''. $xt .' '. str_repeat (' ',$lt * 2). $l1 . "\n" ); if ($l1[strlen ($l1)-1]=='{'){ ++ $lt; } $gy = FILE_APPEND; if(Log::$ft){ @file_put_contents ($dt,$et,$gy); @chmod ($dt,E2_NEW_FILES_RIGHTS); } if ($zt !== false){ $wd = INSTANCE_DIR . LOGS_DIRNAME . $zt .'.log'; @cq (INSTANCE_DIR . LOGS_DIRNAME); @file_put_contents ($wd,$et,$gy); @chmod ($zt,E2_NEW_FILES_RIGHTS); } if ($l1[0]=='#'){ $rt = INSTANCE_DIR . LOGS_DIRNAME . 'debug.log'; @cq (dirname ($rt). '/'); @file_put_contents ($rt,$et,$gy); @chmod ($rt,E2_NEW_FILES_RIGHTS); } } function sn ($tt){ @e3 ( USER_DIR .'ctree.php', "<?php\r\n\r\n". var_export ($tt,true). "\r\n\r\n?>php" ); } function an () { $dt = INSTANCE_DIR . LOGS_DIRNAME . MAIN_LOG_FILENAME; @cq (INSTANCE_DIR . LOGS_DIRNAME); @file_put_contents ($dt,''); @chmod ($dt,E2_NEW_FILES_RIGHTS); } define ('MAIL_ENABLED', !in_array ('mail',explode (',',ini_get ('disable_functions')))); function qn ($jt,$content){ $ht = SYSTEM_DEFAULTS_DIR .'mail/'. $jt .'.mtmpl.php'; if(is_file ($ht)) { ob_start (); include $ht; $ya = ob_get_contents (); ob_end_clean (); return trim ($ya); } } function ln () { global$_config; $gt = $_config['mail_from']; if ($gt[strlen ($gt)-1]=='@'){ $gt .= $_SERVER['HTTP_HOST']; } return $gt; } function zn ($wt,$subject,$sq,$ut = ''){ global$_config; if($_config['dev_mail_debug']) { $w = 'mail-debug'; $tv = basename (tempnam ($w,'m-')); $l1 = ( 'To:       '.$wt ."\n". 'Subject:  '.$subject ."\n". $ut ."\n". "--------------------------------------------------\n". $sq ); e3 ($w .'/'. $tv,$l1); chmod ($w .'/'. $tv,E2_NEW_FILES_RIGHTS); rename ($w .'/'. $tv,$w .'/'. $tv.'.txt'); } $subject = '=?UTF-8?B?'. base64_encode ($subject) .'?='; $ut .= "\r\nContent-Type: text/plain; charset=utf-8"; if(MAIL_ENABLED){ mail ($wt,$subject,$sq,trim ($ut)); } } function kn ($parameters,$it){ global$settings; $ot['each'] = []; $ot['reorderable?']=false; $rd = vf (true,true); if ($rd === null or $rd === 0) return $ot; if (!@$settings['appearance']['show_main_menu']) return $ot; return $ot; } function xn ($r2){ foreach ($r2 as $iq) if ($iq['visible?']) return true; return false; } function en () { global$settings,$_strings,$_current_url; $n5 = mf (); return [ [ 'sort-id' => 'f', 'href' => lq ('e2m_favourites', ['page' => 1]), 'content-classes' => ['favourites'], 'svg-id' => 'favourite-on', 'title' => $_strings['nm--favourites'], 'current?' => AeMainMenuManager :: $isFavouritesCurrent, 'parent?' => AeMainMenuManager :: $isFavouritesParent, 'visible?' => (bool) @$settings['menu_items']['favourites_on'], 'available?' => true, ], [ 'sort-id' => 'h', 'href' => lq ('e2m_most_commented', ['page' => 1]), 'content-classes' => ['most-commented'], 'svg-id' => 'comments', 'title' => $_strings['nm--most-commented'], 'current?' => AeMainMenuManager :: $isMostCommentedCurrent, 'parent?' => AeMainMenuManager :: $isMostCommentedParent, 'visible?' => (bool) @$settings['menu_items']['most_commented_on'], 'available?' => true, ], [ 'sort-id' => 'p', 'href' => lq ('e2m_popular', ['page' => 1]), 'content-classes' => ['popular'], 'svg-id' => 'read', 'title' => $_strings['nm--most-read'], 'current?' => AeMainMenuManager :: $isPopularCurrent, 'parent?' => AeMainMenuManager :: $isPopularParent, 'visible?' => (bool) @$settings['menu_items']['popular_on'], 'available?' => true, ], [ 'sort-id' => 't', 'href' => lq ('e2m_tags'), 'svg-id' => 'tags', 'title' => $_strings['gs--tags'], 'current?' => AeMainMenuManager :: $isTagsCurrent, 'parent?' => AeMainMenuManager :: $isTagsParent, 'visible?' => (bool) @$settings['menu_items']['tags_on'], 'available?' => true, ], [ 'sort-id' => 'c', 'href' => p (), 'content-classes' => ['day','month','year'], 'svg-id' => 'calendar', 'title' => $_strings['gs--calendar'], 'current?' => AeMainMenuManager :: $isCalendarCurrent, 'parent?' => AeMainMenuManager :: $isCalendarParent, 'visible?' => (bool) @$settings['menu_items']['calendar_on'], 'available?' => true, ], [ 'sort-id' => 'r', 'href' => $n5? $n5 : lq ('e2m_frontpage', ['page' => 1]), 'svg-id' => 'dice', 'title' => $_strings['nm--random-note'], 'current?' => $_current_url === $n5, 'parent?' => false, 'visible?' => $n5 !== false and (bool) @$settings['menu_items']['random_on'], 'available?' => $n5 !== false, ], ]; } function rn ($candy,$m5,$f5,$d5,$s5){ global $_config, $_template, $_newsfeeds, $_current_url; $meta['base-href']=AeEnv::$base_url; $meta['current-href']=$_current_url; $meta['stylesheets']=c2 (); $meta['scripts']=v2 (); $meta['newsfeeds']=$_newsfeeds; $meta['favicon-type']='image/x-icon'; $meta['favicon-href']='favicon.ico'; if ($a5 = tv ()) { $meta['favicon-type']=nd ($a5); $meta['favicon-href']=$a5; $meta['apple-touch-icon-href']=tv ('square'); } $meta['navigation-links'] = [[ 'rel' => 'index', 'href' => lq ('e2m_frontpage', ['page' => 1]), 'id' => 'link-index', ]]; if (!empty ($s5)) { foreach (['prev','next','earlier','later'] as $q5){ if(array_key_exists ($q5 .'-href',$s5)) { $l5 = $q5; if ($q5 == 'earlier')$l5 = 'prev'; if ($q5 == 'later')$l5 = 'next'; $n1 = $s5[$q5 .'-href']; if ($n1 === 'javascript:;') continue; $meta['navigation-links'][] = [ 'rel' => $l5, 'href' => $n1, 'id' => 'link-'. $q5, ]; } } } $meta['robots']='noindex, follow'; if($candy === 'e2m_note' and @$m5['only']['public?']) { $meta['robots']='index, follow'; } if ( @$_config['index_follow_everything'] and in_array ($candy, [ 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ]) ) { $meta['robots']='index, follow'; } if (!isset ($_template))qf (); $meta['viewport']=$_template['meta_viewport']; if(is_file ($_config['path_media'].'manifest.json')) { $meta['manifest-href']=AeEnv::$base_url .'manifest.json'; } $meta['og-images'] = []; if(is_array ($m5['only']['og-images'])) { $meta['og-images']=$m5['only']['og-images']; $meta['twitter-card']='summary_large_image'; } if(is_array (@$f5['og-images'])) { $meta['og-images']=$f5['og-images']; $meta['twitter-card']='summary_large_image'; } if (!count ($meta['og-images'])) { $meta['og-images'] = array ($d5['userpic-large-href']); $meta['twitter-card']='summary'; } return$meta; } function tn (AeDatabaseConfiguration $databaseConfiguration){ $z5 = $databaseConfiguration -> getSubset (); if ($z5 < 1){ throw new LogicException ('Subset to set in place of zero must be greater than 0'); } nm ($databaseConfiguration,'prepare migrate db'); fm ($databaseConfiguration,'SET sql_quote_show_create=1'); } function jn (AeDatabaseConfiguration $databaseConfiguration){ $prefix = $databaseConfiguration -> getPrefix (); $z5 = $databaseConfiguration -> getSubset (); if ($z5 < 1){ throw new LogicException ('Subset to set in place of zero must be greater than 0'); } nm ($databaseConfiguration,'migrate db'); fm ($databaseConfiguration,'SET sql_quote_show_create=1'); hn ($databaseConfiguration); wn ($databaseConfiguration); if(Log::$a)__log ('Get existing table information {'); $k5 = false; foreach(AeModel::unprefixedCoreTablesNames () as $s2){ vm ($databaseConfiguration,$s2); fm ($databaseConfiguration,"SHOW CREATE TABLE `". $prefix . $s2 ."`"); $x5[$s2]=dm (); $x5[$s2]=$x5[$s2][0]['Create Table']; fm ($databaseConfiguration,"SHOW INDEX FROM `". $prefix . $s2 ."`"); $e5 = dm (); $r5 = []; $t5 = []; foreach ($e5 as $nb){ $nb = $nb['Key_name']; if ( preg_match ('/\_[0-9]+$/',$nb) or ($s2 === 'Actions' and $nb === 'EntityID') or ($s2 === 'GIPsSessions' and $nb === 'GIP') or ($s2 === 'GIPsSessions' and $nb === 'SubsetID') or ($s2 === 'Notes' and $nb === 'Title') ) { $r5[] = $nb; $t5[] = 'DROP INDEX `'. $nb. '`'; } if ($s2 === 'Actions' and $nb === 'EntityID'){ $k5 = true; } if ($s2 === 'Actions' and $nb === 'EntityIDStamp'){ $k5 = true; } } if(count ($t5)) { $t5 = implode (', ',array_unique ($t5)); $r5 = implode (', ',array_unique ($r5)); if(Log::$a)__log ( 'Drop erroneous index "'. $r5 .'" on "'. $prefix . $s2 .'"' ); fm ($databaseConfiguration, "ALTER TABLE `". $prefix . $s2 ."` ". $t5 ); } if (!strstr ($x5[$s2],'InnoDB')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . $s2 ."` ". "ENGINE = InnoDB" ); } if (!strstr ($x5[$s2],'`SubsetID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . $s2 . "` ". "ADD `SubsetID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); } if ( $s2 === 'Actions' and strstr ($x5['Actions'],'`ReadCount`') and !$k5 ) { gn ($databaseConfiguration); } fm ($databaseConfiguration, "UPDATE `". $prefix . $s2 ."` ". "SET `SubsetID` = ". $z5 ." ". "WHERE `SubsetID` = 0" ); } if(Log::$a)__log ('}'); if (!strstr ($x5['Actions'],'`ReadCount`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if(strstr ($x5['Actions'],'`HitCount`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Actions` ". "DROP `HitCount`" ); fm ($databaseConfiguration, "DELETE FROM `". $prefix . "Actions` ". "WHERE `ReadCount` = 0" ); } if (!strstr ($x5['Aliases'],'`EntityType`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } fm ($databaseConfiguration, "UPDATE `". $prefix . "Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); fm ($databaseConfiguration, "DELETE FROM `". $prefix . "Aliases` ". "WHERE `ID` IN (". "SELECT `ID` FROM (". "SELECT a.`ID` FROM `". $prefix . "Aliases` a ". "LEFT OUTER JOIN `". $prefix . "Keywords` e ". "ON a.`EntityID` = e.`ID` ". "WHERE a.`EntityType` = 't' ". "AND e.`ID` IS NULL". ") AS temp". ")", 'clean up “leaked” tag aliases' ); if (!stristr ($x5['Comments'],'`Text` MEDIUMTEXT')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!stristr ($x5['Comments'],'`Reply` MEDIUMTEXT')) { if(strstr ($x5['Comments'],'`Reply`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); } else { if(Log::$a)__log ('No Reply column in comments; ignored assuming a 2.11 database'); } } if (!stristr ($x5['Comments'],'`IP` VARCHAR(39)')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "CHANGE `IP` `IP` VARCHAR(39)  DEFAULT '' NOT NULL" ); } if (!strstr ($x5['Comments'],'`IsGIPUsed`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr ($x5['Comments'],'`GIP`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr ($x5['Comments'],'`GIPAuthorID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if(strstr ($x5['Comments'],'`SocialType`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "DROP `SocialType`" ); } if(strstr ($x5['Comments'],'`SocialID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Comments` ". "DROP `SocialID`" ); } if (!strstr ($x5['GIPsSessions'],'`AuthorEmail`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "GIPsSessions` ". "ADD `AuthorEmail` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorName`" ); } if (!strstr ($x5['GIPsSessions'],'`AuthorProfileLink`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "GIPsSessions` ". "ADD `AuthorProfileLink` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorEmail`" ); } if(strstr ($x5['Keywords'],'`ParentKeywordID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr ($x5['Keywords'],'`OriginalAlias`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } if (!strstr ($x5['Keywords'],'`PageTitle`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "ADD `PageTitle` VARCHAR(255) DEFAULT '' NOT NULL AFTER `OriginalAlias`" ); } if (!stristr ($x5['Keywords'],'`Description` MEDIUMTEXT')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); } if (!strstr ($x5['Keywords'],'`Summary`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "ADD `Summary` MEDIUMTEXT AFTER `Description`" ); } if (!strstr ($x5['Keywords'],'`Uploads`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Summary`" ); } if (!stristr ($x5['Keywords'],'`Uploads` MEDIUMTEXT')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr ($x5['Keywords'],'`IsVisible`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Keywords` ". "ADD `IsVisible` TINYINT(1) DEFAULT '1' NOT NULL AFTER `Uploads`" ); } fm ($databaseConfiguration, "UPDATE `". $prefix . "Keywords` SET `Summary` = '' WHERE `Summary` IS NULL" ); fm ($databaseConfiguration, "UPDATE `". $prefix . "Keywords` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); if (!strstr ($x5['Notes'],'`FormatterID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT '". DEFAULT_FORMATTER ."' NOT NULL AFTER `Text`" ); } if(1){ fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `FormatterID` `FormatterID` VARCHAR( 32 ) DEFAULT '". DEFAULT_FORMATTER ."' NOT NULL" ); } if (!strstr ($x5['Notes'],'`OriginalAlias`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if(strstr ($x5['Notes'],'`IP`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "DROP `IP`" ); } if (!stristr ($x5['Notes'],'`Text` MEDIUMTEXT')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!strstr ($x5['Notes'],'`Summary`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `Summary` MEDIUMTEXT AFTER `Text`" ); } if (!strstr ($x5['Notes'],'`IsIndexed`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr ($x5['Notes'],'`Uploads`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } if (!stristr ($x5['Notes'],'`Uploads` MEDIUMTEXT')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr ($x5['Notes'],'`IsExternal`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr ($x5['Notes'],'`SourceID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr ($x5['Notes'],'`SourceNoteID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr ($x5['Notes'],'`SourceNoteURL`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr ($x5['Notes'],'`SourceNoteData`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr ($x5['Notes'],'`SourceNoteJSONURL`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if(strstr ($x5['Notes'],'`SourceMainImageURL`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "DROP `SourceMainImageURL`" ); } if(strstr ($x5['Notes'],'`IsIssue`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "DROP `IsIssue`" ); } if (!strstr ($x5['Notes'],'`ReadCount`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Notes` ". "ADD `ReadCount` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); fm ($databaseConfiguration, "UPDATE `". $prefix . "Notes` n JOIN (". "SELECT `EntityID`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM  `". $prefix . "Actions` ". "GROUP BY `EntityID`". ") a ON n.`ID` = a.`EntityID` ". "SET `ReadCount` = `AggregateReadCount`" ); } fm ($databaseConfiguration, "UPDATE `". $prefix . "Notes` SET `Summary` = '' WHERE `Summary` IS NULL" ); fm ($databaseConfiguration, "UPDATE `". $prefix . "Notes` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); fm ($databaseConfiguration, "UPDATE `". $prefix . "Notes` SET `SourceNoteData` = '' WHERE `SourceNoteData` IS NULL" ); if (!strstr ($x5['Sources'],'`TrueID`')) { fm ($databaseConfiguration, "ALTER TABLE `". $prefix . "Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); fm ($databaseConfiguration, "UPDATE `". $prefix . "Sources` ". "SET `TrueID` = `ID`" ); } if(Log::$a)__log ('Ensure indexes {'); if(strstr ($x5['Notes'],'`Title` (`Title`(191))')) { if(Log::$a)__log ('Drop erroneous index on "'. $prefix .'Notes.Title"'); fm ($databaseConfiguration, "ALTER TABLE `". $prefix ."Notes` ". "DROP INDEX `Title`" ); } foreach(AeModel::unprefixedCoreTablesNames () as $s2){ foreach(AeModel::indexesByUnprefixedTableName ($s2) as $nb){ list ($type,$mb)=$nb; $fb = implode ('',$mb); $j5 = AeModel::indexCheckSQLByIndexType ($type).' `'. $fb .'` (`'. implode ('`,`',$mb) .'`)'; $db = AeModel::indexCreateSQLByIndexType ($type).' `'. $fb .'` (`'. implode ('`, `',$mb) .'`)'; if (!strstr ($x5[$s2],$j5)) { if(Log::$a)__log ( 'Table "'. $prefix . $s2 .'" is missing "'. AeModel::indexCheckSQLByIndexType ($type) .'" on columns "'. implode ('", "',$mb) .'"' ); fm ($databaseConfiguration, "ALTER TABLE `". $prefix . $s2 ."` ". "ADD ". $db ); } } } if(Log::$a)__log ('}'); return true; } function hn (AeDatabaseConfiguration $databaseConfiguration){ if(Log::$a)__log ('Ensure encoding utf8mb4 on all native tables {'); foreach(AeModel::unprefixedCoreTablesNames () as $h5){ $g5 = $databaseConfiguration -> getPrefix () . $h5; if(Log::$a)__log ('Migrate: Check table '. $g5); $w5 = cm ($databaseConfiguration,$h5); if (!$w5) continue; if(stripos ($w5['Collation'],'utf8mb4')===0) continue; if(Log::$a)__log ('Migrate: Table '. $g5 .' has a wrong encoding'); if(Log::$a)__log ('Migrate: Drop indexes of table '. $g5); fm ($databaseConfiguration, "SHOW INDEX FROM `". $g5 ."` ". "WHERE `Key_name` <> 'PRIMARY' ". "AND `Seq_in_index` = 1", 'show indexes from table '. $g5 ); $e5 = dm (); foreach ($e5 as $nb){ fm ($databaseConfiguration, "ALTER TABLE `". $g5 ."` ". "DROP INDEX `". $nb['Key_name'] ."`", 'drop index '. $nb['Key_name'] ); } if(Log::$a)__log ('Migrate: Convert table '. $g5 .' to utf8mb4'); fm ($databaseConfiguration, "ALTER TABLE `". $g5 ."` ". "CONVERT TO CHARACTER SET utf8mb4", 'convert table to character set utf8mb4' ); } if(Log::$a)__log ('}'); if(Log::$a)__log ('Ensure encoding utf8mb4 on all Rose tables {'); foreach (xd () as $u5){ $g5 = ( $databaseConfiguration -> getPrefix () . SEARCH_EXTRA_PREFIX . $u5 ); if(Log::$a)__log ('Migrate: Check table '. $g5); $w5 = cm ($databaseConfiguration,SEARCH_EXTRA_PREFIX . $u5); if (!$w5) continue; if(stripos ($w5['Collation'],'utf8mb4')===0) continue; if(Log::$a)__log ('Some Rose tables have a wrong encoding, will need to erase and recreate them all'); jd ($databaseConfiguration); break; } if(Log::$a)__log ('}'); } function gn (AeDatabaseConfiguration $databaseConfiguration){ $prefix = $databaseConfiguration -> getPrefix (); if(Log::$a)__log ( 'Table "'. $prefix .'Actions" is missing necessary UNIQUE index, must rearrange {' ); fm ($databaseConfiguration, "DROP TABLE IF EXISTS `". $prefix ."Actions_Fixed`", 'remove temporary Actions_Fixed table if exists' ); fm ($databaseConfiguration, "CREATE TABLE `". $prefix ."Actions_Fixed` ". "LIKE `". $prefix ."Actions`", 'create new temporary Actions_Fixed table' ); fm ($databaseConfiguration, "ALTER TABLE `". $prefix ."Actions_Fixed` ". "ADD UNIQUE INDEX(`EntityID`, `Stamp`)", 'add UNIQUE index to the temporary Actions_Fixed table' ); fm ($databaseConfiguration, "INSERT INTO `". $prefix ."Actions_Fixed` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) ". "SELECT `SubsetID`, `EntityID`, `Stamp`, `AggregateReadCount` FROM (". "SELECT `SubsetID`, `EntityID`, `Stamp`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM `". $prefix ."Actions` ". "GROUP BY `EntityID`, `Stamp`". ") `". $prefix ."Actions_Fixed_AliasRequiredForNoReason`", 'rearrange Actions records from existing problematic Actions table to the new temporary Actions_Fixed table' ); fm ($databaseConfiguration, "RENAME TABLE `". $prefix ."Actions` TO `". $prefix ."Actions_Corrupt`", 'rename Actions to Actions_Corrupt' ); fm ($databaseConfiguration, "RENAME TABLE `". $prefix ."Actions_Fixed` TO `". $prefix ."Actions`", 'rename Actions_Fixed to Actions' ); fm ($databaseConfiguration, "DROP TABLE `". $prefix ."Actions_Corrupt`", 'remove Actions_Corrupt table' ); if(Log::$a)__log ('}'); } function wn ($databaseConfiguration){ global$_db; $i5 = ( "(0 ". "OR `Text` LIKE '%!!%' ". "OR `Text` LIKE '%||%' ". "OR `Text` LIKE '%\%\%%' ". "OR `Text` LIKE '%##%' ". "OR `Text` LIKE '%++%' ". "OR `Text` LIKE '%((html%' ". "OR `Text` LIKE '%((img%' ". "OR `Text` LIKE '%((link%' ". "OR `Text` LIKE '%((%.jpg%' ". "OR `Text` LIKE '%((%.jpeg%' ". "OR `Text` LIKE '%((%.gif%' ". "OR `Text` LIKE '%((%.png%' ". "OR `Text` LIKE '%((%.webp%' ". "OR `Text` LIKE '%[[html%' ". "OR `Text` LIKE '%[[img%' ". "OR `Text` LIKE '%[[link%' ". "OR `Text` LIKE '%[[%.jpg%' ". "OR `Text` LIKE '%[[%.jpeg%' ". "OR `Text` LIKE '%[[%.gif%' ". "OR `Text` LIKE '%[[%.png%' ". "OR `Text` LIKE '%[[%.webp%' ". ")" ); if(Log::$a)__log ('Switch from Calliope to Neasden {'); fm ($databaseConfiguration, "UPDATE `". $databaseConfiguration -> getPrefix () . "Notes` ". "SET `FormatterID` = 'neasden' ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `FormatterID` = 'calliope' ". "AND (". "`IsPublished` = '0' ". "OR (". "`IsPublished` = '1' ". "AND !". $i5. ")". ")" ); if(Log::$a)__log (mysqli_affected_rows ($_db['link']) .' drafts and notes with simple formatting switched'); fm ($databaseConfiguration, "SELECT `ID` FROM `". $databaseConfiguration -> getPrefix () . "Notes` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `FormatterID` = 'calliope'" ); $yf = dm (); if(Log::$a)__log (count ($yf) .' with complex formatting remain'); if(count ($yf)>0){ $hv = 'AEGEA-LEGACY-REVIEW'; $o5 = fa ($databaseConfiguration,$hv); if (!$o5){ $o5['ID']=ya ($databaseConfiguration,$hv,false); } if(Log::$a)__log ('Tag "'. $hv .'" has ID '. $o5['ID']); foreach ($yf as $ay){ mm ( "INSERT INTO `". $databaseConfiguration -> getPrefix () . "NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$databaseConfiguration -> getSubset ()) .", ". ((int)$ay['ID']) .", ". ((int)$o5['ID']). ")", 'add new tag bindings' ); } $hl = 'Aegea legacy notes for review'; $o1 = 'These notes were automatically converted from a very old version of Aegea and may have formatting problems. Please edit them to fix these problems. When finished, just delete this tag.'; fm ($databaseConfiguration, "UPDATE `". $databaseConfiguration -> getPrefix () . "Keywords` ". "SET `IsVisible` = 0, `IsFavourite` = 1, ". "`PageTitle` = '". $hl ."', ". "`Description` = '". $o1 ."' ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `ID` = " . $o5['ID'] ); fm ($databaseConfiguration, "UPDATE `". $databaseConfiguration -> getPrefix () . "Notes` ". "SET `FormatterID` = 'neasden' ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `FormatterID` = 'calliope'" ); if(Log::$a)__log ('Switched '. mysqli_affected_rows ($_db['link']) .' notes with complex formatting'); } if(Log::$a)__log ('}'); } function un (AeDatabaseConfiguration $databaseConfiguration){ global$_db; $p5 = false; $cj = array (); $sql = ( 'SHOW TABLES FROM `'. mysqli_real_escape_string ( $_db['link'],$databaseConfiguration->name ). '`' ); if(Log::$a)__log ('DB [?]: '. $sql); $x3 = mysqli_query ($_db['link'],$sql); if ($x3){ while ($e2_ = mysqli_fetch_row ($x3)) { foreach(AeModel::unprefixedCoreTablesNames () as $h5){ if(strcasecmp ($e2_[0],$databaseConfiguration -> getPrefix () . $h5)===0){ $p5 = true; $cj[] = $h5; } } } } $vj = true; foreach(AeModel::unprefixedCoreTablesNames () as $h5){ if (!in_array ($h5,$cj)) { $vj = false; } } $bj = true; foreach(AeModel::unprefixedEssentialTablesNames () as $h5){ if (!in_array ($h5,$cj)) { $bj = false; } } return array ( 'occupied' => $p5, 'complete' => $vj, 'migrateable' => $bj, ); } function in ($databaseConfiguration){ nm ($databaseConfiguration); $dr = un ($databaseConfiguration); if (!$dr['occupied']) { throw new AeMySQLNoDataException ('Database is empty'); } if (!$dr['migrateable']) { throw new AeMySQLNotMigrateableException ('Database is not migrateable'); } } function on (AeDatabaseConfiguration $databaseConfiguration){ global $od; if (($vx = mysqli_connect ( 'p:'. $databaseConfiguration->host, $databaseConfiguration->user, qs ($databaseConfiguration->password), '', $databaseConfiguration->port )) === false) return []; $gr = []; $yj = [ 'information_schema', 'performance_schema', 'sys', 'mysql' ]; @$od ++; $z2 = 'SHOW DATABASES'; if(Log::$a)__log ('DB ['. $od .']: '. $z2); $x3 = mysqli_query ($vx,$z2); while ($e2_ = mysqli_fetch_row ($x3)) { if(mysqli_select_db ($vx,$e2_[0]) and !in_array ($e2_[0],$yj)) { $gr[] = $e2_[0]; } } return $gr; } function pn ($databaseConfiguration,$s2){ fm ( $databaseConfiguration, "SHOW TABLES LIKE '". $databaseConfiguration -> getPrefix () . $s2 . "'" ); $l6 = dm (); return count ($l6)>0; } function cm ($databaseConfiguration,$s2){ fm ( $databaseConfiguration, "SHOW TABLE STATUS LIKE '". $databaseConfiguration -> getPrefix () . $s2 . "'" ); $x3 = dm (); return $x3 ? $x3[0] : []; } function vm ($databaseConfiguration,$s2){ if (pn ($databaseConfiguration,$s2)) return; fm ( $databaseConfiguration, "CREATE TABLE `". $databaseConfiguration -> getPrefix () . $s2 ."` ". AeModel::columnsAndIndexesSQLByUnprefixedTableName ($s2) ." ". "ENGINE=InnoDB DEFAULT CHARSET=utf8mb4" ); } function bm (AeDatabaseConfiguration $databaseConfiguration,$s2,$t4,$nj = 'INSERT',$mj = ''){ global$_db; $fj['SubsetID']=$databaseConfiguration -> getSubset (); foreach ($t4 as $s3 => $a3){ $fj[$s3]="'". sm ($a3) ."'"; } $dj = "`". implode ("`, `",array_keys ($fj)). "`"; $sj = implode (", ",array_values ($fj)); fm ( $databaseConfiguration, $nj ." INTO `". $databaseConfiguration -> getPrefix () . $s2 ."` ". "(" . $dj .") VALUES (". $sj .")". ($mj? (' '. $mj):'') ); $t4['ID']=mysqli_insert_id ($_db['link']); return $t4; } function ym (AeDatabaseConfiguration $databaseConfiguration,$s2,$t4,$aj = false,$qj = false){ if(Log::$a)__log ('Model: update record in table '. $s2 .' {'); $lj = array (); foreach(AeModel::softFieldsByUnprefixedTableName ($s2) as $x){ if(array_key_exists ($x,$t4)) { $lj[] = '`'. $x .'`'."='". sm ($t4[$x]) ."'"; } } $zj = array (); if(is_array ($aj)) { foreach(AeModel::softFieldsByUnprefixedTableName ($s2) as $x){ if(array_key_exists ($x,$aj)) { $zj[] = '`'. $x .'`'."='". sm ($aj[$x]) ."'"; } } } if(count ($zj)) { $c1 = implode (" AND ",$zj); } else { if (!array_key_exists ('ID',$t4) or !is_numeric ($t4['ID'])) { if(Log::$a)__log ('Error: e2_update_record must be called with an ID field in $record when updating single row'); return false; } $c1 = "`ID`=". $t4['ID']; } if(count ($lj)>0){ $kj = $qj? 'LOW_PRIORITY ' : ''; fm ( $databaseConfiguration, "UPDATE ". $kj ."`". $databaseConfiguration -> getPrefix () . $s2 ."` ". "SET ". implode (', ',$lj) ." ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND (". $c1 .")" ); } if(Log::$a)__log ('}'); return true; } define ('E2_MYSQL_CONNECT_TIMEOUT',5); function nm (AeDatabaseConfiguration $databaseConfiguration,$xj = ''){ static $ej = false; static $rj = false; global $_instance_config, $_db, $od; if ($ej !== $databaseConfiguration -> getServerKeyString ()) { if(Log::$a)__log ('Ensure: Establishing connection "'. $databaseConfiguration -> getServerKeyString () .'"'); if ($ej !== false){ mysqli_close ($_db['link']); } $tj = mysqli_init (); $tj -> options (MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); if($_instance_config['dev_chaos'] and !rand (0, (1 / $_instance_config['dev_chaos']) - 1)) { throw new AeMySQLCannotConnectException ('Could not '. $xj ."\n\nChaos"); } $jj = @mysqli_real_connect ( $tj, 'p:'. $databaseConfiguration->host, $databaseConfiguration->user, qs ($databaseConfiguration->password), '', $databaseConfiguration->port ); if (!$jj){ if(1045 === mysqli_connect_errno ()) { throw new AeMySQLAccessDeniedException ('Could not '. $xj); } else { throw new AeMySQLCannotConnectException ('Could not '. $xj); } } if (!lm ($tj)) { throw new AeMySQLTooOldException ('Could not '. $xj); }; $_db['link']=$tj; $ej = $databaseConfiguration -> getServerKeyString (); $rj = false; } if ($rj !== $databaseConfiguration->name){ if(Log::$a)__log ('Ensure: Selecting database "'. $databaseConfiguration->name .'"'); if (!@mysqli_select_db ($_db['link'],$databaseConfiguration->name)) { throw new AeMySQLNotFoundException ('Could not '. $xj); } $z2 = 'SET NAMES utf8mb4'; mysqli_query ($_db['link'],$z2); @$od ++; if(Log::$a)__log ('DB ['. $od .']: '. $z2); $rj = $databaseConfiguration->name; } } function mm ($z2,$xj = 'run some query'){ $databaseConfiguration = oq (); return fm ($databaseConfiguration,$z2,$xj); } function fm ($databaseConfiguration,$z2,$xj = ''){ global $od,$_db,$_config; nm ($databaseConfiguration,$xj); if($_config['dev_chaos'] and !rand (0, (1 / $_config['dev_chaos']) - 1)) { throw new AeMySQLQueryException ('Could not '. $xj ."\n\nChaos in e2_mysql_query"); } @$od ++; if(Log::$a) if ($xj)__log ('Will '. $xj); if(Log::$a)__log ('DB ['. $od .']: '. $z2); $_db['result'] = @mysqli_query ($_db['link'],$z2); if($_db['result']) { if($_config['backup_tail']) { if ( stripos ($z2,"SELECT")!==0 and stripos ($z2,"SHOW")!==0 ) { $wd = $databaseConfiguration->backup_dir .'backup-tail.sql'; @file_put_contents ($wd,$z2 .";\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod ($wd,E2_NEW_FILES_RIGHTS); } } } else { throw new AeMySQLQueryException ('Could not '. $xj ."\n\nMySQL says:\n". mysqli_error ($_db['link'])); } } function dm ($type = MYSQLI_ASSOC){ global$_db; $cb = array (); while ($c5 = @mysqli_fetch_array ($_db['result'],$type)) { foreach ($c5 as $rb => $hj){ if(is_string ($hj)) { $c5[$rb]=$hj; } } $cb[] = $c5; } return $cb; } function sm ($c4){ global$_db; nm (oq (), 'escape string'); return mysqli_real_escape_string ($_db['link'], (string)$c4); } function am () { global$_config; $rv = array_keys (qm (USER_DIR . BACKUP_DIRNAME)); if(Log::$a)__log ('Backup: Found '. count ($rv) .' backups'); if(count ($rv)) { $gj = time () - $rv[0]; $wj = ($gj >= $_config['backup_rebase_interval']); if(Log::$a)__log ('Backup: '. $gj .' seconds since last backup'); } else { $wj = true; } if ($wj){ if(Log::$a)__log ('Backup: Will rebuild backup'); vv (lq ('e2s_dump', []), true); } } function qm ($backup_dir){ $rv = []; foreach(glob ($backup_dir .'*.sql') as $m2){ if(preg_match ('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is',basename ($m2),$fe)) { list (, $tm,$jm,$hm,$uj,$rb,$ij)=$fe; $bf = gmmktime ($uj,$rb,$ij,$jm,$hm,$tm); $rv[$bf]=$m2; } } krsort ($rv); return $rv; } function lm ($tj){ global$_db; $_db['software']='MySQL'; $_db['version-minimum']=E2_MINIMUM_MYSQL; $_db['version']=mysqli_get_server_info ($tj); $pj = strpos ($_db['version'],'-MariaDB'); if ($pj !== false){ $_db['software']='MariaDB'; $_db['version-minimum']=E2_MINIMUM_MARIADB; $_db['version']=substr ($_db['version'],0,$pj); if(substr ($_db['version'],0,6)==='5.5.5-'){ $_db['version']=substr ($_db['version'],6); } } if(Log::$a)__log ( 'Ensure: Running on "'. $_db['software'] .'", version "'. $_db['version'] .'"' ); return (version_compare ($_db['version'],$_db['version-minimum'],'>=')); } function zm ($backup_dir){ $rv = qm ($backup_dir); $ch = [SECONDS_IN_A_MINUTE,SECONDS_IN_AN_HOUR,SECONDS_IN_A_DAY,SECONDS_IN_A_WEEK,SECONDS_IN_A_MONTH, -1]; $vh = count ($rv); $bh = count ($ch)-1; if ($vh > $bh){ if(Log::$a)__log ('Stored are '. $vh .' backups, over '. $bh .', will sift...'); $yh = -1; $rb = 0; foreach ($rv as $bf => $m2){ if(Log::$a)__log ('Backup '. $m2 .' ('. gmdate ('r',$bf) .')'); if ($yh == -1){ if(Log::$a)__log ('is latest, leave'); $yh = $bf; } elseif ($ch[$rb] == -1){ if(Log::$a)__log ('is too old, remove'); @unlink ($m2); } else { if ($yh - $bf < $ch[$rb]) { if(Log::$a)__log ('is not from long ago (within interval of '. $ch[$rb] .'s), remove'); @unlink ($m2); } else { $rb ++; if(Log::$a)__log ('is long enough ago, leave (proceed to interval of '. $ch[$rb] .'s)'); $yh = $bf; } } } } else { if(Log::$a)__log ('No need to sift'); } return; } function km (AeDatabaseConfiguration $databaseConfiguration){ global$_db; if(Log::$a)__log ('Backup to '. $databaseConfiguration->backup_dir); try { nm ($databaseConfiguration,'make backup'); if($_db['link']) { $vd = []; foreach(AeModel::unprefixedCoreTablesNames () as $s2){ $vd[] = $databaseConfiguration -> getPrefix () . $s2; } $l = time (); $wd = $databaseConfiguration->backup_dir .'backup-'.gmdate ('Y-m-d-\a\t-H-i-s',$l).'.sql'; if($databaseConfiguration -> hasSubsetSpecified ()) { $subset = $databaseConfiguration -> getSubset (); } else { $subset = null; } e2_backup ($_db['link'],$vd,$subset,$wd); @unlink ($databaseConfiguration->backup_dir .'backup-tail.sql'); zm ($databaseConfiguration->backup_dir); return $wd; } } catch (AeMySQLException $e){ v3 ($e,'Could not do backup'); return false; } } function xm ($nh){ $mh = parse_url ($nh); $fh = @$mh['host']; $dh = @$mh['port']; if ((string)$fh === ''){ $fh = $nh; $dh = ''; } return [$fh,$dh]; } function e2s_dump () { global$_config; if (!$_config['allow_underhood_access']) { s1 (lq ('e2m_settings')); } if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_underhood')); } if (km (oq ())) { hb ('Backed up',E2E_MESSAGE); } s1 (lq ('e2m_underhood')); } function e2m_note ($parameters = []) { global $settings, $_config, $_strings; if(Log::$a)__log ('Note {'); $ay = @$parameters['*note']; if ($ay == false) return e2m_error404 (); $sh = ff ($ay); $mf = yf ($ay); $tn = cs (); $ah = ($parameters['preview-key']==$sh); if (!empty ($parameters['preview-key']) and !$ah) return e2m_error404 (); if (!$tn and !$ah and $mf !== 'public') return e2m_error404 (); if (!empty ($parameters['preview-key']) and $mf === 'public'){ unset($parameters['preview-key']); $va = lq ('e2m_note',$parameters); s1 ($va); } $va = lq ('e2m_note',$parameters); $noteView = new AeNoteView ($ay); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($tn and !@$_config['read_only']); $noteView -> setWantHiddenTags ($tn); if ($mf === 'draft' or $mf === 'scheduled'){ if (!$ah){ $qh = [ '.note-id' => $ay['ID'], 'form-action' => lq ('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-note'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], 'scheduling-promo' => e2l_get_string ( 'pm--scheduling', ['url' => $_config['paid_features_url']] ), ]; } } $lh = ''; $zh = []; $s5 = []; if ($mf === 'public'){ $noteView -> setWantNewCommentsCount ($tn); $noteView -> setWantSharingButtons ($settings['appearance']['show_sharing_buttons']); $noteView -> setWantRelatedNotes (true); } if ($mf === 'public' or $mf === 'hidden'){ if(Log::$a)__log ('Navigation {'); $kh = hm ($ay,'prev'); $xh = hm ($ay,'next'); if ($kh){ $s5['prev-href']=lq ('e2m_note', ['*note' => $kh]); $s5['prev-title']=dy (htmlspecialchars ($kh['Title'],ENT_NOQUOTES,'UTF-8')); } if ($xh){ $s5['next-href']=lq ('e2m_note', ['*note' => $xh]); $s5['next-title']=dy (htmlspecialchars ($xh['Title'],ENT_NOQUOTES,'UTF-8')); } $s5['title']=$_strings['nm--posts']; $s5['timeline?']=false; $s5['this-title']=dy (htmlspecialchars ($ay['Title'],ENT_NOQUOTES,'UTF-8')); if(Log::$a)__log ('}'); if(Log::$a)__log ('Comments {'); if ($tn){ $eh = e2_note_cache_filename_with_id_($ay['ID'] .'-comments-author'); } else { $eh = e2_note_cache_filename_with_id_($ay['ID'] .'-comments'); } $rh = null; if(CACHE_NOTES_COMMENTS and is_file ($eh)) { $rh = @unserialize (file_get_contents ($eh)); } if(is_array ($rh)) { if(Log::$a)__log ('retrieve cached ctree'); $lh = $rh; } else { if(Log::$a)__log ('assemble ctree...'); $th = zb ($ay['ID']); $q1 = []; $jh = true; foreach ($th as $s3 => $ss){ if ($ss['IsVisible']) { $ts = mb ( $ay, $ss, $s3 + 1 ); if ($ts['new?'] and $jh){ $ts['first-new?']=true; $jh = false; } $q1[] = $ts; } } $lh = $q1; if(CACHE_NOTES_COMMENTS)e3 ($eh,serialize ($lh)); } if (!@$_config['read_only'] and xb ($ay)) { $hh = db ($ay); $hh['.comment-number']=count ($lh)+1; } if(Log::$a)__log ('} // Comments'); } $j3 = $noteView -> getNoteCTree (); if ($tn and xb ( $ay,NOTE_COMMENTABLE_NOW_CONDITIONALLY )) { $zh['form-action']=lq ('e2s_note_flag', [ '*note' => $ay, 'flag' => 'IsCommentable', 'value' => (int) !$ay['IsCommentable'], ]); $zh['submit-text'] = ( $ay['IsCommentable']? $_strings['bt--close-comments-to-post']:$_strings['bt--open-comments-to-post'] ); } if ($tn and $j3['new-comments-count']>0){ if(Log::$a)__log ('mark comments as not new'); e2_drop_caches_for_note_($ay['ID'],true); ym ( oq (), 'Comments', ['IsNew' => 0], ['NoteID' => $ay['ID']] ); } if(CACHE_RANDOM_NOTE and is_file (USER_DIR . CACHE_FILENAME_RANDOM_NOTE)) { $n5 = @unserialize (file_get_contents (USER_DIR . CACHE_FILENAME_RANDOM_NOTE)); if (((string)$n5)===$j3['href']) { @unlink (USER_DIR . CACHE_FILENAME_RANDOM_NOTE); } } foreach ($j3['tags'] as $hv){ AeMainMenuManager :: addParentTag ($hv['name']); } $cb = [ 'title' => $ay['Title'], 'notes' => ['only' => $j3], 'pages' => $s5, 'summary' => $j3['summary'], ]; if ($lh)$cb['comments']['each']=$lh; if ($zh)$cb['comments']['toggle']=$zh; $cb['comments']['count']=$j3['comments-count']; $cb['comments']['count-text']=$j3['comments-count-text']; $cb['comments']['new-count']=$j3['new-comments-count']; $cb['comments']['new-count-text']=$j3['new-comments-count-text']; $cb['comments']['display-form?']=xb ($ay); if (!empty ($hh)) { $cb['form']='form-comment'; $cb['form-comment']=$hh; } if (!empty ($qh)) { $cb['form']='form-note-publish'; $cb['form-note-publish']=$qh; } if(Log::$a)__log ('} // Note'); return $cb; } function e2m_note_read ($parameters = []) { global$_config; if (!$_config['count_reads']) { die ('Read counting disabled'); } $ay = $parameters['*note']; if ($ay == false) return e2m_error404 (); if(Log::$a)__log ('Note read {'); mm ( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `ReadCount` = `ReadCount` + 1 ". "WHERE `ID` = ". $ay['ID'] ); $gh = time (); $gh = $gh - ($gh % SECONDS_IN_AN_HOUR); bm ( oq (), 'Actions', [ 'EntityID' => $ay['ID'], 'Stamp' => $gh, 'ReadCount' => 1, ], 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); mm ( "DELETE LOW_PRIORITY FROM `". $_config['db_table_prefix']."Actions` ". "WHERE (`Stamp` < ". (time () - (SECONDS_IN_A_MONTH)) .")" ); if(Log::$a)__log ('}'); s1 (lq ('e2m_note',$parameters)); } function e2m_note_withdraw ($parameters = []) { $databaseConfiguration = oq (); $s = $parameters['*note']; if (!$s) return e2m_error404 (); if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_note', ['*note' => $s])); } wd (); $wh = lq ('e2m_note_broadcast', ['*note' => $s]); $s['IsPublished']=0; $s['IsCommentable']=0; $s['IsVisible']=1; $s['Stamp']=time (); $s['IP']=ud (); $ky = e2_alias_of_note_with_id_($s['ID']); if ($ky){ $s['OriginalAlias']=$ky; } else { $s['OriginalAlias']=d ( USER_DIR,$databaseConfiguration, 'find','n',$s['ID'],$s['Title'] ); } e2_drop_caches_for_note_($s['ID'],null); ym ($databaseConfiguration,'Notes',$s); e2_delete_aliases_for_entity_('n',$s['ID']); zd ($s['ID']); vv ($wh); s1 (lq ('e2m_note', ['*note' => $s])); } function e2m_note_delete ($parameters = []) { global$_strings; $s = @$parameters['*note']; if (!$s) return e2m_error404 (); $mf = yf ($s); $uh = !$s['IsPublished']; if ($uh){ $ih = e2l_get_string ('gs--draft-will-be-deleted', [ 'draft' => htmlspecialchars ($s['Title'],ENT_NOQUOTES,'UTF-8'), ]); } else { $ih = e2l_get_string ('gs--post-will-be-deleted', [ 'post' => htmlspecialchars ($s['Title'],ENT_NOQUOTES,'UTF-8'), ]); } $ms = $uh? $_strings['pt--draft-deletion']:$_strings['pt--post-deletion']; $oh = [ '.note-id' => $s['ID'], '.is-draft' => (int)$uh, 'note-title' => htmlspecialchars ($s['Title'],ENT_COMPAT,'UTF-8'), 'caution-text' => $ih, 'form-action' => lq ('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int)$uh, ]; if ($mf === 'public'){ $oh['hide-action']=lq ( 'e2s_note_flag', [ '*note' => $parameters['*note'], 'flag' => 'IsVisible', 'value' => 0 ] ); } if ($s['IsPublished']) { $oh['withdraw-action']=lq ( 'e2m_note_withdraw',$parameters ); } $cb = [ 'title' => $ms. ': '. htmlspecialchars ($s['Title'],ENT_NOQUOTES,'UTF-8'), 'heading' => $ms, 'form' => 'form-note-delete', 'form-note-delete' => $oh, ]; return $cb; } function e2s_note_flag_favourite ($parameters){ $parameters['flag']='IsFavourite'; r1 ([ 'flag-name' => 'favourite', 'candy-name' => 'e2s_note_flag_favourite', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ em ($parameters); }, 'redirect-candy' => 'e2m_note', ]); } function e2s_note_flag ($parameters){ em ($parameters); s1 (lq ('e2m_note',$parameters)); } function em ($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_note',$parameters)); } wd (); $note_id = $parameters['*note']['ID']; if (!is_numeric ($note_id)) throw new AeException ('Note record not cound from parameters'); e2_drop_caches_for_note_($note_id,$parameters['*note']['IsPublished']); if($parameters['flag']=='IsVisible'){ cb (); } ym (oq (), 'Notes', [ 'ID' => $note_id, $parameters['flag'] => (int) ($parameters['value']==1), ]); try { hv (jm ($note_id)); } catch (AeMySQLException $e){ v3 ($e,'Could not broadcast note flag change'); } return true; } function e2m_note_use_formatter ($parameters){ $note_id = $parameters['*note']['ID']; if (!is_numeric ($note_id)) { return e2m_error404 (); } e2_drop_caches_for_note_($note_id,$parameters['*note']['IsPublished']); if(in_array ($parameters['formatter'], ['raw','neasden'])) { ym (oq (), 'Notes', [ 'ID' => $note_id, 'FormatterID' => $parameters['formatter'], ]); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function rm ($ns,$parameters = []) { global$_strings; $ms = $_strings['pt--new-post']; $fs = $_strings['pt--new-post']; $note_id = 'new'; $ph = DEFAULT_FORMATTER; if ($ns == 'write'){ $bf = time (); $c8 = time (); $gb = wa (); $mf = 'draft'; $ky = $v8 = ''; } if ($ns == 'edit'){ $s = @$parameters['*note']; if (!$s) return e2m_error404 (); $bf = min ($s['Stamp'],time ()); $c8 = (int)$s['LastModified']; $gb = ha ($s); $mf = yf ($s); if ($s['IsPublished']) { $fs = $_strings['pt--edit-post']; $v8 = ''; $ky = e2_alias_of_note_with_id_($s['ID']); } else { $fs = $_strings['pt--edit-draft']; $v8 = d ( USER_DIR,oq (), 'find','n',$s['ID'],$s['Title'] ); if (@$s['OriginalAlias']) { $ky = $s['OriginalAlias']; } else { $ky = $v8; } } $note_id = $s['ID']; $ph = $s['FormatterID']; $ms = $s['Title']; } $b8 = ma (); $y8 = []; if ($b8 !== null){ foreach ($b8 as $hv){ $y8[] = $hv['tag-dotted']; } } $n8 = []; if ($ns == 'edit' and count ($y8)) { $b8 = ps ($s['ID']); foreach ($b8 as $tb){ $n8[] = qa ($tb); } } $m8 = []; foreach ($y8 as $f8){ $d8['tag-dotted']=$f8; $d8['selected?']=in_array ($f8,$n8); $m8[] = $d8; } $n8 = implode (', ',$n8); if ($ns == 'write'){ $as_ = $_strings['fb--save-and-preview']; } if ($ns == 'edit'){ if(array_key_exists ('draft',$parameters)) { $as_ = $_strings['fb--save-and-preview']; } else { $as_ = $_strings['fb--save-changes']; } } $ib = []; if ($ns == 'edit'){ $ib = sy ( $s['FormatterID'],$s['Text'],'full' ); } $pb = @unserialize ( $s['Uploads'] ) or $pb = []; $s8 = z2 ( s2 ( q2 ( $ib,$pb ) ) ); if ($ns == 'edit'){ i3 ( 'Notes', $s, $ib ); } $xz = vy (); $ez = by ($xz); $cb['title']=$ms; $cb['heading']=$fs; $cb['form']='form-note'; $cb['uploads'] = [ 'enabled?' => $ez, 'each' => $s8, 'default-name' => htmlspecialchars ($ky,ENT_COMPAT,'UTF-8'), 'upload-action' => lq ('e2j_file_upload'), 'remove-action' => lq ('e2j_file_remove'), ]; $cb['form-note'] = [ '.note-id' => $note_id, '.formatter-id' => $ph, '.last-modified-stamp' => $c8, '.published?' => (bool) @$s['IsPublished'], '.old-tags-hash' => md5 ($n8), '.action' => $ns, 'form-action' => lq ('e2s_note_process'), 'form-note-livesave-action' => lq ('e2j_note_livesave'), 'create:edit?' => (bool) ($ns == 'write'), 'title' => htmlspecialchars ((string) @$s['Title'],ENT_COMPAT,'UTF-8'), 'tags-info' => $m8, 'text' => htmlspecialchars ((string) @$s['Text'],ENT_NOQUOTES,'UTF-8'), 'stamp-formatted' => pa ('d.m.Y H:i:s',$bf,$gb), 'time' => @$s['IsPublished']? [(int)$bf,$gb]:false, 'draft?' => $mf === 'draft', 'uploads-enabled?' => $ez, 'summary' => (string) @$s['Summary'], 'alias-autogenerated' => htmlspecialchars ($v8,ENT_COMPAT,'UTF-8'), 'alias' => htmlspecialchars ($ky,ENT_COMPAT,'UTF-8'), 'submit-text' => $as_, 'space-usage' => yy ($xz), ]; if ($ns == 'edit'){ $cb['related-delete-href']=lq ( 'e2m_note_delete', ['*note' => $s] ); } return $cb; } function e2m_note_edit ($parameters = []) { return rm ('edit',$parameters); } function e2m_write () { return rm ('write'); } function e2s_note_process () { global$_strings; try { $q8 = cf (); $note_id = $q8['data']['id']; $ay = jm ($note_id); s1 (lq ('e2m_note', ['*note' => $ay])); } catch (AeFormIncompleteException $e){ hb ($_strings['er--post-must-have-title-and-text'],E2E_USER_ERROR); if($e->note_id === 'new'){ s1 (lq ('e2m_write')); } else { s1 (lq ('e2m_note_edit', ['*note' => jm ($e->note_id)])); } } catch (AeMySQLException $e){ v3 ($e,'Could not process note'); s1 (); } die; } function e2s_note_publish () { global$_config,$settings; $databaseConfiguration = oq (); wd (); $note_id = ''; if(array_key_exists ('note-id',$_POST))$note_id = trim ($_POST['note-id']); if (!is_numeric ($note_id) and $note_id !== 'new'){ throw new AeFormInconsistentException (); } $l8 = false; $s = jm ($note_id); if (!$s)s1 (); $z8 = $s['OriginalAlias']; $k8 = $s['Stamp']; $x8 = !$s['IsExternal']; $s['ID']=$note_id; $s['IsVisible']=1; $s['IsPublished']=1; $s['IsCommentable'] = (int)$settings['comments']['default_on']; $s['IsFavourite']=0; if(array_key_exists ('browser-offset',$_POST)) { $gb = d1 (@$_POST['browser-offset']); } else { $gb = wa (); } if ($l8 and $bf = pm ($l8,$gb)) { $s['Stamp']=$bf; } elseif ($x8){ $s['Stamp']=time (); } else { $s['Stamp']=$k8; } if (ld ($s)) { $s['IsIndexed']='1'; } if ($gb){ $s['Offset'] = (int)$gb['offset']; $s['IsDST'] = (int)$gb['is_dst']; } e2_drop_caches_for_note_($note_id,null); ym ($databaseConfiguration,'Notes',$s); $ky = ''; if ($z8 or $z8 === '0'){ $ky = d ( USER_DIR,$databaseConfiguration, 'set','n',$note_id,$z8 ); $s['OriginalAlias']=$ky; } if ($ky != $z8){ ym ($databaseConfiguration,'Notes',$s); } $mf = yf ($s); if ($mf === 'public'){ hv ($s); } s1 (lq ('e2m_note', ['*note' => $s])); } function tm ($note_id,$e8 = -1){ global$_config; $bs = true; if ($e8){ $bs = false; } if ($e8 === -1){ $bs = null; } e2_drop_caches_for_note_($note_id,$bs); mm ( "DELETE FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$note_id) ."'", 'delete note by ID' ); zd ($note_id); e2_delete_aliases_for_entity_('n',$note_id); mm ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". ((int)$note_id), 'delete tag bindings after deleting note' ); } function e2s_note_delete () { wd (); $note_id = ''; if(array_key_exists ('note-id',$_POST))$note_id = trim ($_POST['note-id']); if (!is_numeric ($note_id) and $note_id !== 'new'){ throw new AeFormInconsistentException (); } $e8 = (bool)$_POST['is-draft']; $s = jm ($note_id); if ($s){ $wh = lq ('e2m_note_broadcast', ['*note' => $s]); tm ($note_id,$e8); vv ($wh); } if ($e8){ s1 (lq ('e2m_drafts', ['page' => 1])); } else { s1 (); } die; } function e2j_note_livesave () { try { $q8 = cf (); } catch (AeFormIncompleteException $e){ $q8 = [ 'success' => false, 'error' => [ 'message' => 'Title or text is empty' ] ]; } catch (AeRecordNotFoundException $e){ $q8 = [ 'success' => false, 'error' => [ 'message' => 'Record not found' ] ]; } catch (AeMySQLException $e){ v3 ($e); $q8 = [ 'success' => false, 'error' => [ 'message' => 'Database error' ] ]; } echo json_encode ($q8); die; } function jm ($zy){ global$_config; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $zy ."'" ); $zb = dm (); if(count ($zb)>0){ return $zb[0]; } else { return false; } } function hm ($ay,$r8,$t8 = 1){ global$_config; $l5 = ($r8 == 'next')?'>':'<'; $j8 = ($r8 == 'next')?'':'DESC '; try { mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". $t8 ." ". "AND (". "`Stamp` ". $l5 ." '". $ay['Stamp'] ."' ". "OR (`Stamp` = '". $ay['Stamp'] ."' AND `ID` ". $l5 . $ay['ID'] .")". ") ". nf (cs ()). "ORDER BY `Stamp` ". $j8 . ", `ID` ". $j8 . "LIMIT 1", 'get '. $r8 .' note' ); $zb = dm (); if(count ($zb)>0) return $zb[0]; else return false; } catch (AeMySQLException $e){ v3 ($e,'Could not get '. $r8 .' note'); return null; } } function gm ($h8){ global$_config; if(Log::$a)__log ('Lastmodifieds for Local Copier'); $h8 = (string)$h8; $h8 = preg_replace ('[^0-9,]','',$h8); $h8 = trim ($h8,','); if(CACHE_LASTMODIFIEDS and is_file (USER_DIR . CACHE_FILENAME_LASTMODIFIEDS)) { $g8 = @unserialize (file_get_contents (USER_DIR . CACHE_FILENAME_LASTMODIFIEDS)); if ($g8['ids_csv']==$h8){ if(Log::$a)__log ('Returned from cache'); return $g8['lastmodifieds_json']; } } $c1 = '`ID`='. str_replace (',',' OR `ID`=',$h8); $w8 = []; mm ( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $c1 .")", 'get lastmodifieds for Local Copier' ); if(Log::$a)__log ('Requested from DB'); $x3 = dm (); foreach ($x3 as $s3 => $a3){ $w8[(int)$a3['ID']] = (int)$a3['LastModified']; } $u8 = json_encode ($w8); if ($u8 == '[]')$u8 = '{}'; $g8 = [ 'ids_csv' => $h8, 'lastmodifieds_json' => $u8, ]; if(CACHE_LASTMODIFIEDS){ e3 (USER_DIR . CACHE_FILENAME_LASTMODIFIEDS,serialize ($g8)); } return $u8; } function wm ($tm,$jm,$hm = false){ global$_config; list ($zn,$kn)=n1 ($tm,$jm,$hm); mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` AND (`Stamp` BETWEEN " .$zn. " AND " .$kn. ") ". "ORDER BY Stamp", 'get all notes for the date '. $hm .'.'. $jm .'.'. $tm ); $cb = []; foreach (dm () as $sf){ if(is_numeric ($hm)) { $d1 = ((int)$tm) .'/'. ((int)$jm) .'/'. ((int)$hm) == pa ('Y/n/j',$sf['Stamp'],ha ($sf)); } elseif(is_numeric ($jm)) { $d1 = ((int)$tm) .'/'. ((int)$jm) == pa ('Y/n',$sf['Stamp'],ha ($sf)); } else { $d1 = ((int)$tm) == pa ('Y',$sf['Stamp'],ha ($sf)); } if ($d1)$cb[] = $sf; } return $cb; } function e2_published_noterec_with_parameters_($parameters = []) { $ay = e2_noterec_with_parameters_($parameters); if ($ay and $ay['IsPublished']) return $ay; } function e2_noterec_with_parameters_($parameters = []) { global$_config; $ay = false; $o8 = false; if ((string) @$parameters['oalias']!=='')$o8 = $parameters['oalias']; if ((string)$o8 !== ''){ mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias` = '". $o8 ."' ". "AND `IsPublished` = 0", 'get note record by original alias' ); $ay = dm (); if(count ($ay)===1) { $ay = @$ay[0]; if ($ay) return $ay; } } $p8 = false; if (@$parameters['draft']!=='') $p8 = @$parameters['draft']; if (@$parameters['draft2']!=='')$p8 = @$parameters['draft2']; if ($p8){ $ay = jm ($p8); return $ay; } if ((string)$o8 !== ''){ $parameters['alias']=$o8; } if ((string) @$parameters['alias']!==''){ if ($cg = f (@$parameters['alias'])) { if ($cg['type']=='n'){ $ay = jm ($cg['id']); if ($ay and $ay['IsPublished']) return $ay; } } } if ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' ) { $yf = wm ( $parameters['year'],$parameters['month'],$parameters['day'] ); if (@$yf[$parameters['day-number']-1]) { return $yf[$parameters['day-number']-1]; } } return null; } function om ($ms,$l1,$gb,$vg){ $databaseConfiguration = oq (); vb (); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS); @unlink (USER_DIR . CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $ay = [ 'Title' => $ms, 'Text' => $l1, 'FormatterID' => DEFAULT_FORMATTER, 'OriginalAlias' => d ( USER_DIR,$databaseConfiguration, 'find','','',$ms ), 'Uploads' => $vg, 'IsPublished' => 0, 'Stamp' => (int)time (), 'LastModified' => (int)time (), ]; if ($gb and is_array ($gb)) { $ay['Offset'] = (int)$gb['offset']; $ay['IsDST'] = (int)$gb['is_dst']; } return bm ($databaseConfiguration,'Notes',$ay); } function pm ($bg,$gb){ $yg = '/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if(preg_match ($yg,$bg,$jm)) { $bf = gmmktime ($jm[4],$jm[5],$jm[6],$jm[2],$jm[1],$jm[3]); $bf -= ia ($gb,$bf); return $bf; } else { return false; } } function cf () { global$_config; if(Log::$a)__log ('Process note form'); wd (); $note_id = $ms = $ng = $l1 = $mg = $fg = ''; if(array_key_exists ('note-id',$_POST)) $note_id = trim ($_POST['note-id']); if(array_key_exists ('title',$_POST)) $ms = trim ($_POST['title']); if(array_key_exists ('tags',$_POST)) $ng = $_POST['tags']; if(array_key_exists ('text',$_POST)) $l1 = trim ($_POST['text'],"\r\n"); if(array_key_exists ('summary',$_POST)) $mg = trim ($_POST['summary'],"\r\n"); if(array_key_exists ('old-tags-hash',$_POST)) $fg = $_POST['old-tags-hash']; if (!is_numeric ($note_id) and $note_id !== 'new'){ throw new AeFormInconsistentException (); } if ((string)$ms === '' or (string)$l1 === ''){ throw new AeFormIncompleteException ($note_id); } $dg = $l1; $dg = str_replace ("\n",'\n'."\n",$dg); $dg = str_replace ("\r",'\r'."\r",$dg); if (!is_array ($ng))$ng = []; $ng = trim (implode (', ',$ng)); $sg = z1 (',',$ng,'sort'); $ng = implode (', ',$sg); $ag = md5 ($ng); if(array_key_exists ('browser-offset',$_POST)) { $gb = d1 (@$_POST['browser-offset']); } else { $gb = wa (); } $qg = @$_POST['old-stamp']; $l8 = @$_POST['stamp']; $ky = @$_POST['alias']; $databaseConfiguration = oq (); if($note_id == 'new'){ $vg = ''; if(is_file (USER_DIR . 'new-uploads.psa')) { $vg = @file_get_contents (USER_DIR . 'new-uploads.psa'); } $ay = om ($ms,$l1,$gb,$vg); $note_id = (int)$ay['ID']; @unlink (USER_DIR . 'new-uploads.psa'); $x3 = [ 'success' => true, 'data' => [ 'status' => 'created', 'id' => $note_id, 'note-url' => lq ('e2m_note', ['*note' => $ay]), 'note-edit-url' => lq ('e2m_note_edit', ['*note' => $ay]) ] ]; } else { $lg = jm ($note_id); if (!$lg){ throw new AeRecordNotFoundException (); } e2_drop_caches_for_note_($note_id,$lg['IsPublished']); $zg = $lg; $zg['ID']=$note_id; $zg['Title']=$ms; $zg['Summary']=$mg; $zg['Text']=$l1; $zg['FormatterID']=$lg['FormatterID']; $zg['LastModified']=time (); $zg['IsIndexed']='0'; if ($zg['FormatterID']!=='raw'){ $zg['FormatterID']=DEFAULT_FORMATTER; } if ($qg != $l8){ if ($bf = pm ($l8,$gb)) { $zg['Stamp']=min ($bf,time ()); } } $ey = $ky; if ((string)$ky !== ''){ $kg = $ky; } elseif (!$lg['IsPublished']) { $kg = $ms; } else { $kg = ''; } if ($lg['IsPublished']) { $ey = d ( USER_DIR,$databaseConfiguration, 'set','n',$note_id,$kg ); $xg = [ '*note' => $zg, 'alias' => $ey, ]; } else { $ey = d ( USER_DIR,$databaseConfiguration, 'find','n',$note_id,$kg ); $zg['OriginalAlias']=$ey; $xg = [ '*note' => $zg, 'alias' => $ey, ]; } $ib = sy ( $zg['FormatterID'],$zg['Text'],'full' ); if(count ($ib)>0){ t2 ($ib); j2 ($ib); } ym ($databaseConfiguration,'Notes',$zg); if ($zg['IsPublished']) { if (ld ($zg)) { $zg['IsIndexed']='1'; ym ($databaseConfiguration,'Notes',$zg); } if ($qg != $l8){ b (true); } hv ($zg); } $x3 = [ 'success' => true, 'data' => [ 'status' => 'saved', 'id' => (int)$zg['ID'], 'new-alias' => $ey, 'note-url' => lq ('e2m_note',$xg), 'note-edit-url' => lq ('e2m_note_edit',$xg) ] ]; } if ($ag != $fg){ ca ($databaseConfiguration,$note_id,$sg); } if($_config['backup_automatically']) { am (); } return $x3; } function vf ($eg,$rg){ global$_config; if (!($eg and $rg) and !cs ()) { if(Log::$a)__log ('Error: e2_notes_count_generic called for invisible items unsecurely'); return null; } if (!is_bool ($eg) or !is_bool ($rg)) { if(Log::$a)__log ('Error: e2_notes_count_generic called with non-bool params'); return null; } if (!$eg and !$rg){ if(Log::$a)__log ('Error: e2_notes_count_generic called with nonsensical parameters'); return null; } $wf = ( USER_DIR . CACHES_DIRNAME . 'notes-count-p'. (int)$eg . ($eg ? ('v'. (int)$rg):'') . '.txt' ); $x3 = false; if(CACHE_NOTES_COUNTS and is_file ($wf)) { $x3 = (int) @file_get_contents ($wf); } if(is_numeric ($x3) and $x3 > 0){ return $x3; } else { $x3 = null; try { mm ( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". (int)$eg. " ". ($eg ? ( "AND `IsVisible`=". (int)$rg ) : ""), 'count notes with flags p'. (int)$eg . ($eg ? ('v'. (int)$rg):'') ); $x3 = dm (); $x3 = (int)$x3[0]['NotesCount']; if(CACHE_NOTES_COUNTS)e3 ($wf,$x3); } catch (AeMySQLException $e){ v3 ($e); if(Log::$a)__log ('Could not count notes'); } return $x3; } } function bf ($l1){ $mg = $l1; $mg = preg_match ( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/mu', $mg, $fe ); $mg = @$fe[3]; if (!$mg)$mg = $l1; if(mb_strlen ($mg) <= 50)$mg = $l1; $mg = str_replace ([ '<p>','<blockquote>','<ul>','<ol>','<br />', ], "\n",$mg); $mg = trim (strip_tags ($mg)); if(mb_strlen ($mg)>50){ $tg = mb_strpos ($mg,"\n",50); } else { $tg = mb_strrpos ($mg,"\n"); } if ($tg !== false){ $mg = mb_substr ($mg,0,$tg); $mg = trim ($mg,' :.()'."\n"); } if(preg_match ('/^(.{100,}?)(?:[:.!?()]|'."\n".')/su',$mg,$fe)) { $mg = trim ($fe[0],' :.()'."\n"); } if(preg_match ('/^(.{150,}?)[:.!?(),]/su',$mg,$fe)) { $mg = trim ($fe[0],' :.(),'."\n"); } if(preg_match ('/^(.{200,}?)[:.!?(), ]/su',$mg,$fe)) { $mg = trim ($fe[0],' :.()'."\n"); } $mg = preg_replace ('/[ \n\r\t]+/su',' ',$mg); if(mb_substr ($mg, -1)==='.')$mg = mb_substr ($mg,0, -1); if(mb_substr ($mg, -1)===':')$mg = mb_substr ($mg,0, -1); if(mb_substr ($mg, -1)==='!')$mg = mb_substr ($mg,0, -1); if (@in_array ($mg[mb_strlen ($mg)-1], [',',' '])) { $mg = trim ($mg,', '). '...'; } if(mb_strlen ($mg)>250){ $mg = trim (mb_substr ($mg,0,250)). '...'; } return $mg; } function yf ($ay){ $jg = false; if ($ay['IsPublished']) { if ($jg){ return 'scheduled'; } else { if ($ay['IsVisible']) { return 'public'; } else { return 'hidden'; } } } else { return 'draft'; } } function nf ($tn = false){ if ($tn){ return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time () .') '; } } function mf () { global$_config; if(CACHE_RANDOM_NOTE and is_file (USER_DIR . CACHE_FILENAME_RANDOM_NOTE)) { $n5 = @unserialize (file_get_contents (USER_DIR . CACHE_FILENAME_RANDOM_NOTE)); return $n5; } $n5 = false; $hg = vf (true,true); if ($hg >= 10){ mm ( "SELECT COUNT(*) as NotesCount FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsFavourite` = 1 ". "AND n.`IsPublished` = 1 ". "AND n.`IsVisible` = 1 ", 'get the number of visible published favourite notes' ); $x3 = dm (); $gg = (int)$x3[0]['NotesCount']; $wg = ''; if ($gg >= 10){ $wg = 'AND n.`IsFavourite` = 1'; } mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". $wg ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsVisible` = 1 ". "ORDER BY RAND() ". "LIMIT 1 ", 'get a random visible published and maybe favourite note' ); $yf = dm (); $n5 = lq ('e2m_note', ['*note' => $yf[0]]); } if(CACHE_RANDOM_NOTE){ e3 (USER_DIR . CACHE_FILENAME_RANDOM_NOTE,serialize ($n5)); } return $n5; } function ff ($ay){ return ''; } define ('OLBA_SPECIAL_CHAR',"\x1"); define ('OLBA_SPECIAL_SEQUENCE_LENGTH',6); function qf ($yw = null){ global$_template,$settings; if ($yw === null)$yw = @$settings['template']; $nw = null; $mw = null; $fw = null; $dw = array (); $sw = $yw; if ($sw !== null){ while (1){ foreach ([ USER_DIR . THEMES_DIRNAME, INSTANCE_DIR . THEMES_DIRNAME, SYSTEM_DIR . THEMES_DIRNAME ] as $aw){ $qw = $aw . $sw .'/'; if ( is_dir ($qw) and is_file ($qw .'/theme-info.php') ) { if(Log::$a)__log ('Theme "'. $sw .'" found in "'. $qw . '"'); break; } else { $qw = false; } } if (!$qw){ if(Log::$a)__log ('Theme "'. $sw .'" not found, using default theme "'. DEFAULT_TEMPLATE .'"'); $sw = DEFAULT_TEMPLATE; $qw = $aw . $sw .'/'; } array_push ($dw,$qw); $lw = include $qw .'/theme-info.php'; $zw[$qw]=$lw; if(array_key_exists ('meta_viewport',$lw)) { if ($nw === null){ $nw = $lw['meta_viewport']; } } if(array_key_exists ('supports_dark_mode',$lw)) { if ($mw === null){ $mw = $lw['supports_dark_mode']; } } if(array_key_exists ('use_likely_light',$lw)) { if ($fw === null){ $fw = $lw['use_likely_light']; } } if(array_key_exists ('based_on',$lw)) { $sw = $lw['based_on']; } else { break; } } } if ($nw === null)$nw = ''; if ($mw === null)$mw = false; if ($fw === null)$fw = false; $qw = SYSTEM_THEME_DIR; array_push ($dw,$qw); $zw[$qw] = []; $_template['name']=$yw; $_template['meta_viewport']=$nw; $_template['supports_dark_mode']=$mw; $_template['use_likely_light']=$fw; $_template['stack']=$dw; $_template['infos']=$zw; }; function lf ($kw){ global$content; if (!isset ($_olba_includes))$_olba_includes = 0; ++ $_olba_includes; if(Log::$a)__log ('Eat "'. $kw .'"'); ob_start (); include $kw; return ob_get_clean (); } function zf ($nb){ return ( OLBA_SPECIAL_CHAR. str_pad ($nb,OLBA_SPECIAL_SEQUENCE_LENGTH,'0',STR_PAD_LEFT). OLBA_SPECIAL_CHAR ); } function kf ($name){ static $nb = 0; y2 ($name,'_olba_placeholders'); return zf ($nb ++); } function xf ($xw){ global$_olba_placeholders; foreach($_olba_placeholders as $nb => $cv){ $ew = zf ($nb); $rw = strpos ($xw,$ew); $tw = rf ($cv,true); if ($rw !== false){ $xw = substr_replace ( $xw,$tw,$rw,strlen ($ew) ); } else { break; } } return $xw; } function ef ($jw){ foreach ([ USER_DIR . EXTRAS_DIRNAME, INSTANCE_DIR . EXTRAS_DIRNAME, SYSTEM_DIR . EXTRAS_DIRNAME ] as $hw){ if(is_dir ($hw)) { $gw = $hw . $jw .'.tmpl.php'; if(is_file ($gw)) { return lf ($gw); } } } return ''; } function rf ($jw){ global$_template,$_olba_includes; $gw = 'templates/'. $jw .'.tmpl.php'; if ($kw = e2o__usable_file_with_basename_($gw)) { return lf ($kw); } else { ob_end_clean (); throw new AeOlbaTemplateMissingException ('Missing: '. $gw); } } function tf () { global$_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists ('raw',$_GET) ) { $ww = 'raw'; } else { $ww = 'main'; } return rf ($ww,true); } function jf ($uw){ y2 ($uw .'.css','_olba_used_stylesheets'); } function hf ($iw){ y2 ($iw .'.js','_olba_used_scripts'); } function gf ($ow){ foreach ([ SYSTEM_DIR . LIBRARY_DIRNAME, INSTANCE_DIR . LIBRARY_DIRNAME, USER_DIR . LIBRARY_DIRNAME ] as $pw){ foreach(glob ($pw . $ow .'/*') as $m2){ $w4 = pathinfo ($m2,PATHINFO_EXTENSION); if ($w4 == 'js'){ y2 ($m2,'_olba_used_scripts'); } if ($w4 == 'css'){ y2 ($m2,'_olba_used_stylesheets'); } } } } function wf () { global$_template,$settings; foreach ([ USER_DIR . THEMES_DIRNAME, INSTANCE_DIR . THEMES_DIRNAME, SYSTEM_DIR . THEMES_DIRNAME ] as $cu){ if ($vu = @opendir ($cu)) { while (false !== ($bu = readdir ($vu))) { if(is_dir ($cu. $bu) and $bu != '.' and $bu != '..'){ if(is_file ($cu . $bu .'/theme-info.php')) { $yu[$bu]=$cu . $bu .'/'; } } } closedir ($vu); } } $rv = array (); $nu = 1000; foreach ($yu as$name => $w){ $lw = include $w .'theme-info.php'; $mu = @$lw['display_name']; if (!$mu) continue; if(is_array ($mu)) { if(array_key_exists ($settings['language'],$mu)) { $mu = $mu[$settings['language']]; } else { $mu = array_shift ($mu); } } $nb = @$lw['index'] or $nb = $nu ++; $fu = @$lw['colors']; if (!$fu)$fu = array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $du = (bool) ($name == $_template['name']); if ($du){ $su = lq ('e2m_theme_preview', array ('theme' => '')); } else { $su = lq ('e2m_theme_preview', array ('theme' => $name)); } $rv[$nb] = array ( 'name' => $name, 'display-name' => $mu, 'colors' => $fu, 'current?' => $du, 'preview-url' => $su, 'supports-dark-mode?' => (bool) @$lw['supports_dark_mode'], ); } ksort ($rv); return $rv; } function uf ($wd){ return e2o__usable_file_with_basename_('images/'. $wd); } function if_ ($au){ $qu = e2o__usable_file_with_basename_('images/'. $au .'.svg'); if(is_file ($qu)) { return file_get_contents ($qu); } return ''; } function of ($uw){ global$_template; $hd = 'styles/'. $uw .'.css'; $lu = array (); foreach($_template['stack'] as $qw){ if(is_file ($wd = $qw . $hd)) { $lu[] = $wd; } if ( array_key_exists ('reset_styles',$_template['infos'][$qw]) and in_array ($uw,$_template['infos'][$qw]['reset_styles']) ) { break; } } $lu = array_reverse ($lu); } function pf ($rv){ foreach ($rv as $s3 => $a3){ $id = stat ($a3); $rv[$s3]=AeEnv::$base_url . $rv[$s3] .'?'. $id['mtime']; } return $rv; } function c2 () { global$_olba_used_stylesheets,$_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets = array_unique ($_olba_used_stylesheets); $zu = array (); foreach($_olba_used_stylesheets as $uw){ if(is_file ($uw)) { $zu[] = $uw; continue; } if(is_file ($wd = USER_DIR . SCRIPTS_SUBDIR . $uw)) { $zu[] = $wd; } $hd = 'styles/'. $uw; $lu = array (); foreach($_template['stack'] as $qw){ if(is_file ($wd = $qw . $hd)) { $lu[] = $wd; } if ( array_key_exists ('reset_styles',$_template['infos'][$qw]) and in_array ($uw,$_template['infos'][$qw]['reset_styles']) ) { break; } } $lu = array_reverse ($lu); $zu = array_merge ($zu,$lu); } $zu = pf ($zu); return $zu; } function v2 () { global$_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts = array_unique ($_olba_used_scripts); $ku = array (); foreach($_olba_used_scripts as $iw){ if ( substr ($iw,0,7)=='http://' or substr ($iw,0,8)=='https://' or substr ($iw,0,2)=='//' ) { $ku[] = $iw; continue; } if(is_file ($iw)) { $ku[] = $iw; continue; } if(is_file ($xu = USER_DIR . SCRIPTS_SUBDIR . $iw)) { $ku[] = $xu; } $hd = SCRIPTS_SUBDIR . $iw; if ($xu = e2o__usable_file_with_basename_($hd)) { $ku[] = $xu; } } $ku = pf ($ku); return $ku; } function b2 ($eu){ if (!is_array ($eu)) return; foreach ($eu as $vx){ if(substr ($vx, -3)=='.js'){ hf (substr ($vx,0, -3)); } if(substr ($vx, -4)=='.css'){ jf (substr ($vx,0, -4)); } } } function y2 ($cv,$cs){ if (!isset ($GLOBALS[$cs])) { $GLOBALS[$cs] = array ($cv); } else { $GLOBALS[$cs][] = $cv; } } function e2o__usable_file_with_basename_($hd){ global$_template; if (!isset ($_template))qf (); foreach($_template['stack'] as $qw){ if(is_file ($wd = $qw . $hd)) { return $wd; } } return ''; } function e2m_theme_preview ($parameters){ global$_lang,$_strings,$_config,$_template; if (!$_config['allow_themes_preview']) { return e2m_error404 (); } if ((string)$parameters['theme']!==''){ qf ($parameters['theme']); } else { qf (); } if($parameters['theme']==$_template['name']) { s1 (lq ('e2m_theme_preview', ['theme' => ''])); } $mx = $_lang; if (!is_file ($m2 = 'system/preview/'. $mx .'.php')) { $mx = $_strings['--secondary-language']; $m2 = 'system/preview/'. $mx .'.php'; } if (!is_file ($m2 = 'system/preview/'. $mx .'.php')) { $m2 = 'system/preview/'. DEFAULT_LANGUAGE .'.php'; } $v = include $m2; return $v; } function e2m_popular ($parameters = []) { global$settings,$_config,$_strings; $tn = cs (); $popularView = new AePageableNotesView ('e2m_popular',$parameters); $popularView -> setPortionSize ($settings['appearance']['notes_per_page']); $popularView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $popularView -> setWantNewCommentsCount ($tn); $popularView -> setWantReadHrefs ($_config['count_reads']); $popularView -> setWantControls ($tn and !@$_config['read_only']); $popularView -> setWantHiddenTags ($tn); AeMainMenuManager :: $isPopularCurrent = true; $nl = $_config['popular_period']; if ($nl === 'ever'){ $popularView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". nf ($tn). "ORDER BY `ReadCount` DESC" ); } else { $ml = time () - n3 ($_config['popular_period']); $ru = ( "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND a.`Stamp` > ". $ml ." ". "AND n.`IsPublished` = 1 ". nf ($tn). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID`" ); $popularView -> setSQLCountRequest ( "SELECT COUNT(*) Total FROM (SELECT 1 ". $ru .") _" ); $popularView -> setLimitlessSQLRequest ( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". $ru ." ". "ORDER BY `AggregateReadCount` DESC" ); } $cb = [ 'title' => e2l_get_string ('pt--most-read', ['period' => $nl]), 'heading' => e2l_get_string ('pt--most-read', ['period' => $nl]), 'notes' => $popularView -> getNotesCTree (), 'pages' => $popularView -> getPagesCTree (), ]; if($popularView -> isFirstPageOfEmptyView ()) { $cb['nothing']=$_strings['gs--no-such-notes']; } elseif (!$popularView -> isExistingPage ()) { return e2m_error404 (); } return $cb; } function m2 ($ys = false,$e3 = []) { global$_config,$_current_url; $tu = $ju = ''; $mostReadNotesCollectionView = new AeArbitraryNotesCollectionView ('most read or most read by tag'); $mostReadNotesCollectionView -> setCurrentURL ($_current_url); $mostReadNotesCollectionView -> setFilterOutIDs ($e3); $ml = time () - n3 ($_config['popular_period']); $mostReadNotesCollectionView -> setSQLRequest ( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". $tu. "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". $ju. "AND a.`Stamp` > ". $ml ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". nf (cs ()). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC ". "LIMIT 10" ); if ($ys === false){ if(CACHE_POPULAR){ $mostReadNotesCollectionView -> setViewExpiration (SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename (USER_DIR . CACHE_FILENAME_POPULAR); $mostReadNotesCollectionView -> setCacheExpiresFilename (USER_DIR . CACHE_FILENAME_POPULAR_EXPIRES); } } else { if(CACHE_POPULAR_WITH_TAG){ $mostReadNotesCollectionView -> setViewExpiration (SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename (e2_cache_filename_with_id_($ys,USER_DIR . CACHE_FILENAMES_POPULAR_WITH_TAG)); $mostReadNotesCollectionView -> setCacheExpiresFilename ( e2_cache_filename_with_id_($ys,USER_DIR . CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES) ); } } return$mostReadNotesCollectionView -> getNotesCTree (); } function f2 ($ys = false,$e3 = []) { global$_strings; $hu = [ 'title' => $_strings['nm--most-read'], ]; $hu['each']=m2 ($ys,$e3); if ($ys){ $hu['seed']=$ys; } if(count ($hu['each']) < 7){ return []; } return $hu; } function e2s_post_service ($parameters){ global$_config; $gu = lq ('e2m_settings'); if($_config['allow_underhood_access']) { $gu = lq ('e2m_underhood'); } if($_SERVER['REQUEST_METHOD']!='POST'){ s1 ($gu); } if($_config['allow_underhood_access']) { if($parameters['service']==='build'){ wd (); e2_build (); hb ('Engine core built',E2E_MESSAGE); } if($parameters['service']==='sync'){ wd (); e2_drop_all_kinds_of_cache (); hb ('Caches invalidated',E2E_MESSAGE); } if($parameters['service']==='checklist-reset'){ wd (); es (); hb ('Checklist reset',E2E_MESSAGE); } if($parameters['service']==='log'){ wd (); an (); hb ('Logs enabled',E2E_MESSAGE); } if($parameters['service']==='unlog'){ wd (); o1 (INSTANCE_DIR . LOGS_DIRNAME . '*'); hb ('All logs deleted',E2E_MESSAGE); } if($parameters['service']==='migrate'){ wd (); jn (oq ()); hb ('Database structure up to date',E2E_MESSAGE); } } if($parameters['service']==='backup'){ } s1 ($gu); } define ('PROVIDE_MEDIA_ASYNC',10); define ('PROVIDE_MEDIA_NOW',20); function d2 ($wu){ global$_config; $uu = parse_url ($wu); if (isset ($uu['host'])) { $url = $wu; if ($uu['host']=='www.youtube.com'){ $zy = basename ($uu['path']); $iu = 'remote/youtube-'. $zy .'-cover.jpg'; return [ 'url' => $url, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'youtube', 'video-id' => $zy, 'local-cover-href' => AeEnv::$base_url . PICTURES_DIRNAME . $iu, 'local-relative-filename' => $iu, 'local-full-filename' => $_config['path_media'].PICTURES_DIRNAME . $iu, 'local-full-failname' => $_config['path_media'].PICTURES_DIRNAME . $iu . '.failed', ]; } elseif ($uu['host']=='player.vimeo.com'){ $zy = basename ($uu['path']); $iu = 'remote/vimeo-'. $zy .'-cover.jpg'; return [ 'url' => $url, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'vimeo', 'video-id' => $zy, 'local-cover-href' => AeEnv::$base_url . PICTURES_DIRNAME . $iu, 'local-relative-filename' => $iu, 'local-full-filename' => $_config['path_media'].PICTURES_DIRNAME . $iu, 'local-full-failname' => $_config['path_media'].PICTURES_DIRNAME . $iu . '.failed', ]; } elseif (i2 ($uu['path'])) { return [ 'url' => $url, 'type' => 'remote-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => false, 'mime-type' => nd ($uu['path']), 'length' => '', ]; } else { return [ 'url' => $url, 'type' => 'remote-non-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => nd ($uu['path']), 'length' => '', ]; } } else { if (i2 ($uu['path'])) { $url = AeEnv::$base_url . PICTURES_DIRNAME . $uu['path']; $ou = $_config['path_media'].PICTURES_DIRNAME . $uu['path']; return [ 'url' => $url, 'type' => 'local-image', 'is-local?' => true, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => o2 ($uu['path']), 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'mime-type' => nd ($uu['path']), 'length' => @stat ($ou)['size'], 'local-href' => $url, 'local-cover-href' => $url, 'local-relative-filename' => $uu['path'], 'local-full-filename' => $ou, 'thumb-full-filename' => $ou, ]; } elseif (cd ($uu['path'])) { $url = AeEnv::$base_url . VIDEO_DIRNAME . $uu['path']; $ou = $_config['path_media'].VIDEO_DIRNAME . $uu['path']; return [ 'url' => $url, 'type' => 'local-video', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => nd ($uu['path']), 'length' => @stat ($ou)['size'], 'local-href' => $url, 'local-relative-filename' => $uu['path'], 'local-full-filename' => $ou, 'thumb-full-filename' => SYSTEM_THEME_DIR . VIDEO_ICON_FILENAME, ]; } else { $url = AeEnv::$base_url . AUDIO_DIRNAME . $uu['path']; $ou = $_config['path_media'].AUDIO_DIRNAME . $uu['path']; return [ 'url' => $url, 'type' => 'local-non-image', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => nd ($uu['path']), 'length' => @stat ($ou)['size'], 'local-href' => $url, 'local-full-filename' => $ou, 'thumb-full-filename' => SYSTEM_THEME_DIR . AUDIO_ICON_FILENAME, ]; } } } function s2 ($m4){ $pu = []; foreach ($m4 as $wu){ $a8 = d2 ($wu); if ($a8['is-local?'])$pu[] = $wu; } return $pu; } function a2 ($m4){ $pu = []; foreach ($m4 as $wu){ $a8 = d2 ($wu); if ($a8['is-snippetable?'])$pu[] = $wu; } return $pu; } function q2 ( $ib,$pb ){ if (!is_array ($ib))$ib = []; if (!is_array ($pb))$pb = []; $m4 = array_merge ($pb,$ib); $m4 = array_reverse ($m4); $m4 = array_unique ($m4); $m4 = array_reverse ($m4); return $m4; } function l2 ($m4){ if (!is_array ($m4) or !count ($m4)) return []; j2 ($m4); $c0 = []; foreach ($m4 as $wu){ if (!empty ($v0[$wu])) continue; $a8 = d2 ($wu); if (!$a8['is-usable-as-cover?']) continue; if (!is_file ($a8['local-full-filename'])) continue; $size = e2_getimagesize ($a8['local-full-filename']); list ($vz,$bz,$o6,$p6)=$size; $c0[] = [ 'src' => $a8['local-cover-href'], 'width' => $vz, 'height' => $bz, 'horizontality' => $o6, 'verticality' => $p6, ]; $v0[$wu]=true; } return $c0; } function z2 ($m4){ global$_strings; if (!is_array ($m4) or !count ($m4)) return []; j2 ($m4); $b0 = []; foreach ($m4 as $wu){ if (!empty ($v0[$wu])) continue; $a8 = d2 ($wu); if (!$a8['is-using-thumbnails?']) continue; if (!is_file ($a8['local-full-filename'])) continue; $y0 = [ 'is-available?' => true, 'src' => '', 'width' => '', 'height' => '', 'original-filename' => '', 'original-filesize' => '', ]; if (!$a8['is-local?'] or is_file ($a8['local-full-filename'])) { if ($a8['is-generating-thumbnail?']) { $n0 = h2 ( $a8 ); } else { $n0 = $a8['thumb-full-filename']; } } if (empty ($n0)) { $y0['is-available?']=false; $n0 = g2 ( $a8['local-relative-filename'] ); } $y0['src']=o3 ($n0); if ($y0['is-available?']) { $size = e2_getimagesize ($n0); list ($vz,$bz)=$size; } else { $vz = $bz = ''; } if (!$vz)$vz = THUMB_WIDTH/2; if (!$bz)$bz = THUMB_HEIGHT/2; list ($vz,$bz)=e2_fit_metrics_to_constraints ( [$vz,$bz], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $y0['width']=$vz; $y0['height']=$bz; if ($a8['is-local?']) { $y0['original-filename']=$wu; if(is_file ($a8['local-full-filename'])) { $p4 = stat ($a8['local-full-filename'])[7]; $p4 = round ($p4 / 1024) .' '. $_strings['gs--kb']; $y0['original-filesize']=$p4; } } $b0[] = $y0; $v0[$wu]=true; } return $b0; } function k2 ($m0){ foreach ( ['maxresdefault','hqdefault','mqdefault','sddefault','default'] as $wd ) { $url = 'http://img.youtube.com/vi/'. $m0 .'/'. $wd .'.jpg'; if(Log::$a)__log ('Trying '. $url .'...'); $f0 = @file_get_contents ($url); if ($f0 !== false) return $f0; } return false; } function x2 ($d0){ $s0 = @unserialize ( file_get_contents ('http://vimeo.com/api/v2/video/'. $d0 .'.php') ); if (!empty ($s0[0]['thumbnail_large'])) { return @file_get_contents ($s0[0]['thumbnail_large']); } return false; } function e2_ ($a8,$a0){ if(is_file ($a8['local-full-filename'])) { if(Log::$a)__log ('Already exists: '. $a8['local-full-filename']); } elseif(is_file ($a8['local-full-failname'])) { if(Log::$a)__log ('Already tried and failed: '. $a8['local-full-filename']); } else { if(Log::$a)__log ('Resource '. $a8['url'].' is missing a cover, retrieving'); if ($a0 == PROVIDE_MEDIA_ASYNC){ vv (lq ('e2s_retrieve', [ 'url' => strtr (base64_encode ($a8['url']), '+/','-_'), ])); } if ($a0 == PROVIDE_MEDIA_NOW){ if(Log::$a)__log ('Downloading "'. $a8['video-service'] .'" cover as '. $a8['local-full-filename'] .'...'); if ($a8['video-service']=='youtube'){ $f0 = k2 ($a8['video-id']); } if ($a8['video-service']=='vimeo') { $f0 = x2 ($a8['video-id']); } if ($f0 !== false){ e3 ($a8['local-full-filename'],$f0); } else { e3 ($a8['local-full-failname'],''); } } } } function r2 ($wu,$a0){ $a8 = d2 ($wu); if(Log::$a)__log ('Resource '. $wu .' is of type '. $a8['type']); if ($a8['type']=='local-image'){ h2 ($a8); } if ($a8['type']=='online-video'){ e2_ ($a8,$a0); if ($a0 == PROVIDE_MEDIA_NOW and is_file ($a8['local-full-filename'])) { h2 ($a8); } } if ($a8['type']=='remote-image'){ } } function t2 ($m4){ foreach ($m4 as $wu){ $a8 = d2 ($wu); if (empty ($a8['local-full-failname'])) continue; if(is_file ($a8['local-full-failname'])) { if(Log::$a)__log ('Deleting '. $a8['local-full-failname'] .' to try again'); unlink ($a8['local-full-failname']); } } } function j2 ($m4){ if (!is_array ($m4)) return; if(Log::$a)__log ('Asynchronously provide data for resnames {'); foreach ($m4 as $wu){ r2 ($wu,PROVIDE_MEDIA_ASYNC); } if(Log::$a)__log ('}'); } function h2 ($a8){ if (!$a8['is-generating-thumbnail?']) return false; return e2img_filename_by_processing ( $a8['local-full-filename'], g2 ($a8['local-relative-filename']), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); } function g2 ($q0){ global$_config; return bd ( $_config['path_media'].THUMBNAILS_DIRNAME . $q0, 'thumb@2x' ); } function u2 ($wu){ $z0 = pathinfo ($wu); $w4 = @$z0['extension']; return (in_array (strtolower ($w4), ['jpg','jpeg'])); } function i2 ($wu){ $z0 = pathinfo ($wu); $w4 = (string) @$z0['extension']; return (in_array (strtolower ($w4), ['jpg','jpeg','gif','png','webp','svg'])); } function o2 ($wu){ $z0 = pathinfo ($wu); $w4 = (string) @$z0['extension']; return (in_array (strtolower ($w4), ['jpg','jpeg','gif','png','webp'])); } function p2 ($wu){ $z0 = pathinfo ($wu); $w4 = (string) @$z0['extension']; return (in_array (strtolower ($w4), ['svg'])); } function cd ($wu){ $z0 = pathinfo ($wu); $w4 = (string) @$z0['extension']; return (in_array (strtolower ($w4), ['mp4','mov'])); } function vd ($wu){ $z0 = pathinfo ($wu); $w4 = (string) @$z0['extension']; return (in_array (strtolower ($w4), ['mp3'])); } function bd ($wu,$k0){ if (!empty ($k0)) { $x0 = explode ('/',$wu); $hd = array_pop ($x0); $e0 = explode ('.',$hd); if(count ($e0)<2)$e0[] = ''; $w4 = array_pop ($e0); $e0[] = $k0; if ($w4)$e0[] = $w4; $hd = implode ('.',$e0); $x0[] = $hd; $wu = implode ('/',$x0); } return $wu; } function yd ($w,$hd){ if (!is_file ($w . $hd)) return $hd; $r0 = strrpos ($hd,'.'); $t0 = substr ($hd,0,$r0); $w4 = substr ($hd,$r0); $rb = 0; while (is_file ($w . $t0 .'-'. (++ $rb).$w4)); $hd = $t0 .'-'. $rb . $w4; return $hd; } function nd ($wu){ $z0 = pathinfo ($wu); $w4 = @$z0['extension']; if ($w4 == 'png') return 'image/png'; if ($w4 == 'webp') return 'image/webp'; if ($w4 == 'gif') return 'image/gif'; if ($w4 == 'jpg' or $w4 == 'jpeg') return 'image/jpeg'; if ($w4 == 'mp3') return 'audio/mpeg'; if ($w4 == 'svg') return 'image/svg+xml'; if ($w4 == 'mp4') return 'video/mp4'; if ($w4 == 'mov') return 'video/quicktime'; } function md ($j0,$h0){ return strcasecmp ($j0,$h0)===0; } define ('SEARCH_EXTRA_PREFIX','Rose'); define ('SEARCH_LIMIT',20); define ('SEARCH_SNIPPETS_LIMIT',20); define ('SEARCH_USE_ROSE',1); define ('SEARCH_USE_MYSQL',1); define ('BSI_SELECT_PORTION',10); define ('BSI_GIVE_UP_TIMEOUT',10); define ('BSI_UNLOCK_TIMEOUT',10); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Storage\Database\MysqlRepository; use S2\Rose\Stemmer\PorterStemmerEnglish; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Entity\ExternalContent; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found ($parameters = array ()) { global$_strings,$_config; $parameters['query']=trim ($parameters['query']); $z2 = $parameters['query']; if (!$z2){ return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $g0 = false; $w0 = []; try { if (cs ()) { $u0 = ''; } else { $u0 = 'AND `IsVisible` = 1 '; } mm ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". $u0 . "AND `Keyword`='". sm ($z2) ."'", 'get tags matching the search query' ); $zb = dm (); if (isset ($zb[0]['ID'])) { $g0 = [ 'href' => lq ('e2m_tag', array ('*tag' => $zb[0])), 'name' => htmlspecialchars ($z2,ENT_NOQUOTES,'UTF-8'), 'visible?' => (bool)$zb[0]['IsVisible'], ]; $w0 = ba ($zb[0]['ID'],4); array_unshift ($w0,$g0); } } catch (AeMySQLException $e){ v3 ($e,'Could not get tags matching the search query'); } $i0 = z1 (' ',$parameters['query']); if(SEARCH_USE_ROSE){ $o0 = new PorterStemmerRussian (new PorterStemmerEnglish ()); foreach ($i0 as $s3 => $a3){ $i0[$s3]=$o0 -> stemWord ($i0[$s3]); } } $p0 = array (); $tn = cs (); if(SEARCH_USE_ROSE){ try { $ar = ed (oq ()); $c9 = new Finder ($ar,$o0); $c9 -> setHighlightTemplate ('<mark>%s</mark>'); $v9 = new Query ($z2); $v9 -> setInstanceId ($_config['db_table_subset']); $v9 -> setLimit (SEARCH_LIMIT); $resultSet = $c9 -> find ($v9); foreach($resultSet -> getFoundExternalIds () as $b9){ $y9 = $b9 -> getId (); if ($y9[0]=='n'){ $note_id = substr ($y9,1); $ay = jm ($note_id); if (!empty ($_config['search_favourites_boost'])) { if ($ay['IsFavourite']) { $resultSet->setRelevanceRatio ( $y9, $_config['search_favourites_boost'] ); } } } } $snippetBuilder = new SnippetBuilder ($o0); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets ( $resultSet, static function (array $m9) use ($tn,$_config){ $x3 = new ExternalContent (); foreach ( array_slice ($m9,0,SEARCH_SNIPPETS_LIMIT) as $b9 ) { $y9 = $b9 -> getId (); if ($y9[0]=='n'){ $note_id = substr ($y9,1); $ay = jm ($note_id); if ($ay){ $noteView = new AeNoteView ($ay); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($tn and !@$_config['read_only']); $noteView -> setWantHiddenTags ($tn); $j3 = $noteView -> getNoteCTree (); $f9[$ay['ID']] = $j3; $x3 -> attach ($b9,$j3['text']); } } } return $x3; } ); foreach($resultSet -> getItems () as $d9){ $s9 = $d9 -> getId (); if ($s9[0]=='n'){ $note_id = substr ($s9,1); $ay = jm ($note_id); if (!( yf ($ay)==='public' or ($tn and $ay['IsPublished']) )) continue; $ay['_']['_srprovider']='Rose'; $ay['_']['_rose_relevance']=$d9 -> getRelevance (); $ay['_']['_rose_title']=$d9 -> getHighlightedTitle ($o0); $ay['_']['_rose_snippet']=$d9 -> getSnippet (); $p0[] = $ay; } } $a9 = false; if (@$_config['dev_rose_info']) { $a9 = print_r ($resultSet -> getTrace (), true); } } catch (EmptyIndexException $e){ jd (oq ()); sd (USER_DIR); } catch (AeMySQLException $e){ v3 ($e,'Could not do something with the database while working on Rose search results'); } } if(SEARCH_USE_MYSQL){ $q9 = sm (preg_quote ($z2)); $l9 = 'MySQL FT'; $z9 = ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 AND (". "MATCH (`Title`, `Text`) AGAINST ('". $q9 ."')". ") ". nf ($tn). "LIMIT ". SEARCH_LIMIT ); try { mm ( $z9, 'search using MySQL fulltext search' ); $x3 = dm (); foreach ($x3 as $s3 => $ay){ $ay['_']['_srprovider']=$l9; $p0[] = $ay; } } catch (AeMySQLException $e){ v3 ($e,'Could not search using MySQL fulltext search'); } } $k9 = array (); $xn = array (); $rb = 0; foreach ($p0 as $ay){ if (!in_array ($ay['ID'],$k9)) { if (!empty ($f9[$ay['ID']])) { $r = $f9[$ay['ID']]; } else { $noteView = new AeNoteView ($ay); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($tn and !@$_config['read_only']); $r = $noteView -> getNoteCTree (); } $r['search-result-provider']=$ay['_']['_srprovider']; if ($ay['_']['_srprovider']=='Rose'){ $r['search-rose'] = [ 'relevance' => $ay['_']['_rose_relevance'], 'title' => $ay['_']['_rose_title'], 'snippet' => $ay['_']['_rose_snippet'], ]; } if (@$ay['_']['_rose_title']) { $r['title']=$ay['_']['_rose_title']; } else { $r['title']=rd ($r['title'],$i0); } $r['title']=dy ($r['title']); if (!empty ($ay['_']['_rose_snippet'])) { $r['snippet-text']=$ay['_']['_rose_snippet']; } else { $l1 = $r['text']; $l1 = preg_replace ('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i','',$l1); $l1 = preg_replace ('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i','',$l1); $l1 = str_replace ( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $l1 ); $l1 = strip_tags ($l1); $x9 = array (); $e9 = preg_split ('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis',$l1); $r9 = 0; $t9 = ''; foreach ($e9 as $j9){ $j9 = trim ($j9); if (!$j9) continue; if (!$t9)$t9 = $j9; $h9 = $j9; $h9 = rd ($h9,$i0); if ($h9 != $j9){ $x9[] = td ($h9); $r9 ++; if ($r9 > 3) break; } } if(count ($x9)) { $r['snippet-text']=implode (' · ',$x9); } else { $r['snippet-text']=$t9; } } $r['has-highlighed-thumbs?']=false; if ($ib = @$r['format-info']['resources-detected']) { $g9 = z2 ( a2 ($ib) ); foreach ($g9 as $s3 => $a3){ $g9[$s3]['highlighted?'] = ( strstr ($a3['original-filename'],$z2)!==false ); if ($g9[$s3]['highlighted?']) { $r['has-highlighted-thumbs?']=true; } } $r['thumbs']=$g9; } $xn[] = $r; $k9[] = $ay['ID']; $rb ++; if ($rb >= SEARCH_LIMIT) break; } } $t2 = count ($xn); if ($t2){ $w9 = e2l_get_string ( 'pt--n-posts', array ('number' => $t2) ); } else { $w9 = $_strings['pt--no-posts']; $cb['nothing']=$_strings['gs--nothing-found']; } if ($rb >= SEARCH_LIMIT){ $w9 = $_strings['gs--many-posts']; } if ($w0){ $cb['search-related-tags']=$w0; } $cb['notes']=$xn; $cb['pages'] = array (); $cb['title']=$w9 .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars ($z2,ENT_NOQUOTES,'UTF-8'); $cb['heading']=$z2; if (@$a9){ $cb['rose-debug-info']=$a9; } return $cb; } function fd ($parameters){ if(Log::$a)__log ('Search form'); $z2 = trim ((string) @$parameters['query']); return [ 'form-action' => lq ('e2s_search'), 'query' => htmlspecialchars ($z2,ENT_COMPAT,'UTF-8'), ]; } function e2s_search () { $z2 = @$_POST['query']; $z2 = str_replace ('?',urlencode ('?'),$z2); $z2 = str_replace ('/',' ',$z2); $z2 = trim ($z2); $z2 = str_replace (' ','+',$z2); s1 (lq ('e2m_found', array ('query' => $z2))); } function dd () { global$_config; mm ( "SELECT COUNT(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ", 'count total published notes' ); $l6 = dm (); $u9 = $l6[0]['c']; mm ( "SELECT COUNT(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed` = 1 AND `IsPublished` = 1 ", 'count indexed published notes' ); $l6 = dm (); $i9 = $l6[0]['c']; $o9 = true; foreach (xd () as $u5){ if (!pn ( oq (), SEARCH_EXTRA_PREFIX . $u5 )) { $o9 = false; break; } } $p9 = ad (USER_DIR); if (!$o9){ $i9 = 0; $p9['spent']=false; } $ci = $u9 - $i9; return [ 'indexed_count' => $i9, 'total_count' => $u9, 'remaining_count' => $ci, 'time_spent' => @$p9['spent']? $p9['spent']:false, ]; } function e2s_bsi_step () { global$_config; $p9 = ad (USER_DIR); ignore_user_abort (true); echo '<pre>'; if($_config['log_bsi']) { Log::$a = true; if(Log::$a)dn ('bsi'); } if(Log::$a)__log ('BSI step'); if ( !isset ($p9['lock']) or $p9['lock']<time () - (BSI_GIVE_UP_TIMEOUT + BSI_UNLOCK_TIMEOUT) ) { if (isset ($p9['lock'])) { if(Log::$a)__log ('Indexer: old lock is '. $p9['lock']); echo 'Old lock is '. $p9['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $p9['lock']=time (); if (!@e3 (USER_DIR . 'bsi.psa',serialize ($p9))) { if(Log::$a)__log ('Indexer: can’t get a new lock'); die ('Can’t get a new lock<br />'); } if(Log::$a)__log ('Indexer: new lock is '. $p9['lock']); echo 'New lock is '. $p9['lock'] .'<br /><br />'; try { $rb = 0; $vi = 0; $bi = yq (); $yi = false; $ni = false; while ($vi < BSI_GIVE_UP_TIMEOUT){ mm ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION, 'get portion of unindexed notes for indexing' ); $l6 = dm (); if(count ($l6)) { ++ $rb; if(Log::$a)__log ('Indexer: portion '. $rb); echo 'Portion '. $rb .'<br />'; foreach ($l6 as $s){ if(Log::$a)__log ('Indexer: indexing "'. $s['Title'].'"'); echo 'Indexing: '. $s['Title'] .'<br />'; if (ld ($s)) { $s['IsIndexed']='1'; ym (oq (), 'Notes',$s); } else { $ni = true; break 2; } if($_config['broadcast_on_indexing']) { wv ($s); } } $vi = round (yq () - $bi,3); if(Log::$a)__log ('Indexer: steps done '. count ($l6) .', spent '. $vi .' ms so far'); echo 'Steps done '. count ($l6) .', spent '. $vi .' ms so far<br /><br />'; } else { $yi = true; break; } } if ($yi){ if(Log::$a)__log ('Indexer: indexing complete'); echo 'Indexing complete<br /><br />'; if(CACHE_INDEXED_FLAG){ @e3 (USER_DIR . CACHE_FILENAME_INDEXED_FLAG,''); } } elseif ($ni){ if(Log::$a)__log ('Indexer: indexing failed'); echo 'Indexing failed<br /><br />'; } else { if(Log::$a)__log ('Indexer: time out'); echo 'Time out<br />'; unset ($p9['lock']); } if ($p9['spent']!=='?')$p9['spent']+=$vi; @e3 (USER_DIR . 'bsi.psa',serialize ($p9)); } catch (AeMySQLException $e){ v3 ($e,'Could not index notes'); if(Log::$a)__log ('Indexer: DB unaccessible'); echo 'DB unaccessible<br />'; } } else { if(Log::$a)__log ('Indexer: locked'); echo 'Locked<br />'; } die ('</pre>'); } function e2s_reindex () { global$_config; if (!$_config['allow_underhood_access']) { s1 (lq ('e2m_settings')); } if($_SERVER['REQUEST_METHOD']=='POST'){ wd (); @unlink (USER_DIR . CACHE_FILENAME_INDEXED_FLAG); jd (oq (), true); sd (USER_DIR); } s1 (lq ('e2m_underhood')); } function sd ($cy){ $p9 = ['spent' => 0]; @e3 ($cy . 'bsi.psa',serialize ($p9)); return $p9; } function ad ($cy){ $p9 = @unserialize (file_get_contents (USER_DIR . 'bsi.psa')); if (!is_array ($p9)) { $p9 = sd ($cy); } return $p9; } function qd () { if(CACHE_INDEXED_FLAG and is_file (USER_DIR . CACHE_FILENAME_INDEXED_FLAG)) { return true; } $mi = dd (); $vj = ($mi['remaining_count']===0); if(CACHE_INDEXED_FLAG and $vj){ e3 (USER_DIR . CACHE_FILENAME_INDEXED_FLAG,''); } return $vj; } function ld ($ay){ static $fi = null; if(Log::$a)__log ('Indexer: index noterec'); $databaseConfiguration = oq (); try { if ($fi === null){ $o0 = new PorterStemmerRussian (new PorterStemmerEnglish ()); $fi = new Indexer (ed ($databaseConfiguration),$o0); } $sd = ay ($ay['FormatterID'], @$ay['Text'],'full-rss'); r3 ( 'note',$ay, $sd['meta']['resources-detected'] ); $l1 = strip_tags ($sd['text-final']); $di = new Indexable ( 'n'. $ay['ID'], $ay['Title'], $l1, $databaseConfiguration -> getSubset () ); $fi -> index ($di); return true; } catch (EmptyIndexException $e){ jd (oq ()); sd (USER_DIR); } catch (\Exception $e){ v3 ($e,'Could not index note'); return false; } } function zd ($zy){ global$_config; static $fi = null; $databaseConfiguration = oq (); try { if ($fi === null){ $o0 = new PorterStemmerRussian (new PorterStemmerEnglish ()); $fi = new Indexer (ed ($databaseConfiguration),$o0); } return $fi -> removeById ('n'. $zy,$_config['db_table_subset']); } catch (EmptyIndexException $e){ jd ($databaseConfiguration); sd (USER_DIR); } catch (\Exception $e){ v3 ($e,'Could not unindex note'); return false; } } function kd ($si){ $prefix = 'S2\\Rose\\'; if(BUILT){ $ai = __DIR__ . '/library/rose/'; } else { $ai = __DIR__ . '/../library/rose/'; } $nz = strlen ($prefix); if(strncmp ($prefix,$si,$nz)!==0) return; $qi = substr ($si,$nz); $m2 = $ai . str_replace ('\\','/',$qi).'.php'; if(file_exists ($m2)) require $m2; } function xd () { return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function ed (AeDatabaseConfiguration $databaseConfiguration){ static $li = null; if ($li === null and SEARCH_USE_ROSE){ $zi = new \PDO ( 'mysql:'. 'host='. $databaseConfiguration->host .';'. 'dbname='. $databaseConfiguration->name.';'. 'port='. $databaseConfiguration->port, $databaseConfiguration->user, qs ($databaseConfiguration->password) ); $zi -> exec ('SET NAMES utf8mb4'); $zi -> setAttribute (\PDO::ATTR_ERRMODE,\PDO::ERRMODE_EXCEPTION); $ki = xd (); $li = new PdoStorage ( $zi, $databaseConfiguration -> getPrefix () . SEARCH_EXTRA_PREFIX, [ MysqlRepository::TOC => $ki['TOC'], MysqlRepository::WORD => $ki['WORD'], MysqlRepository::FULLTEXT_INDEX => $ki['FULLTEXT_INDEX'], MysqlRepository::KEYWORD_INDEX => $ki['KEYWORD_INDEX'], MysqlRepository::KEYWORD_MULTIPLE_INDEX => $ki['KEYWORD_MULTIPLE_INDEX'], ] ); } return $li; } function rd ($l1,$i0){ foreach ($i0 as $uj){ if ($uj == '-') continue; $uj = preg_quote ($uj,'/'); $uj = str_replace ('е','[её]',$uj); $uj = str_replace ('Е','[ЕЁ]',$uj); $l1 = preg_replace ('/(?<=^|\W)('.$uj.'[\w\p{M}]*)/iu','<mark>$1</mark>',$l1); } $l1 = str_replace ('</mark> <mark>',' ',$l1); $l1 = str_replace ('</mark> <mark>',' ',$l1); return $l1; } function td ($xi){ $ei = mb_strtoupper (mb_substr ($xi,0,1)); return $ei . mb_substr ($xi,1); } function jd (AeDatabaseConfiguration $databaseConfiguration,$ri = false){ $ti = false; if($databaseConfiguration -> hasSubsetSpecified () and !$ti){ if(Log::$a)__log ('Search: unmark and unindex subset'); $c1 = "WHERE `SubsetID`=". $databaseConfiguration -> getSubset (); } else { if(Log::$a)__log ('Search: unmark and unindex all'); $c1 = ''; } mm ( "UPDATE `". $databaseConfiguration -> getPrefix () . "Notes` ". "SET `IsIndexed`=0 ". $c1, 'mark all notes for reindexing' ); if ($ri)hb ('Notes marked for reindexing',E2E_MESSAGE); $ar = ed ($databaseConfiguration); try { $ar -> erase (); if ($ri)hb ('Indexes erased',E2E_MESSAGE); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$a)__log ('Rose threw RuntimeException'); } } function e2m_password_reset () { global$_strings,$_config,$settings; if (!is_file (USER_DIR. 'password-reset.psa')) { $cn = sha1 (fs ()); $url = lq ('e2m_password', array ('recovery-key' => $cn)); @e3 (USER_DIR. 'password-reset.psa',$url); } $cb['title']=$_strings['pt--password-reset']; $cb['heading']=$_strings['pt--password-reset']; $ji = (bool) ($ma = $settings['author_email']); $cb['form']='form-password-reset-email'; $cb['form-password-reset-email'] = array ( 'form-action' => lq ('e2s_password_reset_email'), 'show-controls?' => $ji, 'submit-text' => $_strings['fb--send-link-by-email'], ); if($_config['user_has_access_to_filesystem']) { $cb['form-password-reset-email']['reset-info']=$_strings['gs--password-reset-link-saved']; } elseif (!$ji){ hb ($_strings['er--cannot-reset-password']); } return $cb; } function e2s_password_reset_email () { global$_strings,$settings; if($_SERVER['REQUEST_METHOD']!='POST')s1 (); if(array_key_exists ('email',$_POST))$es = trim ($_POST['email']); if (!$es){ hb ($_strings['er--cannot-send-link-email-empty']); s1 (lq ('e2m_password_reset')); } $hi = @file_get_contents (USER_DIR. 'password-reset.psa'); if(strlen ($hi)==0){ hb ($_strings['er--error-occurred']); s1 (lq ('e2m_password_reset')); } if ($ma = $settings['author_email']) { if ($es == $ma){ $ya = qn ( 'password-reset', array ('reset-href' => $hi) ); $na = $_strings['em--password-reset-subject']; $fa = 'From: '. ln (); zn ($ma,$na,$ya,$fa); } hb ($_strings['gs--password-reset-link-sent-maybe'],E2E_MESSAGE); s1 (lq ('e2m_password_reset')); } die; } function e2m_password ($parameters){ global$_strings; $gi = false; $cn = ''; if(array_key_exists ('recovery-key',$parameters)) { $cn = $parameters['recovery-key']; $url = lq ('e2m_password', array ('recovery-key' => $cn)); $hi = @file_get_contents (USER_DIR. 'password-reset.psa'); if(strlen ($hi)>0){ $gi = ($url == $hi); } } if (cs () or $gi){ $cb['title']=$_strings['pt--password']; $cb['heading']=$_strings['pt--password-for-blog']; if ($gi){ $cb['title']=$_strings['pt--password-reset']; $cb['heading']=$_strings['pt--password-reset']; } $cb['form']='form-password'; $cb['form-password'] = array ( '.recovery-key' => $cn, 'form-action' => lq ('e2s_password_save'), 'recovering?' => $gi, 'submit-text' => $_strings['fb--change'], ); return $cb; } else { s1 (); } } function e2m_sessions () { global$_strings; $zr = vs (); $cb['title']=$_strings['pt--sessions']; $cb['heading']=$_strings['pt--sessions']; $wi = array (); $cn = $_COOKIE[q1 ('key')]; foreach ($zr['sessions'] as $s3 => $a3){ $wi[] = array ( 'current?' => sha1 ($cn)===$a3['key_hash'], 'opened' => array ((int)$a3['stamp'],ga ()), 'ip-address' => $a3['remote_ip'], 'source' => ($a3['remote_ip']=='127.0.0.1')? $_strings['gs--locally']:$a3['remote_ip'], 'title' => ms ($a3['ua']), 'user-agent' => $a3['ua']? $a3['ua']:$_strings['gs--unknown'], ); } $wi = array_reverse ($wi); $cb['sessions']['each']=$wi; if(count ($wi)>1){ $cb['form']='form-sessions'; $cb['form-sessions'] = array ( 'form-action' => lq ('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $cb; } function e2m_sign_in () { global$_strings; if (cs ())s1 (lq ('e2m_frontpage', array ('page' => 1))); return [ 'title' => $_strings['pt--sign-in'], ]; } function e2m_sign_out () { global$_strings; $zr = vs (); $ui = -1; if(array_key_exists ('sessions',$zr) and is_array ($zr['sessions'])) { foreach ($zr['sessions'] as $s3 => $a3){ $cn = $_COOKIE[q1 ('key')]; if(sha1 ($cn)===$a3['key_hash']) { $ui = $s3; break; } } } if ($ui > -1) unset ($zr['sessions'][$ui]); if (!bs ($zr)) { hb ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } l1 ('key',''); s1 (); } function e2s_password_save () { global$_strings; wd (); $gi = false; $ii = trim ($_POST['old-password']); if ($cn = trim ($_POST['recovery-key'])) { $url = lq ('e2m_password', array ('recovery-key' => $cn)); $hi = @file_get_contents (USER_DIR. 'password-reset.psa'); if(strlen ($hi)>0){ $gi = ($url == $hi); } } if (id ($ii) or $gi){ $qr = trim ($_POST['new-password']); if ($qr != ''){ if (@e3 (USER_DIR. 'password-hash.psa',serialize (sha1 ($qr)))) { @unlink (USER_DIR. 'password-reset.psa'); hb ($_strings['gs--password-changed'],E2E_MESSAGE); s1 (); } else { hb ($_strings['er--could-not-change-password'],E2E_PERMISSIONS_ERROR); s1 (lq ('e2m_password', array ('recovery-key' => ''))); } } else { hb ($_strings['er--no-password-entered'],E2E_USER_ERROR); s1 (lq ('e2m_password', array ('recovery-key' => ''))); } } else { hb ($_strings['er--wrong-password'],E2E_USER_ERROR); s1 (lq ('e2m_password', array ('recovery-key' => ''))); } die; } function hd () { global$_token; if (!cs ()) return ''; return$_token; } function gd () { return sha1 ( $_SERVER['HTTP_USER_AGENT'].ud () . time () . mt_rand (1000000,9999999) ); } function wd () { global$_token; if (!cs ()) return true; if ( !array_key_exists ('token',$_POST) or ((string)$_POST['token'] !== (string) @$_token) ) { throw new AeTokenException ('Incorrect token'); } return true; } function ud () { $oi = $_SERVER['REMOTE_ADDR']; if(array_key_exists ('HTTP_X_FORWARDED_FOR',$_SERVER)) { $oi = array_pop (explode (',',$_SERVER['HTTP_X_FORWARDED_FOR'])); } return $oi; } function e2s_sign_in () { global$_strings; $zr = vs (); if($_SERVER['REQUEST_METHOD']=='POST'){ $password = @$_POST['password']; $pi = @$_POST['is_public_pc']; } else { $password = @$_GET['password']; $pi = false; } if (id ($password)) { @unlink (USER_DIR. 'password-reset.psa'); $co = [ 'stamp' => time (), 'remote_ip' => ud (), 'key_hash' => pd ($pi), 'anti_csrf_token' => gd (), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]; $zr['sessions'][] = $co; } elseif(strlen (trim ($password)) > 0){ ds (); hb ($_strings['er--wrong-password'],E2E_USER_ERROR); } if (!bs ($zr)) { hb ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); s1 (); } a1 (); } function e2s_drop_other_sessions () { global$_strings; wd (); $zr = vs (); $co = null; foreach ($zr['sessions'] as $s3 => $a3){ $cn = $_COOKIE[q1 ('key')]; if(sha1 ($cn)===$a3['key_hash']) { $co = $a3; break; } } $zr['sessions'] = array ($co); if (!bs ($zr)) { hb ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } a1 (); die; } function id ($password){ $vo = @unserialize (file_get_contents (USER_DIR. 'password-hash.psa')); return (sha1 ($password)===$vo and trim ($password)!=''); } function od () { $vo = @unserialize (file_get_contents (USER_DIR. 'password-hash.psa')); return is_string ($vo) and $vo !== ''; } function pd ($bo = false){ $cn = fs (); $yo = sha1 ($cn); l1 ('key',$cn, !$bo); return $yo; } function cs () { static $no = null; global$_token; if ($no !== null) return $no; $no = false; if (!isset ($_COOKIE[q1 ('key')])) return $no; $zr = vs (); $yo = sha1 ($_COOKIE[q1 ('key')]); $no = false; $_token = ''; foreach ($zr['sessions'] as &$co){ if ($yo === $co['key_hash']) { $no = true; $_token = (string) @$co['anti_csrf_token']; if($_token === ''){ $co['anti_csrf_token']=gd (); bs ($zr); } break; } } if (!$no)l1 ('key',''); return $no; } function vs () { $zr = []; if(is_file (USER_DIR . 'auth.psa')) { $zr = unserialize (@file_get_contents (USER_DIR . 'auth.psa')); } if (!is_array ($zr))$zr = []; if (!array_key_exists ('sessions',$zr))$zr['sessions'] = []; if (!is_array ($zr['sessions']))$zr['sessions'] = []; return $zr; } function bs ($zr){ return e3 (USER_DIR . 'auth.psa',serialize ($zr)); } function ys () { if ($cn = @$_COOKIE[q1 ('key')]) { return q1 ('key') .'='. $cn .""; } } function ns () { if ($cn = @$_COOKIE[q1 ('key')]) { return 'Cookie: '. q1 ('key') .'='. $cn ."\r\n"; } return "\r\n"; } function ms ($mo){ global$_strings; if(strstr ($mo,'iPhone')) return$_strings['gs--ua-iphone']; if(strstr ($mo,'iPad')) return$_strings['gs--ua-ipad']; if(strstr ($mo,'Opera'))$cb = $_strings['gs--ua-opera']; if(strstr ($mo,'Firefox'))$cb = $_strings['gs--ua-firefox']; if(strstr ($mo,'Chrome'))$cb = $_strings['gs--ua-chrome']; if(strstr ($mo,'Safari') and !strstr ($mo,'Chrome'))$cb = $_strings['gs--ua-safari']; if (!$cb)$cb = $_strings['gs--ua-unknown']; if(strstr ($mo,'Macintosh')) { if ($cb)$cb .= ' '. $_strings['gs--ua-for-mac']; } return $cb; } function e2j_check_password () { $vo = @unserialize (file_get_contents (USER_DIR. 'password-hash.psa')); $password = ''; if(array_key_exists ('password',$_POST))$password = $_POST['password']; ds (); $yl = [ 'success' => true, 'data' => [ 'password-correct' => trim ($password)!=='' and sha1 ($password)===$vo ], ]; $yl = json_encode ($yl); die ($yl); } function fs () { if(function_exists ('random_bytes')) { $so = sha1 (random_bytes (128)); } else { $so = ''; $ao = '0123456789abcdef'; for ($rb = 0; $rb < 40; $rb++) { $so .= $ao[mt_rand (0,15)]; } $so .= time () . microtime (); $so = sha1 ($so); } return $so; } function ds () { if(is_file (USER_DIR. 'password-wait.psa')) { $qo = unserialize ( file_get_contents (USER_DIR. 'password-wait.psa') ); if ($qo['delay']<5){ $qo['delay'] ++; } if(time () - $qo['time']>SECONDS_IN_A_MINUTE){ $qo['delay']=0; } $qo['time']=time (); } else { $qo = array ( 'time' => time (), 'delay' => 5, ); } e3 (USER_DIR . 'password-wait.psa',serialize ($qo)); sleep ($qo['delay']); } function ss () { static $lo; if(empty($lo))$lo = md5 ('seсret'); return $lo; } function as_ ($c4){ $cn = ss (); $zo = strlen ($cn); $ko = strlen ($c4); $cb = ''; for ($rb = 0; $rb < $ko + rand (16,64); ++ $rb){ if ($rb > $ko){ $xo = rand (0,127); } elseif ($rb == $ko){ $xo = 0; } else { $xo = ord ($c4[$rb]); } $eo = chr (($xo + ord ($cn[$rb%$zo])) % 256); $cb .= $eo; } $cb = base64_encode ($cb); return $cb; } function qs ($c4){ $cn = ss (); $zo = strlen ($cn); $c4 = base64_decode ($c4); $ko = strlen ($c4); $cb = ''; for ($rb = 0; $rb < $ko; ++ $rb){ $ro = (ord ($c4[$rb]) + 256 - ord ($cn[$rb%$zo])) % 256; if ($ro === 0) break; $cb .= chr ($ro); } return $cb; } function ls () { global$settings; if (cs ()) { return null; } else { return [ 'form-action' => lq ('e2s_sign_in'), 'form-check-password-action' => lq ('e2j_check_password'), 'login-name' => @$settings['author'], 'public-pc?' => false, 'reset-href' => lq ('e2m_password_reset'), ]; } } function zs () { if (!cs ()) return; list (, $to)=xs (); $x3 = false; foreach ($to as $wd => $jo){ if(Log::$a)__log ( 'Selfcheck: Double-checking remote access of "'. $wd .'" '. 'before showing a warning (status was '. $jo.')...' ); $b2 = vv (AeEnv::$o . $wd); if ($b2 and $b2['http_code'] >= 400) continue; $x3 = true; $url = AeEnv::$o . $wd; hb ( 'Security alert: <a href="'. $url .'">'. $wd .'</a> '. 'responded with HTTP '. $b2['http_code'] .' instead of 403' ); } return $x3; } function ks () { list ($ho,$to)=xs (); $ld = time (); if ( $ho === false or ( array_key_exists ('completed-stamp',$ho) and @$ho['completed-stamp']<$ld - SECONDS_IN_A_WEEK ) ) { $ho = es (); } $go = false; if(count ($to)) { $go = true; } foreach ($ho['statuses'] as $wd => $jo){ if ($jo >= 400) continue; if(Log::$a)__log ('Selfcheck: Checking remote access of "'. $wd .'"...'); $b2 = vv (AeEnv::$o . $wd); if (!$b2 or @$b2['http_code']<200) break; $jo = $b2['http_code']; $ho['statuses'][$wd]=$jo; if(Log::$a)__log ('Selfcheck: The response is '. $b2['http_code']); if ($jo >= 400 and !$go){ break; } else { $go = true; } } if (!array_key_exists ('completed-stamp',$ho)) { end ($ho['statuses']); $wo = !empty (current ($ho['statuses'])); if ($wo)$ho['completed-stamp']=$ld; if ($wo)$ho['completed']=date ('r',$ld); } @e3 (USER_DIR . 'checklist.psa',serialize ($ho)); } function xs () { static $ho,$to = null; if ($ho !== null and $to !== null){ return [$ho,$to]; } $uo = USER_DIR . 'checklist.psa'; $ho = @unserialize (file_get_contents ($uo)); $io = @$ho['statuses']; $to = []; if(is_array ($io)) { foreach ($io as $wd => $jo){ if ($jo !== null and $jo < 400){ $to[$wd]=$jo; } } } else { $ho = false; } return [$ho,$to]; } function es () { global$_config; if(Log::$a)__log ('Selfcheck: Reset access checklist file'); $oo = array_merge ( AeFileManager::writtenFiles ($_config['path_user'],$_config['path_media']), [ '.htaccess', 'system/core.php', 'system/default/config.php', INSTANCE_DIR . LOGS_DIRNAME . MAIN_LOG_FILENAME, $_config['path_media'].PICTURES_DIRNAME .'.htaccess', $_config['path_media'].THUMBNAILS_DIRNAME .'.htaccess', $_config['path_media'].AVATARS_DIRNAME .'.htaccess', $_config['path_media'].USERPIC_DIRNAME .'.htaccess', $_config['path_media'].VIDEO_DIRNAME .'.htaccess', $_config['path_media'].AUDIO_DIRNAME .'.htaccess', USER_DIR . CACHE_FILENAME_FRONTPAGE, USER_DIR . BACKUP_DIRNAME .'backup-tail.sql', ] ); foreach ($oo as $wd){ $po[$wd]=null; } $ho = ['statuses' => $po]; @e3 (USER_DIR . 'checklist.psa',serialize ($ho)); return $ho; } function rs () { $cp['items_count']=0; $cp['total_count']=0; $cp['percentage']=0; $cp['stamp_completed']=false; $uo = USER_DIR . 'checklist.psa'; $ho = @unserialize (file_get_contents ($uo)); if ($ho === false) return $cp; $io = @$ho['statuses']; $t2 = $vp = 0; if(is_array ($io)) { foreach ($io as $jo){ $t2 ++; if ($jo !== null){ $vp ++; } } $cp['items_count']=$vp; $cp['total_count']=$t2; $cp['percentage']=x1 ($vp,$t2); } $cp['stamp_completed'] = @$ho['completed-stamp']; return $cp; } function e2_load_settings_from_user_folder_($bp){ $yp = []; if(is_file ($bp . 'settings.json')) { $yp = json_decode (file_get_contents ($bp . 'settings.json'),true); } $yp = gs ($yp); return $yp; } function e2m_settings () { global$settings,$_template,$_strings,$_config; $np = array (); $mp = DEFAULT_LANGUAGE; if(array_key_exists ('language',$settings)) { $mp = $settings['language']; } foreach(glob (SYSTEM_DIR . LANGUAGES_DIRNAME. '*.php') as $wd){ $fp = substr (basename ($wd),0,2); $dp = file_get_contents ($wd); if(preg_match ( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu',$dp,$fe )) { $mu = $fe[1]; } else { $mu = $fp; } $np[$fp] = array ( 'selected?' => (bool) ($mp == $fp), 'display-name' => $mu, ); } $qd = $sp = false; $ap = (string) @$qd['pay-href']; if ((string)$ap === ''){ $ap = 'https://'. $_strings['e2--website-host'] .'/get/'; } if (!isset ($_template))qf (); $cb['title']=$_strings['pt--settings']; $cb['heading']=$_strings['pt--settings']; $cb['form']='form-preferences'; $cb['form-preferences'] = [ 'blog-title-default' => htmlspecialchars ($_strings['e2--default-blog-title'],ENT_COMPAT,'UTF-8'), 'blog-title' => htmlspecialchars (ev (), ENT_COMPAT,'UTF-8'), 'blog-subtitle' => htmlspecialchars (@$settings['blog_subtitle'],ENT_COMPAT,'UTF-8'), 'blog-meta-description' => htmlspecialchars (@$settings['meta_description'],ENT_COMPAT,'UTF-8'), 'blog-author-default' => htmlspecialchars ($_strings['e2--default-blog-author'],ENT_COMPAT,'UTF-8'), 'blog-author' => htmlspecialchars (@$settings['author'],ENT_COMPAT,'UTF-8'), 'languages' => $np, 'language' => $mp, 'form-action' => lq ('e2s_settings_save'), 'userpic-href' => tv ('square'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'emailing-possible?' => MAIL_ENABLED, 'email-notify?' => (bool) @$settings['notifications']['new_comments'], 'email' => htmlspecialchars (@$settings['author_email'],ENT_COMPAT,'UTF-8'), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-view-counts?' => (bool) @$settings['appearance']['show_view_counts'], 'show-sharing-buttons?' => (bool) @$settings['appearance']['show_sharing_buttons'], 'includes-main-menu-fields?' => false, 'main-menu-promo' => e2l_get_string ( 'pm--main-menu', ['url' => $_config['paid_features_url']] ), 'show-main-menu?' => false, 'main-menu-items' => [], 'includes-analytics-fields?' => false, 'analytics-promo' => e2l_get_string ( 'pm--analytics', ['url' => $_config['paid_features_url']] ), 'template-name' => $_template['name'], 'templates' => wf (), 'respond-to-dark-mode?' => (bool) @$settings['appearance']['respond_to_dark_mode'], 'submit-text' => $_strings['fb--save-changes'], 'show-payment-info?' => $sp and ($qd !== false), 'paid-period' => @$qd['licensed?'] ? (time () <= $qd['until-stamp']) : false, 'paid-period-ended' => @$qd['licensed?'] ? (time () > $qd['until-stamp']) : false, 'paid-until' => @$qd['licensed?'] ? ([$qd['until-stamp'],wa ()]) : false, 'pay-href' => $ap, 'space-usage' => yy (vy (), true), ]; return $cb; } function e2s_settings_save () { global$settings,$_strings; if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_settings')); } wd (); $zp = $ad = ''; if(array_key_exists ('blog-title',$_POST)) { $zp = trim ($_POST['blog-title']); } if(array_key_exists ('blog-subtitle',$_POST)) { $ad = trim ($_POST['blog-subtitle']); } if(array_key_exists ('blog-meta-description',$_POST)) { $kp = trim ($_POST['blog-meta-description']); } if(array_key_exists ('blog-author',$_POST)) { $xp = trim ($_POST['blog-author']); } if(array_key_exists ('language',$_POST)) $ep = $_POST['language']; if(array_key_exists ('email',$_POST)) $es = trim ($_POST['email']); $rp = (int)$_POST['notes-per-page']; $settings['blog_title']=$zp; $settings['blog_title']=ev (); $settings['author']=$xp; $settings['author_email']=$es; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if(array_key_exists ('template',$_POST)) { $settings['template']=trim ($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); $settings['appearance']['show_view_counts'] = isset ($_POST['show-view-counts']); if ( !array_key_exists ('language',$settings) or $settings['language']!=$ep ) { e2_drop_all_kinds_of_cache (); $settings['language']=$ep; } if ( $settings['blog_subtitle']!=$ad or $settings['meta_description']!=$kp or $settings['appearance']['notes_per_page']!=$rp or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['appearance']['respond_to_dark_mode'] != isset ($_POST['respond-to-dark-mode']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink (USER_DIR . CACHE_FILENAME_FRONTPAGE); @unlink (USER_DIR . CACHE_FILENAME_FRONTPAGE_FEED); @unlink (USER_DIR . CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['blog_subtitle']=$ad; $settings['meta_description']=$kp; $settings['appearance']['notes_per_page']=$rp; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['appearance']['respond_to_dark_mode'] = isset ($_POST['respond-to-dark-mode']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } o1 (USER_DIR . CACHE_FILENAMES_NOTES_COMMENTS); if (!@e3 (USER_DIR . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { hb ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); s1 (lq ('e2m_settings')); } s1 (lq ('e2m_frontpage', array ('page' => 1))); } function e2m_underhood () { global$_db,$_config; if (!$_config['allow_underhood_access']) return e2m_error404 (); $cb['title']='Underhood'; $cb['heading']='Underhood'; nm (oq (), 'check version'); $tp = wa (); $jp = $hp = 0; foreach(glob (USER_DIR . CACHES_DIRNAME .'*') as $wd){ $jp ++; $hp += stat ($wd)['size']; } $gp = $wp = 0; foreach(glob (INSTANCE_DIR . LOGS_DIRNAME .'*') as $wd){ $gp ++; $wp += stat ($wd)['size']; } $mi = dd (); $up = x1 ( $mi['indexed_count'],$mi['total_count'] ); $ip = false; if ($mi['time_spent']) { if(is_numeric (($mi['time_spent']))) { $ip = floor ($mi['time_spent']); } if ($ip >= 60){ $ip = ( floor ($ip / 60) .'min '. str_pad ($ip % 60,2,'0',STR_PAD_LEFT). 's' ); } elseif ($ip > 0){ $ip .= 's'; } else { $ip = false; } } $cp = rs (); $op = array_keys (qm (USER_DIR . BACKUP_DIRNAME)); $cb['form']='form-underhood'; $cb['form-underhood'] = [ 'db-software' => $_db['software'], 'db-version' => $_db['version'], 'form-action-engine-rebuild' => BUILT? false : lq ('e2s_post_service', ['service' => 'build']), 'current-timezone-offset' => ta ($tp ['offset']), 'current-timezone-is-dst' => $tp ['is_dst'], 'cache-files-count' => $jp, 'cache-files-size' => $hp, 'form-action-cache-invalidate' => lq ('e2s_post_service', ['service' => 'sync']), 'search-index-items-count' => $mi['indexed_count'], 'search-index-total-items-count' => $mi['total_count'], 'search-index-time-spent' => $ip, 'search-index-percentage' => $up, 'form-action-search-index-continue' => qd ()? false : lq ('e2s_bsi_step'), 'form-action-search-index-rebuild' => lq ('e2s_reindex'), 'checklist-items-count' => $cp['items_count'], 'checklist-total-items-count' => $cp['total_count'], 'checklist-percentage' => $cp['percentage'], 'checklist-stamp-completed' => !empty ($cp['stamp_completed'])? c1 ('D, M d, Y \a\t H:i:s',$cp['stamp_completed']) : false, 'form-action-checklist-reset' => lq ('e2s_post_service', ['service' => 'checklist-reset']), 'log-files-count' => $gp, 'log-files-size' => $wp, 'form-action-logs-enable' => ( is_file (INSTANCE_DIR . LOGS_DIRNAME . MAIN_LOG_FILENAME) ? '' : lq ('e2s_post_service', ['service' => 'log']) ), 'form-action-logs-erase-disable' => ( $gp? lq ('e2s_post_service', ['service' => 'unlog']) : '' ), 'backup-last' => count ($op)? c1 ('D, M d, Y \a\t H:i:s',$op[0]) : false, 'form-action-backup' => lq ('e2s_dump'), 'form-action-database-migrate' => lq ( 'e2s_post_service', ['service' => 'migrate'] ), 'form-action-license-verify' => lq ( 'e2s_post_service', ['service' => 'verify'] ), ]; return $cb; } function e2m_database () { global$settings,$_strings,$_config; $databaseConfiguration = oq (); if($databaseConfiguration->source !== 'settings' or !$_config['allow_db_config']) { return e2m_error404 (); } $cb['title']=$_strings['pt--database']; $cb['heading']=$_strings['pt--database']; $cb['form']='form-database'; $cb['form-database'] = array ( 'form-action' => lq ('e2s_database_save'), 'db-server' => htmlspecialchars (@$settings['db']['server']? $settings['db']['server']:'localhost'), 'db-user' => htmlspecialchars (@$settings['db']['user_name']? $settings['db']['user_name']:'root'), 'db-database' => htmlspecialchars (@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $cb; } function js ($backup_dir,$pp,$prefix = null,$subset = null){ $ccv['server']=$ccv['user_name'] = $ccv['passw']=$ccv['name']=''; if(array_key_exists ('db-server',$pp)) $ccv['server']=$pp['db-server']; if(array_key_exists ('db-user',$pp)) $ccv['user_name']=$pp['db-user']; if(array_key_exists ('db-password',$pp))$ccv['passw']=$pp['db-password']; if(array_key_exists ('db-database',$pp))$ccv['name']=$pp['db-database']; $databaseConfiguration = new AeDatabaseConfiguration ( 'post', $backup_dir, $ccv['server'], $ccv['user_name'], as_ ($ccv['passw']), $ccv['name'], $prefix, $subset ); return$databaseConfiguration; } function e2s_database_save () { global$settings,$_db,$_strings,$_config; wd (); if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_database')); } $databaseConfiguration = oq (); if($databaseConfiguration->source !== 'settings' or !$_config['allow_db_config']) { return e2m_error404 (); } $pp = $_POST; if (!array_key_exists ('db-password',$pp)) { $pp['db-password']=htmlspecialchars (qs (@$settings['db']['passw'])); } $databaseConfiguration = js ( USER_DIR . BACKUP_DIRNAME, $pp, $_config['db_table_prefix'], $_config['db_table_subset'] ); $lr = false; try { nm ($databaseConfiguration,'check database from HTTP post'); $dr = un ($databaseConfiguration); if (!$dr['occupied'] or !$dr['migrateable']) { hb ($_strings['er--db-data-incomplete']); s1 (lq ('e2m_database')); } jn ($databaseConfiguration); $lr = true; } catch (AeMySQLCannotConnectException $e){ hb ( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error () .' ('. mysqli_connect_errno () .')' ); } catch (AeMySQLTooOldException $e){ hb (e2l_get_string ('er--dbs-version-too-old', [ 'dbs' => $_db['software'], 'v1' => $_db['version'], 'v2' => $_db['version-minimum'], ])); } catch (AeMySQLException $e){ hb ($_strings['er--cannot-find-db'] .' '. $databaseConfiguration->name); } if (!$lr){ s1 (lq ('e2m_database')); } $settings['db']=$databaseConfiguration -> getDatabaseParamsArray (); if (!@e3 (USER_DIR . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { hb ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); s1 (lq ('e2m_database')); } e2_drop_all_kinds_of_cache (); if (!$_config['retain_search_indexes_on_db_switch']) { $ar = ed (oq ()); try { $ar -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$a)__log ('Rose not available'); } sd (USER_DIR); } vv (lq ('e2s_bsi_step')); s1 (lq ('e2m_settings')); } function hs () { return class_exists ('ZipArchive'); } function e2m_get_backup () { if (hs ()) { $vcv = new ZipArchive (); $bcv = USER_DIR . BACKUP_DIRNAME .'backup.zip'; if ($vcv -> open ($bcv,ZIPARCHIVE::CREATE)) { @ $vcv -> addEmptyDir ('backup'); $ycv = USER_DIR . BACKUP_DIRNAME .'backup-tail.sql'; $ncv = ''; $mcv = -1; foreach(glob (USER_DIR . BACKUP_DIRNAME .'backup-*.sql') as $m2){ if ($m2 === $ycv) continue; $fcv = stat ($m2); if ($fcv['ctime']>$mcv)$ncv = $m2; $mcv = $fcv['ctime']; } if ($ncv === ''){ $ncv = km (oq ()); } $vcv -> addFile ($ncv,'backup/'. basename ($ncv)); if(is_file ($ycv)) { @file_put_contents ($ycv,"COMMIT;\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod ($ycv,E2_NEW_FILES_RIGHTS); } $vcv -> addFile ($ycv,'backup/backup-tail.sql'); $vcv -> close (); } if(is_file ($bcv)) { header ('Content-Type: application/zip'); header ('Content-Disposition: attachment; filename="backup.zip"'); readfile ($bcv); unlink ($bcv); } else { die ('Cannot get backup'); } die; } else { die ('Cannot get backup'); } } function gs ($yp){ if ( !array_key_exists ('appearance',$yp) or !array_key_exists ('notes_per_page',$yp['appearance']) or !is_numeric ($yp['appearance']['notes_per_page']) or $yp['appearance']['notes_per_page']<1 ) { $yp['appearance']['notes_per_page']=DEFAULT_ITEMS_PER_PAGE; } if ($yp['appearance']['notes_per_page']>MAX_ITEMS_PER_PAGE){ $yp['appearance']['notes_per_page']=MAX_ITEMS_PER_PAGE; } if ( !array_key_exists ('comments',$yp) or !array_key_exists ('default_on',$yp['comments']) ) { $yp['comments']['default_on']=false; } if (!array_key_exists ('respond_to_dark_mode',$yp['appearance'])) { $yp['appearance']['respond_to_dark_mode']=true; } if ( !array_key_exists ('template',$yp) or (string)$yp['template']==='' ) { $yp['template']=DEFAULT_TEMPLATE; } if (isset ($yp['description'])) { if (!isset ($yp['blog_subtitle'])) { $yp['blog_subtitle']=$yp['description']; } unset ($yp['description']); } if (isset ($yp['site_title'])) { if (!isset ($yp['blog_title'])) { $yp['blog_title']=$yp['site_title']; } unset ($yp['site_title']); } if (isset ($yp['user'])) { if (!isset ($yp['author_email'])) { $yp['author_email'] = (string) @$yp['user']['email']; } unset ($yp['user']); } if (isset ($yp['v3223_rss_permalinks_before_stamp'])) { unset ($yp['v3223_rss_permalinks_before_stamp']); } return $yp; } function e2j_save_menu_order () { global$settings; $yl = ['success' => false]; if(is_array (@$_POST['order'])) { $settings['menu_order']=$_POST['order']; if (@e3 (USER_DIR . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { $yl = ['success' => true]; } } $yl = json_encode ($yl); die ($yl); } function ws ($v3){ global$_config; $scv = $_config['share_to']; $acv = '|twitter|facebook|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $lb['twitter']['via']=$_config['share_to_twitter_via']; } if(count ($v3)>0){ $qcv = $v3[0]; $acv .= 'pinterest|'; $lb['pinterest']['media']=$qcv; } $lcv = []; foreach(explode (',',$scv) as $zcv){ $zcv = trim ($zcv); if(strstr ($acv,'|'. $zcv. '|')) { $lcv[$zcv]['share?']=true; if(is_array (@$lb[$zcv]) and count ($lb[$zcv])) { $lcv[$zcv]['data']=$lb[$zcv]; } } } return $lcv; } function us ($kcv,$lb = null){ if ($kcv === 'generic'){ $xcv = $lb; } else { if (!is_file ($ecv = SYSTEM_DIR . 'stubs/' . $kcv .'.php')) { throw new AeStubException ('No stub found for the problem "'. $kcv .'"'); } $xcv = include $ecv; } $rcv = false; if (!empty ($xcv['button'])) { $rcv = true; $tcv = lq ('e2m_frontpage', ['page' => 1]); $jcv = $xcv['button']; } $cb = [ 'stub-kind' => $kcv, 'title' => $xcv['heading'], 'heading' => $xcv['heading'], 'stub' => $xcv['text'], ]; if ($rcv)$cb += [ 'stub-button-href' => $tcv, 'stub-button-text' => $jcv ]; return $cb; } function e2m_tags () { global$_strings; AeMainMenuManager :: $isTagsCurrent = true; $cb['title']=$_strings['pt--tags']; $cb['heading']=$_strings['pt--tags']; $cb['tags']=na ([]); $b8 = ma (true); if ($b8 === null){ $cb['unavailable?']=true; } else { $cb['tags']['each']=$b8; if(count ($b8)==0){ $cb['nothing']=$_strings['gs--no-tags']; } } return $cb; } function e2m_tag ($parameters = []) { global $settings, $_config, $_strings; if(Log::$a)__log ('Tag {'); $tn = cs (); $tagNotesView = new AePageableNotesView ('e2m_tag',$parameters); $tagNotesView -> setPortionSize ($settings['appearance']['notes_per_page']); $tagNotesView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $tagNotesView -> setWantPaging (true); $tagNotesView -> setWantNewCommentsCount ($tn); $tagNotesView -> setWantReadHrefs ($_config['count_reads']); $tagNotesView -> setWantControls ($tn and !@$_config['read_only']); $tagNotesView -> setWantHiddenTags ($tn); if(array_key_exists ('*tags',$parameters)) { $hcv = $parameters['*tags']; } elseif(array_key_exists ('*tag',$parameters)) { $hcv = [$parameters['*tag']]; } else { $hcv = []; } $xb = []; foreach ($hcv as $tb){ if ($tn or $tb['IsVisible']) { $xb[] = $tb; } } $gcv = count ($xb); if ($gcv == 0 or $gcv < count ($hcv)) { return e2m_error404 (); } foreach ($xb as $tb) if ($tb)$wcv[] = "nk.`KeywordID`=". $tb['ID']; $ru = ( "FROM `". $_config['db_table_prefix'] ."Notes` n ". "JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (". implode (" OR ",$wcv).") ". "AND IsPublished=1 ". nf ($tn). "GROUP BY n.`ID` ". "HAVING COUNT(*)>=". $gcv ); $tagNotesView -> setSQLCountRequest ( "SELECT COUNT(*) Total FROM (SELECT 1 ". $ru .") _" ); $tagNotesView -> setLimitlessSQLRequest ( "SELECT n.*, COUNT(*) ". $ru ." ". "ORDER BY n.`Stamp` DESC" ); $ucv = []; foreach ($xb as $tb){ $ucv[] = $tb['Keyword']; if ($gcv === 1){ AeMainMenuManager :: addCurrentTag ($tb['Keyword']); } else { AeMainMenuManager :: addParentTag ($tb['Keyword']); } } $tagNotesView -> setHighlightedTags ($ucv); $hl = ''; $f5['description']=''; $f5['summary']=''; $f5['visible?']=true; foreach ($xb as $tb) if (!$tb['IsVisible']) { $f5['visible?']=false; break; } if ($gcv === 1){ $icv = $xb[0]; $ocv = b () ['t'. $icv['ID']]; if(CACHE_TAG and $tagNotesView -> isFirstPage ()) { if ($tn){ $tagNotesView -> setCacheFilename (e2_cache_filename_with_id_($icv['ID'],USER_DIR . CACHE_FILENAMES_TAG_AUTHOR)); } else { $tagNotesView -> setCacheFilename (e2_cache_filename_with_id_($icv['ID'],USER_DIR . CACHE_FILENAMES_TAG)); } } $w0 = ba ($icv['ID'],5); if ($tn){ $f5['edit-href']=lq ( 'e2m_tag_edit', ['tag-alias' => $ocv] ); $pcv = (bool)$icv['IsFavourite']; $cvv = $parameters; $cvv['flag']='IsFavourite'; $cvv['value'] = (int) !$pcv; $f5['pinned?']=false; } if ((string)$icv['Description']!==''){ $sd = qy ($icv['Description'],'full'); $o1 = $sd['text-final']; $f5['description']=$o1; $f5['description-format-info']=$sd['meta']; b2 (@$sd['meta']['links-required']); } if ((string)$icv['Summary']!==''){ $f5['summary']=dy (htmlspecialchars ($icv['Summary'],ENT_NOQUOTES,'UTF-8')); } elseif ((string)$f5['description']!==''){ $f5['summary']=bf ($f5['description']); }; $vvv = lq ('e2m_tag_rss', ['tag-alias' => $ocv]); $bvv = lq ('e2m_tag_json', ['tag-alias' => $ocv]); d3 ( 'rss', ev () .': '. $icv['Keyword'], $vvv ); d3 ( 'json', ev () .': '. $icv['Keyword'], $bvv ); $f5['og-images']=t3 ( q2 ( @$f5['description-format-info']['resources-detected'], g3 ('tag',$icv['ID']) ) ); $f5['name']=htmlspecialchars ($icv['Keyword'],ENT_COMPAT,'UTF-8'); $f5['related']=$w0; $hl = htmlspecialchars ($icv['PageTitle'],ENT_COMPAT,'UTF-8'); } $t2 = $tagNotesView -> getTotalNotes (); $f5['notes-count']=$t2; $f5['notes-count-text']=e2l_get_string ('pt--n-posts', ['number' => $t2]); $yvv = $f5['notes-count-text'] .' '. $_strings['gs--tagged']; $nvv = []; foreach ($xb as $a3){ $nvv[] = htmlspecialchars ($a3['Keyword'],ENT_COMPAT,'UTF-8'); } $nvv = implode (', ',$nvv); if ((string)$hl !== ''){ $ms = $hl; $fs = $hl; } else { $ms = ev () .': '. $yvv .' '. $nvv; if ($gcv > 1){ $fs = $_strings['pt--tags'] .': '. $nvv; } else { $fs = $_strings['pt--tag'] .': '. $nvv; } } if($parameters['page']>1){ $ms .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $d3 = na ($parameters); $cb = [ 'title' => $ms, 'heading' => htmlspecialchars_decode ($fs,ENT_COMPAT), 'notes' => $tagNotesView -> getNotesCTree (), 'pages' => $tagNotesView -> getPagesCTree (), 'tag' => $f5, 'tags' => $d3, ]; if ( !$tagNotesView -> isExistingPage () and !$tagNotesView -> isFirstPageOfEmptyView () ) { return e2m_error404 (); } if ( $tagNotesView -> isFirstPageOfEmptyView () and !$tn ) { return e2m_error404 (); } if($tagNotesView -> isFirstPageOfEmptyView ()) { $cb['nothing']=$_strings['gs--no-such-notes']; } if ((string)$f5['summary']!==''){ $cb['summary']=$f5['summary']; } if ($gcv == 1){ if (cs ()) { $cb['related-edit-href']=$f5['edit-href']; $cb['related-edit-title']=$_strings['tt--edit-tag']; } } if(Log::$a)__log ('} // Tag'); return $cb; } function e2m_tag_edit ($parameters = []) { global$_strings; if(array_key_exists ('*tag',$parameters)) { $tb = $parameters['*tag']; } if (!@$tb) return e2m_error404 (); AeMainMenuManager :: addParentTag ($tb['Keyword']); $ib = sy ( 'neasden',$tb['Description'],'full' ); $pb = @unserialize ( $tb['Uploads'] ) or $pb = []; $s8 = z2 ( s2 ( q2 ( $ib,$pb ) ) ); i3 ( 'Keywords', $tb, $ib ); $xz = vy (); $mvv = htmlspecialchars ($tb['Keyword'],ENT_COMPAT,'UTF-8'); $fvv = b () ['t'. $tb['ID']]; $dvv = [ 'enabled?' => by ($xz), 'each' => $s8, 'default-name' => htmlspecialchars ($fvv,ENT_COMPAT,'UTF-8'), 'upload-action' => lq ('e2j_file_upload'), 'remove-action' => lq ('e2j_file_remove'), ]; $svv = [ '.tag-id' => $tb['ID'], '.formatter-id' => 'neasden', 'form-action' => lq ('e2s_tag_edit'), 'submit-text' => $_strings['fb--save-changes'], 'tag-dotted' => qa ($tb), 'page-title' => htmlspecialchars ($tb['PageTitle'],ENT_COMPAT,'UTF-8'), 'page-title-placeholder' => htmlspecialchars ($tb['Keyword'],ENT_COMPAT,'UTF-8'), 'alias' => htmlspecialchars ($fvv,ENT_COMPAT,'UTF-8'), 'description' => htmlspecialchars ($tb['Description'],ENT_COMPAT,'UTF-8'), 'summary' => (string)$tb['Summary'], 'favourite?' => (bool)$tb['IsFavourite'], 'space-usage' => yy ($xz), ]; $cb = [ 'body-uploads-enabled?' => by ($xz), 'title' => $_strings['pt--tag-edit'] .': '. $tb['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $svv, 'uploads' => $dvv, 'related-delete-href' => lq ('e2m_tag_delete', ['*tag' => $tb]), ]; return $cb; } function e2s_tag_flag_ajax ($parameters){ r1 ([ 'flag-name' => 'tag', 'candy-name' => 'e2s_tag_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ is ($parameters); }, 'redirect-candy' => 'e2m_tag', ]); } function is ($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ s1 (lq ('e2m_tag',$parameters)); } wd (); if(array_key_exists ('*tag',$parameters)) { $tb = $parameters['*tag']; } if (!$tb) throw new AeException ('Tag record not cound from parameters'); e2_drop_caches_for_tag_($tb['ID']); ym ( oq (), 'Keywords', [ 'ID' => $tb['ID'], $parameters['flag'] => (int) ($parameters['value']==1), ] ); } function e2m_tag_delete ($parameters = []) { global$_strings; if(array_key_exists ('*tag',$parameters)) { $avv = $parameters['*tag']; } if (!$avv) return e2m_error404 (); $qvv = [ '.tag-id' => $avv['ID'], 'caution-text' => e2l_get_string ('gs--tag-will-be-deleted-notes-remain', [ 'tag' => htmlspecialchars ($avv['Keyword'],ENT_COMPAT,'UTF-8') ]), 'tag' => htmlspecialchars ($avv['Keyword'],ENT_COMPAT,'UTF-8'), 'form-action' => lq ('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ]; $cb = [ 'title' => $_strings['pt--tag-delete'] .': '. $avv['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $qvv, ]; return $cb; } function e2m_untagged ($parameters = []) { global$settings,$_strings,$_config; $tn = cs (); $untaggedView = new AePageableNotesView ('e2m_untagged',$parameters); $untaggedView -> setPortionSize ($settings['appearance']['notes_per_page']); $untaggedView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $untaggedView -> setWantPaging (true); $untaggedView -> setWantNewCommentsCount ($tn); $untaggedView -> setWantReadHrefs ($_config['count_reads']); $untaggedView -> setWantControls ($tn and !@$_config['read_only']); $untaggedView -> setWantHiddenTags ($tn); $ru = ( "FROM `". $_config['db_table_prefix']."Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished`=1 ". "AND nk.`SubsetID` IS NULL ". nf ($tn) ); $untaggedView -> setSQLCountRequest ( "SELECT COUNT(*) Total ". $ru ); $untaggedView -> setLimitlessSQLRequest ( "SELECT n.* ". $ru ." ORDER BY n.`Stamp` DESC" ); $ms = $_strings['pt--posts-without-tags']; if($parameters['page']>1){ $ms .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $cb = [ 'title' => $ms, 'heading' => $_strings['pt--posts-without-tags'], 'notes' => $untaggedView -> getNotesCTree (), 'pages' => $untaggedView -> getPagesCTree (), ]; if($untaggedView -> isFirstPageOfEmptyView ()) { $cb['nothing']=$_strings['gs--no-posts-without-tags']; } elseif (!$untaggedView -> isExistingPage ()) { return e2m_error404 (); } return $cb; } function e2s_tag_edit () { global$_strings,$_config; wd (); $ys = $f8 = $o1 = $kg = ''; if(array_key_exists ('tag-id',$_POST)) $ys = $_POST['tag-id']; if(array_key_exists ('tag',$_POST)) $f8 = $_POST['tag']; if(array_key_exists ('page-title',$_POST)) $hl = trim ($_POST['page-title'],"\r\n"); if(array_key_exists ('description',$_POST)) $o1 = trim ($_POST['description'],"\r\n"); if(array_key_exists ('summary',$_POST)) $mg = trim ($_POST['summary'],"\r\n"); if(array_key_exists ('urlname',$_POST)) $kg = trim ($_POST['urlname'],"\r\n"); list ($hv,$lvv)=la ($f8); $zvv = 0; $kvv = 1; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = ".((int)$ys)."", 'get tag record to update' ); $evv = dm (); if(count ($evv)!=1) die; $tb = $evv[0]; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword` = '". sm ($hv) ."' ". "AND (`ID` != ".((int)$ys).")", 'make sure new tag name does not conflict with existing ones' ); $evv = dm (); if(count ($evv)==0){ if ($kvv != $zvv){ cb (); } e2_drop_caches_for_tag_($ys); if ($hv === ''){ $hv = $tb['Keyword']; hb ($_strings['er--tag-must-have-name'],E2E_USER_ERROR); } $tb['ID'] = ((int)$ys); $tb['Keyword']=$hv; $tb['PageTitle']=$hl; $tb['Description']=$o1; $tb['Summary']=$mg; $tb['IsVisible']=$lvv; $ib = sy ( 'neasden',$tb['Description'],'full' ); if(count ($ib)>0){ t2 ($ib); j2 ($ib); } $databaseConfiguration = oq (); ym ($databaseConfiguration,'Keywords',$tb); $ey = d ( USER_DIR,$databaseConfiguration, 'set','t',$tb['ID'],$kg ); s1 (lq ('e2m_tag', ['tag-alias' => $ey])); } else { hb ($_strings['er--cannot-rename-tag'],E2E_USER_ERROR); a1 (); } die; } function e2s_tag_delete () { global$_config; wd (); $ys = ((int)$_POST['tag-id']); cb (); e2_drop_caches_for_tag_($ys); mm ( "DELETE FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ys, 'delete note by ID' ); mm ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 't' ". "AND `EntityID` = ". ((int)$ys), 'delete aliases after deleting note' ); mm ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID`=". $ys, 'delete tag bindings after deleting tag' ); s1 (lq ('e2m_tags')); } function os () { global$settings,$_config; $rvv = null; if(CACHE_FAVTAGS and is_file (USER_DIR . CACHE_FILENAME_FAVTAGS)) { $rvv = @unserialize (file_get_contents (USER_DIR . CACHE_FILENAME_FAVTAGS)); } $tn = cs (); if (!is_array ($rvv)) { try { mm ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsFavourite`=1 ORDER BY `Keyword`", 'get favorite tags for tags menu' ); $tvv = dm (); $rvv = []; foreach ($tvv as $tb){ if (!$tb['IsVisible']) continue; $ba['sort-id']='t'. $tb['ID']; $ba['tag']=htmlspecialchars ($tb['Keyword'],ENT_NOQUOTES,'UTF-8'); $ba['title']=td ($ba['tag']); $ba['href']=lq ( 'e2m_tag', ['*tag' => $tb] ); $ba['visible?'] = (bool)$tb['IsVisible']; $ba['current?']=false; $ba['parent?']=false; $rvv[] = $ba; } if(CACHE_FAVTAGS)e3 (USER_DIR . CACHE_FILENAME_FAVTAGS,serialize ($rvv)); } catch (AeMySQLException $e){ v3 ($e); if(Log::$a)__log ('Count not get tags menu from database'); } } if (!is_array ($rvv)) return null; foreach ($rvv as $s3 => $a3){ if (!$tn and !$rvv[$s3]['visible?']) { unset ($rvv[$s3]); continue; } $rvv[$s3]['parent?'] = ( AeMainMenuManager :: isParentTag ($rvv[$s3]['tag']) ); $rvv[$s3]['current?'] = ( AeMainMenuManager :: isCurrentTag ($rvv[$s3]['tag']) ); } if(is_array (@$settings['menu_order'])) { $uf = array_flip ($settings['menu_order']); usort ($rvv, function ($c5,$v5) use ($uf){ $b5 = @$uf[$c5['sort-id']]; $y5 = @$uf[$v5['sort-id']]; if ($b5 === false)$b5 = count ($uf); if ($y5 === false)$y5 = count ($uf); return $b5 - $y5; }); } return $rvv; } function ps ($note_id){ global$_config; $xb = []; mm ( "SELECT k.* ". "FROM `". $_config['db_table_prefix']."Keywords` k, ". "`". $_config['db_table_prefix']."NotesKeywords` nk ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID`=". ((int)$note_id) ." ". "AND k.`ID`=nk.`KeywordID` ". "ORDER BY `Keyword`", 'get tag records for note by id' ); $xb = dm (); return $xb; } function ca ($databaseConfiguration,$note_id,$sg){ va ($databaseConfiguration, ['NoteID' => $note_id]); foreach ($sg as $f8){ list ($hv,$lvv)=la ( $f8 ); if ($hv === '') continue; $o5 = fa ($databaseConfiguration,$hv); if (!$o5){ @unlink (USER_DIR . CACHE_FILENAME_TAGS); @unlink (USER_DIR . CACHE_FILENAME_TAGS_FULL); @unlink (USER_DIR . CACHE_FILENAME_TAGS_AUTHOR); @unlink (USER_DIR . CACHE_FILENAME_TAGS_AUTHOR_FULL); b (true); $o5['ID']=ya ( $databaseConfiguration,$hv,$lvv ); } fm ($databaseConfiguration, "INSERT INTO `". $databaseConfiguration -> getPrefix () . "NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$databaseConfiguration -> getSubset ()) .", ". ((int)$note_id) .", ". ((int)$o5['ID']). ")", 'add new tag bindings' ); } } function va ($databaseConfiguration,$jvv){ $hvv = []; foreach ([ 'ID', 'NoteID', 'KeywordID', ] as $x) if(array_key_exists ($x,$jvv)) { $lj[] = '`'. $x .'`'."='". sm ($jvv[$x]) ."'"; if ($x == 'ID')$gvv = 'tagbinging-id'; if ($x == 'NoteID')$gvv = 'tagbinging-note-id'; if ($x == 'KeywordID')$gvv = 'tagbinging-tag-id'; $hvv[$gvv]=$jvv[$x]; } $z2 = ( "DELETE FROM `". $databaseConfiguration -> getPrefix () . "NotesKeywords` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND ". implode (' AND ',$lj) ); fm ($databaseConfiguration,$z2); } function ba ($ys,$wvv){ global$_config; mm ( "SELECT `ID`, `Keyword`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] ."Keywords` k ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND k.`ID` IN (". "SELECT `KeywordID` FROM (". "SELECT COUNT(`NoteID`) NotesCount, `KeywordID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID` IN (". "SELECT nk2.`NoteID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk2 ". "WHERE nk2.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk2.`KeywordID`=". $ys. ") ". "GROUP BY nk.`KeywordID` ". "HAVING NotesCount > 1 ". "ORDER BY NotesCount DESC ". "LIMIT 1, ". $wvv. ") k_ids". ")", 'find related tags' ); $w0 = []; foreach (dm () as $tb){ if ($tb['ID']===$ys) continue; $w0[] = [ 'name' => htmlspecialchars ($tb['Keyword'],ENT_NOQUOTES,'UTF-8'), 'href' => lq ('e2m_tag', ['*tag' => $tb]), 'visible?' => true, ]; } return $w0; } function ya ( AeDatabaseConfiguration $databaseConfiguration,$hv,$lvv ){ $tb = [ 'Keyword' => $hv, 'OriginalAlias' => d ( USER_DIR,$databaseConfiguration, 'find','','',$hv ), 'Description' => '', 'IsVisible' => $lvv, ]; $tb = bm ($databaseConfiguration,'Keywords',$tb); $uvv = d ( USER_DIR,$databaseConfiguration, 'set','t',$tb['ID'],$hv ); if ($uvv != $tb['OriginalAlias']) { $tb['OriginalAlias']=$uvv; ym ($databaseConfiguration,'Keywords',$tb); } return $tb['ID']; } function na ($parameters){ if (($ivv = ma ()) === null) return []; $d3['each']=$ivv; $d3['reorderable?']=false; if (cs ()) { $d3['reorderable?']=true; $d3['save-order-action']=lq ('e2j_save_menu_order'); } if(count ($d3['each']) > 0){ $d3['href']=lq ('e2m_tags'); } if (($ovv = os ()) !== null){ $d3['menu-each']=$ovv; } return $d3; } function ma ($pvv = false){ global$_config; $tn = cs (); $wf = USER_DIR . CACHE_FILENAME_TAGS; if ($tn)$wf = USER_DIR . CACHE_FILENAME_TAGS_AUTHOR; if ($pvv){ $wf = USER_DIR . CACHE_FILENAME_TAGS_FULL; if ($tn)$wf = USER_DIR . CACHE_FILENAME_TAGS_AUTHOR_FULL; } $cbv = null; if(CACHE_TAGS and is_file ($wf)) { $cbv = @unserialize (file_get_contents ($wf)); } if (!is_array ($cbv)) { try { mm ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY `Keyword`", 'get all tags' ); $vbv = []; foreach (dm () as $tb){ $hv['id'] = (int)$tb['ID']; $hv['tag']=htmlspecialchars ($tb['Keyword'],ENT_NOQUOTES,'UTF-8'); $hv['tag-dotted']=qa ($tb); $hv['favourite?'] = (bool)$tb['IsFavourite']; $hv['visible?'] = (bool)$tb['IsVisible']; $hv['notes-count']=0; $hv['last-used']=0; $hv['freshness']=0; $hv['weight']=0; if ($pvv){ $hv['href']=lq ('e2m_tag', ['*tag' => $tb]); } $vbv[$tb['ID']] = $hv; } mm ( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix']."NotesKeywords` nk, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". nf ($tn). "AND nk.`NoteID` = n.`ID` ". "GROUP BY nk.KeywordID", 'get tags ordering info' ); $bbv = 0; $ybv = 0; $nbv = 0; foreach (dm () as $mbv){ if (!isset ($vbv[$mbv['KeywordID']])) { unset ($vbv[$mbv['KeywordID']]); continue; } $ba =& $vbv[$mbv['KeywordID']]; $ba['notes-count']=$mbv['Count']; if (@$ba['last-used']<$mbv['LastUsed']) { $ba['last-used']=$mbv['LastUsed']; $fbv = (time () - $ba['last-used']) / SECONDS_IN_A_YEAR; $ba['freshness']=pow (1/2,$fbv); } $bbv = max ($bbv,$ba['notes-count']); $ybv = max ($ybv,$ba['freshness']); $nbv = max ($nbv,$ba['notes-count']*$ba['freshness']); } $cbv = []; foreach ($vbv as $rb => $a3){ if (!$tn and $a3['notes-count']==0) continue; if (!$tn and !$a3['visible?']) continue; $dbv = mb_strtolower ($a3['tag']); $cbv[$dbv]=$a3; if ($ybv != 0){ $cbv[$dbv]['freshness']=$a3['freshness']/$ybv; } else { $cbv[$dbv]['freshness']=0; } if ($nbv != 0){ $cbv[$dbv]['weight'] = ( $a3['freshness']*$a3['notes-count']/$nbv ); } else { $cbv[$dbv]['weight']=0; } if ($cbv[$dbv]['favourite?'])$cbv[$dbv]['weight']=1; } if(CACHE_TAGS)e3 ($wf,serialize ($cbv)); } catch (AeMySQLException $e){ v3 ($e); if(Log::$a)__log ('Could not get tags from database'); } } return $cbv; } function fa (AeDatabaseConfiguration $databaseConfiguration,$avv){ fm ( $databaseConfiguration, "SELECT * FROM `". $databaseConfiguration -> getPrefix () . "Keywords` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `Keyword`='". sm ($avv) ."'", 'get tag by name' ); $s3 = dm (); if (isset ($s3[0])) { return $s3[0]; } else { return null; } } function da (AeDatabaseConfiguration $databaseConfiguration,$sbv){ fm ( $databaseConfiguration, "SELECT * FROM `". $databaseConfiguration -> getPrefix () . "Keywords` ". "WHERE `SubsetID`=". $databaseConfiguration -> getSubset () ." ". "AND `OriginalAlias`='".sm ($sbv)."'", 'get tag by legacy urlname name' ); $zb = dm (); if (isset ($zb[0])) { return $zb[0]; } else { return null; } } function sa ($zy){ global$_config; mm ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`='".((int)$zy)."'", 'get tag by id' ); $zb = dm (); if (isset ($zb[0])) { return $zb[0]; } else { return null; } } function e2_tagrecs_with_parameters_($parameters){ $abv = []; if (@$parameters['tag-alias'] or $parameters['tag-alias']==='0'){ $abv = explode (',',$parameters['tag-alias']); } $xb = []; foreach ($abv as $sbv) if ($sbv or $sbv === '0'){ if ( $cg = f (@$sbv) and ($cg['type']=='t') and ($tb = sa ($cg['id'])) ) { $xb[] = $tb; } else { if ($qbv = da ( oq (), $sbv )) { $xb[] = $qbv; } } } return $xb; } function qa ($tb){ $lbv = htmlspecialchars ($tb['Keyword'],ENT_COMPAT,'UTF-8'); if (!$tb['IsVisible']) { $lbv = '.'. $lbv; } return $lbv; } function la ($lbv){ if (@$lbv[0]==='.'){ return [trim (substr ($lbv,1),". \t\n\r\0\x0B"),false]; } else { return [$lbv,true]; } } function za ($bf){ $uj = c1 ('H',$bf); if ($uj <= 4) return 4; elseif ($uj <= 10) return 1; elseif ($uj <= 16) return 2; elseif ($uj <= 22) return 3; else return 4; } function ka ($zbv,$kbv = null){ global$_strings; if ($kbv === null)$kbv = wa (); $ld = time (); $xbv = pa ('d.m.Y',$ld,$kbv); $ebv = pa ('d.m.Y',$zbv,$kbv); $rbv = SECONDS_IN_A_MINUTE; $tbv = SECONDS_IN_AN_HOUR; $jbv = za ($ld); $hbv = za ($zbv); $gbv = $ld - $zbv; if ($gbv < 0) return$_strings['tt--from-the-future']; if ($gbv >= 0 and $gbv < 54) return$_strings['tt--just-now']; if ($gbv >= 54 and $gbv < 108) return$_strings['tt--one-minute-ago']; $wbv = $gbv + 12; $ubv = floor ($wbv / $rbv); if ($gbv >= 108 and $gbv < 54*$rbv) return e2l_get_string ( 'tt--minutes-ago', array ('minutes' => $ubv) ); if ($gbv >= 54*$rbv and $gbv < 108*$rbv) return$_strings['tt--one-hour-ago']; $wbv = $gbv + 12*$rbv; $ibv = floor ($wbv / $tbv); if ($gbv >= 108*$rbv and $gbv < 4*$tbv) return e2l_get_string ( 'tt--hours-ago', array ('hours' => $ibv) ); $l = pa ('G:i',$zbv,$kbv); if ($gbv >= 4*$tbv and $jbv > $hbv and $xbv == $ebv){ return$_strings['tt--today']; } if ((($ld - $zbv) <= 7884000)) { return e2l_get_string ( 'tt--date', array ( 'day' => pa ('j',$zbv,$kbv), 'month' => pa ('m',$zbv,$kbv), ) ); } return pa ('Y',$zbv,$kbv); } function xa ($zbv,$kbv = null){ global$_strings; $gbv = time () - $zbv; if ($gbv < 0) return$_strings['tt--from-the-future']; if ($gbv == 0) return$_strings['tt--now']; $obv = array ( array (1,'tt--seconds-short'), array (SECONDS_IN_A_MINUTE,'tt--minutes-short'), array (SECONDS_IN_AN_HOUR,'tt--hours-short'), array (SECONDS_IN_A_DAY,'tt--days-short'), array (SECONDS_IN_A_MONTH,'tt--months-short'), array (SECONDS_IN_A_YEAR,'tt--years-short'), array (SECONDS_IN_A_YEAR + SECONDS_IN_A_MONTH,''), ); for ($rb = 0; $rb < count ($obv); ++ $rb){ if ($gbv >= $obv[$rb][0] and $gbv < $obv[$rb + 1][0]) { return e2l_get_string ( $obv[$rb][1], array ('value' => floor ($gbv / $obv[$rb][0])) ); } } if ($kbv === null)$kbv = wa (); return pa ('Y',$zbv,$kbv); } function e2m_timezone () { global$_strings,$settings; $pbv = array ( 'form-action' => lq ('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => ja ($settings['timezone']['offset'],1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $pbv, ); } function ea () { global$_strings; $c3v = array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $c3v; } function ra ($z3){ $c3v = ea (); return @$c3v[(int)$z3/SECONDS_IN_A_MINUTE]; } function ta ($z3){ $v3v = '+'; if ($z3 < 0)$v3v = '&ndash;'; $b3v = str_pad ((int) (abs ($z3)/3600),2,'0',STR_PAD_LEFT); $y3v = str_pad (abs ($z3)/60 % 60,2,'0',STR_PAD_LEFT); return 'GMT'. $v3v . $b3v .':'. $y3v; } function ja ($n3v,$m3v = ''){ global$_strings; $c3v = ea (); $cb = ''; if (!$m3v)$m3v = count ($c3v); $cb .= '<select class="e2-select" name="offset" size="'. $m3v .'">'; foreach ($c3v as $z3 => $f3v){ $d3v = ''; if ($z3 * SECONDS_IN_A_MINUTE == $n3v)$d3v = ' selected="selected"'; $cb .= '<option'. $d3v .' value="'.$z3.'">'; $v3v = ''; if ($z3 < 0)$v3v = '−'; if ($z3 > 0)$v3v = '+'; $b3v = (int) (abs ($z3 * SECONDS_IN_A_MINUTE)/3600); $y3v = (int) (abs ($z3 * SECONDS_IN_A_MINUTE)/60 % 60); if ($b3v){ $cb .= ( $v3v .' '. $b3v .' '. $_strings['gs--timezone-offset-hours'] .' '. ($y3v? ($y3v .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($f3v){ $cb .= ' ('. $f3v. ')'; } } else { $cb .= $f3v; } $cb .= '</option>'; } $cb .= '</select>'; return $cb; } function e2s_select_timezone () { global$settings,$_strings; wd (); if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780){ $settings['timezone']['offset'] = @$_POST['offset']*SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@e3 (USER_DIR . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { hb ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); s1 (lq ('e2m_timezone')); } s1 (lq ('e2m_settings')); } function ha ($r){ return array ( 'offset' => (int)$r['Offset'], 'is_dst' => (bool)$r['IsDST'], ); } function ga () { return array ( 'offset' => 0, 'is_dst' => false, ); } function wa () { global$settings; if(array_key_exists ('timezone',$settings)) { return$settings['timezone']; } else { return ga (); } } function ua ($gb,$s3v){ if (@$gb['is_dst']) { $a3v = (int)date ('I',$s3v); $q3v = date ('Z',$s3v)-$a3v * SECONDS_IN_AN_HOUR; $l3v = $gb['offset']; $z3v = $l3v - $q3v; $k3v = date ('I',$s3v + $z3v); return $k3v; } else { return 0; } } function ia ($gb,$s3v){ if ($gb and is_array ($gb)) { return ( $gb['offset'] + ua ($gb,$s3v)*SECONDS_IN_AN_HOUR ); } } function oa ($s3v){ return ia (wa (), $s3v); } function pa ($x3v,$r4,$gb){ return gmdate ($x3v,$r4 + ia ($gb,$r4)); } function c1 ($x3v,$r4){ return pa ($x3v,$r4,wa ()); } function v1 ($tm,$jm = false,$hm = false){ if(is_numeric ($hm)) { $e3v = gmmktime (0,0,0,$jm,$hm,$tm); $r3v = gmmktime (0,0,0,$jm,$hm + 1,$tm)-1; } elseif(is_numeric ($jm)) { $e3v = gmmktime (0,0,0,$jm,1,$tm); $r3v = gmmktime (0,0,0,$jm + 1,1,$tm)-1; } else { $e3v = gmmktime (0,0,0,1,1,$tm); $r3v = gmmktime (0,0,0,1,1,$tm + 1)-1; } return array ($e3v,$r3v); } function b1 ($gb,$tm,$jm = false,$hm = false){ list ($e3v,$r3v)=v1 ($tm,$jm,$hm); $e3v -= ia ($gb,$e3v); $r3v -= ia ($gb,$r3v); return array ($e3v,$r3v); } function y1 ($tm,$jm = false,$hm = false){ return b1 (wa (), $tm,$jm,$hm); } function n1 ($tm,$jm = false,$hm = false){ $t3v = 13; $j3v = -12; $t3v += 1; $j3v -= 1; list ($e3v,$r3v)=v1 ($tm,$jm,$hm); $e3v -= $t3v * 3600; $r3v -= $j3v * 3600; return array ($e3v,$r3v); } function m1 ($z3){ if ((int) @$z3 > 0) return (string)'+'.abs (@$z3); elseif ((int) @$z3 < 0) return (string)'-'.abs (@$z3); else return ''; } function f1 ($s3v,$h3v = ''){ $g3v = oa ($s3v); $v3v = ($g3v >= 0)?'+':'-'; $g3v = abs ($g3v); $ij = $g3v % 60; $g3v -= $ij; $jm = $g3v % 3600 / 60; $g3v -= $jm * 60; $uj = $g3v / 3600; if ($uj < 10)$uj = '0'.$uj; if ($jm < 10)$jm = '0'.$jm; return $v3v.$uj.$h3v.$jm; } function d1 ($w3v){ global$settings; if(is_numeric ($w3v)) { $x3['offset']=SECONDS_IN_A_MINUTE * $w3v; $x3['is_dst']=false; $u3v = SECONDS_IN_A_MINUTE * $w3v - SECONDS_IN_AN_HOUR; $i3v = array ('offset' => $u3v,'is_dst' => true); $i3v = (int)ia ($i3v,time ()); if ($x3['offset']==$i3v){ $x3['offset']=$u3v; $x3['is_dst']=true; } } else { if(array_key_exists ('timezone',$settings)) { $x3 = $settings['timezone']; } else { $x3['offset']=0; $x3['is_dst']=false; } } return $x3; } function s1 ($c1 = ''){ global$errors; @session_start (); $_SESSION['errors']=$errors; if(substr ($c1,0,strlen (AeEnv::$i)+3)!=AeEnv::$i .'://'){ header ('Location: '. AeEnv::$o . $c1); } else { header ('Location: '. $c1); } flush (); die; } function a1 () { $o3v = (string) @$_SERVER['HTTP_REFERER']; s1 ($o3v); } function q1 ($ir = ''){ $p3v = str_replace ('/','--', trim (AeEnv::$w .'/'.AeEnv::$u,'/') ); if ($p3v !== '')$p3v .= '-'; $url = AeEnv::$base_url; $lz = substr_count ($_SERVER['HTTP_HOST'],'.'); $cb = $p3v . @str_repeat ('_',$lz).$ir; return $cb; } function l1 ($ir,$cv = '',$cyv = true){ $vyv = $cyv? (time () + 3600 * 24 * 365) : (0); $byv = $_SERVER['HTTP_HOST']; $yyv = substr_count ($byv,'.'); if ($yyv < 3)$byv = str_repeat ('.',3 - $yyv).$byv; setcookie (q1 ($ir),$cv,$vyv,'/'); } function z1 ($nyv,$c4,$myv = ''){ if(trim ($c4)!=''){ $c4 = explode ($nyv,$c4); foreach ($c4 as $rb => $s3)$c4[$rb]=trim ($s3); foreach ($c4 as $rb => $s3) if ($s3 == '') unset ($c4[$rb]); $fyv = array_unique ($c4); if ('sort' == $myv)sort ($fyv); return $fyv; } else return array (); } function k1 ($c4){ $kq = array (); if(is_file (SYSTEM_DEFAULTS_DIR . 'romanize.txt')) { $kq = file (SYSTEM_DEFAULTS_DIR . 'romanize.txt'); } $dyv = $wt = ''; foreach ($kq as $rb => $pm){ if (!($rb%2))$dyv .= rtrim ($pm) .' '; else $wt .= rtrim ($pm) .' '; if ($rb%2){ while (mb_strlen ($wt)<mb_strlen ($dyv))$wt .= ' '; while (mb_strlen ($wt)>mb_strlen ($dyv))$dyv .= ' '; } } $syv = ''; $ayv = -1; for ($rb = 0; $rb < mb_strlen ($dyv); ++ $rb){ $dcv = mb_substr ($dyv,$rb,1); if ($dcv != ' '){ $syv .= $dcv; if ($ayv == -1)$ayv = $rb; } elseif ($syv){ $qyv = trim (mb_substr ($wt,$ayv,mb_strpos ($wt,' ',$ayv + 1)-$ayv)); $kb = array ($syv,$qyv); $lyv[mb_strlen ($syv)][] = $kb; $syv = ''; $ayv = -1; } } $zyv = array (); for ($rb = count ($lyv); $rb > 0; -- $rb){ foreach ($lyv[$rb] as $kb)$zyv[$kb[0]] = $kb[1]; } return strtr ($c4,$zyv); } function x1 ($c5,$v5,$kyv = 0){ if ($v5 == 0) return 0; $xyv = round ($c5 / $v5 * 100,$kyv); $eyv = pow (10, -$kyv); if ($c5 > 0 and $xyv == 0)$xyv = $eyv; if ($c5 < $v5 and $xyv == 100)$xyv = 100 - $eyv; return $xyv; } function e1 ($ryv,$action,$r4){ if (!is_array ($ryv))$ryv = array (); if($action == 'add'){ $ryv = array_unique (array_merge ($ryv,$r4)); } if($action == 'remove'){ unset ($ryv[array_search ($r4,$ryv)]); } if (!is_array ($ryv))$ryv = array (); return $ryv; } function r1 ($lb){ $parameters = $lb['parameters']; $yl = [ 'success' => false ]; $lb['flipping-function'] ($parameters); $tyv = $parameters; $tyv['value'] = !$parameters['value']; $yl = [ 'success' => true, 'data' => [ 'flag-now-on' => ($parameters['value']==1), 'new-href' => lq ($lb['candy-name'],$tyv), ] ]; if(array_key_exists ('result',$_POST) and ($_POST['result']=='ajaxresult')) { $yl = json_encode ($yl); die ($yl); } else { s1 (lq ($lb['redirect-candy'],$parameters)); } } function t1 ($c4){ $mo = @$_SERVER['HTTP_USER_AGENT'] or $mo = ''; $jyv = strstr ($mo,'iPhone') || strstr ($mo,'iPad'); $hyv = strstr ($mo,'Macintosh'); if ($jyv) return ''; if ($c4 == 'submit'){ if ($hyv){ return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($c4 == 'livesave'){ if ($hyv){ return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($c4 == 'navigation'){ if ($hyv){ return '&#x2325;'; } else { return 'Ctrl'; } } if ($c4 == 'navigation-later'){ if ($hyv){ return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($c4 == 'navigation-earlier'){ if ($hyv){ return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function j1 ($l1){ $l1 = str_replace ('<','&lt;',$l1); $l1 = str_replace ('>','&gt;',$l1); return $l1; } function h1 ($l1){ $l1 = str_replace ('"','&quot;',$l1); return $l1; } function g1 ($cv,$gyv){ return str_replace ('.',',',round ($cv,$gyv)); } function e2_stripslashes_array ($cs){ return is_array ($cs)?array_map ('e2_stripslashes_array',$cs):stripslashes ($cs); } function w1 () { if(version_compare (PHP_VERSION,'7.4') >= 0) return; if(get_magic_quotes_runtime ()) { set_magic_quotes_runtime (0); } if(get_magic_quotes_gpc ()) { $_GET = e2_stripslashes_array ($_GET); $_POST = e2_stripslashes_array ($_POST); $_COOKIE = e2_stripslashes_array ($_COOKIE); $_REQUEST = e2_stripslashes_array ($_REQUEST); } } function u1 ($oi){ return sprintf ('%u',ip2long ($oi)); } function i1 ($qa){ return long2ip (sprintf ('%d',$qa)); } function e2_decline_for_number ($l1,$qa = null){ $wyv = $l1; if ($qa === null){ $qa = substr ($l1,0,strpos ($l1,' ')); $wyv = substr ($l1,strpos ($l1,' ')+1); } $uyv = strpos ($wyv,'('); $iyv = strpos ($wyv,')'); if ($iyv > $uyv)$oyv = substr ($wyv,$uyv,$iyv - $uyv + 1); $pyv = explode (',',trim (@$oyv,'()')); if(count ($pyv)==2)array_unshift ($pyv,''); $cnv = array (2,0,1,1,1,2,2,2,2,2); if ($qa%100 > 10 and $qa%100 < 20)$vnv = 2; else $vnv = $cnv[$qa%10]; $s7 = $pyv[$vnv]; $l1 = str_replace ($oyv,$s7,$l1); if(strstr ($l1,'(') and strstr ($l1,')')) { return e2_decline_for_number ($l1,$qa); } else { return $l1; } } function o1 ($bnv){ $oo = glob ($bnv,GLOB_NOSORT); if(is_array ($oo)) { foreach ($oo as $wd){ @unlink ($wd); } } } function p1 ($nx){ $oo = glob ($nx .'*',GLOB_NOSORT); if(is_array ($oo)) { foreach ($oo as $wd){ if(basename ($wd)!='.' and basename ($wd)!='..'){ if(is_dir ($wd)) { if (p1 ($wd .'/')) { if (!@rmdir ($wd)) { return false; } } else { return false; } } else { @unlink ($wd); } } } return true; } else { return false; } } function cq ($ynv){ $ynv = trim ($ynv,'/'); $ynv = explode ('/',$ynv); $nx = ''; foreach ($ynv as $pj){ $nx = $nx.$pj; if (!is_dir ($nx)) { if (@mkdir ($nx)) { @chmod ($nx,E2_NEW_FILES_RIGHTS); } else { return false; } } $nx = $nx.'/'; } return true; } function vq ($ynv){ return preg_replace ('/\/([^\/]+?)\/\.\./','',$ynv); } function bq ($c4){ $nnv = get_html_translation_table (HTML_ENTITIES); $nnv = array_flip ($nnv); return strtr ($c4,$nnv); } function yq ($mnv = NULL){ if(NULL == $mnv)$mnv = microtime (); list ($fnv,$gbv)=explode (' ',$mnv); return ((float)$fnv + (float)$gbv); } function _A ($l1){ global$_candy,$_current_url; if ( preg_match ('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si',$l1,$fe) and ( $fe[1]==='' or $fe[1]===$_current_url or AeEnv::$i .'://'. AeEnv::$server . $fe[1]===$_current_url or AeEnv::$o . $fe[1]===$_current_url or $_candy == 'e2m_install' ) ) { return $fe[2]; } else { return $l1; } } function _AT ($n1){ global$_current_url; return ( $n1 === '' or $n1 === $_current_url or AeEnv::$i .'://'. AeEnv::$server . $n1 === $_current_url or AeEnv::$o . AeEnv::$u . $n1 === $_current_url ); } function _READS ($j3){ if (!empty ($j3['read-count'])) return $j3['read-count']; return AeNoteReadCountsProvider :: getReadCountForNoteID ($j3['id']); } function _IMGSRC ($wd){ return uf ($wd); } function _SVG ($wd){ return if_ ($wd); } function _COLOR ($b,$y,$dnv,$snv = 1){ if(strlen ($b)!=3 and strlen ($b)!=6) return 'f0f'; if(strlen ($y)!=3 and strlen ($y)!=6) return 'f0f'; if(strlen ($b)==3)$b = $b[0].$b[0].$b[1].$b[1].$b[2].$b[2]; if(strlen ($y)==3)$y = $y[0].$y[0].$y[1].$y[1].$y[2].$y[2]; $sj = array ( $b[0].$b[1],$b[2].$b[3],$b[4].$b[5], $y[0].$y[1],$y[2].$y[3],$y[4].$y[5], ); foreach ($sj as $s3 => $a3){ $sj[$s3]=hexdec ($a3); } $st = array ( $sj[0]+pow ($dnv,$snv) * ($sj[3]-$sj[0]), $sj[1]+pow ($dnv,$snv) * ($sj[4]-$sj[1]), $sj[2]+pow ($dnv,$snv) * ($sj[5]-$sj[2]), ); $anv = ''; foreach ($st as $s3 => $a3){ $anv .= str_pad (dechex ($a3),2,'0',STR_PAD_LEFT); } return $anv; } function _DT ($x3v,$qnv){ if (!$qnv) return ''; list ($bf,$gb)=$qnv; $cb = $x3v; $en = pa ('m',$bf,$gb); $cb = str_replace ('{zone}',e2__escape_all (ta ($gb['offset'])), $cb); $cb = str_replace ('{month}',e2__escape_all (e2l_get_string ('um--month', array ('month' => $en))), $cb); $cb = str_replace ('{month-short}',e2__escape_all (e2l_get_string ('um--month-short', array ('month' => $en))), $cb); $cb = str_replace ('{month-g}',e2__escape_all (e2l_get_string ('um--month-g', array ('month' => $en))), $cb); $cb = pa ($cb,$bf,$gb); return $cb; } function _AGO ($qnv){ return xa ($qnv[0], array ('offset' => $qnv[1]['offset'],'is_dst' => $qnv[1]['is_dst']) ); } function _NUM ($l1){ return e2_decline_for_number ($l1); } function _CSS ($lnv){ return jf ($lnv); } function _CSS_HREF ($lnv){ return of ($lnv); } function _JS ($znv){ return hf ($znv); } function _LIB ($ow){ return gf ($ow); } function _T ($jw){ echo rf ($jw); } function _T_DEFER ($name){ echo kf ($name); } function _X ($jw){ echo ef ($jw); } function _T_FOR ($jw,$knv = null){ global$content; if ($knv === null)$knv = $jw; if(array_key_exists ($knv,$content)) { echo rf ($jw); } else { echo ''; } } function _FIT ($gz,$wz){ } function _GUIDES ($xnv = false){ global$_olba_guides; if(is_array ($xnv))$_olba_guides = $xnv; if (!is_array ($_olba_guides)) return; $env = '<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $rnv = 0; $tnv = $_olba_guides; $tnv[] = 100; foreach ($tnv as $rb => $jnv){ if ($jnv == 100) break; $rnv += $jnv; $env .= '<div style="position: fixed; left: '. $jnv .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $hnv = 'position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($tnv[$rb+1]-$tnv[$rb]<4){ $env .= '<div style="'. $hnv.'; right: '. (100 - $jnv) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $jnv .'%</div>'; } else { $env .= '<div style="'. $hnv.'; left: '. $jnv .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $jnv .'%</div>'; } } $env .= '</div>'; $_olba_current_col = 0; return $env; } function _S ($c4){ global$_strings; return$_strings[$c4]; } function _SHORTCUT ($name){ return t1 ($name); } function e2__escape_all ($c4){ $cb = ''; for ($rb = 0; $rb < mb_strlen ($c4); ++ $rb){ $cb .= '\\'. mb_substr ($c4,$rb,1); } return $cb; } function nq ($dyv){ global$_db,$_instance_config,$_strings; $gnv = 'v'. $dyv; $wnv = 'v'. E2_VERSION; $unv = dq ($dyv); $inv = dq (E2_VERSION); if ($unv === $inv){ $unv = $gnv; $inv = $wnv; } else { $unv .= ' ('. $gnv. ')'; $inv .= ' ('. $wnv .')'; } $onv = dq (3239) .' (v3239)'; if (!$_instance_config['allow_update']) { return ['stub' => us ('update-disallowed')]; } if(E2_VERSION < $dyv and !$_instance_config['dev_ignore_version_mismatch']) { return ['stub' => us ('generic', [ 'heading' => $_strings['pt--confused'], 'text' => '<p>'. e2l_get_string ('gs--downdate-explanation', [ 'dr' => $unv, 'rr' => $inv, ]) .'</p>', ])]; } if ($dyv < 3239){ return ['stub' => us ('generic', [ 'heading' => $_strings['pt--multi-step-update'], 'text' => '<p>'. e2l_get_string ('gs--multi-step-update-p1', [ 'dr' => $unv, 'rr' => $inv, 'ur' => $onv, ]) .'</p>'.'<p>'. e2l_get_string ('gs--multi-step-update-p2', [ 'dr' => $unv, 'rr' => $inv, 'ur' => $onv, ]) .'</p>', ])]; } if (fq ()) { return ['stub' => us ('generic', [ 'heading' => $_strings['pt--updating'], 'text' => '<p>'. $_strings['gs--this-takes-seconds'] .'</p>', 'button' => $_strings['fb--retry'], ])]; } if($_instance_config['log_updates']) { Log::$a = true; if(Log::$a)dn ('update-$'); } if(Log::$a)__log ('Update from v'. $dyv .' to v'. E2_VERSION.' {'); $pnv = ($dyv < 3601); $databaseConfigurationsToMigrate = []; try { if(Log::$a)__log ('Update instance'); if($_instance_config['db']!==null){ $instanceDatabaseConfiguration = new AeDatabaseConfiguration ( 'instance-config', INSTANCE_DIR . BACKUP_DIRNAME, $_instance_config['db']['server'], $_instance_config['db']['user_name'], $_instance_config['db']['passw'], $_instance_config['db']['name'], $_instance_config['db_table_prefix'] ); if($_instance_config['backup_before_update']) { if (!km ($instanceDatabaseConfiguration)) { throw new AeBackupFailedException (); } } in ($instanceDatabaseConfiguration); if(Log::$a)__log ('Instance has migrateable database table set "'. $instanceDatabaseConfiguration -> getTablesKeyString (). '"'); $cmv = (mq ($instanceDatabaseConfiguration)); $instanceDatabaseConfiguration -> setSubset ($cmv); if(Log::$a)__log ('Will set subset '. $cmv .' for subset-zero records'); $databaseConfigurationsToMigrate[ $instanceDatabaseConfiguration -> getTablesKeyString () ] = $instanceDatabaseConfiguration; } bn (); AeFileManager::forceInstanceDirectories (); $vmv = iq (); if(Log::$a)__log ('Update '. count ($vmv) .' users {'); $vq = []; foreach ($vmv as $bp){ $bmv = gq ($bp,$_instance_config['path_user']); $ymv = uq ($_instance_config,$bmv); $yp = e2_load_settings_from_user_folder_($bp); if(count ($nmv = AeFileManager::getPathsWithNoWritePermissions ( $ymv['path_user'],$ymv['path_media'] )) > 0){ $vq = array_merge ($vq,$nmv); continue; } if(Log::$a)__log ( 'User with key "'. $bmv .'" has path "'. $ymv['path_user'] .'", '. 'media path "'. $ymv['path_media'] .'"' ); $userDatabaseConfiguration = pq ( $ymv,$yp ); if ($ymv['backup_before_update']) { if (!km ($userDatabaseConfiguration)) { throw new AeBackupFailedException (); } } in ($userDatabaseConfiguration); if(Log::$a)__log ( 'User has migrateable database configuration "'. $userDatabaseConfiguration. '"' ); $databaseConfigurationsToMigrate[ $userDatabaseConfiguration -> getTablesKeyString () ] = $userDatabaseConfiguration; AeFileManager::forceUserDirectories ($ymv['path_user']); AeFileManager::forceMediaDirectories ($ymv['path_media']); o1 ($ymv['path_user'].CACHES_DIRNAME .'*'); if ($dyv < 3354){ @rename ($ymv['path_media'].'pictures/userpics/',AVATARS_DIRNAME); @unlink ($ymv['path_user'] .'password-reset.txt'); } if ($dyv < 3932){ @unlink ($ymv['path_user'] .'indexing.psa'); } foreach (p3 () as $hd){ if(is_file ($ymv['path_user'].$hd)) { rename ( $ymv['path_user'].$hd, $ymv['path_media'].USERPIC_DIRNAME . $hd ); } } if ($pnv)sd ($ymv['path_user']); } if(count ($vq)>0){ return ['stub' => us ('generic', [ 'heading' => $_strings['pt--fix-permissions'], 'text' => ( '<p>'. $_strings['gs--fix-permissions'] .'</p>'. gb (array_unique ($vq)) ), 'button' => $_strings['fb--retry'], ])]; } if(Log::$a)__log ('}'); if(Log::$a)__log ('Migrate '. count ($databaseConfigurationsToMigrate) .' database table set(s), namely:'); $s3 = 0; foreach($databaseConfigurationsToMigrate as$databaseConfigurationToMigrate){ if(Log::$a)__log ((++ $s3) .'. "'. $databaseConfigurationToMigrate -> getTablesKeyString (). '"'); } $s3 = 0; foreach($databaseConfigurationsToMigrate as$databaseConfigurationToMigrate){ if(Log::$a)__log ('Prepage for migratation '. (++ $s3) .'/'. count ($databaseConfigurationsToMigrate) .':'); tn ($databaseConfigurationToMigrate); } $s3 = 0; foreach($databaseConfigurationsToMigrate as$databaseConfigurationToMigrate){ if(Log::$a)__log ('Migrate '. (++ $s3) .'/'. count ($databaseConfigurationsToMigrate) .':'); jn ($databaseConfigurationToMigrate); if ($pnv){ jd ($databaseConfigurationToMigrate); } } } catch (AeBackupFailedException $e){ if(Log::$a)__log ('Aborting: cannot backup'); return ['stub' => us ('generic', [ 'heading' => $_strings['pt--update-cancelled'], 'text' => '<p>'. $_strings['gs--cannot-backup-before-update'] .'</p>', ])]; return ['stub' => us ('update-backup-failed')]; } catch (AeMySQLCannotConnectException $e){ if(Log::$a)__log ('Aborting: cannot connect'); return ['stub' => us ('generic', [ 'heading' => $_strings['pt--update-cancelled'], 'text' => '<p>'. $_strings['er--cannot-connect-to-db'] .'</p>', ])]; } catch (AeMySQLNotFoundException $e){ if(Log::$a)__log ('Aborting: database not found'); return ['stub' => us ('generic', [ 'heading' => $_strings['pt--update-cancelled'], 'text' => '<p>'. $_strings['er--cannot-find-db'] .'</p>', ])]; } catch (AeMySQLTooOldException $e){ if(Log::$a)__log ('Aborting: '. $_db['software'] .' too old'); return ['stub' => us ('generic', [ 'heading' => $_strings['pt--update-cancelled'], 'text' => '<p>'. e2l_get_string ( 'gs--dbs-version-too-old', [ 'dbs' => $_db['software'], 'dbv' => $_db['version'], 'minmysql' => E2_MINIMUM_MYSQL, 'minmariadb' => E2_MINIMUM_MARIADB, 'aegearelease' => dq (E2_VERSION) ] ) .'</p>' ])]; } catch (AeMySQLNotMigrateableException $e){ if(Log::$a)__log ('Aborting: not migrateable'); return ['stub' => us ('generic', [ 'heading' => $_strings['pt--update-cancelled'], 'text' => '<p>'. $_strings['gs--update-db-incomplete'] .'</p>', ])]; } catch (AeMySQLNoDataException $e){ if(Log::$a)__log ('Aborting: no data in database'); return ['stub' => us ('generic', [ 'heading' => $_strings['pt--update-cancelled'], 'text' => '<p>'. $_strings['gs--update-db-no-data-configure-or-reinstall'] .'</p>', ])]; } finally { @unlink (INSTANCE_DIR .'updating.psa'); } $zx = vn (E2_VERSION); return [ 'status' => 'success', 'from-release' => $unv, 'to-release' => $inv, 'instance' => $zx, ]; } function mq (AeDatabaseConfiguration $databaseConfiguration){ $mmv = 0; foreach(AeModel::unprefixedCoreTablesNames () as $s2){ fm ( $databaseConfiguration, "SELECT MAX(`SubsetID`) MaxSubsetID ". "FROM `". $databaseConfiguration -> getPrefix () . $s2 ."`" ); $x3 = dm (); $mmv = max ($mmv,$x3[0]['MaxSubsetID']); } return $mmv + 1; } function fq () { $fmv = ini_get ('max_execution_time')+1; $dmv = @unserialize (file_get_contents (INSTANCE_DIR .'updating.psa')); if (!is_array ($dmv))$dmv = []; if ( isset ($dmv['locktime']) and $dmv['locktime'] >= time () - $fmv ) return true; $dmv['locktime']=time (); @e3 (INSTANCE_DIR .'updating.psa',serialize ($dmv)); return false; } function dq ($a3){ $name = '2.6 or earlier'; if ($a3 >= 3119)$name = '2.6'; if ($a3 >= 3201)$name = '2.7b'; if ($a3 >= 3225)$name = '2.7b2'; if ($a3 >= 3239)$name = '2.7'; if ($a3 >= 3254)$name = '2.8a'; if ($a3 >= 3335)$name = '2.8b'; if ($a3 >= 3354)$name = '2.8b2'; if ($a3 >= 3364)$name = '2.8'; if ($a3 >= 3382)$name = '2.8 SP1'; if ($a3 >= 3386)$name = '2.8 SP2'; if ($a3 >= 3445)$name = '2.9a2'; if ($a3 >= 3492)$name = '2.9a4'; if ($a3 >= 3520)$name = '2.9b'; if ($a3 >= 3543)$name = '2.9b2'; if ($a3 >= 3553)$name = '2.9'; if ($a3 >= 3559)$name = '2.9 SP1'; if ($a3 >= 3565)$name = '2.9 SP2'; if ($a3 >= 3572)$name = '2.9 SP3'; if ($a3 >= 3576)$name = '2.9 SP4'; if ($a3 >= 3733)$name = '2.10a'; if ($a3 >= 3753)$name = '2.10a2'; if ($a3 >= 3783)$name = '2.10a3'; if ($a3 >= 3788)$name = '2.10'; if ($a3 >= 3805)$name = '2.10 SP1'; if ($a3 >= 3820)$name = '2.10 SP2'; if ($a3 >= 3831)$name = '2.10 SP3'; if ($a3 >= 3849)$name = '2.10 SP4'; if ($a3 >= 3860)$name = '2.10 SP5'; if ($a3 >= 3874)$name = '2.10 SP6'; if ($a3 >= 4034)$name = '2.11a'; if ($a3 >= 4045)$name = '2.11a2'; if ($a3 >= E2_VERSION)$name = '2.11a2'; return$name; } $_url_map = [ '@log' => 'e2://e2s_log', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note?is_published=1&preview-key=0', ':note/:preview' => 'e2://e2m_note?is_published=1', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2s_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2s_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2s_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2s_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2s_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2s_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2s_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2s_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2s_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2s_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2s_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2s_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2s_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2s_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts?page=1', 'drafts-:page' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_note?is_published=0&preview-key=0', 'drafts/:draft/:preview' => 'e2://e2m_note?is_published=0', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2s_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2s_tag_flag_ajax?flag=IsFavourite&value=0', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'hot' => 'e2://e2m_most_commented', 'popular' => 'e2://e2m_popular', 'untagged' => 'e2://e2m_untagged?page=1', 'untagged/:page' => 'e2://e2m_untagged', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'settings' => 'e2://e2m_settings', 'settings/underhood' => 'e2://e2m_underhood', 'settings/underhood/build' => 'e2://e2s_post_service?service=build', 'settings/underhood/sync' => 'e2://e2s_post_service?service=sync', 'settings/underhood/checklist-reset' => 'e2://e2s_post_service?service=checklist-reset', 'settings/underhood/log' => 'e2://e2s_post_service?service=log', 'settings/underhood/unlog' => 'e2://e2s_post_service?service=unlog', 'settings/underhood/migrate' => 'e2://e2s_post_service?service=migrate', 'settings/underhood/verify' => 'e2://e2s_post_service?service=verify', 'settings/underhood/backup' => 'e2://e2s_dump', 'settings/underhood/index' => 'e2://e2s_bsi_step', 'settings/underhood/reindex' => 'e2://e2s_reindex', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', ]; $_url_chunks = [ '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => [ 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ], '\:draft' => [ '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ], '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9,]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9\=\/\\\+\-\_\,]+)', ]; $_url_autoredirects = [ '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ]; function sq () { global$_config; $smv = [ 'result', 'url', 'entity', 'entity-id', 'overwrite', ]; if($_config['raw_template_data_with_param']) { $smv[] = 'raw'; } return $smv; } function aq ($url){ global$_url_autoredirects; $url = preg_replace (array_keys ($_url_autoredirects),array_values ($_url_autoredirects),$url); if(preg_match ('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/',$url,$fe)) { if(2 == strlen ($fe[3]))$fe[3]='20'.$fe[3]; return ($fe[3].'/'.$fe[2].'/'.$fe[1].$fe[4]); } if(preg_match ('/^tags\-rss\/(.*?)\/?$/',$url,$fe)) { $hv = substr ($fe[1],strrpos ($fe[1],'/')+1); return ('tags/'. $hv . '/rss/'); } return$url; } function qq () { static $amv = false; global$__synthetic_urls,$_config; if ($amv) return; $qmv = $_config['url_composition']; $__synthetic_urls = false; if ($qmv == 'synthetic'){ $__synthetic_urls = true; } if ($qmv == 'auto'){ if(function_exists ('apache_get_modules')) { if(in_array ('mod_rewrite',apache_get_modules ())) { $__synthetic_urls = true; } } } $amv = true; } function lq ($candy,$parameters = []) { global$_url_map,$_url_chunks,$__synthetic_urls; $lmv = array_flip ($_url_map); $url = AeEnv::$o; $zmv = 'e2://'. $candy; if(array_key_exists ('page',$parameters)) { $parameters['page'] = (int)$parameters['page']; } if(array_key_exists ('day',$parameters)) { $parameters['day']=str_pad ((int)$parameters['day'],2,'0',STR_PAD_LEFT); } if(array_key_exists ('month',$parameters)) { $parameters['month']=str_pad ((int)$parameters['month'],2,'0',STR_PAD_LEFT); } if($parameters){ $zmv .= '?'; $kmv = []; $xmv = []; foreach($parameters as $cn => $cv){ if ($cn == '*note'){ $xmv[] = $cn; $kmv[] = xq ($cv); } if ($cn == '*tags'){ $xmv[] = $cn; $kmv[] = eq ($cv); } if ($cn == '*tag'){ $xmv[] = $cn; $kmv[] = eq ([$cv]); } } foreach ($xmv as $cn) unset($parameters[$cn]); foreach ($kmv as $emv){ $parameters = array_merge ($parameters,$emv); } foreach($parameters as $cn => $cv){ if (@$cn[0]!='_'){ $zmv .= $cn . ($cv? ('='. urlencode ($cv)) : '') .'&'; } } $zmv = substr ($zmv,0, -1); } if(array_key_exists ($zmv,$lmv)) { if ($lmv[$zmv]!==''){ $url .= $lmv[$zmv]; if (!in_array (substr ($lmv[$zmv], -4), ['.txt','.xml'])) { $url .= '/'; } } return$url; } else { $jmv = false; foreach ($lmv as $hmv => $gmv){ $wmv = $hmv; $wmv = preg_quote ($wmv,'/'); $umv = parse_url ($hmv); $imv = $umv['host']; $omv = parse_url ($zmv); if(strstr ($hmv,'::')) { $pmv = $omv['scheme'] .'://'. $omv['host']; $wmv = str_replace ('\:\:','(.*)',$wmv); $wmv = '/^'. $wmv .'$/s'; if(preg_match ($wmv,$pmv,$fe)) { $ynv = str_replace ('::',$fe[1],$gmv); $ynv = str_replace ('_','-',$ynv); $z2 = false; if(array_key_exists ('query',$omv)) { $z2 = $omv['query']; } if($__synthetic_urls and $z2){ $url .= $ynv .'/?'. $z2; } elseif($__synthetic_urls){ $url .= $ynv .'/'; } elseif ($z2){ $url .= '?go='. $ynv .'/?'. $z2; } else { $url .= '?go='. $ynv .'/'; } return$url; } } $cfv = false; if($candy === $imv){ $jmv = true; if ((string) @$umv['query']!==''){ $vfv = explode ('&',$umv['query']); foreach ($vfv as $bfv){ list ($cn,$cv)=explode ('=',$bfv); $cv = urldecode ($cv); $cn = str_replace ('_','-',$cn); if ( array_key_exists ($cn,$parameters) and $parameters[$cn]!=$cv ) { $cfv = true; break; } } } if (!$cfv){ if(preg_match_all ('/\:[\-a-z]+/i',$gmv,$fe)) { foreach ($fe[0] as $yfv){ $nfv = $_url_chunks['\\'. $yfv]; if (!is_array ($nfv)) { $nfv = [$nfv]; } $mfv = $nfv[0]; foreach ($nfv as $mfv){ $ffv = '/\(\?P\<(.*?)\>.*?\)/'; $dfv = true; if (@preg_match_all ($ffv,$mfv,$fe)) { $fe = $fe[1]; $dfv = true; for ($rb = 0; $rb < count ($fe); ++ $rb){ if ( !array_key_exists (str_replace ("_","-",$fe[$rb]), $parameters) or $parameters[str_replace ("_","-",$fe[$rb])] === '' ) { $dfv = false; break; } } } if (!$dfv) continue; $sfv = @preg_replace_callback ( $ffv, function ($fe) use ($parameters){ return$parameters[str_replace ("_","-",$fe[1])]; }, $mfv ); $sfv = stripslashes ($sfv); $afv = str_replace ($yfv,$sfv,$gmv); break; } $gmv = @$afv; } } $qfv = []; if ($gmv){ if($__synthetic_urls){ $url .= $gmv .'/'; } else { $qfv[] = 'go='. $gmv .'/'; } } foreach($_GET as $s3 => $a3){ if(in_array ($s3,sq (), true)) { $qfv[] = $s3 . ($a3? ('='. urlencode ($a3)) : ''); } } if(count ($qfv)) { $url .= '?'. implode ('&',$qfv); } return$url; } } } if ($jmv){ return$url; } else { die ('Cannot compose url for candy '. $candy); } } } function zq ($url = null){ global$_url_map,$_url_chunks,$_current_url; if(Log::$a)__log ('Resolve request "'. $url .'" {'); qq (); $url = trim ($url,'/'); $url = aq ($url); $parameters = []; $zmv = ''; foreach($_url_map as $lfv => $hmv){ $zfv = $lfv; $zfv = preg_quote ($zfv,'/'); if(strstr ($lfv,'::')) { $zfv = str_replace ('\:\:','(.*)',$zfv); $zfv = '/^'. $zfv .'$/s'; if(preg_match ($zfv,$url,$fe)) { $kfv = str_replace ('-','_',$fe[1]); $zmv = str_replace ('::',$kfv,$hmv); } } elseif(strstr ($lfv,':')) { $xfv = []; foreach($_url_chunks as $s3 => $a3){ if(is_array ($a3)) { $xfv[$s3]='(?:(?:'. implode (')|(?:',$a3) .'))'; } else { $xfv[$s3]=$a3; } } $zfv = str_replace ( array_keys ($xfv), array_values ($xfv), $zfv ); $zfv = '/^'. $zfv .'$/s'; if(preg_match ($zfv,$url,$fe)) { $zmv = $hmv; foreach ($fe as $cn => $cv) if (!is_numeric ($cn)) { $cn = str_replace ('_','-',$cn); $parameters[$cn]=$cv; } } } else { if ($lfv == $url){ $zmv = $hmv; break; } } } if ($zmv){ $efv = true; } else { $efv = false; $zmv = 'e2://e2m_error404'; } if (!$zmv)$zmv = 'e2://e2m_error404'; $omv = parse_url ($zmv); $candy = $omv['host']; if ((string) @$omv['query']!==''){ $vfv = explode ('&',$omv['query']); foreach ($vfv as $bfv){ list ($cn,$cv)=explode ('=',$bfv); $cv = urldecode ($cv); $cn = str_replace ('_','-',$cn); $parameters[$cn]=$cv; } } foreach($_GET as $cn => $cv){ if(in_array ($cn,sq (), true)) { $parameters[$cn] = (string)$cv; } } $cb = false; if ($efv){ $_current_url = AeEnv::$h .'://'. AeEnv::$j . $_SERVER['REQUEST_URI']; tq ($candy,$parameters); if(is_callable ($candy)) { $cb = [$candy,$parameters]; } else { $cb = [null, []]; } } else { $cb = [null, []]; } if(Log::$a){ $rfv = ''; if(count ($cb[1]) > 0){ $rfv = print_r ($cb[1],true); $rfv = substr ($rfv,8, -2); $rfv = '    '. trim ($rfv); $rfv = preg_replace ('/^.*?$/smu','           $0',$rfv); $rfv = ' with parameters:'."\r\n". $rfv; } __log ( 'Resolved to candy "'. $cb[0] .'"'. $rfv ); } if(Log::$a)__log ('}'); return $cb; } function xq ($ay){ if (!isset ($ay['IsPublished'])) { throw new LogicException ('Cannot compose parameters from noterec without IsPublished'); return []; } if (!$ay['IsPublished']) { $parameters['is-published']=0; if ($ay['OriginalAlias']===''){ $parameters['draft']=$ay['ID']; } elseif (tb ($ay['OriginalAlias']) == 1){ $parameters['oalias']=$ay['OriginalAlias']; } else { $parameters['draft2']=$ay['ID']; $parameters['oalias2']=$ay['OriginalAlias']; } return$parameters; } $parameters['is-published']=1; $ny = b (); $fy = 'n'. $ay['ID']; $tfv = $ny[$fy]; if (isset ($ay['__force_ymdn']) and ((string)$ay['OriginalAlias']==='')) { $fy = 'n'. $ay['ID'] .'-ymdn'; if(array_key_exists ($fy,$ny)) { $tfv = $ny[$fy]; } } if(preg_match ( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $tfv,$fe )) { $parameters['year']=$fe['year']; $parameters['month']=$fe['month']; $parameters['day']=$fe['day']; $parameters['day-number']=$fe['day_number']; } else { $parameters['alias']=$tfv; } return$parameters; } function eq ($xb){ $jfv = $parameters = []; foreach ($xb as $tb){ $jfv[] = b () ['t'. $tb['ID']]; } if(count ($jfv)) { $parameters['tag-alias']=implode (',',$jfv); } return$parameters; } function rq ($parameters){ if ( (string) @$parameters['alias']!=='' or ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' and (string) @$parameters['day-number']!=='' ) ) { if ($r = e2_published_noterec_with_parameters_($parameters)) { if(Log::$a)__log ('Fetched note '.$r['ID'].' "'. $r['Title'] .'" as *note'); $parameters['*note']=$r; foreach (['alias','year','month','day','day-number'] as $hfv){ if(array_key_exists ($hfv,$parameters)) { unset($parameters[$hfv]); } } } } if ( (string) @$parameters['oalias']!=='' or (string) @$parameters['draft']!=='' or (string) @$parameters['oalias2']!=='' or (string) @$parameters['draft2']!=='' ) { if ($r = e2_noterec_with_parameters_($parameters)) { if(Log::$a)__log ('Fetched note '.$r['ID'].' "'. $r['Title'] .'" as *note'); if ((string) @$parameters['oalias']!==''){ $parameters['alias']=$parameters['oalias']; } elseif ((string) @$parameters['oalias2']!==''){ $parameters['alias']=$parameters['oalias2']; } $parameters['*note']=$r; foreach (['oalias','draft','oalias2','draft2'] as $hfv){ if(array_key_exists ($hfv,$parameters)) { unset($parameters[$hfv]); } } } } if ( (string) @$parameters['tag-alias']!=='' ) { $parameters['*tags']=e2_tagrecs_with_parameters_($parameters); if(Log::$a)__log ('Fetched '. count ($parameters['*tags']) .' tag(s) as *tag(s)'); if(count ($parameters['*tags']) == 1){ $parameters['*tag']=$parameters['*tags'][0]; unset($parameters['*tags']); if(array_key_exists ('tag-alias',$parameters)) { unset($parameters['tag-alias']); } } } return$parameters; } function tq ($candy,$parameters){ global$_config,$_current_url; if (!$_config['force_canonical_urls']) return; if($candy === 'e2m_error404') return; $gfv = lq ($candy,$parameters); if ( $_current_url != $gfv and urldecode ($_current_url)!=$gfv and $_current_url != AeEnv::$h .'://'. AeEnv::$j . AeEnv::$w . '/@notify' ) { if(Log::$a)__log ('Used URL "'. $_current_url .'"'); if(Log::$a)__log ('Redirecting to canonical URL "'. $gfv .'"'); s1 ($gfv); } } function jq ($wfv){ global$_instance_config; $bmv = str_replace ('/','--',$wfv); if(substr ($bmv,0,4)=='www.'){ $bmv = substr ($bmv,4); } if(array_key_exists ($bmv,$_instance_config['path_user_rewrites'])) { $bmv = $_instance_config['path_user_rewrites'][$bmv]; } return $bmv; } function hq () { static $ufv = null; if ($ufv !== null) return $ufv; $ifv = AeEnv::$server . AeEnv::$w; if(AeEnv::$u !== (string)''){ $ifv .= '/'. AeEnv::$u; } $ufv = jq ($ifv); return $ufv; } function gq ($bp,$ofv){ $pfv = $ofv; $pfv = preg_quote ($pfv); $pfv = str_replace ('/','\/',$pfv); $pfv = str_replace ('%USERKEY%','(.*?)',$pfv); $pfv = '/'. $pfv . '/i'; $bmv = ''; if(preg_match ($pfv,$bp,$fe) and array_key_exists (1,$fe)) { $bmv = $fe[1]; } return $bmv; } function wq ($c2v,$bmv){ foreach (['path_user','path_media'] as $v2v){ if (!array_key_exists ($v2v .'.raw', $c2v)) { $c2v[$v2v .'.raw']=$c2v[$v2v]; } if(strpos ($c2v[$v2v .'.raw'],'%USERKEY%')!==false){ $c2v[$v2v]=str_replace ( '%USERKEY%', $bmv, $c2v[$v2v .'.raw'] ); } } return $c2v; } function uq ($b2v,$bmv){ foreach (['path_user','path_media'] as $v2v){ if (!array_key_exists ($v2v .'.raw',$b2v)) { $b2v[$v2v .'.raw']=$b2v[$v2v]; } if(strpos ($b2v[$v2v .'.raw'],'%USERKEY%')!==false){ $b2v[$v2v]=str_replace ( '%USERKEY%', $bmv, $b2v[$v2v .'.raw'] ); } } $_config = $b2v; if(is_file ($yx = $b2v['path_user'] .'config.php')) { include $yx; $_config += $b2v; } return$_config; } function iq () { global$_instance_config; if(strpos ($_instance_config['path_user'],'%USERKEY%')!==false){ $y2v = str_replace ( '%USERKEY%', '*', $_instance_config['path_user'] ); return glob ($y2v); } else { return [$_instance_config['path_user']]; } } function oq () { static $databaseConfiguration = null; global$settings,$_config; if($databaseConfiguration === null){ $databaseConfiguration = pq ($_config,$settings); } return$databaseConfiguration; } function pq ($ymv,$yp){ $ccv = null; $n2v = null; if(getenv ('E2_DB_SERVER'))$ccv['server']=getenv ('E2_DB_SERVER'); if(getenv ('E2_DB_USER_NAME'))$ccv['user_name']=getenv ('E2_DB_USER_NAME'); if(getenv ('E2_DB_PASSW'))$ccv['passw']=getenv ('E2_DB_PASSW'); if(getenv ('E2_DB_NAME'))$ccv['name']=getenv ('E2_DB_NAME'); if ($ccv !== null){ $n2v = 'environment'; if(Log::$a)__log ('Database configuration found in Environment, won’t look elsewhere'); } else { if(Log::$a)__log ('No database configuration found in Environment'); $ccv = $ymv['db']; if ($ccv !== null){ $n2v = 'config'; if(Log::$a)__log ('Database configuration found in Config, won’t look elsewhere'); } else { if(Log::$a)__log ('No database configuration found in Config'); if(array_key_exists ('db',$yp)) { $n2v = 'settings'; if(Log::$a)__log ('Database configuration found in Settings'); $ccv = $yp['db']; } else { if(Log::$a)__log ('No database configuration found anywhere'); } } } if ($ccv === null) return null; $databaseConfiguration = new AeDatabaseConfiguration ( $n2v, $ymv['path_user'].BACKUP_DIRNAME, $ccv['server'], $ccv['user_name'], $ccv['passw'], $ccv['name'], $ymv['db_table_prefix'], $ymv['db_table_subset'] ); return$databaseConfiguration; } function cl ($m2v,$f2v = false){ $d2v = ''; $nz = strlen ($m2v); for ($rb = 0; $rb < 256; ++ $rb){ $s2v[$rb]=0; $a2v = $rb; while ($a2v & 0x00000080){ $a2v <<= 1; ++ $s2v[$rb]; } } for ($rb = 0xd090; $rb <= 0xd0bf; $rb++)$q2v[$rb]=chr (($rb & 0x000000ff)+48); for ($rb = 0xd180; $rb <= 0xd18f; $rb++)$q2v[$rb]=chr (($rb & 0x000000ff)+112); $q2v[0xd081]="\xa8"; $q2v[0xd191]="\xb8"; $q2v[0xc299]="\x99"; $q2v[0xc2a9]="\xa9"; $q2v[0xc2ae]="\xae"; $q2v[0xc2ab]="\xab"; $q2v[0xc2bb]="\xbb"; $q2v[0xc2a0]="\xa0"; $rb = 0; while ($rb < $nz){ $l2v = $m2v[$rb]; $z2v = ord ($l2v); if ($s2v[$z2v]==0){ $d2v .= $l2v; ++ $rb; } elseif ($s2v[$z2v]==2){ $k2v = $q2v[($z2v << 8) | ord ($m2v[$rb+1])]; $d2v .= ($k2v != null)? $k2v : ( $f2v? (e2utf8__unformat_htmlentity ( vl (substr ($m2v,$rb,2)) )) : '?' ); $rb += 2; } else { $x2v = substr ($m2v,$rb,$s2v[$z2v]); if ($x2v == "\xe2\x84\x96")$d2v .= "\xb9"; elseif ($x2v == "\xe2\x80\x93")$d2v .= "\x96"; elseif ($x2v == "\xe2\x80\x94")$d2v .= "\x97"; elseif ($x2v == "\xe2\x80\x98")$d2v .= "\x91"; elseif ($x2v == "\xe2\x80\x99")$d2v .= "\x92"; elseif ($x2v == "\xe2\x80\x9a")$d2v .= "\x82"; elseif ($x2v == "\xe2\x80\x9c")$d2v .= "\x93"; elseif ($x2v == "\xe2\x80\x9d")$d2v .= "\x94"; elseif ($x2v == "\xe2\x80\x9e")$d2v .= "\x84"; elseif ($x2v == "\xe2\x80\xa6")$d2v .= "\x85"; elseif ($x2v == "\xe2\x80\xb9")$d2v .= "\x8b"; elseif ($x2v == "\xe2\x80\xba")$d2v .= "\x9b"; elseif ($x2v == "\xe2\x82\xac")$d2v .= "\x88"; elseif ($x2v == "\xe2\x84\xa2")$d2v .= "\x99"; else $d2v .= $f2v? (e2utf8__unformat_htmlentity ( vl ($x2v) )) : '?'; $rb += $s2v[$z2v]; } } return $d2v; } function vl ($dcv){ $e2v = ''; $nz = strlen ($dcv); for ($rb = 0; $rb < $nz; ++ $rb){ $e2v .= preg_replace ('/^1*0/','',decbin (ord ($dcv[$rb]))); } return '&#'. bindec ($e2v) .';'; } if (!BUILT) include 'builder.php'; if(version_compare (PHP_VERSION,E2_MINIMUM_PHP)<0){ die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } if (!function_exists ('getimagesize')) { die ('Function getimagesize is not defined, php_gd not installed?'); } if (!function_exists ('mb_internal_encoding')) { die ('Function mb_internal_encoding is not defined, php_mbstring not installed?'); } if (!class_exists ('PDO')) { die ('Class PDO is not defined installed, PDO not installed?'); } if (!in_array ('mysql',PDO::getAvailableDrivers ())) { die ('Required PDO driver "mysql" not installed'); } if (!is_file ($yx = 'system/default/config.php')) { die ('File not found: '. $yx); } error_reporting (E_ALL); setlocale (LC_CTYPE,'ru_RU.UTF'); mb_internal_encoding ('UTF-8'); date_default_timezone_set ('GMT'); mysqli_report (MYSQLI_REPORT_OFF); if(version_compare (PHP_VERSION,'7.0')<0){ error_reporting (E_ALL & ~E_STRICT); } ini_set ('pcre.jit','0'); include $yx; $_system_default_config = $_config; foreach (['instance/',$_config['path_user']] as $r2v){ if(is_dir ($t2v = $r2v)) { if(is_file ($yx = $t2v .'config.php')) { include $yx; $_config += $_system_default_config; } break; } } $_instance_config = $_config; define ('INSTANCE_DIR',$t2v); AeEnv::examine ($_SERVER); $_config = uq ($_instance_config,hq ()); if (!is_dir ($_config['path_user'])) { die ('User directory not found: '. $_config['path_user']); } define ('USER_DIR',$_config['path_user']); define ('USER_URLPATH','user/'); AeEnv::setPrefersHTTPS ($_config['force_https']); AeEnv::setPreferredServer ($_config['preferred_domain_name']); AeFileManager::setInstancePath (INSTANCE_DIR); AeFileManager::setUserPath ($_config['path_user']); AeFileManager::setMediaPath ($_config['path_media']); $_stopwatch = yq ($_stopwatch); spl_autoload_register ('kd'); fn_ (); $settings = e2_load_settings_from_user_folder_(USER_DIR); $_strings = yn (); $j2v = serialize ($_config); $j2v = serialize (md5 ($j2v)); $h2v = $_config['path_user'].'config-hash.psa'; if ($j2v !== (string) @unserialize (file_get_contents ($h2v))) { if(Log::$a)__log ('Edition or configuration changed, dropping all caches'); e2_drop_all_kinds_of_cache (); if (!@e3 ($h2v,serialize ($j2v))) { die ('Cannot write file: '. $h2v); } } function e2 () { global$settings,$content, $_candy, $_lang, $_config, $_strings, $_template; if(Log::$a)__log ( 'Serving the user with key "'. hq () .'" '. 'using directory "'. $_config['path_user'] .'"' ); w1 (); set_error_handler ('wb'); set_exception_handler ('y3'); $g2v = new AeRequest ($_SERVER,$_GET); $content = []; $_candy = $g2v->candy; $zx = cn (); $w2v = true; $u2v = true; $tn = cs (); if ( $g2v -> requiresInstallation () and ( $zx === null or oq () === null or !od () ) ) { $w2v = false; if (!$_config['allow_installer'] or !$_config['allow_db_config']) { $content = us ('not-configured'); } elseif(count ( $vq = AeFileManager::getPathsWithNoWritePermissions ( $_config['path_user'],$_config['path_media'] ) ) > 0){ $content = us ('generic', [ 'heading' => $_strings['pt--fix-permissions'], 'text' => ( '<p>'. $_strings['gs--fix-permissions'] .'</p>'. gb (array_unique ($vq)) ), 'button' => $_strings['fb--retry'], ]); } else { $g2v -> replaceWith ('e2m_install'); } } if ( empty ($content) and $g2v -> requiresVersionMatch () and E2_VERSION !== $zx['version'] ) { $u2v = false; if(Log::$a)__log ('Startup: need to update first'); $i2v = nq ($zx['version']); if (@$i2v['status']==='success'){ $zx = $i2v['instance']; if (cs ()) { hb (e2l_get_string ('gs--updated-successfully', [ 'from' => $i2v['from-release'], 'to' => $i2v['to-release'], ]), E2E_MESSAGE); } $u2v = true; } else { $content = $i2v['stub']; } } if ( empty ($content) and $g2v -> requiresSignIn () ) { if(Log::$a)__log ('Author signed in? '. ($tn? 'Yes' : 'No')); if (!$tn){ $g2v -> replaceWith ('e2m_sign_in'); if ($g2v -> toBeFulfilledByService ()) { s1 (lq ('e2m_sign_in')); } } } if ( empty ($content) and !$g2v -> allowedInReadOnlyMode () and $_config['read_only'] ) { $content = us ('read-only-mode'); $w2v = false; } header ('X-Powered-By: '. E2_UA_STRING); header ('Content-type: text/html; charset=UTF-8'); if (empty ($content)) { if (!is_callable ($g2v->candy)) { $g2v -> replaceWith ('e2m_error404'); } if(Log::$a)__log ('Candy after clearance: '. $g2v->candy); if ($g2v -> shouldSlowDownAJAXResponse () and $_config['dev_slow_ajax']) { sleep (1 + 2 * (rand () / getrandmax ())); } try { if ($g2v -> requiresInstallation ()) { $g2v->parameters = rq ($g2v->parameters); if(Log::$a)__log ('Call e2_force_canonical_url for the second time:'); tq ($g2v->candy,$g2v->parameters); if ( array_key_exists ('is-published',$g2v->parameters) and $g2v->parameters['is-published']=='0' and $g2v->parameters['*note']['IsPublished']=='1' ) { s1 (lq ($g2v->candy,$g2v->parameters)); } } if(Log::$a)__log ('Candy call {'); $content = call_user_func ($g2v->candy,$g2v->parameters); } catch (AeMySQLException $e){ if (!$g2v->toBeFulfilledByService ()) { v3 ($e); $g2v->parameters = []; $content['unavailable?']=true; } else { throw $e; } } if(Log::$a)__log ('}'); } if (!is_array ($content))$content = []; if (!array_key_exists ('notes',$content))$content['notes'] = []; if (!array_key_exists ('tag',$content))$content['tag'] = []; if (!array_key_exists ('drafts',$content))$content['drafts'] = []; if (!array_key_exists ('comments',$content))$content['comments'] = []; if (!array_key_exists ('notes-list',$content))$content['notes-list'] = []; $content['title']=strip_tags (dy (htmlspecialchars ((string) @$content['title'],ENT_NOQUOTES,'UTF-8'))); if (!empty ($content['heading'])) { $content['heading']=strip_tags (dy (htmlspecialchars ((string) @$content['heading'],ENT_NOQUOTES,'UTF-8'))); } $content['language']=$_lang; if (!isset ($_template))qf (); $content['template']['respond-to-dark-mode?'] = ( array_key_exists ('supports_dark_mode',$_template) and $_template['supports_dark_mode'] and @(bool)$settings['appearance']['respond_to_dark_mode'] ); $content['template']['use-likely-light?']=$_template['use_likely_light']; if (!array_key_exists ('class',$content)) { $content['class']=str_replace ('_','-',str_replace ('e2m_','',$g2v->candy)); } if ($w2v and $u2v){ if(Log::$a)__log ('Stuff for installed engine {'); d3 ('rss',ev (), lq ('e2m_rss')); d3 ('json',ev (), lq ('e2m_json')); $content['sign-in'] = [ 'done?' => (bool)$tn, 'required?' => (bool)$g2v->requiresSignIn (), 'necessary?' => (bool)$g2v->requiresSignIn () && !$tn, 'href' => lq ('e2m_sign_in'), 'prompt' => $_strings['gs--need-password'], 'token' => hd (), ]; $content['hrefs'] = array ( 'everything' => lq ('e2m_everything'), ); if (!array_key_exists ('tags',$content)) $content['tags']=na ($g2v->parameters); if (!array_key_exists ('main-menu',$content)) $content['main-menu']=kn ($g2v->parameters,$content['class']); $content['blog']=xv (); $content['form-search']=fd ($g2v->parameters); $content['engine']=jb (); $content['form-login']=ls (); if($content['form-login']===null) unset($content['form-login']); if (!array_key_exists ('summary',$content)) { if (!empty ($settings['meta_description'])) { $content['summary']=strip_tags (dy (htmlspecialchars ($settings['meta_description'],ENT_NOQUOTES,'UTF-8'))); } else { $content['summary'] = @trim (strip_tags ($content['blog']['subtitle'])); } } if (@$settings['appearance']['show_view_counts']) { AeNoteReadCountsProvider :: setSQLRequestTemplateToMapIDsToReadCounts ( "SELECT `ID`, `ReadCount` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } foreach($content['notes'] as $r){ b2 (@$r['format-info']['links-required']); } if ($tn){ $content['admin']=c (); $content['last-modifieds-by-id']='{}'; if (@$_COOKIE[q1 ('local_copies')]) { $content['last-modifieds-by-id'] = ( gm ($_COOKIE[q1 ('local_copies')]) ); } $o2v = zs (); } if(Log::$a)__log ('}'); } $content['message']=ib (); $xw = tf (); $content['meta']=rn ( $g2v->candy, $content['notes'], $content['tag'], $content['blog'], $content['pages'] ); $content['stat']=jv (); $xw = xf ($xw); echo $xw; if ($w2v and $u2v and $_SERVER['HTTP_USER_AGENT']!==E2_UA_STRING){ if (!qd ()) { if(Log::$a)__log ('Spawn BSI step'); vv (lq ('e2s_bsi_step')); } if (!$o2v){ ks (); } } if (@$_config['dev_dump_ctree'])sn ($content); } ?>