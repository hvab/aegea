<?php
 $_stopwatch=microtime(); define('E2_VERSION',3788); define('E2_RELEASE','2.10'); define('E2_UA_STRING','E2 (v'. E2_VERSION .'; Aegea)'); define('E2_MINIMUM_PHP','5.6'); define('E2_MINIMUM_MYSQL',4.1); define('BUILDER_OBFUSCATE',1); define('BUILDER_FLATTEN',1); define('E2_NEW_FILES_RIGHTS',0777); define('E2_JSON_STYLE',JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); define('E2_RUN_ID',chr(rand(65,90))); define('HSC_ENC','UTF-8'); define('SECONDS_IN_A_MINUTE',60); define('SECONDS_IN_AN_HOUR',3600); define('SECONDS_IN_A_DAY',86400); define('SECONDS_IN_A_WEEK',604800); define('SECONDS_IN_A_MONTH',2592000); define('SECONDS_IN_A_YEAR',31536000); if(version_compare(PHP_VERSION,E2_MINIMUM_PHP) < 0){ die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } if(!function_exists('getimagesize')) { die ('Function getimagesize is not defined, php_gd not installed?'); } if(!function_exists('mb_internal_encoding')) { die ('Function mb_internal_encoding is not defined, php_mbstring not installed?'); } error_reporting(E_ALL); setlocale(LC_CTYPE,'ru_RU.UTF'); mb_internal_encoding('UTF-8'); date_default_timezone_set('GMT'); if(version_compare(PHP_VERSION,'7.0') < 0){ error_reporting(E_ALL & ~E_STRICT); } if(is_file('superconfig.php')) { include 'superconfig.php'; } $_protocol=( !empty ($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off' or $_SERVER['SERVER_PORT']==443 or isset ($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO']=='https' or isset ($_SERVER['HTTP_X_HTTPS']) && ($_SERVER['HTTP_X_HTTPS']) ) ? 'https':'http'; if(is_file('force-https')) { $_protocol='https'; } $c=substr( $_SERVER['PHP_SELF'],0,strpos($_SERVER['PHP_SELF'],'/index.php') ); list ($v, ) = explode(':',$_SERVER['HTTP_HOST']); $full_blog_url=$_protocol. '://'. $v.$c; $_user_folder_name=str_replace('/','--',$v.$c); if(substr($_user_folder_name,0,4)=='www.'){ $_user_folder_name=substr($_user_folder_name,4); } if(is_file('multiuser')) { if ( !empty ($_superconfig) and array_key_exists('rewrites',$_superconfig) and array_key_exists($_user_folder_name,$_superconfig['rewrites']) ) { $_user_folder_name=$_superconfig['rewrites'][$_user_folder_name]; } define('USER_FOLDER','users/'. $_user_folder_name .'/'); define('USER_FOLDER_URLPATH','user/'); } else { define('USER_FOLDER','user/'); define('USER_FOLDER_URLPATH','user/'); } if( !empty ($_superconfig) and array_key_exists('store_files_by_users',$_superconfig) and $_superconfig['store_files_by_users'] ) { define('MEDIA_ROOT_FOLDER',USER_FOLDER .'files/'); } else { define('MEDIA_ROOT_FOLDER',''); } if(in_array('mail',explode(',',ini_get('disable_functions')))) { define('MAIL_ENABLED',false); } else { define('MAIL_ENABLED',true); } define('EXTRAS_FOLDER',USER_FOLDER.'extras/'); define('BACKUP_FOLDER',USER_FOLDER.'backup/'); define('CACHES_FOLDER',USER_FOLDER.'caches/'); define('USER_LIBRARY_FOLDER',USER_FOLDER.'library/'); define('LOG_FOLDER',USER_FOLDER.'logs/'); define('LICENSE_FILE',USER_FOLDER.'license.psa'); define('PICTURES_FOLDER','pictures/'); define('THUMBNAILS_FOLDER','pictures/thumbs/'); define('AVATARS_FOLDER','pictures/avatars/'); define('VIDEO_FOLDER','video/'); define('AUDIO_FOLDER','audio/'); define('TEMPLATES_FOLDER','themes/'); define('SYSTEM_FOLDER','system/'); define('SCRIPTS_FOLDER','system/js/'); define('SYSTEM_LIBRARY_FOLDER','system/library/'); define('SYSTEM_TEMPLATE_FOLDER','system/theme/'); define('VIDEO_ICON_IMAGE','system/theme/images/video.svg'); define('VIDEO_ICON_WIDTH',180); define('VIDEO_ICON_HEIGHT',120); define('AUDIO_ICON_IMAGE','system/theme/images/audio.svg'); define('AUDIO_ICON_WIDTH',120); define('AUDIO_ICON_HEIGHT',120); define('LANGUAGES_FOLDER','system/languages/'); define('DEFAULTS_FOLDER','system/default/'); define('MTMPL_FOLDER','system/default/mail/'); define('DEFAULT_TEMPLATE','acute'); if(!is_file(DEFAULTS_FOLDER. 'config.php')) die ('System config missing'); include DEFAULTS_FOLDER.'config.php'; $_default_config=$_config; if(is_file(USER_FOLDER. 'config.php')) { include USER_FOLDER.'config.php'; $_config=array_merge($_default_config,$_config); } define('E2E_STRANGE_ERROR',10); define('E2E_USER_ERROR',20); define('E2E_PERMISSIONS_ERROR',30); define('E2E_MESSAGE',100); define('E2E_DIAGNOSTICS_MESSAGE',110); define('DEFAULT_ITEMS_PER_PAGE',10); define('MAX_ITEMS_PER_PAGE',100); define('FP_NO_ID_OR_NEW', -1); define('FP_INSERT_ERROR', -10); define('FP_UPDATE_ERROR', -11); define('FP_EMPTY_FIELD', -20); define('FP_TITLE_OR_TEXT_EMPTY', -21); define('FP_NOT_COMMENTABLE', -30); define('FP_COMMENT_DOUBLE_POST', -101); define('FP_COMMENT_TOO_LONG', -102); define('FP_COMMENT_SPAM_SUSPECT', -103); define('NOTE_COMMENTABLE_NOW', -1); define('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define('THUMB_WIDTH',180); define('THUMB_HEIGHT',120); define('THUMB_JPG_QUALITY',50); define('SCALED_IMAGE_JPG_QUALITY',80); define('USERPIC_WIDTH',80); define('USERPIC_HEIGHT',80); define('USERPIC_JPG_QUALITY',80); $_fp_error=false; if(strstr(__FILE__,'all.php')) { define('BUILT',0); } else { define('BUILT',1); } function c($b=''){ global$_protocol,$errors,$v,$c; @session_start(); $_SESSION['errors']=$errors; if(substr($b,0,strlen($_protocol)+3)!=$_protocol .'://'){ header('Location: '. $_protocol .'://'. $v.$c .'/'. $b); } else { header('Location: '. $b); } flush(); die; } function v(){ $y=$_SERVER['HTTP_REFERER']; c($y); } function b($n=''){ global $c; $m=str_replace('/','--',trim($c,'/')); if ($m!=='')$m.='-'; $f=substr_count($_SERVER['HTTP_HOST'],'.'); $d=$m . @str_repeat('_',$f).$n; return $d; } function y($n,$s='',$a=true){ $q=$a? (time()+3600*24*365) : (0); $l=$_SERVER['HTTP_HOST']; $z=substr_count($l,'.'); if ($z < 3)$l=str_repeat('.',3-$z).$l; $f=setcookie(b($n),$s,$q,'/'); } function n($k,$x,$e_=''){ if(trim($x)!=''){ $x=explode($k,$x); foreach ($x as $r => $t)$x[$r]=trim($t); foreach ($x as $r => $t) if ($t=='') unset ($x[$r]); $j=array_unique($x); if ('sort'==$e_)sort($j); return $j; } else return array (); } function m($x){ $h=array(); if(is_file(DEFAULTS_FOLDER.'romanize.txt')) { $h=file(DEFAULTS_FOLDER.'romanize.txt'); } $g=$w=''; foreach ($h as $r => $u){ if (!($r%2))$g.=rtrim($u) .' '; else $w.=rtrim($u) .' '; if ($r%2){ while (mb_strlen($w) < mb_strlen($g))$w.=' '; while (mb_strlen($w) > mb_strlen($g))$g.=' '; } } $i=''; $o=-1; for ($r=0; $r < mb_strlen($g); ++ $r){ $p=mb_substr($g,$r,1); if ($p!=' '){ $i.=$p; if ($o == -1)$o=$r; } elseif ($i){ $cv=trim(mb_substr($w,$o,mb_strpos($w,' ',$o+1)-$o)); $vv=array ($i,$cv); $bv[mb_strlen($i)][] = $vv; $i=''; $o=-1; } } $yv=array(); for ($r=count($bv); $r > 0; -- $r){ foreach ($bv[$r] as $vv)$yv[$vv[0]] = $vv[1]; } return strtr($x,$yv); } function f($nv,$mv,$fv=0){ if ($mv==0) return 0; $dv=round($nv/$mv*100,$fv); $sv=pow(10, -$fv); if ($nv > 0 and $dv==0)$dv=$sv; if ($nv < $mv and $dv==100)$dv=100-$sv; return $dv; } function d($av,$action,$qv){ if (!is_array($av))$av=array(); if($action=='add'){ $av=array_unique(array_merge($av,$qv)); } if($action=='remove'){ unset ($av[array_search($qv,$av)]); } if (!is_array($av))$av=array(); return $av; } function s($lv){ $parameters=$lv['parameters']; $zv=[ 'success' => false ]; try { $lv['flipping-function'] ($parameters); $kv=$parameters; $kv['value'] = !$parameters['value']; $zv=[ 'success' => true, 'data' => [ 'flag-now-on' => ($parameters['value']==1), 'new-href' => jv($lv['candy-name'],$kv), ] ]; } catch (AeMySQLException $e){ kv($e,'Could not set '. $lv['flag-name'] .' flag'); } if(array_key_exists('result',$_POST) and ($_POST['result']=='ajaxresult')) { $zv=json_encode($zv); die ($zv); } else { c(jv('e2m_tag',$parameters)); } } function a($x){ $xv=@$_SERVER['HTTP_USER_AGENT'] or $xv=''; $ev=strstr($xv,'iPhone') || strstr($xv,'iPad'); $rv=strstr($xv,'Macintosh'); if ($ev) return ''; if ($x=='submit'){ if ($rv){ return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($x=='livesave'){ if ($rv){ return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($x=='navigation'){ if ($rv){ return '&#x2325;'; } else { return 'Ctrl'; } } if ($x=='navigation-later'){ if ($rv){ return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($x=='navigation-earlier'){ if ($rv){ return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function q($tv){ $tv=str_replace('<','&lt;',$tv); $tv=str_replace('>','&gt;',$tv); return $tv; } function l($tv){ $tv=str_replace('"','&quot;',$tv); return $tv; } function z($s,$jv){ return str_replace('.',',',round($s,$jv)); } function e2_stripslashes_array($hv){ return is_array($hv)?array_map('e2_stripslashes_array',$hv):stripslashes($hv); } function k(){ if(version_compare(PHP_VERSION,'7.4') >= 0) return; if(get_magic_quotes_runtime()) { set_magic_quotes_runtime(0); } if(get_magic_quotes_gpc()) { $_GET=e2_stripslashes_array($_GET); $_POST=e2_stripslashes_array($_POST); $_COOKIE=e2_stripslashes_array($_COOKIE); $_REQUEST=e2_stripslashes_array($_REQUEST); } } function x($gv){ return sprintf('%u',ip2long($gv)); } function e_($wv){ return long2ip(sprintf('%d',$wv)); } function e2_decline_for_number($tv,$wv=null){ $uv=$tv; if ($wv===null){ $wv=substr($tv,0,strpos($tv,' ')); $uv=substr($tv,strpos($tv,' ')+1); } $iv=strpos($uv,'('); $ov=strpos($uv,')'); if ($ov > $iv)$pv=substr($uv,$iv,$ov-$iv+1); $cb=explode(',',trim(@$pv,'()')); if(count($cb)==2)array_unshift($cb,''); $vb=array (2,0,1,1,1,2,2,2,2,2); if ($wv%100 > 10 and $wv%100 < 20)$bb=2; else $bb=$vb[$wv%10]; $yb=$cb[$bb]; $tv=str_replace($pv,$yb,$tv); if(strstr($tv,'(') and strstr($tv,')')) { return e2_decline_for_number($tv,$wv); } else { return $tv; } } function r($nb){ $mb=glob($nb,GLOB_NOSORT); if(is_array($mb)) { foreach ($mb as $fb){ @unlink($fb); } } } function t($db){ $mb=glob($db .'*',GLOB_NOSORT); if(is_array($mb)) { foreach ($mb as $fb){ if(basename($fb)!='.' and basename($fb)!='..'){ if(is_dir($fb)) { if (t($fb .'/')) { if (!rmdir($fb)) { return false; } } else { return false; } } else { @unlink($fb); } } } return true; } else { return false; } } function j($sb){ $sb=trim($sb,'/'); $sb=explode('/',$sb); $db=''; foreach ($sb as $ab){ $db=$db.$ab; if (!is_dir($db)) { if (@mkdir($db)) { @chmod($db,E2_NEW_FILES_RIGHTS); } else { return false; } } $db=$db.'/'; } return true; } function h($sb){ return preg_replace('/\/([^\/]+?)\/\.\./','',$sb); } function g($x){ $qb=get_html_translation_table(HTML_ENTITIES); $qb=array_flip($qb); return strtr($x,$qb); } function w($lb=NULL){ if(NULL==$lb)$lb=microtime(); list ($zb,$kb)=explode(' ',$lb); return ((float)$zb + (float)$kb); } function o(){ global$settings; if (!isset ($settings))$settings=array(); $ib=array(); if(is_file(USER_FOLDER.'settings.json')) { $ib=json_decode(file_get_contents(USER_FOLDER.'settings.json'),true); $ob=13; } elseif(is_file(USER_FOLDER.'settings.psa')) { $ib=unserialize(file_get_contents(USER_FOLDER.'settings.psa')); } if (!is_array($ib))$ib=array(); $settings=array_merge($settings,$ib); if ( !array_key_exists('appearance',$settings) or !array_key_exists('notes_per_page',$settings['appearance']) or !is_numeric($settings['appearance']['notes_per_page']) or $settings['appearance']['notes_per_page'] < 1 ){ $settings['appearance']['notes_per_page']=DEFAULT_ITEMS_PER_PAGE; } if($settings['appearance']['notes_per_page'] > MAX_ITEMS_PER_PAGE){ $settings['appearance']['notes_per_page']=MAX_ITEMS_PER_PAGE; } if ( !array_key_exists('comments',$settings) or !array_key_exists('default_on', @$settings['comments']) ) { $settings['comments']['default_on']=false; } if (!array_key_exists('respond_to_dark_mode',$settings['appearance'])) { $settings['appearance']['respond_to_dark_mode']=true; } return true; } function e2m_settings(){ global$settings,$_template,$_strings,$_config; $pb=array(); $c3=DEFAULT_LANGUAGE; if(array_key_exists('language',$settings)) { $c3=$settings['language']; } foreach(glob(LANGUAGES_FOLDER. '*.php') as $fb){ $v3=substr(basename($fb),0,2); $b3=file_get_contents($fb); if(preg_match( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu',$b3,$y3 )) { $n3=$y3[1]; } else { $n3=$v3; } $pb[$v3] = array ( 'selected?' => (bool) ($c3==$v3), 'display-name' => $n3, ); } $eb=$m3=false; $f3=(string) @$eb['pay-href']; if ((string)$f3===''){ $f3='https://'. $_strings['e2--website-host'] .'/get/'; } $d['title']=$_strings['pt--settings']; $d['heading']=$_strings['pt--settings']; $d['form']='form-preferences'; $d['form-preferences'] = array ( 'blog-title-default' => htmlspecialchars($_strings['e2--default-blog-title'],ENT_COMPAT,HSC_ENC), 'blog-title' => htmlspecialchars(vd(),ENT_COMPAT,HSC_ENC), 'blog-subtitle' => htmlspecialchars(@$settings['blog_subtitle'],ENT_COMPAT,HSC_ENC), 'blog-meta-description' => htmlspecialchars(@$settings['meta_description'],ENT_COMPAT,HSC_ENC), 'blog-author-default' => htmlspecialchars($_strings['e2--default-blog-author'],ENT_COMPAT,HSC_ENC), 'blog-author' => htmlspecialchars(@$settings['author'],ENT_COMPAT,HSC_ENC), 'languages' => $pb, 'language' => $c3, 'form-action' => jv('e2s_settings_save'), 'userpic-href' => yd('square'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'emailing-possible?' => MAIL_ENABLED, 'email-notify?' => (bool) @$settings['notifications']['new_comments'], 'email' => htmlspecialchars(@$settings['author_email'],ENT_COMPAT,HSC_ENC), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-view-counts?' => (bool)$settings['appearance']['show_view_counts'], 'show-sharing-buttons?' => (bool)$settings['appearance']['show_sharing_buttons'], 'includes-google-analytics?' => false, 'includes-yandex-metrika?' => false, 'template-name' => $_template['name'], 'templates' => us(), 'respond-to-dark-mode?' => (bool) @$settings['appearance']['respond_to_dark_mode'], 'submit-text' => $_strings['fb--save-changes'], 'show-payment-info?' => $m3 and ($eb!==false), 'paid-period' => $eb['licensed?'] ? (time() <= $eb['until-stamp']) : false, 'paid-period-ended' => $eb['licensed?'] ? (time() > $eb['until-stamp']) : false, 'paid-until' => $eb['licensed?'] ? ([$eb['until-stamp'],ay()]) : false, 'pay-href' => $f3, 'space-usage' => j3(r3(),true), ); return $d; } function e2s_settings_save(){ global$settings,$_strings; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_settings')); } $d3=$s3=''; if(array_key_exists('blog-title',$_POST)) { $d3=trim($_POST['blog-title']); } if(array_key_exists('blog-subtitle',$_POST)) { $s3=trim($_POST['blog-subtitle']); } if(array_key_exists('blog-meta-description',$_POST)) { $a3=trim($_POST['blog-meta-description']); } if(array_key_exists('blog-author',$_POST)) { $q3=trim($_POST['blog-author']); } if(array_key_exists('language',$_POST)) $l3=$_POST['language']; if(array_key_exists('email',$_POST)) $z3=trim($_POST['email']); $k3=(int)$_POST['notes-per-page']; $settings['blog_title']=$d3; $settings['blog_title']=vd(); $settings['author']=$q3; $settings['author_email']=$z3; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if(array_key_exists('template',$_POST)) { $settings['template']=trim($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); $settings['appearance']['show_view_counts'] = isset ($_POST['show-view-counts']); if ( !array_key_exists('language',$settings) or $settings['language']!=$l3 ){ e2_drop_all_kinds_of_cache(); $settings['language']=$l3; } if ( $settings['blog_subtitle']!=$s3 or $settings['meta_description']!=$a3 or $settings['appearance']['notes_per_page']!=$k3 or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['appearance']['respond_to_dark_mode'] != isset ($_POST['respond-to-dark-mode']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink(CACHE_FILENAME_FRONTPAGE); @unlink(CACHE_FILENAME_FRONTPAGE_FEED); @unlink(CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['blog_subtitle']=$s3; $settings['meta_description']=$a3; $settings['appearance']['notes_per_page']=$k3; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['appearance']['respond_to_dark_mode'] = isset ($_POST['respond-to-dark-mode']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } r(CACHE_FILENAMES_NOTES_COMMENTS); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_settings')); } c(jv('e2m_frontpage', array ('page' => 1))); } function e2m_underhood(){ global$_db; $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['title']='Underhood'; $d['heading']='Underhood'; kn('check version'); $x3=$e3=0; foreach(glob(CACHES_FOLDER .'/*') as $fb){ $x3 ++; $e3+=stat($fb)['size']; } $r3=$t3=0; foreach(glob(LOG_FOLDER .'*') as $fb){ $r3 ++; $t3+=stat($fb)['size']; } $j3=sa(); $h3=f($j3['indexed_count'],$j3['total_count']); $g3=false; if ($j3['time_spent']) { $g3=floor($j3['time_spent']); if ($g3 >= 60){ $g3=( floor($g3/60) .'min '. str_pad($g3 % 60,2,'0',STR_PAD_LEFT). 's' ); } elseif ($g3 > 0){ $g3.='s'; } else { $g3=false; } } $w3=array_keys(jn()); $d['form']='form-underhood'; $d['form-underhood'] = [ 'mysql-version' => $_db['version'], 'form-action-engine-rebuild' => BUILT? false:jv('e2s_post_service', ['service' => 'build']), 'cache-files-count' => $x3, 'cache-files-size' => $e3, 'form-action-cache-invalidate' => jv('e2s_post_service', ['service' => 'sync']), 'search-index-items-count' => $j3['indexed_count'], 'search-index-total-items-count' => $j3['total_count'], 'search-index-time-spent' => $g3, 'search-index-percentage' => $h3, 'form-action-search-index-continue' => la()? jv('e2s_bsi_step'):false, 'form-action-search-index-rebuild' => jv('e2s_bsi_drop'), 'log-files-count' => $r3, 'log-files-size' => $t3, 'form-action-logs-enable' => jv('e2s_post_service', ['service' => 'log']), 'backup-last' => count($w3)? xy('D, M d, Y \a\t H:i:s',$w3[0]) : false, 'form-action-backup' => jv('e2s_dump'), 'form-action-database-migrate' => jv( 'e2s_post_service', ['service' => 'migrate'] ), 'form-action-license-verify' => jv( 'e2s_post_service', ['service' => 'verify'] ), ]; return $d; } function e2m_database(){ global$settings,$_strings,$_superconfig; if (@$_superconfig['disallow_db_config']) { return e2_error404_mode(); } $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['form']='form-database'; $d['form-database'] = array ( 'form-action' => jv('e2s_database_save'), 'db-server' => htmlspecialchars(@$settings['db']['server']? $settings['db']['server']:'localhost'), 'db-user' => htmlspecialchars(@$settings['db']['user_name']? $settings['db']['user_name']:'root'), 'db-password' => htmlspecialchars(o2(@$settings['db']['passw'])), 'db-database' => htmlspecialchars(@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $d; } function e2s_database_save(){ global$settings,$_db,$_superconfig,$_strings,$_config; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_database')); } if (@$_superconfig['disallow_db_config']) { return e2_error404_mode(); } $u3['server'] = @$_POST['db-server']; $u3['user_name'] = @$_POST['db-user']; $u3['passw'] = i2(@$_POST['db-password']); $u3['name'] = @$_POST['db-database']; $i3=false; try { kn('check database from HTTP post',$u3); $o3=e2_model_data_check($u3['name']); if (!$o3['occupied'] or !$o3['migrateable']) { mv($_strings['er--db-data-incomplete']); c(jv('e2m_database')); } qn(); $i3=true; } catch (AeMySQLCannotConnectException $e){ mv( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error() .' ('. mysqli_connect_errno() .')' ); } catch (AeMySQLTooOldException $e){ mv(e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv($_strings['er--cannot-find-db'] .' '. $u3['name']); } if (!$i3){ c(jv('e2m_database')); } $settings['db']=$u3; if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_database')); } e2_drop_all_kinds_of_cache(); if (!$_config['retain_search_indexes_on_db_switch']) { $p3=ra(); try { $p3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$cy)__log('Rose not available'); } qa(); } p3(jv('e2s_bsi_step')); c(jv('e2m_settings')); } function p(){ return class_exists('ZipArchive'); } function e2m_get_backup(){ if (p()) { $vy=new ZipArchive(); $by=BACKUP_FOLDER .'backup.zip'; if ($vy -> open($by,ZIPARCHIVE::CREATE)) { @ $vy -> addEmptyDir('backup'); @ $vy -> addFile(USER_FOLDER.'userpic@2x.jpg','backup/files/userpic@2x.jpg'); @ $vy -> addFile(USER_FOLDER.'userpic@2x.png','backup/files/userpic@2x.png'); $yy=BACKUP_FOLDER .'backup-tail.sql'; $ny=''; $my=-1; foreach(glob(BACKUP_FOLDER .'backup-*.sql') as $fy){ if ($fy===$yy) continue; $dy=stat($fy); if ($dy['ctime'] > $my)$ny=$fy; $my=$dy['ctime']; } $vy -> addFile($ny,'backup/'. basename($ny)); if(is_file($yy)) { @file_put_contents($yy,"COMMIT;\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod($yy,E2_NEW_FILES_RIGHTS); } $vy -> addFile($yy,'backup/backup-tail.sql'); $vy -> close(); } if(is_file($by)) { header('Content-Type: application/zip'); header('Content-Disposition: attachment; filename="backup.zip"'); readfile($by); unlink($by); } else { die ('Cannot get backup'); } die; } else { die ('Cannot get backup'); } } if(substr(@$_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2)=='ru'){ define('DEFAULT_LANGUAGE','ru'); } else { define('DEFAULT_LANGUAGE','en'); } function e2l_get_string($ay,$lv){ global$_strings; $name=$_strings[$ay]; if(preg_match_all('/\$\[(.+?)\]/u',$name,$y3,PREG_SET_ORDER)) { foreach ($y3 as $qy){ $n=$qy[1]; $ly=''; if(strstr($n,'.')) list ($n,$ly)=explode('.',$n,2); if(array_key_exists($n,$lv)) { if ($ly){ $name=str_replace($qy[0],e2l__format_value($ly,$lv[$n],$ay),$name); } else { $name=str_replace($qy[0],$lv[$n],$name); } } } } return$name; } function e2l__format_value($ly,$s,$ay){ list ($ly,$zy)=explode('.',$ly,2); $ky='e2lstr_'. $ly; if(function_exists($ky)) { return call_user_func($ky,$s,$zy,$ay); } else { return $s; } return $s; } function cv(){ global$_lang,$settings; if ( array_key_exists('language',$settings) and is_file($xy=LANGUAGES_FOLDER.$settings['language'] .'.php') ) { $_lang=$settings['language']; include $xy; } elseif(is_file($xy=LANGUAGES_FOLDER.DEFAULT_LANGUAGE .'.php')) { $_lang=DEFAULT_LANGUAGE; include $xy; } else { die ('Language file missing: '. $xy); } return e2l_load_strings(); } define('LOG_FILE',LOG_FOLDER.'main.log'); define('LOG_DEBUG_FILE',LOG_FOLDER.'debug.log'); class Log { public static $cy=false; public static $ey=false; } function vv(){ global$_config; if ( $_config['write_log'] and ($_config['write_log_create'] or is_file(LOG_FILE)) ) { Log::$cy=true; Log::$ey=true; } else { Log::$cy=false; Log::$ey=false; } if (!Log::$cy) return; @j(LOG_FOLDER); if($_config['write_log_reset']) { @file_put_contents(LOG_FILE,''); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } if (@$_config['write_log_limit'] and is_file(LOG_FILE)) { $ry=@stat(LOG_FILE); $ry=$ry['size']; if ($ry > $_config['write_log_limit']) { @rename(LOG_FILE,LOG_FILE .'.bak'); @chmod(LOG_FILE .'.bak',E2_NEW_FILES_RIGHTS); @file_put_contents(LOG_FILE,''); } } __log('────────────────────────────────────────────────────────────────────────────────'); } function bv($ty=false) { static $jy=false; if ($ty===false) return $jy; if ($ty==='') return $jy=false; $fb=str_replace( '$',gmdate('Y-m-d-\a\t-H-i-s'),$ty ); return $jy= $fb; } function __log($tv){ static $gy; global$_stopwatch; $wy=bv(); $uy=''; $iy=str_pad(round(w()-$_stopwatch,5),10,' ',STR_PAD_RIGHT); if ($tv[0]=='}'){ -- $gy; if ($gy < 0)$gy=0; } $oy=( E2_RUN_ID .' '. $uy .''. $iy .' '. str_repeat(' ',$gy*2). $tv."\n" ); if ($tv[strlen($tv)-1]=='{'){ ++ $gy; } $py=FILE_APPEND; if(Log::$ey){ @file_put_contents(LOG_FILE,$oy,$py); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } if ($wy!==false){ $fb=LOG_FOLDER.$wy .'.log'; @j(LOG_FOLDER); @file_put_contents($fb,$oy,$py); @chmod($wy,E2_NEW_FILES_RIGHTS); } if ($tv[0]=='#'){ @j(dirname(LOG_DEBUG_FILE). '/'); @file_put_contents(LOG_DEBUG_FILE,$oy,$py); @chmod(LOG_DEBUG_FILE,E2_NEW_FILES_RIGHTS); } } function yv($cn){ @n3( USER_FOLDER .'ctree.php', "<?php\r\n\r\n". var_export($cn,true). "\r\n\r\n?>php" ); } function nv(){ @j(LOG_FOLDER); @file_put_contents(LOG_FILE,''); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } function mv($vn,$type=E2E_STRANGE_ERROR){ global$errors,$settings, $_config, $_strings, $_diagnose; if (!isset ($errors))$errors=[]; $bn=(!x2()+1 <= (int)$_config['show_call_stack']); if ($vn){ if ($vn[0]!='<')$vn='<p>'.$vn .'</p>'; $yn=array ( 'description' => $vn, 'type' => $type, ); if($type==E2E_STRANGE_ERROR and $bn){ $yn['backtrace']=debug_backtrace(); } $errors[] = $yn; } if($type==E2E_PERMISSIONS_ERROR){ $_diagnose['need?']=true; y('diagnose','1'); } return true; } function fv(){ global$errors,$nn,$_strings,$_diagnose; $mn=y3(); if(count($mn)==0){ y('diagnose',''); unset($_COOKIE['diagnose']); $_diagnose['need?']=false; $_diagnose['ok?']=true; return true; } else { $fn_=''; $fn_.='<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $fn_.='<ul>'; foreach ($mn as $dn){ if ($dn=='.')$dn=''; $fn_.='<li><tt>./'. $dn .'</tt></li>'; if(Log::$cy)__log('Diagnostics: cannot write <'. $dn .'>'); } $fn_.='</ul>'; $yn=array ( 'title' => $_strings['et--fix-permissions-on-server'], 'description' => $fn_, 'type' => E2E_DIAGNOSTICS_MESSAGE, 'class' => 'serious', ); $errors[] = $yn; $_diagnose['ok?']=false; return false; } } function dv($an,$vn,$qn,$ln,$zn){ global$errors; if(0==error_reporting() or ($an & 8)) return; $qn=str_replace(__DIR__,'',$qn); mv($qn .', line '. $ln .'<br />Error '. $an .': '. $vn); $errors[count($errors)-1]['phpcode']=$an; } function sv($kn,$xn,$fy,$u){ if (!(error_reporting() & $kn)) return; throw new ErrorException($xn,0,$kn,$fy,$u); } function av(){ global$errors,$settings,$_config; if (!isset ($errors))$errors=[]; @session_start(); if(is_array(@$_SESSION['errors'])) { $e=array_merge(@$_SESSION['errors'],$errors); } else { $e=$errors; } $bn=(!x2()+1 <= (int)$_config['show_call_stack']); if (@$_config['store_backtrace'] and $bn and $e!=NULL){ @n3('backtrace.psa',serialize($e)); } else { @unlink('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset($_SESSION['errors']); $d=array(); $en=false; if(count($e) > 0){ foreach($e as $r => $rn){ if ($rn['type']==E2E_STRANGE_ERROR){ $rn['class']='serious'; $en=true; if ($bn){ $rn['backtrace']=lv($rn['backtrace']); } } if ($rn['type']==E2E_MESSAGE){ $rn['class']='info'; } $e[$r]=$rn; } $d['each']=$e; if ( $en and @$_config['store_backtrace'] and $bn and is_file('debug.php') ) { $d['debug-link']='debug.php'; } } return $d; } function qv(){ $errors=av(); foreach($errors['each'] as $tn){ echo '<p>'. $tn['description'] .'</p>'; } die; } function lv($jn){ global $c; if (!is_array($jn)) return 'No backtrace info'; $jn=array_reverse($jn); $jn=array_splice($jn,0,count($jn)-1); $e='<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($jn as $r => $h){ $hn=@$h['args'] or $hn=array(); $gn=array(); foreach ($hn as $wn){ $gn[] = var_export($wn,true); } $fy=@$h['file']; $fy=str_replace($_SERVER['DOCUMENT_ROOT'],'',$fy); $u=(@$h['line']? (' #'. $h['line']) : '?'); $e.='<div style="margin: .25em 0 .5em '. $r*3 .'em">'; $e.='<span style="float: right; color: #666"> '. $fy.$u .'</span>'; $e.='<tt><b>'. @$h['function'] .' (</b>'; if(count($gn)) { $un=str_replace("array (\n)",'array ()',$gn); $un=implode(', ',$un); if(0){ $un=highlight_string('<?'. $un .'?'.'>',true); $un=substr($un,77, -28); } $un=str_replace('&nbsp;',' ',$un); $un=nl2br($un); $e.='<div style="margin: 0 0 0 1.12em">'. $un .'</div>'; } $e.='<b>)</b> &rarr;</tt></div>'; } $e.='</p>'; return$e; } class AeException extends \Exception {} class AeMySQLException extends AeException {} class AeMySQLNotFoundException extends AeMySQLException {} class AeMySQLTooOldException extends AeMySQLException {} class AeMySQLCannotConnectException extends AeMySQLException {} class AeMySQLAccessDeniedException extends AeMySQLCannotConnectException {} class AeMySQLQueryException extends AeMySQLException {} class AeMySQLCorruptedUpdateRecordCallException extends AeMySQLException {} class AeInstallException extends AeException {} class AeInstallAlreadyInstalledException extends AeInstallException {} class AeInstallDatabaseOccupiedException extends AeInstallException {} class AeNotSavedException extends AeException {} class AePasswordHashNotSavedException extends AeNotSavedException {} class AeSettingsNotSavedException extends AeNotSavedException {} class AeModelUnknownTableException extends AeException {} class AeOlbaException extends AeException {} class AeOlbaTemplateMissingException extends AeOlbaException {} class AeNotAndCannotBeInstalledException extends AeException {} class AeUpdateAlreadyInProcess extends AeException {} class AeUpdateCannotLock extends AeException {} function zv($in,$on=false){ $pn=substr(__DIR__,0,strrpos(__DIR__,'/')); $cm=''; $vm=[]; foreach(array_reverse($in -> getTrace()) as $bm){ $ym['where']=str_replace( $pn .'/','',$bm['file'] ) .':'. $bm['line']; $nm=[]; foreach ($bm['args'] as $mm){ $nm[] = htmlspecialchars( str_replace("\n","\n  ",var_export($mm,true)), ENT_NOQUOTES,HSC_ENC ); } $fm=''; if(count($nm)) { $fm=("\n". '  '. implode(",\n  ",$nm). "\n" ); } $ym['call']=$bm['function'] .' ('. $fm .')'; $vm[] = $ym; } do { if ((string)$in -> getMessage()!==''){ $cm.=$in -> getMessage() ."\n"; } $cm.="\n";; $cm .= ( get_class($in) .' in '. str_replace( $pn .'/','',$in -> getFile() ) .':'. $in -> getLine(). "\n" ); if ($in -> getCode()) { $cm.='Code: '. $in -> getCode() ."\n"; } $dm=''; $r=1; foreach ($vm as $u){ $dm.=$r++ .'. '. $u['where'] .' '. $u['call']. "\n"; if (!$on)$dm.="\n";; } $cm.="\n";; } while ($in=$in -> getPrevious()); if ($on){ $dm=preg_replace('/^.*?$/smu','│            $0',$dm); $cm.='┌─'. "\n"; $cm.=$dm; $cm.='└─'; } else { $cm.=$dm; } return $cm; } function kv($in,$xn=''){ global$_config; if(__DEV)mv('<pre>'. zv($in) .'</pre>'); if($_config['log_errors']) { Log::$cy=true; if(Log::$cy)bv('error-$'); } if(Log::$cy)__log('Exception caught: '. zv($in,true)); if(Log::$cy)bv(''); if ((string)$xn!==''){ if(Log::$cy)__log($xn); } } function xv($in){ global$_config,$content,$c; $content['title']=':-('; $content['exception-message']=$in -> getMessage(); if(__DEV)$content['exception-string']=zv($in); if($_config['log_errors']) { Log::$cy=true; if(Log::$cy)bv('error-$'); } if(Log::$cy)__log('Panic: '. zv($in,true)); $d=ts('panic',true); if(Log::$cy)__log(':-('); echo $d; die; } function ev($in){ xv($in); } $_url_map=array ( '@log' => 'e2://e2s_log', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note?is_published=1&preview-key=0', ':note/:preview' => 'e2://e2m_note?is_published=1', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts?page=1', 'drafts-:page' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_note?is_published=0&preview-key=0', 'drafts/:draft/:preview' => 'e2://e2m_note?is_published=0', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=0', 'hot' => 'e2://e2m_most_commented?page=1', 'hot/:page' => 'e2://e2m_most_commented', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'popular' => 'e2://e2m_popular?page=1', 'popular/:page' => 'e2://e2m_popular', 'untagged' => 'e2://e2m_untagged?page=1', 'untagged/:page' => 'e2://e2m_untagged', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'install' => 'e2://e2m_install', 'settings' => 'e2://e2m_settings', 'settings/underhood' => 'e2://e2m_underhood', 'settings/underhood/build' => 'e2://e2s_post_service?service=build', 'settings/underhood/sync' => 'e2://e2s_post_service?service=sync', 'settings/underhood/log' => 'e2://e2s_post_service?service=log', 'settings/underhood/migrate' => 'e2://e2s_post_service?service=migrate', 'settings/underhood/verify' => 'e2://e2s_post_service?service=verify', 'settings/underhood/backup' => 'e2://e2s_dump', 'settings/underhood/index' => 'e2://e2s_bsi_step', 'settings/underhood/reindex' => 'e2://e2s_bsi_drop', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', ); $_url_chunks=array ( '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => array ( 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ), '\:draft' => array ( '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ), '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9,]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9\=\/\\\+\-\_\,]+)', ); $_url_autoredirects=array ( '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ); function rv($sm){ global$_url_autoredirects,$c; $sm=preg_replace(array_keys($_url_autoredirects),array_values($_url_autoredirects),$sm); if(preg_match('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/',$sm,$y3)) { if(2==strlen($y3[3]))$y3[3]='20'.$y3[3]; return ($y3[3].'/'.$y3[2].'/'.$y3[1].$y3[4]); } if(preg_match('/^tags\-rss\/(.*?)\/?$/',$sm,$y3)) { $am=substr($y3[1],strrpos($y3[1],'/')+1); return ('tags/'. $am.'/rss/'); } return $sm; } function tv(){ static $qm=false; global$__synthetic_urls,$_config,$_superconfig; if ($qm) return; $lm=$_config['url_composition']; if (!empty ($_superconfig) and array_key_exists('url_composition',$_superconfig)) { $lm=$_superconfig['url_composition']; } $__synthetic_urls=false; if ($lm=='synthetic'){ $__synthetic_urls=true; } if ($lm=='auto'){ if(function_exists('apache_get_modules')) { if(in_array('mod_rewrite',apache_get_modules())) { $__synthetic_urls=true; } } } $qm=true; } function jv($candy,$parameters=array ()) { global$_url_map,$_url_chunks,$_config,$__synthetic_urls,$_protocol,$v,$c; $zm=array_flip($_url_map); if ( @$_config['preferred_domain_name'] and $_SERVER['HTTP_HOST']!=$_config['preferred_domain_name'] ) { $v=$_config['preferred_domain_name']; } $sm=$_protocol .'://'. $v.$c .'/'; $km='e2://'. $candy; if(array_key_exists('page',$parameters)) { $page=$parameters['page']; } else { $page=1; } if($parameters){ $km.='?'; $xm=array(); $em=array(); foreach($parameters as $rm => $s){ if ($rm=='*note'){ $em[] = $rm; $xm[] = wv($s); } if ($rm=='*tags'){ $em[] = $rm; $xm[] = uv($s); } if ($rm=='*tag'){ $em[] = $rm; $xm[] = uv([$s]); } } foreach ($em as $rm) unset($parameters[$rm]); foreach ($xm as $tm){ $parameters=array_merge($parameters,$tm); } foreach($parameters as $rm => $s){ if (@$rm[0]!='_'){ $km.=$rm .'='. urlencode($s) .'&'; } } $km=substr($km,0, -1); } if(array_key_exists($km,$zm)) { if ($zm[$km]!=='')$sm.=$zm[$km] .'/'; return $sm; } else { $gm=false; foreach ($zm as $wm => $um){ $im=$wm; $im=preg_quote($im,'/'); $om=parse_url($wm); $pm=$om['host']; $cf=parse_url($km); if(strstr($wm,'::')) { $vf=$cf['scheme'] .'://'. $cf['host']; $im=str_replace('\:\:','(.*)',$im); $im='/^'. $im .'$/s'; if(preg_match($im,$vf,$y3)) { $sb=str_replace('::',$y3[1],$um); $sb=str_replace('_','-',$sb); $bf=$cf['query']; if($__synthetic_urls and $bf){ $sm.=$sb .'/?'. $bf; } elseif($__synthetic_urls){ $sm.=$sb .'/'; } elseif ($bf){ $sm.='?go='. $sb .'/?'. $bf; } else { $sm.='?go='. $sb .'/'; } return $sm; } } $yf=false; if($candy===$pm){ $gm=true; if ($om['query']) { $nf=explode('&',$om['query']); foreach ($nf as $mf){ list ($rm,$s)=explode('=',$mf); $s=urldecode($s); $rm=str_replace('_','-',$rm); if ( array_key_exists($rm,$parameters) and $parameters[$rm]!=$s ){ $yf=true; break; } } } if (!$yf){ if(preg_match_all('/\:[\-a-z]+/i',$um,$y3)) { foreach ($y3[0] as $ff){ $df=$_url_chunks['\\'. $ff]; if (!is_array($df)) { $df=array ($df); } $sf=$df[0]; foreach ($df as $sf){ $af='/\(\?P\<(.*?)\>.*?\)/'; $qf=true; if (@preg_match_all($af,$sf,$y3)) { $y3=$y3[1]; $qf=true; for ($r=0; $r < count($y3); ++ $r){ if ( !array_key_exists(str_replace("_","-",$y3[$r]), $parameters) or $parameters[str_replace("_","-",$y3[$r])] === '' ){ $qf=false; break; } } } if (!$qf) continue; $lf=@preg_replace_callback( $af, function ($y3) use ($parameters){ return$parameters[str_replace("_","-",$y3[1])]; }, $sf ); $lf=stripslashes($lf); $zf=str_replace($ff,$lf,$um); break; } $um=$zf; } } $kf=array(); if ($um){ if($__synthetic_urls){ $sm.=$um .'/'; } else { $kf[] = 'go='. $um .'/'; } } foreach($_GET as $t => $xf) if(in_array($t, array ('result','themeless'))) { $kf[] = $t . ($xf? ('='. urlencode($xf)) : ''); } if(count($kf)) { $sm.='?'. implode('&',$kf); } return $sm; } } } if ($gm){ return $sm; } else { die ('Cannot compose url for candy '. $candy); } } } function hv($sm=null){ global$_url_map,$_url_chunks,$_config,$_current_url,$__synthetic_urls,$_protocol,$v,$c; if ($sm===null) $sm=urldecode($_GET['go']); if(Log::$cy)__log('Resolve "'. $sm .'" {'); tv(); $ef=$sm; $sm=trim($sm,'/'); $sm=rv($sm); $parameters=array(); foreach($_url_map as $rf => $wm){ $tf=$rf; $tf=preg_quote($tf,'/'); if(strstr($rf,'::')) { $tf=str_replace('\:\:','(.*)',$tf); $tf='/^'. $tf .'$/s'; if(preg_match($tf,$sm,$y3)) { $jf=str_replace('-','_',$y3[1]); $km=str_replace('::',$jf,$wm); } } elseif(strstr($rf,':')) { $hf=array(); foreach($_url_chunks as $t => $xf){ if(is_array($xf)) { $hf[$t]='(?:(?:'. implode(')|(?:',$xf) .'))'; } else { $hf[$t]=$xf; } } $tf=str_replace( array_keys($hf), array_values($hf), $tf ); $tf='/^'. $tf .'$/s'; if(preg_match($tf,$sm,$y3)) { $km=$wm; foreach ($y3 as $rm => $s) if (!is_numeric($rm)) { $rm=str_replace('_','-',$rm); $parameters[$rm]=$s; } } } else { if ($rf==$sm){ $km=$wm; break; } } } $gf=(bool)$km; if (!$km)$km='e2://e2_error404_mode'; $cf=parse_url($km); $candy=$cf['host']; if ($cf['query']) { $nf=explode('&',$cf['query']); foreach ($nf as $mf){ list ($rm,$s)=explode('=',$mf); $s=urldecode($s); $rm=str_replace('_','-',$rm); $parameters[$rm]=$s; } } $d=false; $parameters=iv($parameters); if ($gf){ if($_config['force_canonical_urls']) { foreach (['draft2','oalias2'] as $wf){ if(array_key_exists($wf,$parameters)) { unset($parameters[$wf]); } } $uf=jv($candy,$parameters); list ($if_,$of)=explode('?',$_SERVER['REQUEST_URI'],2); $pf=$_protocol .'://'. $_SERVER['HTTP_HOST'].$if_; $c2=$_protocol .'://'. $_SERVER['HTTP_HOST'].urldecode($if_); $of=explode('&',$of); foreach ($of as $v2){ list ($b2, ) = explode('=',$v2); if ($b2=='go'){ $pf.='?'. $v2; $c2.='?'. urldecode($v2); } } $_current_url=$pf; if ( $pf!=$uf and $c2!=$uf and $pf!=$_protocol .'://'. $_SERVER['HTTP_HOST'].$c.'/@notify' ){ if(Log::$cy)__log('Used URL "'. $pf .'" or "'. $_2used_url .'"'); if(Log::$cy)__log('Redirecting to canonical URL "'. $uf .'"'); if(Log::$cy)__log('}'); c($uf); } } if(is_callable($candy)) { $d=array ($candy,$parameters); } else { $d=array (null, array ()); } } else { $d=array (null, array ()); } foreach($_GET as $rm => $s){ if ($rm!=='go')$d[1][$rm]=$s; } if(Log::$cy){ if(count($d[1]) > 0){ $y2=print_r($d[1],true); $y2=substr($y2,8, -2); $y2='    '. trim($y2); $y2=preg_replace('/^.*?$/smu','         $0',$y2); $y2=' with parameters:'."\r\n". $y2; } __log( 'Resolved to candy "'. $d[0] .'"'. $y2 ); } if(Log::$cy)__log('}'); return $d; } function wv($n2){ global $c,$_config; if (!isset ($n2['IsPublished'])) { return []; } if (!$n2['IsPublished']) { $parameters['is-published']=0; if ($n2['OriginalAlias']===''){ $parameters['draft']=$n2['ID']; } elseif (wm($n2['OriginalAlias']) == 1){ $parameters['oalias']=$n2['OriginalAlias']; } else { $parameters['draft2']=$n2['ID']; $parameters['oalias2']=$n2['OriginalAlias']; } return$parameters; } $parameters['is-published']=1; $m2=wn(); $f2='n'. $n2['ID']; $d2=$m2[$f2]; if (isset ($n2['__force_ymdn']) and ((string)$n2['OriginalAlias']==='')) { $f2='n'. $n2['ID'] .'-ymdn'; if(array_key_exists($f2,$m2)) { $d2=$m2[$f2]; } } if(preg_match( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $d2,$y3 )) { $parameters['year']=$y3['year']; $parameters['month']=$y3['month']; $parameters['day']=$y3['day']; $parameters['day-number']=$y3['day_number']; } else { $parameters['alias']=$d2; } return$parameters; } function uv($s2){ $a2=$parameters=[]; foreach ($s2 as $q2){ $a2[] = wn() ['t'. $q2['ID']]; } if(count($a2)) { $parameters['tag-alias']=implode(',',$a2); } return$parameters; } function iv($parameters){ if ( (string) @$parameters['alias']!=='' or ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' and (string) @$parameters['day-number']!=='' ) ) { if ($l2=e2_published_noterec_with_parameters_($parameters)) { $parameters['*note']=$l2; } } if ( (string) @$parameters['oalias']!=='' or (string) @$parameters['draft']!=='' or (string) @$parameters['oalias2']!=='' or (string) @$parameters['draft2']!=='' ){ if ($l2=e2_noterec_with_parameters_($parameters)) { $parameters['*note']=$l2; } } if ( (string) @$parameters['tag-alias']!=='' ){ $parameters['*tags']=e2_tagrecs_with_parameters_($parameters); if(count($parameters['*tags']) == 1){ $parameters['*tag']=$parameters['*tags'][0]; } } return$parameters; } function ov($f){ global$_e2utf8__unformat_htmlentity_neasden; if($_e2utf8__unformat_htmlentity_neasden){ return $f; } else { return '((html '. $f .'))'; } } function pv($z2,$k2=false){ $x2=''; $e2_=strlen($z2); for ($r=0; $r < 256; ++ $r){ $r2[$r]=0; $t2=$r; while ($t2 & 0x00000080){ $t2 <<= 1; ++ $r2[$r]; } } for ($r=0xd090; $r <= 0xd0bf; $r++)$j2[$r]=chr(($r & 0x000000ff)+48); for ($r=0xd180; $r <= 0xd18f; $r++)$j2[$r]=chr(($r & 0x000000ff)+112); $j2[0xd081]="\xa8"; $j2[0xd191]="\xb8"; $j2[0xc299]="\x99"; $j2[0xc2a9]="\xa9"; $j2[0xc2ae]="\xae"; $j2[0xc2ab]="\xab"; $j2[0xc2bb]="\xbb"; $j2[0xc2a0]="\xa0"; $r=0; while ($r < $e2_){ $h2=$z2[$r]; $g2=ord($h2); if ($r2[$g2]==0){ $x2.=$h2; ++ $r; } elseif ($r2[$g2]==2){ $w2=$j2[($g2 << 8) | ord($z2[$r+1])]; $x2 .= ($w2!=null)? $w2 : ( $k2? (ov( cb(substr($z2,$r,2)) )) : '?' ); $r+=2; } else { $u2=substr($z2,$r,$r2[$g2]); if ($u2=="\xe2\x84\x96")$x2.="\xb9"; elseif ($u2=="\xe2\x80\x93")$x2.="\x96"; elseif ($u2=="\xe2\x80\x94")$x2.="\x97"; elseif ($u2=="\xe2\x80\x98")$x2.="\x91"; elseif ($u2=="\xe2\x80\x99")$x2.="\x92"; elseif ($u2=="\xe2\x80\x9a")$x2.="\x82"; elseif ($u2=="\xe2\x80\x9c")$x2.="\x93"; elseif ($u2=="\xe2\x80\x9d")$x2.="\x94"; elseif ($u2=="\xe2\x80\x9e")$x2.="\x84"; elseif ($u2=="\xe2\x80\xa6")$x2.="\x85"; elseif ($u2=="\xe2\x80\xb9")$x2.="\x8b"; elseif ($u2=="\xe2\x80\xba")$x2.="\x9b"; elseif ($u2=="\xe2\x82\xac")$x2.="\x88"; elseif ($u2=="\xe2\x84\xa2")$x2.="\x99"; else $x2.=$k2? (ov( cb($u2) )) : '?'; $r+=$r2[$g2]; } } return $x2; } function cb($p){ $i2=''; $e2_=strlen($p); for ($r=0; $r < $e2_; ++ $r){ $i2.=preg_replace('/^1*0/','',decbin(ord($p[$r]))); } return '&#'. bindec($i2) .';'; } function vb($o2) { $d=$o2; $d=preg_replace_callback('/([\x80-\xFF])/','e2_utf_from_windows_1251_char',$d); return $d; } function e2_utf_from_windows_1251_char($p){ list (, $p)=$p; if ($p=="\xa8") return "\xd0\x81"; if ($p=="\xb8") return "\xd1\x91"; if ($p >= "\xc0" && $p <= "\xef") return "\xd0".chr(ord($p)-48); if ($p >= "\xf0") return "\xd1".chr(ord($p)-112); if ($p=="\x85") return "\xe2\x80\xa6"; if ($p=="\x96") return "\xe2\x80\x93"; if ($p=="\x97") return "\xe2\x80\x94"; if ($p=="\xab") return "\xc2\xab"; if ($p=="\xbb") return "\xc2\xbb"; if ($p=="\x91") return "\xe2\x80\x98"; if ($p=="\x92") return "\xe2\x80\x99"; if ($p=="\x93") return "\xe2\x80\x9c"; if ($p=="\x94") return "\xe2\x80\x9d"; if ($p=="\x84") return "\xe2\x80\x9e"; if ($p=="\x99") return "\xe2\x84\xa2"; if ($p=="\xb9") return "\xe2\x84\x96"; if ($p=="\xa0") return "\xc2\xa0"; return '?'; }; function e2_utf8_version_of_array_($hv){ foreach ($hv as $t => $xf){ if (!array_key_exists($t.'.u?',$hv)) { if(is_string($hv[$t])) { $hv[$t]=vb($hv[$t]); } elseif(is_array($hv[$t])) { $hv[$t]=e2_utf8_version_of_array_($hv[$t]); } } } return $hv; } function yb($jb){ return mb_convert_encoding($jb[0],'HTML-ENTITIES','UTF-8'); } function nb($o2,$p2=false){ if ($p2){ return preg_replace_callback( '/[\x{10000}-\x{fffff}]/u','e2_question_long_utf8_chars_helper',$o2 ); } else { return preg_replace('/[\x{10000}-\x{fffff}]/u','?',$o2); } } function e2img_filename_by_processing( $cd,$vd, $bd,$yd,$nd ){ global$_config; if(Log::$cy)__log('Process image: "'. $cd .'" -> "'. $vd .'"'); if (!is_file($cd)) return false; $md=stat($cd)['size']; if (!wb($cd)) { if(Log::$cy)__log('Process image: SVG, no processing'); return $cd; } if(is_file($vd) and !b3($cd,$vd)) { if(Log::$cy)__log('Process image: Already exists'); return $vd; } if (!extension_loaded('gd')) return false; $fd=pathinfo($vd); if (!@j($fd['dirname'])) { if(Log::$cy)__log( 'Process image: Can’t create directory <'. $fd['dirname'] .'>' ); return false; } if(Log::$cy)__log('Process image: Detecting image type'); $type=e2img__type_of_file($cd); if (!$type) return false; $dd='imagecreatefrom'. $type; if (!function_exists($dd)) return false; if(Log::$cy)__log('Process image: Opening original image ('. $dd .')'); $sd=call_user_func($dd,$cd); if (!$sd) return false; if ($ad=e2img__orientation_of_file($cd)) { if(Log::$cy)__log('Process image: Needs orientation fix'); $sd=e2img__res_rotate($sd, -$ad); } $qd=[imagesx($sd),imagesy($sd)]; $ld=$qd; $zd=[0,0,0,0]; if ($yd==CROP_SQUARE){ if(Log::$cy)__log('Process image: Needs crop'); list ($ld,$zd) = ( e2img__crop_metrics_to_square($ld) ); } $ld=e2_fit_metrics_to_constraints( $ld,$bd ); if ( $ad===0 and $ld===$qd ){ if(Log::$cy)__log('Process image: No changes necessary, leaving original'); return $cd; } if(Log::$cy)__log(var_export($ld,true)); if(Log::$cy)__log(var_export($zd,true)); $kd=e2img__create_copy_resampled( $sd, $ld, $zd, $type ); imagejpeg($kd,$vd,$nd); if (!is_file($vd)) { if(Log::$cy)__log('Process image: File not created by imagejpeg'); return false; } if ($vd!==$cd){ if ($ad===0){ $xd=stat($vd)['size']; if ($xd >= $md){ if(Log::$cy)__log('Process image: Conversion to JPEG made file bigger, back up'); unlink($vd); $vd=$cd; } } } @chmod($vd,$_config['uploaded_files_mode']); if(Log::$cy)__log('Process image: Done'); return $vd; } function e2img__create_copy_resampled( $sd,$ld,$zd,$type ){ list ($ed,$rd)=$ld; list ($td,$jd,$hd,$gd)=$zd; $kd=imagecreatetruecolor($ed,$rd); if($type==='png'){ imagefill($kd,0,0,imagecolorallocate($kd,255,255,255)); imagealphablending($kd,true); } $wd=imagesx($sd); $ud=imagesy($sd); imagecopyresampled( $kd, $sd, 0,0, 0+$td,0+$jd, $ed,$rd, $wd-$hd,$ud-$gd ); imageinterlace($kd,1); return $kd; } function e2img__type_of_file($fb){ $id=@getimagesize($fb); if (!$id or $id[2] > 3) return false; if ($id[2]==IMAGETYPE_GIF) return 'gif'; if ($id[2]==IMAGETYPE_JPEG) return 'jpeg'; if ($id[2]==IMAGETYPE_PNG) return 'png'; return false; } function e2img__orientation_of_file($fb){ if (!function_exists('exif_read_data')) return 0; if (($od=@exif_read_data($fb)) === false) return 0; if ($od['Orientation']==3) return -180; if ($od['Orientation']==6) return -270; if ($od['Orientation']==8) return -90; return 0; } function e2img__res_rotate($sy,$ad){ $pd=imagerotate($sy,$ad,0); if ($pd!==false){ imagedestroy($sy); $sy=$pd; } return $sy; } function e2_fit_metrics_to_constraints( $cs,$bd ){ if ($bd===false)$bd=[0,0]; list ($vs,$bs)=$cs; list ($ys,$ns)=$bd; $ms=[1]; if ($ys)$ms[] = $ys/$vs; if ($ns)$ms[] = $ns/$bs; $fs=min($ms); if ($fs < 1){ $vs=(int)round($vs*$fs); $bs=(int)round($bs*$fs); } return [$vs,$bs]; } function e2img__crop_metrics_to_square($cs){ $ds=$ss=$as_=$qs=0; list ($vs,$bs)=$cs; if ($vs > $bs){ $as_=$vs-$bs; $ds=floor($as_/2); $bs=$vs; } elseif ($vs < $bs){ $qs=$bs-$vs; $ss=floor($as_/2); $vs=$bs; } $zd=[$ds,$ss,$as_,$qs]; $ls=[$vs,$bs]; return [$ls,$zd]; } define('PROVIDE_MEDIA_ASYNC',10); define('PROVIDE_MEDIA_NOW',20); function mb($zs){ global$full_blog_url; $ks=parse_url($zs); if (isset ($ks['host'])) { $sm=$zs; if ($ks['host']=='www.youtube.com'){ $xs=basename($ks['path']); $es='remote/youtube-'. $xs .'-cover.jpg'; return [ 'url' => $sm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'youtube', 'video-id' => $xs, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER.$es, 'local-relative-filename' => $es, 'local-full-filename' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$es, 'local-full-failname' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$es.'.failed', ]; } elseif ($ks['host']=='player.vimeo.com'){ $xs=basename($ks['path']); $es='remote/vimeo-'. $xs .'-cover.jpg'; return [ 'url' => $sm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'vimeo', 'video-id' => $xs, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER.$es, 'local-relative-filename' => $es, 'local-full-filename' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$es, 'local-full-failname' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$es.'.failed', ]; } elseif (gb($ks['path'])) { return [ 'url' => $sm, 'type' => 'remote-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => false, 'mime-type' => v3($ks['path']), 'length' => '', ]; } else { return [ 'url' => $sm, 'type' => 'remote-non-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($ks['path']), 'length' => '', ]; } } else { if (gb($ks['path'])) { $sm=$full_blog_url .'/'. PICTURES_FOLDER.$ks['path']; $rs=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$ks['path']; return [ 'url' => $sm, 'type' => 'local-image', 'is-local?' => true, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => wb($ks['path']), 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'mime-type' => v3($ks['path']), 'length' => @stat($rs)['size'], 'local-href' => $sm, 'local-cover-href' => $sm, 'local-relative-filename' => $ks['path'], 'local-full-filename' => $rs, 'thumb-full-filename' => $rs, ]; } elseif (ib($ks['path'])) { $sm=$full_blog_url .'/'. VIDEO_FOLDER.$ks['path']; $rs=MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$ks['path']; return [ 'url' => $sm, 'type' => 'local-video', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($ks['path']), 'length' => @stat($rs)['size'], 'local-href' => $sm, 'local-relative-filename' => $ks['path'], 'local-full-filename' => $rs, 'thumb-full-filename' => VIDEO_ICON_IMAGE, ]; } else { $sm=$full_blog_url .'/'. AUDIO_FOLDER.$ks['path']; $rs=MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$ks['path']; return [ 'url' => $sm, 'type' => 'local-non-image', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($ks['path']), 'length' => @stat($rs)['size'], 'local-href' => $sm, 'local-full-filename' => $rs, 'thumb-full-filename' => AUDIO_ICON_IMAGE, ]; } } } function fb($ts){ $js=[]; foreach ($ts as $zs){ $hs=mb($zs); if ($hs['is-local?'])$js[] = $zs; } return $js; } function db($ts){ $js=[]; foreach ($ts as $zs){ $hs=mb($zs); if ($hs['is-snippetable?'])$js[] = $zs; } return $js; } function sb( $gs,$ws ){ if (!is_array($gs))$gs=[]; if (!is_array($ws))$ws=[]; $ts=array_merge($ws,$gs); $ts=array_reverse($ts); $ts=array_unique($ts); $ts=array_reverse($ts); return $ts; } function ab($ts){ global$full_blog_url; if (!is_array($ts) or !count($ts)) return []; rb($ts); $us=[]; foreach ($ts as $zs){ if (!empty ($is[$zs])) continue; $hs=mb($zs); if (!$hs['is-usable-as-cover?']) continue; if (!is_file($hs['local-full-filename'])) continue; $size=m3($hs['local-full-filename']); list ($vs,$bs,$os,$ps)=$size; $us[] = [ 'src' => $hs['local-cover-href'], 'width' => $vs, 'height' => $bs, 'horizontality' => $os, 'verticality' => $ps, ]; $is[$zs]=true; } return $us; } function qb($ts){ global$full_blog_url,$_strings; if (!is_array($ts) or !count($ts)) return []; rb($ts); $ca=[]; foreach ($ts as $zs){ if (!empty ($is[$zs])) continue; $hs=mb($zs); if (!$hs['is-using-thumbnails?']) continue; if (!is_file($hs['local-full-filename'])) continue; $va=[ 'is-available?' => true, 'src' => '', 'width' => '', 'height' => '', 'original-filename' => '', 'original-filesize' => '', ]; if (!$hs['is-local?'] or is_file($hs['local-full-filename'])) { if ($hs['is-generating-thumbnail?']) { $ba=tb( $hs ); } else { $ba=$hs['thumb-full-filename']; } } if (empty ($ba)) { $va['is-available?']=false; $ba=jb( $hs['local-relative-filename'] ); } $va['src']=x3($ba); if ($va['is-available?']) { $size=m3($ba); list ($vs,$bs)=$size; } else { $vs=$bs=''; } if (!$vs)$vs=THUMB_WIDTH/2; if (!$bs)$bs=THUMB_HEIGHT/2; list ($vs,$bs)=e2_fit_metrics_to_constraints( [$vs,$bs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $va['width']=$vs; $va['height']=$bs; if ($hs['is-local?']) { $va['original-filename']=$zs; if(is_file($hs['local-full-filename'])) { $ya=stat($hs['local-full-filename'])[7]; $ya=round($ya/1024) .' '. $_strings['gs--kb']; $va['original-filesize']=$ya; } } $ca[] = $va; $is[$zs]=true; } return $ca; } function lb($na){ foreach ( ['maxresdefault','hqdefault','mqdefault','sddefault','default'] as $fb ){ $sm='http://img.youtube.com/vi/'. $na .'/'. $fb .'.jpg'; if(Log::$cy)__log('Trying '. $sm .'...'); $ma=@file_get_contents($sm); if ($ma!==false) return $ma; } return false; } function zb($fa){ $da=@unserialize( file_get_contents('http://vimeo.com/api/v2/video/'. $fa .'.php') ); if (!empty ($da[0]['thumbnail_large'])) { return @file_get_contents($da[0]['thumbnail_large']); } return false; } function kb($hs,$sa){ if(is_file($hs['local-full-filename'])) { if(Log::$cy)__log('Already exists: '. $hs['local-full-filename']); } elseif(is_file($hs['local-full-failname'])) { if(Log::$cy)__log('Already tried and failed: '. $hs['local-full-filename']); } else { if(Log::$cy)__log('Resource '. $hs['url'].' is missing a cover, retrieving'); if ($sa==PROVIDE_MEDIA_ASYNC){ p3(jv('e2s_retrieve', [ 'url' => strtr(base64_encode($hs['url']), '+/','-_'), ])); } if ($sa==PROVIDE_MEDIA_NOW){ if(Log::$cy)__log('Downloading "'. $hs['video-service'] .'" cover as '. $hs['local-full-filename'] .'...'); if ($hs['video-service']=='youtube'){ $ma=lb($hs['video-id']); } if ($hs['video-service']=='vimeo') { $ma=zb($hs['video-id']); } if ($ma!==false){ n3($hs['local-full-filename'],$ma); } else { n3($hs['local-full-failname'],''); } } } } function xb($zs,$sa){ $hs=mb($zs); if(Log::$cy)__log('Resource '. $zs .' is of type '. $hs['type']); if ($hs['type']=='local-image'){ tb($hs); } if ($hs['type']=='online-video'){ kb($hs,$sa); if ($sa==PROVIDE_MEDIA_NOW and is_file($hs['local-full-filename'])) { tb($hs); } } if ($hs['type']=='remote-image'){ } } function eb($ts){ foreach ($ts as $zs){ $hs=mb($zs); if (empty ($hs['local-full-failname'])) continue; if(is_file($hs['local-full-failname'])) { if(Log::$cy)__log('Deleting '. $hs['local-full-failname'] .' to try again'); unlink($hs['local-full-failname']); } } } function rb($ts){ if (!is_array($ts)) return; if(Log::$cy)__log('Asynchronously provide data for resnames {'); foreach ($ts as $zs){ xb($zs,PROVIDE_MEDIA_ASYNC); } if(Log::$cy)__log('}'); } function tb($hs){ if (!$hs['is-generating-thumbnail?']) return false; return e2img_filename_by_processing( $hs['local-full-filename'], jb($hs['local-relative-filename']), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); } function jb($aa){ return pb( MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER.$aa, 'thumb@2x' ); } function gb($zs){ $la=pathinfo($zs); $za=$la['extension']; return (in_array(strtolower($za), ['jpg','jpeg','gif','png','svg'])); } function wb($zs){ $la=pathinfo($zs); $za=$la['extension']; return (in_array(strtolower($za), ['jpg','jpeg','gif','png'])); } function ub($zs){ $la=pathinfo($zs); $za=$la['extension']; return (in_array(strtolower($za), ['svg'])); } function ib($zs){ $la=pathinfo($zs); $za=$la['extension']; return (in_array(strtolower($za), ['mp4','mov'])); } function ob($zs){ $la=pathinfo($zs); $za=$la['extension']; return (in_array(strtolower($za), ['mp3'])); } function pb($zs,$ka){ if (!empty ($ka)) { $xa=explode('/',$zs); $ea=array_pop($xa); $ra=explode('.',$ea); if(count($ra) < 2)$ra[] = ''; $za=array_pop($ra); $ra[] = $ka; if ($za)$ra[] = $za; $ea=implode('.',$ra); $xa[] = $ea; $zs=implode('/',$xa); } return $zs; } function c3($ta,$ea){ if (!is_file($ta.$ea)) return $ea; $ja=strrpos($ea,'.'); $ha=substr($ea,0,$ja); $za=substr($ea,$ja); $r=0; while (is_file($ta.$ha .'-'. (++ $r).$za)); $ea=$ha .'-'. $r.$za; return $ea; } function v3($zs){ $la=pathinfo($zs); $za=$la['extension']; if ($za=='png') return 'image/png'; if ($za=='gif') return 'image/gif'; if ($za=='jpg' or $za=='jpeg') return 'image/jpeg'; if ($za=='mp3') return 'audio/mpeg'; if ($za=='svg') return 'image/svg+xml'; if ($za=='mp4') return 'video/mp4'; if ($za=='mov') return 'video/quicktime'; } function b3($ga,$wa){ return strcasecmp($ga,$wa)===0; } $_folders_written=[ '.', USER_FOLDER, CACHES_FOLDER, BACKUP_FOLDER, LOG_FOLDER, MEDIA_ROOT_FOLDER.PICTURES_FOLDER, MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER, MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'remote/', MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER .'remote/', MEDIA_ROOT_FOLDER.VIDEO_FOLDER, MEDIA_ROOT_FOLDER.AUDIO_FOLDER, MEDIA_ROOT_FOLDER.AVATARS_FOLDER, ]; $_files_written=[ USER_FOLDER.'password-hash.psa', USER_FOLDER.'password-wait.psa', USER_FOLDER.'last-comment.psa', USER_FOLDER.'new-uploads.psa', USER_FOLDER.'settings.json', USER_FOLDER.'indexing.psa', USER_FOLDER.'auth.psa', USER_FOLDER.'scheduled.psa', ]; define('CROP_NONE',0); define('CROP_SQUARE',1); function y3(){ global$_folders_written,$_files_written; clearstatcache(); $ua=[]; foreach($_folders_written as $dn){ if(is_dir($dn) and !is_writable($dn)) { $ua[] = $dn; } } foreach($_files_written as $dn){ if(is_file($dn) and !is_writable($dn)) { $ua[] = $dn; } } return $ua; } function n3($fy,$x){ @j(dirname($fy)); if (!@file_put_contents($fy,$x,LOCK_EX)) { return false; } @chmod($fy,E2_NEW_FILES_RIGHTS); return true; } function m3($fb){ $vs=$bs=0; if (wb($fb)) { list ($vs,$bs)=getimagesize($fb); } elseif (ib($fb)) { try { require_once SYSTEM_LIBRARY_FOLDER .'getid3/getid3.php'; $id=new getid3(); $id=$id->analyze($fb); $vs=$id['video']['resolution_x']; $bs=$id['video']['resolution_y']; } catch (\Exception $e){} } elseif (ub($fb)) { if(function_exists('simplexml_load_string')) { $ia=simplexml_load_string(file_get_contents($fb)); if ($ia){ $oa=$ia->attributes(); list ($vs,$bs) = [(string)$oa -> width, (string)$oa -> height]; } } } if(substr($fb,strrpos($fb,'.')-3,3)=='@2x'){ $vs=(int)floor($vs/2); $bs=(int)floor($bs/2); } $os=round(($bs > 0) ? ($vs/$bs):1,2); $ps=round(($vs > 0) ? ($bs/$vs):1,2); return [$vs,$bs,$os,$ps]; } function e2s_retrieve($parameters){ $sm=base64_decode(strtr($parameters['url'],'-_','+/')); if(Log::$cy)__log('Retrieve: '. $sm); xb($sm,PROVIDE_MEDIA_NOW); die; } function f3( $pa,$c1,$gs ){ $v1=[]; if(is_array($gs)) { $v1=fb($gs); } $b1=@unserialize( $c1['Uploads'] ) or $b1=[]; $y1=array_diff($v1,$b1); if(count($y1) > 0){ z3($pa,$c1['ID'],'add',$y1); } return $y1; } function d3($ts){ $ua=[]; foreach (ab($ts) as $n1){ $ua[] = $n1['src']; } return $ua; } function s3($name,$m1){ $name=m($name); if(preg_match('//u',$name))$name=pv($name,false); if ($m1=='image'){ $ta=MEDIA_ROOT_FOLDER.PICTURES_FOLDER; } elseif ($m1=='video'){ $ta=MEDIA_ROOT_FOLDER.VIDEO_FOLDER; } elseif ($m1=='audio'){ $ta=MEDIA_ROOT_FOLDER.AUDIO_FOLDER; } else { return false; } $f1=''; for ($r=0; $r < strlen($name); $r++) { if($name[$r]=='?'){ $f1.=''; } elseif($name[$r]==' '){ $f1.='-'; } elseif(ord($name[$r]) <= 127){ $f1.=$name[$r]; } } if ($f1=='')$f1=$m1; if ($f1[0]=='.')$f1=$m1.$f1; return $f1; } function a3($d1){ global$_config; if(Log::$cy)__log('Count references for upload <'. $d1 .'>'); if(is_file(USER_FOLDER.'new-uploads.psa')) { $s1=@unserialize(file_get_contents(USER_FOLDER.'new-uploads.psa')); } $a1='%'. str_replace('%','#%',$d1) .'%'; xn( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Text` LIKE '". $a1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $a1 ."' ESCAPE '#')", 'get notes where uploads may be referenced' ); $q1=en(); $l1=@unserialize($q1[0]['Uploads']); if (!is_array($l1)) { foreach ($q1 as $n2){ $z1=u3( $n2['FormatterID'], @$n2['Text'],'full-rss' ); $l1=f3( 'note',$n2, $z1['meta']['resources-detected'] ); } } xn( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Description` LIKE '". $a1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $a1 ."' ESCAPE '#')", 'get tags where uploads may be referenced' ); $q1=en(); $k1=@unserialize($q1[0]['Uploads']); if (!is_array($k1)) { foreach ($q1 as $q2){ $z1=i3( @$q2['Description'],'full-rss' ); $k1=f3( 'tag',$q2, $z1['meta']['resources-detected'] ); } } if (!is_array($s1))$s1=[]; if (!is_array($l1))$l1=[]; if (!is_array($k1))$k1=[]; $x1=array_merge($s1,$l1,$k1); if(Log::$cy)__log('References found in relevant entries: '. var_export($x1,true)); if(in_array($d1,$x1)) { if(Log::$cy)__log('Still referenced, do not delete file'); return true; } return false; } function q3($e1,$xs){ global$_config; if ($e1=='note' and $xs=='new'){ if(is_file(USER_FOLDER.'new-uploads.psa')) { $x1=@unserialize(file_get_contents(USER_FOLDER.'new-uploads.psa')); } } elseif ($e1=='note'){ xn( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); $q1=en(); $x1=@unserialize($q1[0]['Uploads']); } elseif ($e1=='tag'){ xn( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); $q1=en(); $x1=@unserialize($q1[0]['Uploads']); } if (!is_array($x1))$x1=array(); return $x1; } function l3($e1,$xs,$x1){ global$_config; if ($e1=='note' and $xs=='new'){ if (!@n3(USER_FOLDER.'new-uploads.psa',serialize($x1))) { mv('ERROR',E2E_PERMISSIONS_ERROR); } } elseif ($e1=='note'){ xn( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `Uploads`='". serialize($x1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); } elseif ($e1=='tag'){ xn( "UPDATE `". $_config['db_table_prefix']."Keywords` ". "SET `Uploads`='". serialize($x1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); } else { return false; } if (!is_array($x1))$x1=array(); return $x1; } function z3($e1,$xs,$action,$qv){ global$_config; $x1=array(); if(Log::$cy)__log('Register upload: <'. $e1.', '. $xs.', '. $action.', '. $qv .'>'); $x1=q3($e1,$xs); $x1=d($x1,$action,$qv); l3($e1,$xs,$x1); } function k3($r1,$t1,$gs){ $b1=@unserialize($t1['Uploads']) or $b1=array(); $j1=fb($gs); $x1=d($b1,'add',$j1); $x1=serialize($x1); if ($x1!=$t1['Uploads']) { $t1['Uploads']=$x1; nn($r1,$t1); } } function e2j_file_upload($parameters=array ()) { global$_config,$full_blog_url,$_strings; @j(MEDIA_ROOT_FOLDER.PICTURES_FOLDER); @chmod(MEDIA_ROOT_FOLDER.PICTURES_FOLDER,$_config['uploaded_files_mode']); @j(MEDIA_ROOT_FOLDER.VIDEO_FOLDER); @chmod(MEDIA_ROOT_FOLDER.VIDEO_FOLDER,$_config['uploaded_files_mode']); @j(MEDIA_ROOT_FOLDER.AUDIO_FOLDER); @chmod(MEDIA_ROOT_FOLDER.AUDIO_FOLDER,$_config['uploaded_files_mode']); $zv=[ 'success' => false ]; if(count($_FILES) > 0){ foreach($_FILES as $fy){ if (!$fy['error']) { if(Log::$cy)__log('Ajax file upload: <'. $fy['name'].'>'); $zv['data']['file-kind']='image'; $ta=MEDIA_ROOT_FOLDER.PICTURES_FOLDER; if (ib($fy['name'])) { $zv['data']['file-kind']='video'; $ta=MEDIA_ROOT_FOLDER.VIDEO_FOLDER; } elseif (ob($fy['name'])) { $zv['data']['file-kind']='audio'; $ta=MEDIA_ROOT_FOLDER.AUDIO_FOLDER; } $h1=( array_key_exists('overwrite',$_GET) and is_file($ta.$fy['name']) ); $g1=false; $zv['data']['overwrite'] = (int)$h1; if(Log::$cy)__log('Ajax file upload: Overwrite is resolved to <'. (int)$h1.'>'); $f1=s3($fy['name'],$zv['data']['file-kind']); if(Log::$cy)__log('Ajax file upload: Safe name is <'. $f1.'>'); if(is_file($ta.$f1)) { if(file_get_contents($ta.$f1)==file_get_contents($fy['tmp_name'])) { if(Log::$cy)__log('Ajax file upload: Existing file is the same'); $g1=true; } elseif (!$h1){ $f1=c3($ta,$f1); } } if (!$g1){ move_uploaded_file($fy['tmp_name'],$ta.$f1); @chmod($ta.$f1,$_config['uploaded_files_mode']); } if(Log::$cy)__log('Ajax file upload: File kind is <'. $zv['data']['file-kind'].'>'); if ($zv['data']['file-kind']=='image'){ $za=pathinfo($f1,PATHINFO_EXTENSION); if (b3($za,'jpg')) { $w1=$f1; } else { $w1=$f1 .'.jpg'; $w1=c3( MEDIA_ROOT_FOLDER.PICTURES_FOLDER,$w1 ); } $u1=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$f1; $i1=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$w1; if(Log::$cy)__log('Ajax file upload: Process uploaded image <'. $u1.'>'. ' to possibly <'. $i1.'>'); $i1=e2img_filename_by_processing( $u1, $i1, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); $ya=$fy['size']; if (!b3($i1,$u1)) { @unlink($u1); $f1=$w1; $ya=stat($i1)['size']; } if ($h1){ @unlink(jb($f1)); } if ($o1=e2img_filename_by_processing( $u1, jb($f1), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY )) { if(Log::$cy)__log('Ajax file upload: thumbnail, done as '. $o1); list ($vs,$bs)=m3($o1); if(Log::$cy)__log('Ajax file upload: image size '. $vs .'×'. $bs); if (!$vs)$vs=THUMB_WIDTH/2; if (!$bs)$bs=THUMB_HEIGHT/2; list ($vs,$bs)=e2_fit_metrics_to_constraints( [$vs,$bs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $zv['success']=true; $zv['data']['new-name']=$f1; $zv['data']['filesize']=round($ya/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=x3($o1); $zv['data']['width']=$vs; $zv['data']['height']=$bs; z3($parameters['entity'],$parameters['entity-id'],'add', array ($f1)); } else { if(Log::$cy)__log('Ajax file upload: couldn’t create thumbnail'); @unlink($ta.$f1); $zv['error']['message']=_S('er--cannot-create-thumbnail'); } } if ($zv['data']['file-kind']=='video'){ if(Log::$cy)__log('Ajax file upload: video, done'); $zv['success']=true; $zv['data']['new-name']=$f1; $zv['data']['filesize']=round($fy['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=VIDEO_ICON_IMAGE; $zv['data']['width']=VIDEO_ICON_WIDTH/2; $zv['data']['height']=VIDEO_ICON_HEIGHT/2; z3($parameters['entity'],$parameters['entity-id'],'add', array ($f1)); } if ($zv['data']['file-kind']=='audio'){ if(Log::$cy)__log('Ajax file upload: audio, done'); $zv['success']=true; $zv['data']['new-name']=$f1; $zv['data']['filesize']=round($fy['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=AUDIO_ICON_IMAGE; $zv['data']['width']=AUDIO_ICON_WIDTH/2; $zv['data']['height']=AUDIO_ICON_HEIGHT/2; z3($parameters['entity'],$parameters['entity-id'],'add', array ($f1)); } } elseif(4!=$fy['error']) { if ($fy['error']==1){ $zv['error']['message']='too-big'; } elseif ($fy['error']==2){ $zv['error']['message']='too-big'; } elseif ($fy['error']==3){ $zv['error']['message']='partial'; } else { $zv['error']=$fy['error']; } } } } else { if(Log::$cy)__log('Ajax file upload error: no files'); $zv['error']['message']='no-files'; } $zv=json_encode($zv); die ($zv); } function x3($p1){ global$full_blog_url; $e2_=strlen(MEDIA_ROOT_FOLDER); if ($e2_ and substr($p1,0,$e2_)==MEDIA_ROOT_FOLDER){ return substr($p1,$e2_); } else { return$full_blog_url .'/'. $p1; } } function e3(){ @unlink(USER_FOLDER.'userpic@2x.png'); @unlink(USER_FOLDER.'userpic@2x.jpg'); @unlink(USER_FOLDER.'userpic-large@2x.jpg'); @unlink(USER_FOLDER.'userpic-square@2x.jpg'); } function e2j_userpic_remove(){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_settings')); } e3(); $zv=json_encode([ 'success' => true ]); die ($zv); } function e2j_userpic_upload(){ global$_config; $zv=[ 'success' => false ]; if(count($_FILES)!=1){ if(Log::$cy)__log('Ajax userpic upload error: no or too many files'); $zv['error']['message']='No or too many files'; $zv=json_encode($zv); die ($zv); } $fy=array_pop($_FILES); if (!$fy['error']) { if(Log::$cy)__log('Ajax userpic upload: <'. $fy['name'].'>'); $cq=pathinfo($fy['name']); $za=strtolower($cq['extension']); if ($za!='png')$za='jpg'; $fb='userpic.original.'. $za; move_uploaded_file($fy['tmp_name'],USER_FOLDER.$fb); @chmod(USER_FOLDER.$fb,$_config['uploaded_files_mode']); e3(); copy( USER_FOLDER.$fb, USER_FOLDER .'userpic-large@2x.jpg' ); $vq=e2img_filename_by_processing( USER_FOLDER .'userpic-large@2x.jpg', USER_FOLDER .'userpic-large@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_NONE, USERPIC_JPG_QUALITY ); copy( USER_FOLDER.$fb, USER_FOLDER .'userpic-square@2x.jpg' ); $bq=e2img_filename_by_processing( USER_FOLDER .'userpic-square@2x.jpg', USER_FOLDER .'userpic-square@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_SQUARE, USERPIC_JPG_QUALITY ); $yq=e2img_filename_by_processing( USER_FOLDER.$fb, USER_FOLDER .'userpic@2x.jpg', [USERPIC_WIDTH,USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); if ($bq){ $nq=str_replace(USER_FOLDER,USER_FOLDER_URLPATH,$bq); $zv=[ 'success' => true, 'data' => [ 'new-image-src' => $nq, ] ]; } else { $zv['error']['message']=_S('er--supported-only-png-jpg-gif'); } } elseif(4!=$fy['error']) { if ($fy['error']==1){ $zv['error']['message']='File too big'; } elseif ($fy['error']==2){ $zv['error']['message']='File too big'; } elseif ($fy['error']==3){ $zv['error']['message']='File upload is partial'; } else { $zv['error']['message']='File upload error '. $fy['error']; } } $zv=json_encode($zv); die ($zv); } function e2j_file_remove($parameters){ if (!array_key_exists('file',$_POST)) { $zv=[ 'success' => false ]; $zv=json_encode($zv); die ($zv); } $fy=$_POST['file']; $zv=[ 'success' => true ]; $zv=json_encode($zv); z3($parameters['entity'],$parameters['entity-id'],'remove',$fy); if (!a3($fy)) { if (ob($fy)) { if(Log::$cy)__log('Not referenced, deleting '. MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$fy); @unlink(MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$fy); } elseif (ib($fy)) { if(Log::$cy)__log('Not referenced, deleting '. MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$fy); @unlink(MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$fy); } else { $yq=pb($fy,'thumb@2x'); $mq=@unlink(MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$fy); $fq=@unlink(MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER.$yq); } } die ($zv); } function r3(){ global$_config; if (!$_config['files_total_size_limit']) return false; $dq=0; foreach(glob(MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'/*') as $fy){ $f=stat($fy); $dq+=$f['size']; } foreach(glob(MEDIA_ROOT_FOLDER.VIDEO_FOLDER .'/*') as $fy){ $f=stat($fy); $dq+=$f['size']; } foreach(glob(MEDIA_ROOT_FOLDER.AUDIO_FOLDER .'/*') as $fy){ $f=stat($fy); $dq+=$f['size']; } $sq=$_config['files_total_size_limit']; $aq=f($dq,$sq); return array ($dq,$sq,$aq); } function t3($qq){ $lq=true; if (list ($dq,$sq,$aq)=$qq){ $lq=($sq-$dq) > 0; } return $lq; } function j3($qq,$zq=false){ $kq=''; if (list ($dq,$sq,$aq)=$qq){ $qq=array ( 'used' => round($dq/1024/1024), 'total' => round($sq/1024/1024), 'percent' => $aq ); if ($zq or ($sq-$dq) < 1024*1024*10){ if ($dq < $sq){ $kq=e2l_get_string('gs--used',$qq); } else { $kq=e2l_get_string('gs--used-all',$qq); } } } return $kq; } function e2_error404_mode(){ global$_config,$_strings; if($_config['try_redirect_to_all']) { $xq='all/'. urldecode($_GET['go']); hv($xq); } header('HTTP/1.1 404 Not found'); $eq['class']='404'; $eq['heading']=$_strings['pt--page-not-found']; $eq['title']=$_strings['pt--page-not-found']; return $eq; } function e2s_post_service($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } if($parameters['service']==='build'){ e2_build(); mv('Engine core built',E2E_MESSAGE); } if($parameters['service']==='sync'){ e2_drop_all_kinds_of_cache(); mv('Caches invalidated',E2E_MESSAGE); } if($parameters['service']==='log'){ nv(); mv('Logs enabled',E2E_MESSAGE); } if($parameters['service']==='backup'){ } if($parameters['service']==='migrate'){ qn(); mv('Database structure up to date',E2E_MESSAGE); } c(jv('e2m_underhood')); } function h3($tv){ include_once 'neasden/neasden.php'; $Nn=new Neasden; $Nn->profile_name='kavychki'; return$Nn->format($tv); } function g3($ly,$tv,$rq){ include_once 'neasden/neasden.php'; if ($tv==='') return array (); if ($ly=='calliope'){ preg_match_all('/\(\(([^ ]*)( |\)\))/',$tv,$y3); return $y3[1]; } elseif ($ly=='neasden'){ $Nn=new Neasden; $Nn->profile_name=$rq; $Nn->format($tv); return$Nn->resources_detected; } else { return array (); } } function w3(){ return '<div class="foot" style="color: var(--errorColor); font-style: italic">This text was created with a very old version of Aegea that used a formatter called Calliope. It is no longer included with Aegea&nbsp;2.10.</div><div class="foot" style="color: var(--errorColor); font-style: italic">Edit this note to switch it and its comments to the current formatter, Neasden. If anything breaks, edit again to fix.</div><div class="foot" style="color: var(--errorColor); font-style: italic">To temporarily install Calliope, get the directory <tt>/system/calliope/</tt> from Aegea&nbsp;2.9 and copy it to your <tt>/user/calliope/</tt>. This will not work with Aegea&nbsp;2.11. See release notes for Aegea&nbsp;2.10 for details.</div>'; } function u3($ly,$tv,$rq){ include_once 'neasden/neasden.php'; if(Log::$cy)__log('Format: format with formatter "'. $ly .'" in context "'. $rq.'"'); if ($ly=='calliope'){ $tv=pv($tv); $tv=o3($tv,$rq); $meta=array(); $tv=vb($tv); $tv='<div class="e2-text-calliope-formatted">'. h3($tv) .'</div>'; } elseif ($ly=='neasden'){ $Nn=new Neasden; $Nn->profile_name=$rq; $tv=$Nn->format($tv); $meta=array ( 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ); } return array ( 'text-final' => $tv, 'meta' => $meta, ); } function i3($tv,$rq){ global$_config; return u3($_config['default_formatter'],$tv,$rq); } function o3($tv,$rq){ global$_config,$settings,$full_blog_url,$_template; @ (list ($rq,$tq)=explode('|',$rq)); if (!is_file(USER_FOLDER.'calliope/WikiFormatter.php')) { return w3(); } require_once USER_FOLDER.'calliope/WikiFormatter.php'; if ('full'==$rq)$jq=WF_FULL_MODE; elseif ('full-rss'==$rq)$jq=WF_FULL_MODE; elseif ('simple'==$rq)$jq=WF_SIMPLE_MODE; elseif ('simple-rss'==$rq)$jq=WF_SIMPLE_MODE; else return $tv; $hq=new WikiFormatter(); $hq -> replace=array ( '/' => 'i', '+' => 'small', '-' => 's', '*' => 'b', '^' => 'sup', 'v' => 'sub', '#' => 'tt', '!' => 'blockquote', ); $hq -> settings=array ( 'hrefSize' => 100, 'localImgDir' => $full_blog_url .'/'. PICTURES_FOLDER, 'maxImgWidth' => $_template['max_image_width'], 'mode' => $jq, 'enableShrinkLongHref' => 1, 'enableHr' => 0, 'enableBr' => 1, 'enableHeaders' => 1, 'headersStartWith' => 1, 'enableTables' => 1, 'simpleTableCSSClass' => 'e2-text-table', 'enableAutoAcronymEngine' => 0, 'enableAcronym' => 0, 'acronymBase' => '', 'enableList' => 1, 'mailSafe' => "<a href=\"\" onmouseover=\"this.href='mailto:'+{email}\">{icon}<script language=\"JavaScript\">document.write({name});</script></a>", 'ljUserTag' => '<a href="http://livejournal.com/users/{name}/">{name}</a>', 'fullVersionURL' => $tq, 'enableTagIcons' => 0, 'outerUrlInNewWindow' => 0, 'lineBreak' => "\n", 'extLinkHrefPrefix' => '', ); $tv=$hq -> Wiki2HTML($tv); return $tv; } function p3($sm,$gq=false){ if(Log::$cy)__log('Spawn: Curl '. $sm .' using '. ($gq? 'post':'get') .'...'); if(function_exists('curl_init')) { $wq=curl_init(); $uq=!ini_get('open_basedir'); curl_setopt_array($wq, array ( CURLOPT_URL => $sm, CURLOPT_POST => $gq, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => t2(), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $uq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content=curl_exec($wq); $iq=curl_errno($wq); $oq=curl_error($wq); $pq=curl_getinfo($wq); curl_close($wq); if(Log::$cy)__log('Spawn: Curl returns: ['. print_r($pq,true) .'] ['. $content .'], (errno='. $iq .', errstr='. $oq .')...'); } else { if(Log::$cy)__log('Spawn: Curl functions are not available'); } } function cy($cl){ global$_config; if (@$_config['broadcast_url'] and !$cl['IsExternal']) { if($_config['log_broadcast']) { Log::$cy=true; if(Log::$cy)bv('broadcast'); } if(Log::$cy)__log('Broadcast-async note: '. $cl['Title']); $sm=jv('e2m_note_broadcast', array ('*note' => $cl)); if(Log::$cy)__log('Broadcast will spawn url: '. $sm); p3($sm); } } function vy($vl){ global$_config; if (!$vl) return false; $sm=$_config['broadcast_url']; $sm.='?src='. urlencode($vl); if($_config['log_broadcast']) { Log::$cy=true; if(Log::$cy)bv('broadcast'); } if(Log::$cy)__log('Broadcast: Curl '. $sm .'...'); if(function_exists('curl_init')) { $wq=curl_init(); $uq=!ini_get('open_basedir'); curl_setopt_array($wq, array ( CURLOPT_URL => $sm, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => t2(), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $uq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content=curl_exec($wq); $iq=curl_errno($wq); $oq=curl_error($wq); $pq=curl_getinfo($wq); curl_close($wq); if(Log::$cy)__log('Broadcast: Curl returns: ['. print_r($pq,true) .'] ['. $content .'], (errno='. $iq .', errstr='. $oq .')...'); if ($iq===0) return true; } else { if(Log::$cy)__log('Spawn: Curl functions are not available'); } return false; } function by($cl){ if (!$cl) return false; $vl=jv('e2m_note_json', array ('*note' => $cl)); return vy($vl); } function e2m_note_broadcast($parameters=array ()) { global$_config; if (@$_config['broadcast_url']) { if(array_key_exists('*note',$parameters)) { $vl=jv('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif(array_key_exists('alias',$parameters)) { $vl=jv('e2m_note_json', array ('alias' => $parameters['alias'])); } if (vy($vl)) { die ('Broadcasted.'); } else { die ('Could not broadcast.'); } } else { return e2_error404_mode(); } } function e2m_timezone(){ global$_strings,$settings; $bl=array ( 'form-action' => jv('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => fy($settings['timezone']['offset'],1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $bl, ); } function yy(){ global$_strings; $yl=array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $yl; } function ny($nl){ $yl=yy(); return @$yl[(int)$nl/SECONDS_IN_A_MINUTE]; } function my($nl){ $ml='+'; if ($nl < 0)$ml='&ndash;'; $fl=str_pad((int) (abs($nl)/3600),2,'0',STR_PAD_LEFT); $dl=str_pad(abs($nl)/60 % 60,2,'0',STR_PAD_LEFT); return 'GMT'. $ml.$fl .':'. $dl; } function fy($sl,$al=''){ global$_strings; $yl=yy(); $d=''; if (!$al)$al=count($yl); $d.='<select class="e2-select" name="offset" size="'. $al .'">'; foreach ($yl as $nl => $ql){ $ll=''; if ($nl*SECONDS_IN_A_MINUTE==$sl)$ll=' selected="selected"'; $d.='<option'. $ll .' value="'.$nl.'">'; $ml=''; if ($nl < 0)$ml='−'; if ($nl > 0)$ml='+'; $fl=(int) (abs($nl*SECONDS_IN_A_MINUTE)/3600); $dl=(int) (abs($nl*SECONDS_IN_A_MINUTE)/60 % 60); if ($fl){ $d .= ( $ml .' '. $fl .' '. $_strings['gs--timezone-offset-hours'] .' '. ($dl? ($dl .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($ql){ $d .= ' ('. $ql. ')'; } } else { $d .= $ql; } $d.='</option>'; } $d.='</select>'; return $d; } function e2s_select_timezone(){ global$settings,$_strings; if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780){ $settings['timezone']['offset'] = @$_POST['offset']*SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_timezone')); } c(jv('e2m_settings')); } function dy($l2){ return array ( 'offset' => (int)$l2['Offset'], 'is_dst' => (bool)$l2['IsDST'], ); } function sy(){ return array ( 'offset' => 0, 'is_dst' => false, ); } function ay(){ global$settings; if(array_key_exists('timezone',$settings)) { return$settings['timezone']; } else { return sy(); } } function qy($zl,$kl){ if (@$zl['is_dst']) { $xl=(int)date('I',$kl); $el=date('Z',$kl)-$xl*SECONDS_IN_AN_HOUR; $rl=$zl['offset']; $tl=$rl-$el; $jl=date('I',$kl+$tl); return $jl; } else { return 0; } } function ly($zl,$kl){ global$settings; if ($zl and is_array($zl)) { return ( $zl['offset'] + qy($zl,$kl)*SECONDS_IN_AN_HOUR ); } } function zy($kl){ return ly(ay(),$kl); } function ky($hl,$qv,$zl){ return gmdate($hl,$qv+ly($zl,$qv)); } function xy($hl,$qv){ return ky($hl,$qv,ay()); } function ey($hb,$jb=false,$tb=false){ if(is_numeric($tb)) { $gl=gmmktime(0,0,0,$jb,$tb,$hb); $wl=gmmktime(0,0,0,$jb,$tb+1,$hb)-1; } elseif(is_numeric($jb)) { $gl=gmmktime(0,0,0,$jb,1,$hb); $wl=gmmktime(0,0,0,$jb+1,1,$hb)-1; } else { $gl=gmmktime(0,0,0,1,1,$hb); $wl=gmmktime(0,0,0,1,1,$hb+1)-1; } return array ($gl,$wl); } function ry($zl,$hb,$jb=false,$tb=false){ list ($gl,$wl)=ey($hb,$jb,$tb); $gl -= ly($zl,$gl); $wl -= ly($zl,$wl); return array ($gl,$wl); } function ty($hb,$jb=false,$tb=false){ return ry(ay(),$hb,$jb,$tb); } function jy($hb,$jb=false,$tb=false){ $ul=13; $il=-12; $ul+=1; $il -= 1; list ($gl,$wl)=ey($hb,$jb,$tb); $gl -= $ul*3600; $wl -= $il*3600; return array ($gl,$wl); } function hy($nl){ if ((int) @$nl > 0) return (string)'+'.abs(@$nl); elseif ((int) @$nl < 0) return (string)'-'.abs(@$nl); else return ''; } function gy($kl,$ol=''){ $pl=zy($kl); $ml=($pl >= 0)?'+':'-'; $pl=abs($pl); $c4=$pl % 60; $pl -= $c4; $jb=$pl % 3600/60; $pl -= $jb*60; $v4=$pl/3600; if ($v4 < 10)$v4='0'.$v4; if ($jb < 10)$jb='0'.$jb; return $ml.$v4.$ol.$jb; } function wy($b4){ global$settings; if(is_numeric($b4)) { $q1['offset']=SECONDS_IN_A_MINUTE*$b4; $q1['is_dst']=false; $y4=SECONDS_IN_A_MINUTE*$b4-SECONDS_IN_AN_HOUR; $n4=array ('offset' => $y4,'is_dst' => true); $n4=(int)ly($n4,time()); if ($q1['offset']==$n4){ $q1['offset']=$y4; $q1['is_dst']=true; } } else { if(array_key_exists('timezone',$settings)) { $q1=$settings['timezone']; } else { $q1['offset']=0; $q1['is_dst']=false; } } return $q1; } function uy($m4){ $v4=xy('H',$m4); if ($v4 <= 4) return 4; elseif ($v4 <= 10) return 1; elseif ($v4 <= 16) return 2; elseif ($v4 <= 22) return 3; else return 4; } function iy($f4,$d4=null){ global$_strings; if ($d4===null)$d4=ay(); $s4=ky('d.m.Y',$rb,$d4); $a4=ky('d.m.Y',$f4,$d4); $q4=SECONDS_IN_A_MINUTE; $l4=SECONDS_IN_AN_HOUR; $rb=time(); $z4=uy($rb); $k4=uy($f4); $kb=$rb-$f4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb >= 0 and $kb < 54) return$_strings['tt--just-now']; if ($kb >= 54 and $kb < 108) return$_strings['tt--one-minute-ago']; $x4=$kb+12; $e4=floor($x4/$q4); if ($kb >= 108 and $kb < 54*$q4) return e2l_get_string( 'tt--minutes-ago', array ('minutes' => $e4) ); if ($kb >= 54*$q4 and $kb < 108*$q4) return$_strings['tt--one-hour-ago']; $x4=$kb+12*$q4; $r4=floor($x4/$l4); if ($kb >= 108*$q4 and $kb < 4*$l4) return e2l_get_string( 'tt--hours-ago', array ('hours' => $r4) ); $t4=ky('G:i',$f4,$d4); if ($kb >= 4*$l4 and $z4 > $k4 and $s4==$a4){ return$_strings['tt--today']; } if ((($rb-$f4) <= 7884000)) { return e2l_get_string( 'tt--date', array ( 'day' => ky('j',$f4,$d4), 'month' => ky('m',$f4,$d4), ) ); } return ky('Y',$f4,$d4); } function oy($f4,$d4=null){ global$_strings; $kb=time()-$f4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb==0) return$_strings['tt--now']; $j4=array ( array (1,'tt--seconds-short'), array (SECONDS_IN_A_MINUTE,'tt--minutes-short'), array (SECONDS_IN_AN_HOUR,'tt--hours-short'), array (SECONDS_IN_A_DAY,'tt--days-short'), array (SECONDS_IN_A_MONTH,'tt--months-short'), array (SECONDS_IN_A_YEAR,'tt--years-short'), array (SECONDS_IN_A_YEAR+SECONDS_IN_A_MONTH,''), ); for ($r=0; $r < count($j4); ++ $r){ if ($kb >= $j4[$r][0] and $kb < $j4[$r+1][0]) { return e2l_get_string( $j4[$r][1], array ('value' => floor($kb/$j4[$r][0])) ); } } if ($d4===null)$d4=ay(); return ky('Y',$f4,$d4); } $_model_contractions=[ 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'pkey1' => "INT UNSIGNED DEFAULT '1' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v39' => "VARCHAR(39) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". $_config['default_formatter'] ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ]; $_model=[ 'Actions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityID', 'pkey'], ['Stamp', 'time'], ['ReadCount', 'int'], ], 'Aliases' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityType', 'v1'], ['EntityID', 'pkey'], ['Alias', 'v64'], ['Stamp', 'time'], ], 'Comments' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['Text', 'text'], ['Reply', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ['IsReplyVisible', '0'], ['IsReplyFavourite', '0'], ['IsAnswerAware', '1'], ['IsSubscriber', '0'], ['IsSpamSuspect', '0'], ['IsNew', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['ReplyStamp', 'time'], ['ReplyLastModified', 'time'], ['IP', 'v39'], ['IsGIPUsed', '0'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ], 'GIPsSessions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['AuthorProfileLink', 'v255'], ['SessionToken', 'v255'], ['Stamp', 'time'], ], 'Keywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Keyword', 'v255'], ['OriginalAlias', 'v64'], ['PageTitle', 'v255'], ['Description', 'text'], ['Summary', 'text'], ['Uploads', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ], 'Notes' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Title', 'v255'], ['Text', 'text'], ['Summary', 'text'], ['FormatterID', 'fid'], ['OriginalAlias', 'v64'], ['Uploads', 'text'], ['IsPublished', '0'], ['IsCommentable', '0'], ['IsVisible', '1'], ['IsFavourite', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['Offset', 'int'], ['IsDST', '0'], ['IsIndexed', '0'], ['IsExternal', '0'], ['ReadCount', 'uint'], ['SourceID', 'pkey'], ['SourceNoteID', 'pkey'], ['SourceNoteURL', 'v255'], ['SourceNoteJSONURL', 'v255'], ['SourceNoteData', 'text'], ], 'NotesKeywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['KeywordID', 'pkey'], ], 'Sources' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['TrueID', 'pkey'], ['Title', 'v255'], ['AuthorName', 'v255'], ['URL', 'v255'], ['PictureURL', 'v255'], ['IsWhiteListed', '0'], ['IsTrusted', '0'], ], ]; $_model_indexes_create_sql=[ 'index' => 'INDEX', 'unique' => 'UNIQUE INDEX', 'fulltext' => 'FULLTEXT', ]; $_model_indexes_check_sql=[ 'index' => 'KEY', 'unique' => 'UNIQUE KEY', 'fulltext' => 'FULLTEXT KEY', ]; $_model_indexes=[ 'Actions' => [ ['unique', ['EntityID','Stamp']], ['index', ['SubsetID']], ], 'Aliases' => [ ['index', ['SubsetID']], ['index', ['Alias']], ['index', ['EntityID']], ], 'Comments' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'GIPsSessions' => [ ['unique', ['SubsetID','GIP','GIPAuthorID']], ['index', ['SubsetID']], ], 'Keywords' => [ ['index', ['SubsetID']], ], 'Notes' => [ ['fulltext', ['Title','Text']], ['index', ['SubsetID']], ['index', ['Stamp']], ['index', ['SourceID']], ['index', ['SourceNoteID']], ], 'NotesKeywords' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'Sources' => [ ['index', ['SubsetID']], ], ]; $_model_minimal_table_list=[ 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ]; function e2_model_data_check($h4){ global$_db,$_model,$_model_minimal_table_list,$_config; $g4=false; $w4=array(); $sql='SHOW TABLES FROM `'. mysqli_real_escape_string($_db['link'],$h4). '`'; $q1=mysqli_query($_db['link'],$sql); if ($q1){ while ($u4=mysqli_fetch_row($q1)) { foreach(array_keys($_model) as $i4){ if(strcasecmp($u4[0],$_config['db_table_prefix'].$i4)===0){ $g4=true; $w4[] = $i4; } } } } $o4=true; foreach(array_keys($_model) as $i4){ if (!in_array($i4,$w4)) { $o4=false; } } $p4=true; foreach($_model_minimal_table_list as $i4){ if (!in_array($i4,$w4)) { $p4=false; } } return array ( 'occupied' => $g4, 'complete' => $o4, 'migrateable' => $p4, ); } function py($cz,$vz,$bz){ global $yz; if (($nz=mysqli_connect($cz,$vz,$bz)) === false) return []; $mz=[]; $fz=[ 'information_schema', 'performance_schema', 'sys', 'mysql' ]; @$yz ++; $bf='SHOW DATABASES'; if(Log::$cy)__log('DB ['. $yz .']: '. $bf); $q1=mysqli_query($nz,$bf); while ($u4=mysqli_fetch_row($q1)) { if(mysqli_select_db($nz,$u4[0]) and !in_array($u4[0],$fz)) { $mz[] = $u4[0]; } } return $mz; } function cn($dz){ global$_config; xn( "SHOW TABLES LIKE '". $_config['db_table_prefix'].$dz . "'" ); $sy=en(); return count($sy) > 0; } function vn($dz,$sz=null){ global$_config; if ($sz===null){ $sz=$_config['db_table_prefix']; } xn( "SHOW TABLE STATUS LIKE '". $sz.$dz . "'" ); $q1=en(); return $q1?$q1[0] : []; } function bn($dz){ global $_model, $_model_contractions, $_model_indexes, $_model_indexes_check_sql, $_config, $_db; if (!array_key_exists($dz,$_model)) throw new AeModelUnknownTableException(); if (cn($dz)) return; $sz=$_config['db_table_prefix']; $az=[]; foreach($_model[$dz] as $qz){ list ($name,$type)=$qz; $az[] = "`". $name ."` ". $_model_contractions[$type]; } if(is_array(@$_model_indexes[$dz])) { foreach($_model_indexes[$dz] as $lz){ $zz=$_model_indexes_check_sql[$lz[0]] . ' (`'. implode('`, `',$lz[1]) .'`)'; $az[] = $zz; } } $sql=( "CREATE TABLE `". $sz.$dz ."` ". "(". implode(", ",$az) .") ". "ENGINE=InnoDB DEFAULT CHARSET=". $_db['charset'] ); xn($sql); } function yn($dz,$t1,$kz='INSERT',$xz=''){ global$_config,$_db; $ez['SubsetID']=$_config['db_table_subset']; foreach ($t1 as $t => $xf){ $ez[$t]="'". rn($xf) ."'"; } $rz="`". implode("`, `",array_keys($ez)). "`"; $tz=implode(", ",array_values($ez)); xn( $kz ." INTO `". $_config['db_table_prefix'].$dz ."` ". "(".$rz .") VALUES (". $tz .")". ($xz? (' '. $xz):'') ); $t1['ID']=mysqli_insert_id($_db['link']); return $t1; } function nn($dz,$t1,$jz=false,$hz=false){ global$_config; if(Log::$cy)__log('Model: update record in table '. $dz .' {'); $gz=array(); foreach(e2model__soft_fields_for_table_($dz) as $wz){ if(array_key_exists($wz,$t1)) { $gz[] = '`'. $wz .'`'."='". rn($t1[$wz]) ."'"; } } $uz=array(); if(is_array($jz)) { foreach(e2model__soft_fields_for_table_($dz) as $wz){ if(array_key_exists($wz,$jz)) { $uz[] = '`'. $wz .'`'."='". rn($jz[$wz]) ."'"; } } } if(count($uz)) { $b=implode(" AND ",$uz); } else { if (!array_key_exists('ID',$t1) or !is_numeric($t1['ID'])) { if(Log::$cy)__log('Error: e2_update_record must be called with an ID field in $record when updating single row'); return false; } $b="`ID`=". $t1['ID']; } if(count($gz) > 0){ $iz=$hz? 'LOW_PRIORITY ':''; xn( "UPDATE ". $iz ."`". $_config['db_table_prefix'].$dz ."` ". "SET ". implode(', ',$gz) ." ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")" ); } if(Log::$cy)__log('}'); return true; } function e2model__soft_fields_for_table_($dz){ global$_model; $d=array(); if(array_key_exists($dz,$_model)) { foreach($_model[$dz] as $wz){ if (!in_array($wz[1], array ('key'))) { $d[] = $wz[0]; } } } return $d; } function e2m_install(){ global$_strings,$_superconfig,$_files_written,$_diagnose; if (fn_()!==null)c(); ls(DEFAULT_TEMPLATE); $d=array(); if($_superconfig['disallow_installer']) { die ('Installer disabled by superconfig'); } if(Log::$cy)__log('Installer: not installed, present user with form'); $oz=true; $pz['server'] = @$_COOKIE[b('install_db_server')]; $pz['user_name'] = @$_COOKIE[b('install_db_user_name')]; $pz['passw']=o2(@$_COOKIE[b('install_db_passw')]); $pz['name'] = @$_COOKIE[b('install_db_name')]; if (!@isset ($_diagnose['ok?']))fv(); if (!$_diagnose['ok?']) { if(Log::$cy)__log('Installer: problems, tell user'); $oz=false; } $d=[ 'title' => $_strings['pt--install'], 'heading' => $_strings['pt--install'], 'form-install' => [ 'form-action' => jv('e2s_install'), 'form-check-db-config-action' => jv('e2j_check_db_config'), 'form-list-databases-action' => jv('e2j_list_databases'), 'installation-possible?' => $oz, 'submit-text' => $_strings['fb--begin'], 'retry-href' => jv('e2m_install'), 'retry-text' => $_strings['fb--retry'], 'db-server' => htmlspecialchars(@$pz['server']? $pz['server']:'localhost'), 'db-user' => htmlspecialchars(@$pz['user_name']? $pz['user_name']:'root'), 'db-password' => '', 'db-database' => htmlspecialchars(@$pz['name']), ] ]; return $d; } function fn_(){ static $ck=null; if ($ck===null){ $ck=@unserialize( @file_get_contents(USER_FOLDER.'instance.psa') ) or $ck=null; } return $ck; } function dn($vk){ static $ck=null; $ck=fn_(); $ck['version']=$vk; if (n3(USER_FOLDER. '/instance.psa',serialize($ck))) { return $ck; } else { die ('Cannot instantiate v'. $vk .': probably permission denied'); } } function e2s_instantiate($parameters){ global$_strings; if (fn_()!==null){ die ('Remove the file "'. USER_FOLDER .'instance.psa" first'); } else { if(is_numeric($parameters['version'])) { if (dn($parameters['version'])) { mv($_strings['gs--instantiated-version'] .' v'. $parameters['version'],E2E_MESSAGE); c(jv('e2m_frontpage', array ('page' => 1))); } } } die ('Could not create instance of engine'); } function e2_install($lv){ global$_folders_written,$_model,$_strings,$_config,$settings; if (fn_()!==null){ throw new AeInstallAlreadyInstalledException('Instance already created'); } if($_config['log_installs']) { Log::$cy=true; if(Log::$cy)bv('install-$'); } if(Log::$cy)__log('Installer: force directories'); foreach($_folders_written as $bk){ @j($bk); } if(Log::$cy)__log('Installer: write password hash'); if (!@n3(USER_FOLDER.'password-hash.psa',serialize(sha1($lv['password'])))) { throw new AePasswordHashNotSavedException; } if(array_key_exists('plain_password',$lv['db_params'])) { $lv['db_params']['passw']=i2($lv['db_params']['plain_password']); unset ($lv['db_params']['plain_password']); } $settings['db']=$lv['db_params']; $settings['template']=DEFAULT_TEMPLATE; $settings['language']=DEFAULT_LANGUAGE; kn('check database during installation',$lv['db_params']); $o3=e2_model_data_check($lv['db_params']['name']); $yk=false; if ($o3['occupied']) { if ($o3['migrateable'] and $lv['allow_migration']) { $yk=true; if(Log::$cy)__log('Installer: data exists and migrateable'); } else { if(Log::$cy)__log('Installer: incomplete data in the database'); throw new AeInstallDatabaseOccupiedException('Database already has some data'); } } if ($yk){ if(Log::$cy)__log('Installer: no need to create tables, will migrate'); try { qn(); } catch (AeMySQLException $e){ kv($e,'Could not migrate'); mv($_strings['er--double-check-db-params']); } } else { if(Log::$cy)__log('Installer: create tables'); foreach(array_keys($_model) as $dz){ bn($dz); } } if(Log::$cy)__log('Installer: write settings'); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { throw new AeSettingsNotSavedException; } e2_drop_all_kinds_of_cache(); if(Log::$cy)__log('Installer: search index'); $p3=ra(); try { $p3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$cy)__log('Installer: Rose not available'); } qa(); if(Log::$cy)__log('Installer: instantiate'); dn(E2_VERSION); if(Log::$cy)__log('Installer: complete'); } function sn(){ $u3['server']=$u3['user_name'] = $u3['passw']=$u3['name']=''; if(array_key_exists('db-server',$_POST)) $u3['server']=$_POST['db-server']; if(array_key_exists('db-user',$_POST)) $u3['user_name']=$_POST['db-user']; if(array_key_exists('db-password',$_POST))$u3['passw']=$_POST['db-password']; if(array_key_exists('db-database',$_POST))$u3['name']=$_POST['db-database']; return $u3; } function e2s_install(){ global$_strings,$_config,$_db; if (fn_()!==null)c(); $u3=sn(); foreach ($u3 as $t => $xf){ y('install_db_'. $t,$xf); } if (!array_key_exists('password',$_POST) or trim($_POST['password']) == ''){ mv($_strings['er--no-password-entered'],E2E_USER_ERROR); c(jv('e2m_install')); } $nk=trim($_POST['password']); @session_start(); $i3=false; try { e2_install([ 'allow_migration' => true, 'password' => $nk, 'db_params' => $u3, ]); $i3=true; } catch (AeMySQLCannotConnectException $e){ mv( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error() .' ('. mysqli_connect_errno() .')' ); } catch (AeMySQLTooOldException $e){ mv(e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv($_strings['er--cannot-find-db'] .' '. $u3['name']); } catch (AeInstallDatabaseOccupiedException $e){ mv($_strings['er--db-data-incomplete-install']); } catch (AeNotSavedException $e){ mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); } catch (AeInstallException $e){ } if (!$i3)c(jv('e2m_install')); $mk['sessions'] = [[ 'stamp' => time(), 'remote_ip' => l2(), 'key_hash' => k2(true), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]]; if (!r2($mk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } p3(jv('e2s_bsi_step', array ())); c(); } function an(){ global $v,$c,$_superconfig,$_config; $ck=fn_(); if (fn_()!==null){ if(E2_VERSION < $ck ['version']) { if (@$_config['dev_ignore_version_mismatch']) return; if(Log::$cy)__log('Installer: cannot downdate'); header('HTTP/1.1 503 Service Unavailable'); die ('E2 does not support automatic downgrade.'); } elseif(E2_VERSION > $ck ['version']) { if(Log::$cy)__log('Installer: need to update'); header('Location: http://'. $v.$c .'/perform_update/'); header('Location: '. jv('e2s_update_perform')); die; } else { return; } } if(Log::$cy)__log('Installer: not installed {'); if ((strpos($_SERVER['SERVER_SOFTWARE'],'Apache')===0)) { if(Log::$cy)__log('Installer: running on Apache'); $fk=DEFAULTS_FOLDER.'default.htaccess'; $dk=false; if (!is_file($fk)) { echo 'File not found: '.$fk. '. Please use the full E2 installation package.'; die; } if(is_file('.htaccess')) { if(Log::$cy)__log('Installer: there is a .htaccess file in the installation directory'); $sk=file_get_contents($fk); $ak=file_get_contents('.htaccess'); if ($ak!=$sk){ $dk=true; $qk=$lk='.htaccess.old'; $zk=1; while (is_file($lk)) { $lk=$qk .'.'. $zk ++; } if(Log::$cy)__log('Installer: existing .htaccess wrong, backing up as <'. $lk .'>'); if (!@rename('.htaccess',$lk)) { if(Log::$cy)__log('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $dk=true; } if ($dk){ if(Log::$cy)__log('Installer: writing a correct .htaccess file'); if (!@copy($fk,'.htaccess')) { if(Log::$cy)__log('Installer: fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } } } if($_superconfig['disallow_installer']) { if(Log::$cy)__log('Installer: disallowed in superconfig'); xv(new AeNotAndCannotBeInstalledException); } else { $kk=jv('e2m_install'); if(Log::$cy)__log('Installer: will need to install, going to '. $kk); if(Log::$cy)__log('}'); c($kk); } } function e2j_check_db_config(){ global$_db,$_strings; $u3=sn(); $zv=[ 'success' => true, 'data' => [ 'message' => '', 'db-responding' => false, 'db-connected' => false, 'db-found' => false, 'db-compatible' => false, 'db-occupied' => false, 'db-migrateable' => false, ] ]; try { $u3['passw']=i2($u3['passw']); kn('connect to check DB config (try 1)',$u3); } catch (AeMySQLAccessDeniedException $e){ $zv['data']['db-responding']=true; $zv=json_encode($zv); die ($zv); } catch (AeMySQLCannotConnectException $e){ $zv['data']['message']='no-connect'; $zv=json_encode($zv); die ($zv); } catch (AeMySQLTooOldException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['message']=e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ]); $zv=json_encode($zv); die ($zv); } catch (AeMySQLNotFoundException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; if ($u3['name']) { $zv=json_encode($zv); die ($zv); } else { $mz=py( $u3['server'],$u3['user_name'],$u3['passw'] ); if(count($mz) > 0){ $zv['data']['db-found']=true; $u3['name']=$mz[0]; } else { $zv=json_encode($zv); die ($zv); } } } $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['db-found']=true; $zv['data']['db-compatible']=true; try { kn('connect to check DB config (try 2)',$u3); } catch (AeMySQLException $e){ $zv=json_encode($zv); die ($zv); } $zv['data']['db-good']=true; $o3=e2_model_data_check($u3['name']); if ($o3['occupied']) { if ($o3['migrateable']) { $zv['data']['message']=$_strings['gs--data-exists']; } else { $zv['data']['db-good']=false; $zv['data']['message']=$_strings['er--db-data-incomplete-install']; } } $zv=json_encode($zv); die ($zv); } function e2j_list_databases(){ $u3=sn(); $mz=py( $u3['server'],$u3['user_name'],$u3['passw'] ); $zv=[ 'success' => true, 'data' => [ 'databases-list' => $mz, ] ]; $zv=json_encode($zv); die ($zv); } function qn(){ global $_db, $_config, $_model, $_model_indexes, $_model_indexes_create_sql, $_model_indexes_check_sql; $sz=$_config['db_table_prefix']; xn('SET sql_quote_show_create=1'); ln( $sz, ($_db['charset']==='utf8mb4')?'utf8mb4':'utf8' ); if(Log::$cy)__log('Get existing table information {'); $xk=false; foreach(array_keys($_model) as $dz){ bn($dz); try { xn("SHOW CREATE TABLE `". $sz.$dz ."`"); $ek[$dz]=en(); $ek[$dz]=$ek[$dz][0]['Create Table']; } catch (AeMySQLException $e){ kv($e); die ('Database table "'. $sz .$dz .'" not accessible during migration. Check your database availability'); } xn("SHOW INDEX FROM `". $sz.$dz ."`"); $rk=en(); $tk=[]; $jk=[]; foreach ($rk as $lz){ $lz=$lz['Key_name']; if ( preg_match('/\_[0-9]+$/',$lz) or ($dz==='Actions' and $lz==='EntityID') or ($dz==='GIPsSessions' and $lz==='GIP') or ($dz==='Notes' and $lz==='Title') ){ $tk[] = $lz; $jk[] = 'DROP INDEX `'. $lz. '`'; } if ($dz==='Actions' and $lz==='EntityID'){ $xk=true; } if ($dz==='Actions' and $lz==='EntityIDStamp'){ $xk=true; } } if ($dz==='Actions' and !$xk){ zn($sz); } if(count($jk)) { $jk=implode(', ',array_unique($jk)); $tk=implode(', ',array_unique($tk)); if(Log::$cy)__log( 'Drop erroneous index "'. $tk .'" on "'. $sz.$dz .'"' ); xn( "ALTER TABLE `". $sz.$dz ."` ". $jk ); } if (!strstr($ek[$dz],'InnoDB')) { xn( "ALTER TABLE `". $sz.$dz ."` ". "ENGINE = InnoDB" ); } if (!strstr($ek[$dz],'`SubsetID`')) { xn( "ALTER TABLE `". $sz.$dz."` ". "ADD `SubsetID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); } if($_config['db_table_subset'] > 0){ xn( "UPDATE `". $sz.$dz ."` ". "SET `SubsetID` = ". $_config['db_table_subset'] ." ". "WHERE `SubsetID` = 0" ); } else { die ('db_table_subset must be greater than 0'); } } if(Log::$cy)__log('}'); if (!strstr($ek['Actions'],'`ReadCount`')) { xn( "ALTER TABLE `". $sz."Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if(strstr($ek['Actions'],'`HitCount`')) { xn( "ALTER TABLE `". $sz."Actions` ". "DROP `HitCount`" ); xn( "DELETE FROM `". $sz."Actions` ". "WHERE `ReadCount` = 0" ); } if (!strstr($ek['Aliases'],'`EntityType`')) { xn( "ALTER TABLE `". $sz."Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } xn( "UPDATE `". $sz."Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); xn( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `ID` IN (". "SELECT `ID` FROM (". "SELECT a.`ID` FROM `". $_config['db_table_prefix']."Aliases` a ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."Keywords` e ". "ON a.`EntityID` = e.`ID` ". "WHERE a.`EntityType` = 't' ". "AND e.`ID` IS NULL". ") AS temp". ")", 'clean up “leaked” tag aliases' ); if (!stristr($ek['Comments'],'`Text` MEDIUMTEXT')) { xn( "ALTER TABLE `". $sz."Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!stristr($ek['Comments'],'`Reply` MEDIUMTEXT')) { xn( "ALTER TABLE `". $sz."Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); } if (!stristr($ek['Comments'],'`IP` VARCHAR(39)')) { xn( "ALTER TABLE `". $sz."Comments` ". "CHANGE `IP` `IP` VARCHAR(39)  DEFAULT '' NOT NULL" ); } if (!strstr($ek['Comments'],'`IsGIPUsed`')) { xn( "ALTER TABLE `". $sz."Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr($ek['Comments'],'`GIP`')) { xn( "ALTER TABLE `". $sz."Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr($ek['Comments'],'`GIPAuthorID`')) { xn( "ALTER TABLE `". $sz."Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if(strstr($ek['Comments'],'`SocialType`')) { xn( "ALTER TABLE `". $sz."Comments` ". "DROP `SocialType`" ); } if(strstr($ek['Comments'],'`SocialID`')) { xn( "ALTER TABLE `". $sz."Comments` ". "DROP `SocialID`" ); } if (!strstr($ek['GIPsSessions'],'`AuthorEmail`')) { xn( "ALTER TABLE `". $sz."GIPsSessions` ". "ADD `AuthorEmail` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorName`" ); } if (!strstr($ek['GIPsSessions'],'`AuthorProfileLink`')) { xn( "ALTER TABLE `". $sz."GIPsSessions` ". "ADD `AuthorProfileLink` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorEmail`" ); } if(strstr($ek['Keywords'],'`ParentKeywordID`')) { xn( "ALTER TABLE `". $sz."Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr($ek['Keywords'],'`OriginalAlias`')) { xn( "ALTER TABLE `". $sz."Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } if (!strstr($ek['Keywords'],'`PageTitle`')) { xn( "ALTER TABLE `". $sz."Keywords` ". "ADD `PageTitle` VARCHAR(255) DEFAULT '' NOT NULL AFTER `OriginalAlias`" ); } if (!stristr($ek['Keywords'],'`Description` MEDIUMTEXT')) { xn( "ALTER TABLE `". $sz."Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); } if (!strstr($ek['Keywords'],'`Summary`')) { xn( "ALTER TABLE `". $sz."Keywords` ". "ADD `Summary` MEDIUMTEXT AFTER `Description`" ); } if (!strstr($ek['Keywords'],'`Uploads`')) { xn( "ALTER TABLE `". $sz."Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Summary`" ); } if (!stristr($ek['Keywords'],'`Uploads` MEDIUMTEXT')) { xn( "ALTER TABLE `". $sz."Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr($ek['Keywords'],'`IsVisible`')) { xn( "ALTER TABLE `". $sz."Keywords` ". "ADD `IsVisible` TINYINT(1) DEFAULT '1' NOT NULL AFTER `Uploads`" ); } xn( "UPDATE `". $sz."Keywords` SET `Summary` = '' WHERE `Summary` IS NULL" ); xn( "UPDATE `". $sz."Keywords` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); if (!strstr($ek['Notes'],'`FormatterID`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL AFTER `Text`" ); } if (!strstr($ek['Notes'],"DEFAULT 'calliope'")) { xn( "ALTER TABLE `". $sz."Notes` ". "CHANGE `FormatterID` `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL" ); } if (!strstr($ek['Notes'],'`OriginalAlias`')) { xn( "ALTER TABLE `". $sz."Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if(strstr($ek['Notes'],'`IP`')) { xn( "ALTER TABLE `". $sz."Notes` ". "DROP `IP`" ); } if (!stristr($ek['Notes'],'`Text` MEDIUMTEXT')) { xn( "ALTER TABLE `". $sz."Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!strstr($ek['Notes'],'`Summary`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `Summary` MEDIUMTEXT AFTER `Text`" ); } if (!strstr($ek['Notes'],'`IsIndexed`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr($ek['Notes'],'`Uploads`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } if (!stristr($ek['Notes'],'`Uploads` MEDIUMTEXT')) { xn( "ALTER TABLE `". $sz."Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr($ek['Notes'],'`IsExternal`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr($ek['Notes'],'`SourceID`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr($ek['Notes'],'`SourceNoteID`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr($ek['Notes'],'`SourceNoteURL`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr($ek['Notes'],'`SourceNoteData`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr($ek['Notes'],'`SourceNoteJSONURL`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if(strstr($ek['Notes'],'`SourceMainImageURL`')) { xn( "ALTER TABLE `". $sz."Notes` ". "DROP `SourceMainImageURL`" ); } if(strstr($ek['Notes'],'`IsIssue`')) { xn( "ALTER TABLE `". $sz."Notes` ". "DROP `IsIssue`" ); } if (!strstr($ek['Notes'],'`ReadCount`')) { xn( "ALTER TABLE `". $sz."Notes` ". "ADD `ReadCount` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); xn( "UPDATE `". $sz."Notes` n JOIN (". "SELECT `EntityID`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM  `". $sz."Actions` ". "GROUP BY `EntityID`". ") a ON n.`ID` = a.`EntityID` ". "SET `ReadCount` = `AggregateReadCount`" ); } xn( "UPDATE `". $sz."Notes` SET `Summary` = '' WHERE `Summary` IS NULL" ); xn( "UPDATE `". $sz."Notes` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); xn( "UPDATE `". $sz."Notes` SET `SourceNoteData` = '' WHERE `SourceNoteData` IS NULL" ); if (!strstr($ek['Sources'],'`TrueID`')) { xn( "ALTER TABLE `". $sz."Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); xn( "UPDATE `". $sz."Sources` ". "SET `TrueID` = `ID`" ); } if(Log::$cy)__log('Ensure indexes {'); if(strstr($ek['Notes'],'`Title` (`Title`(191))')) { if(Log::$cy)__log('Drop erroneous index on "'. $sz .'Notes.Title"'); xn( "ALTER TABLE `". $sz ."Notes` ". "DROP INDEX `Title`" ); } foreach(array_keys($_model) as $dz){ foreach($_model_indexes[$dz] as $lz){ list ($type,$az)=$lz; $hk=implode('',$az); $gk=$_model_indexes_check_sql[$type].' `'. $hk .'` (`'. implode('`,`',$az) .'`)'; $wk=$_model_indexes_create_sql[$type].' `'. $hk .'` (`'. implode('`, `',$az) .'`)'; if (!strstr($ek[$dz],$gk)) { if(Log::$cy)__log( 'Table "'. $sz.$dz .'" is missing "'. $_model_indexes_check_sql[$type] .'" on columns "'. implode('", "',$az) .'"' ); xn( "ALTER TABLE `". $sz.$dz ."` ". "ADD ". $wk ); } } } if(Log::$cy)__log('}'); return true; } function ln($sz,$uk){ global$_model,$_db; if (!in_array($uk, ['utf8','utf8mb4'])) return; if(Log::$cy)__log('Ensure encoding '. $uk .' on all tables {'); $ik=ea(); foreach ($ik as $t => $xf){ $ik[$t]=SEARCH_EXTRA_PREFIX. $xf; } $ok=array_merge( array_keys($_model), array_values($ik) ); foreach ($ok as $i4){ if(Log::$cy)__log('Migrate: Check table '. $i4); $pk=vn($i4,$sz); if (!$pk) continue; $c7=$pk['Collation']; if ($uk==='utf8' and ($c7=='utf8_general_ci')) continue; if ($uk==='utf8mb4' and stripos($c7,'utf8mb4')===0) continue; if(Log::$cy)__log('Migrate: Drop indexes of table '. $i4); xn( "ALTER TABLE `". $sz.$i4 ."` ". "DROP INDEX" ); if(Log::$cy)__log('Migrate: Convert table '. $i4. ' to '. $uk); xn( "ALTER TABLE `". $sz.$i4 ."` ". "CONVERT TO CHARACTER SET ". $uk. (($uk==='utf8')? " COLLATE utf8_general_ci":"") ); } if(Log::$cy)__log('}'); } function zn($sz){ if(Log::$cy)__log( 'Table "'. $sz .'Actions" is missing necessary UNIQUE index, must rearrange {' ); xn( "CREATE TABLE `". $sz ."Actions_Fixed` ". "LIKE `". $sz ."Actions`" ); xn( "ALTER TABLE `". $sz ."Actions_Fixed` ". "ADD UNIQUE INDEX(`EntityID`, `Stamp`)" ); xn( "INSERT INTO `". $sz ."Actions_Fixed` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) ". "SELECT 0, `EntityID`, `Stamp`, `AggregateReadCount` FROM (". "SELECT `EntityID`, `Stamp`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM `". $sz ."Actions` ". "GROUP BY `EntityID`, `Stamp`". ") `". $sz ."Actions_Fixed_AliasRequiredForNoReason`" ); xn( "RENAME TABLE `". $sz ."Actions` TO `". $sz ."Actions_Corrupt`" ); xn( "RENAME TABLE `". $sz ."Actions_Fixed` TO `". $sz ."Actions`" ); xn( "DROP TABLE `". $sz ."Actions_Corrupt`" ); if(Log::$cy)__log('}'); } function e2s_update_perform(){ global$_model,$settings,$_config,$_diagnose; if(1){ $v7=ini_get('max_execution_time')+5; $b7=@unserialize(file_get_contents(USER_FOLDER.'updating.psa')); if (!is_array($b7))$b7=[]; if ( isset ($b7['lock']) and $b7['lock'] >= time()-$v7 ){ throw new AeUpdateAlreadyInProcess('Update already in process'); } $b7['lock']=time(); if (!@n3(USER_FOLDER.'updating.psa',serialize($b7))) { throw new AeUpdateCannotLock('Update can’t get a new lock'); } } $ck=fn_(); $g=max((int) ($ck['version']), 2285); if ($ck['version']==E2_VERSION)v(); if($_config['log_updates']) { Log::$cy=true; if(Log::$cy)bv('update-$'); } if($_config['backup_before_update']) { if(Log::$cy)__log('Backup before update {'); if (!gn()) { die ('Could not make backup before update. Try again?'); } if(Log::$cy)__log('}'); } if(Log::$cy)__log('Update from v'. $g .' to v'. E2_VERSION.' {'); if ($g < 2587){ r('caches/*'); rmdir('caches'); } if ($g < 2691){ $settings=e2_utf8_version_of_array_($settings); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); qv(); } } if ($g < 2921){ $settings['template']='plain'; } if ($g < 3354){ @rename('pictures/userpics/',AVATARS_FOLDER); @unlink(USER_FOLDER. 'password-reset.txt'); } if ($g < 3496){ $settings['appearance']['respond_to_dark_mode']=true; } @unlink(USER_FOLDER. 'last-update.psa'); @unlink(CACHES_FOLDER.'index.xml'); @j(CACHES_FOLDER); @j(BACKUP_FOLDER); @j(MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'remote/'); @j(MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER .'remote/'); @j(MEDIA_ROOT_FOLDER.VIDEO_FOLDER); if (@$settings['template']=='')$settings['template']=DEFAULT_TEMPLATE; if (isset ($settings['appearance']['hot_frontpage'])) { unset($settings['appearance']['hot_frontpage']); } if (!isset ($settings['blog_subtitle'])) { if (isset ($settings['description'])) { $settings['blog_subtitle']=$settings['description']; unset($settings['description']); } } if (!isset ($settings['blog_title'])) { if (isset ($settings['site_title'])) { $settings['blog_title']=$settings['site_title']; unset($settings['site_title']); } } if (!isset ($settings['author_email'])) { if (isset ($settings['user']['email'])) { $settings['author_email']=$settings['user']['email']; unset($settings['user']); } } if (isset ($settings['db']['table_prefix'])) { if($settings['db']['table_prefix'] != @$_config['db_table_prefix']) { die ('You’ve been using a database with a table prefix “'. $settings['db']['table_prefix'] .'”. Now this should be set in the configuration. Please add the following line to the file user/config.php:<br /><br />$_config[\'db_table_prefix\'] = \''. $settings['db']['table_prefix'] .'\';<br /><br />Then refresh this page.'); } else { unset($settings['db']['table_prefix']); } } if (isset ($settings['comments']['on'])) { if (!$settings['comments']['on']) { try { xn( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `IsCommentable`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } catch (AeMySQLException $e){} } $settings['comments']['default_on'] = (bool)$settings['comments']['on']; unset($settings['comments']['on']); } if (isset ($settings['v3223_rss_permalinks_before_stamp'])) { unset($settings['v3223_rss_permalinks_before_stamp']); } if ( is_file(USER_FOLDER.'settings.json') and is_file(USER_FOLDER.'settings.psa') ) { @unlink(USER_FOLDER.'settings.psa'); } if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); } e2_drop_all_kinds_of_cache(); qn(); if ($g < 3601){ ha(); $p3=ra(); try { $p3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$cy)__log('Rose not available'); } qa(); } $_diagnose['need?']=true; y('diagnose','1'); $ck=dn(E2_VERSION); if(Log::$cy)__log('}'); @unlink(USER_FOLDER.'updating.psa'); if (x2()) { mv(e2l_get_string('gs--updated-successfully', array ( 'from' => 'v'. $g, 'to' => 'v'. $ck['version'], )), E2E_MESSAGE); } c(); } define('E2_MYSQL_CONNECT_TIMEOUT',5); function kn($y7='',$u3=null){ static $n7=false; global$settings,$_db,$yz,$_config; if ($n7) return; if ($u3===null)$u3=$settings['db']; $m7=mysqli_init(); $m7 -> options(MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); if($_config['dev_chaos'] and !rand(0, (1/$_config['dev_chaos']) - 1)) { throw new AeMySQLCannotConnectException('Could not '. $y7 ."\n\nChaos in e2_mysql_ensure"); } $f7=@mysqli_real_connect( $m7, 'p:'. $u3['server'], $u3['user_name'], o2($u3['passw']) ); if (!$f7){ $iq=mysqli_connect_errno(); if ($iq==1045){ $f7=@mysqli_real_connect( $m7, 'p:'. $u3['server'], $u3['user_name'], $u3['passw'] ); if ($f7){ $u3['passw']=i2($u3['passw']); $settings['db']=$u3; if(Log::$cy)__log('Storing encrypted password'); @n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE)); } else { throw new AeMySQLAccessDeniedException('Could not '. $y7); } } else { throw new AeMySQLCannotConnectException('Could not '. $y7); } } $_db['version']=mysqli_get_server_info($m7); if(version_compare($_db['version'],E2_MINIMUM_MYSQL,'<')) { throw new AeMySQLTooOldException('Could not '. $y7); } if (!@mysqli_select_db($m7,$u3['name'])) { throw new AeMySQLNotFoundException('Could not '. $y7); } $_db['link']=$m7; $_db['charset']=version_compare($_db['version'],'5.5.3','>=')?'utf8mb4':'utf8'; $bf='SET NAMES '. $_db['charset']; mysqli_query($m7,$bf); @$yz ++; if(Log::$cy)__log('DB ['. $yz .']: '. $bf); $n7=true; } function xn($bf,$y7='run some query'){ global $yz,$_db,$_strings,$_config; kn($y7); if($_config['dev_chaos'] and !rand(0, (1/$_config['dev_chaos']) - 1)) { throw new AeMySQLQueryException('Could not '. $y7 ."\n\nChaos in e2_mysql_query"); } @$yz ++; if(Log::$cy) if ($y7)__log('Will '. $y7); if(Log::$cy)__log('DB ['. $yz .']: '. $bf); $_db['result'] = @mysqli_query($_db['link'],$bf); if($_config['backup_tail']) { if ( stripos($bf,"SELECT")!==0 and stripos($bf,"SHOW")!==0 ){ $fb=BACKUP_FOLDER .'backup-tail.sql'; @file_put_contents($fb,$bf .";\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod($fb,E2_NEW_FILES_RIGHTS); } } if (!$_db['result']) { throw new AeMySQLQueryException('Could not '. $y7 ."\n\nMySQL says:\n". mysqli_error($_db['link'])); } } function en($type=MYSQLI_ASSOC){ global$_db; $d=array(); while ($nv=@mysqli_fetch_array($_db['result'],$type)) { foreach ($nv as $r => $d7){ if(is_string($d7)) { $nv[$r]=$d7; } } $d[] = $nv; } return $d; } function rn($x){ global$_db; kn('escape string'); return mysqli_real_escape_string($_db['link'],$x); } function tn(){ global$_config; $ua=array_keys(jn()); if(Log::$cy)__log('Backup: Found '. count($ua) .' backups'); if(count($ua)) { $s7=time()-$ua[0]; $a7=($s7 >= $_config['backup_rebase_interval']); if(Log::$cy)__log('Backup: '. $s7 .' seconds since last backup'); } else { $a7=true; } if ($a7){ if(Log::$cy)__log('Backup: Will rebuild backup'); p3(jv('e2s_dump', []), true); } } function jn(){ $ua=[]; foreach(glob(BACKUP_FOLDER. '*.sql') as $fy){ if(preg_match('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is',basename($fy),$y3)) { list (, $hb,$jb,$tb,$v4,$r,$c4)=$y3; $m4=gmmktime($v4,$r,$c4,$jb,$tb,$hb); $ua[$m4]=$fy; } } krsort($ua); return $ua; } function hn(){ $ua=jn(); if(count($ua) > 3){ $l7=-1; $z7=array (SECONDS_IN_A_MINUTE,SECONDS_IN_AN_HOUR,SECONDS_IN_A_DAY, -1); $r=0; foreach ($ua as $m4 => $fy){ if ($l7 == -1){ $l7=$m4; } elseif ($z7[$r] == -1){ @unlink($fy); } else { if ($l7-$m4 < $z7[$r]) { @unlink($fy); } else { $r ++; $l7=$m4; } } } } else { } return; } function gn(){ global$_model,$_db,$_config; try { kn('make backup'); if($_db['link']) { $k7=[]; foreach(array_keys($_model) as $dz){ $k7[] = $_config['db_table_prefix'].$dz; } $t4=time(); $fb=BACKUP_FOLDER .'backup-'.gmdate('Y-m-d-\a\t-H-i-s',$t4).'.sql'; e2_backup($_db['link'],$k7,$fb); @unlink(BACKUP_FOLDER .'backup-tail.sql'); hn(); return true; } } catch (AeMySQLException $e){ kv($e,'Could not do backup'); return false; } } function e2s_dump(){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } if (gn())mv('Backed up',E2E_MESSAGE); c(jv('e2m_underhood')); } define('ALIAS_MAX_LENGTH',64); function wn($x7=false){ global$_config; static $m2=null; if ($x7){ if(Log::$cy)__log('Reset aliasmap'); @unlink(CACHE_FILENAME_ALIASMAP); $m2=null; return; } if(is_array($m2)) return $m2; if(CACHE_ALIASMAP and is_file(CACHE_FILENAME_ALIASMAP)) { $m2=@unserialize(file_get_contents(CACHE_FILENAME_ALIASMAP)); } if(is_array($m2)) return $m2; if(Log::$cy)__log('Build aliasmap {'); $m2=[]; xn( "SELECT `EntityType`, `EntityID`, `Alias` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Stamp` IN (". "SELECT MAX(`Stamp`) `MaxStamp` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "GROUP BY `EntityType`, `EntityID`". ")", 'get all active aliases' ); foreach (en() as $e7){ $f2=$e7['EntityType'].$e7['EntityID']; $m2[$f2]=$e7['Alias']; } xn( "SELECT `ID`, `Stamp`, `Offset`, `IsDST`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". "ORDER BY `Stamp`", 'get all notes to cache y/d/m/n urls' ); $r7=0; $t7=false; foreach (en() as $n2){ $f2='n'. $n2['ID']; $j7=ky( 'Y/m/d',$n2['Stamp'],dy($n2) ); if ($j7!==$t7)$r7=0; $r7 ++; $h7=$j7 .'/'. $r7; if (empty ($m2[$f2])) { $m2[$f2]=$h7; } else { if ((string)$n2['OriginalAlias']===''){ $m2[$f2.'-ymdn']=$h7; } } $t7=$j7; } xn( "SELECT `ID`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'get original active aliases for tags' ); foreach (en() as $q2){ $f2='t'. $q2['ID']; if (empty ($m2[$f2])) { $m2[$f2]=$q2['OriginalAlias']; } } if(CACHE_ALIASMAP)n3(CACHE_FILENAME_ALIASMAP,serialize($m2)); if(Log::$cy)__log('}'); return $m2; } function e2ali__alias_from_title_($g7){ global$_config; $w7=$g7; if(array_key_exists('autoreplace_for_aliases',$_config)) { $w7=strtr( $w7, $_config['autoreplace_for_aliases'] ); } $w7=m($w7); $w7=str_replace('\'','',$w7); $w7=str_replace('’','',$w7); $w7=str_replace(chr(146),'',$w7); $u7=''; for ($r=0; $r < strlen($w7); ++ $r){ if ( (ord($w7[$r]) >= 48 and ord($w7[$r]) <= 57) or (ord($w7[$r]) >= 65 and ord($w7[$r]) <= 90) or (ord($w7[$r]) >= 97 and ord($w7[$r]) <= 122) or 0 ){ $u7.=$w7[$r]; } else { $u7.='-'; } } $u7=preg_replace('/\-+/','-',$u7); $u7=trim($u7,'-'); $u7=strtolower($u7); if ($u7=='-')$u7=''; $u7=substr($u7,0,ALIAS_MAX_LENGTH); return $u7; } function in($i7){ global$_config; if ((string)$i7==='') return false; xn( "SELECT * FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Alias` = '". $i7 ."' ". "ORDER BY `Stamp` LIMIT 1", 'get alias record for alias "'. $i7 .'"' ); $q1=en(); if(count($q1)==1){ return $q1[0]; } else { return false; } } function on($i7){ global$_config; if ((string)$i7==='') return false; if(Log::$cy)__log('Get entity type and id from alias "'. $i7 .'"'); $o7=@array_flip(wn()); $f2=$o7[$i7]; if ($f2[0]=='n' or $f2[0]=='t'){ $vv=[ 'type' => $f2[0], 'id' => (int)substr($f2,1) ]; return $vv; } $e7=in($i7); if (!$e7) return false; $vv=[ 'type' => $e7['EntityType'], 'id' => (int)$e7['EntityID'], ]; if(Log::$cy)__log('Got entity type "'. $vv['type'] .'" and id "'. $vv['id'] .'"'); return $vv; } function pn($py,$pa,$p7,$g7,$cx=1){ if(Log::$cy)__log('Aliases: "'. $py .'" available alias for source "'. $g7. '"'); if ($py=='set' and (!$pa or !$p7)) return false; $u7=e2ali__alias_from_title_($g7); if ($g7!=='' and $u7===''){ $u7=(string)$cx; } elseif ($cx > 1){ $vx='-'. $cx; $u7=substr($u7,0,ALIAS_MAX_LENGTH-strlen($vx)) . $vx; } if ($e7=in($u7)) { $bx=$e7['EntityType']; $yx=$e7['EntityID']; if ( (($p7 and $yx==$p7) and ($pa and $bx==$pa)) or $u7!=wn() [$bx.$yx] ) { if ($py=='find'){ return $u7; } if ($py=='set'){ if(Log::$cy)__log('Aliases: update alias timestamp'); nn('Aliases', array ( 'ID' => $e7['ID'], 'EntityType' => $pa, 'EntityID' => $p7, 'Alias' => $u7, 'Stamp' => time(), )); wn(true); return $u7; } } else { return pn($py,$pa,$p7,$g7,$cx+1); } } else { if ($pa and $p7 and $u7==''){ if(preg_match( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', wn() [$pa.$p7] )) { if(Log::$cy)__log('Aliases: d/m/y/n was already used for this entity'); return ''; } } if(Log::$cy)__log('Aliases: it’s an empty alias, and it was not being used for this entity'); if ( $pa=='t' and $nx=sf($u7) ) { if ($nx['ID']!=$p7){ return pn($py,$pa,$p7,$g7,$cx+1); } } if ($py=='find'){ return $u7; } if ($py=='set'){ yn('Aliases', array ( 'EntityType' => $pa, 'EntityID' => $p7, 'Alias' => $u7, 'Stamp' => time(), )); wn(true); return $u7; } } return ''; } class AeLayoutDiversityManager { private static $layoutsUseIndexes=[]; private static $layoutsUseIndex=1; private static $layoutsUseMaxIndex=1; public static function addLayoutsUsed($mx){ self::$layoutsUseIndexes[$mx]=self::$layoutsUseIndex; self::$layoutsUseIndex ++; self::$layoutsUseMaxIndex ++; } public static function hasLayoutBeenUsed($mx){ if (isset (self::$layoutsUseIndexes[$mx])) return true; } public static function getLayoutsUseRecency($mx){ if (isset (self::$layoutsUseIndexes[$mx])) { return self::$layoutsUseIndexes[$mx]-self::$layoutsUseMaxIndex; } } } class AeNoteReadCountsProvider { private static $dataByNoteID=[]; private static $hasRun=false; private static $sql=null; public static function setSQLRequestTemplateToMapIDsToReadCounts($sql){ self::$sql=$sql; } public static function requestDeferredReadCountForNoteID($noteID){ self::$dataByNoteID[$noteID]=true; } public static function getReadCountForNoteID($noteID){ if(self::$sql===null) return false; if (!self::$hasRun)self :: run(); if (empty (self::$dataByNoteID[$noteID])) return false; return self::$dataByNoteID[$noteID]; } private static function run(){ self::$hasRun=true; $fx=[]; foreach(self::$dataByNoteID as $dx => $lv){ $fx[] = "(`ID` = ". $dx.")"; } if (!count($fx)) return; $fx=implode(' OR ',$fx); try { xn( self::$sql ." AND (". $fx .")", 'get all requested read counts for notes' ); $ib=en(); foreach ($ib as $vv){ self::$dataByNoteID[$vv['ID']] = $vv['ReadCount']; } } catch (AeMySQLException $e){ kv($e); if(Log::$cy)__log('Could not get requested read counts for notes'); } } } class AePageableNotesView { private $candy; private $parameters; private $pageExists=false; private $isCached=false; private $hasRun=false; private $sql=null; private $sql_count=null; private $highlightedTags=null; private $cacheFilename=null; private $prevPageTitle=null; private $nextPageTitle=null; private $totalNotes=null; private $totalPages=null; private $notesCTree=null; private $pagesCTree=null; private $wantPaging=false; private $wantNewCommentsCount=false; private $wantReadHrefs=false; private $wantPreviewHrefs=false; private $wantControls=false; private $wantHiddenTags=false; private $wantRelatedNotes=false; private $useLocalHrefs=false; private $page=1; private $limit=10; public function __construct($candy,$parameters){ $this->candy=$candy; $this->parameters=$parameters; if (empty ($parameters['page'])) { $this->page=1; } else { $this->page=(int)$parameters['page']; } } public function setSQLCountRequest($sql_count){ if(strpos($sql_count,"SELECT COUNT(*) Total FROM ")!==0){ die ('AePageableNotesView: Count request must start with "SELECT COUNT(*) Total FROM "'); } $this->sql_count=$sql_count; } public function setLimitlessSQLRequest($sql){ if(strstr($sql,"LIMIT")) { die ('AePageableNotesView: Request must not contain "LIMIT"'); } $this->sql=$sql; if($this->sql_count===null){ if(strpos($sql,"SELECT * ")===0){ $this->sql_count="SELECT COUNT(*) Total ". substr($sql,9); } else { die ('AePageableNotesView: setSQLCountRequest () must be used'); } } } public function setPortionSize($limit){ $this->limit=abs((int)$limit); } public function setNextPrevPageTitles($nextPageTitle,$prevPageTitle){ $this->nextPageTitle=$nextPageTitle; $this->prevPageTitle=$prevPageTitle; } public function setHighlightedTags($highlightedTags){ $this->highlightedTags=$highlightedTags; } public function setCacheFilename($cacheFilename){ $this->isCached=true; $this->cacheFilename=$cacheFilename; } public function setWantPaging($wantPaging){ $this->wantPaging=$wantPaging; } public function setWantNewCommentsCount($wantNewCommentsCount){ $this->wantNewCommentsCount=$wantNewCommentsCount; } public function setWantReadHrefs($wantReadHrefs){ $this->wantReadHrefs=$wantReadHrefs; } public function setWantPreviewHrefs($wantPreviewHrefs){ $this->wantPreviewHrefs=$wantPreviewHrefs; } public function setWantControls($wantControls){ $this->wantControls=$wantControls; } public function setWantHiddenTags($wantHiddenTags){ $this->wantHiddenTags=$wantHiddenTags; } public function setWantRelatedNotes($wantRelatedNotes){ $this->wantRelatedNotes=$wantRelatedNotes; } public function setUseLocalHrefs($useLocalHrefs){ $this->useLocalHrefs=$useLocalHrefs; } public function isExistingPage(){ if (!$this->hasRun)$this -> run(); return$this->pageExists; } public function isFirstPage(){ return$this->page===1; } public function isFirstPageOfEmptyView(){ if (!$this->hasRun)$this -> run(); return$this->page===1 and $this->totalPages===0; } public function getTotalNotes(){ if (!$this->hasRun)$this -> run(); return$this->totalNotes; } public function getTotalPages(){ if (!$this->hasRun)$this -> run(); return$this->totalPages; } public function getNotesCTree(){ if (!$this->hasRun)$this -> run(); return$this->notesCTree; } public function getPagesCTree(){ if (!$this->hasRun)$this -> run(); return$this->pagesCTree; } private function prepareCacheableData(){ $this->totalNotes=0; if($this->limit){ $nl=($this->page-1)*$this->limit; $this->sql.=' LIMIT '. $nl .', '. $this->limit; } xn($this->sql_count,'count total notes of "'. $this->candy .'" list'); $sx=en(); $this->totalNotes=$sx ? (int)$sx[0]['Total']:0; xn($this->sql,'get limited full notes "'. $this->candy .'" list'); $q1=en(); $ax=[]; foreach ($q1 as $t => $cl){ $ax[] = $cl['ID']; } $this->notesCTree=[]; foreach ($q1 as $t => $cl){ $noteView=new AeNoteView($cl); $noteView -> setWantNewCommentsCount($this->wantNewCommentsCount); $noteView -> setWantReadHref($this->wantReadHrefs); $noteView -> setWantPreviewHref($this->wantPreviewHrefs); $noteView -> setWantControls($this->wantControls); $noteView -> setWantHiddenTags($this->wantHiddenTags); $noteView -> setWantCommentsLink(true); $noteView -> setWantRelatedNotes($this->wantRelatedNotes); $noteView -> setFilterOutRelatedNoteIDs($ax); $noteView -> setHighlightedTags($this->highlightedTags); $noteView -> setUseLocalHref($this->useLocalHrefs); $this->notesCTree[] = $noteView -> getNoteCTree(); } $this->pagesCTree=[]; if ( $this->limit and $this->totalPages=(int)ceil($this->totalNotes/$this->limit) ) { $this->pagesCTree['timeline?']=true; $this->pagesCTree['count'] = (int)$this->totalPages; $this->pagesCTree['this'] = (int)$this->page; if($this->wantPaging){ $this->pagesCTree['earlier-title']=$this->nextPageTitle; $this->pagesCTree['later-title']=$this->prevPageTitle; $qx=$this->parameters; if($this->page < $this->totalPages){ $qx['page']=$this->page+1; $this->pagesCTree['earlier-href']=jv($this->candy,$qx); } if($this->page > 1){ $qx['page']=$this->page-1; $this->pagesCTree['later-href']=jv($this->candy,$qx); } } } } private function run(){ $this->hasRun=true; if($this->isCached and is_file($this->cacheFilename)) { $lx=@unserialize(file_get_contents($this->cacheFilename)); $this->totalNotes=@$lx['notes_total']; $this->notesCTree=@$lx['notes_ctree']; $this->pagesCTree=@$lx['pages_ctree']; $this->totalPages=$this->pagesCTree['count']; } if ( is_int($this->totalNotes) and is_array($this->notesCTree) and is_array($this->pagesCTree) and is_int($this->totalPages) ) { if(Log::$cy)__log('Retrieved cached CTree'); } else { $this -> prepareCacheableData(); if($this->isCached){ n3($this->cacheFilename,serialize([ 'notes_total' => $this->totalNotes, 'notes_ctree' => $this->notesCTree, 'pages_ctree' => $this->pagesCTree, ])); } } foreach($this->notesCTree as $zx){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID($zx['id']); if (empty ($zx['related']['each'])) continue; foreach ($zx['related']['each'] as $kx){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID($kx['id']); } } $this->pageExists=( $this->totalPages > 0 and $this->page >= 1 and $this->page <= $this->totalPages ); } } class AeArbitraryNotesCollectionView { private $name=''; private $isCached=false; private $hasRun=false; private $sql=null; private $currentURL=null; private $cacheFilename=null; private $cacheExpiresFilename=null; private $cacheable=[]; private $viewExpiration=null; private $notesCTree=null; private $filterOutIDs=[]; public function __construct($name){ $this->name=$name; } public function setSQLRequest($sql){ $this->sql=$sql; } public function setCurrentURL($currentURL){ $this->currentURL=$currentURL; } public function setCacheFilename($cacheFilename){ $this->isCached=true; $this->cacheFilename=$cacheFilename; } public function setCacheExpiresFilename($cacheExpiresFilename){ $this->cacheExpiresFilename=$cacheExpiresFilename; } public function setViewExpiration($viewExpiration){ $this->viewExpiration=$viewExpiration; } public function setFilterOutIDs($filterOutIDs){ $this->filterOutIDs=$filterOutIDs; } public function orderNotesCTreeByVerticality(){ if (!$this->hasRun)$this -> run(); usort($this->notesCTree, function ($xx,$ex){ if (empty ($xx['images'][0]['verticality']))$rx=0; else $rx=$xx['images'][0]['verticality']; if (empty ($ex['images'][0]['verticality']))$tx=0; else $tx=$ex['images'][0]['verticality']; return (int)round(($tx-$rx)*10000); }); } public function getNotesCTree(){ if (!$this->hasRun)$this -> run(); return$this->notesCTree; } private function prepareCacheableData(){ $jx=[ 'notes-records' => function () { $hx=[]; try { xn($this->sql,'get "'. $this->name .'" list'); foreach (en() as $cl){ if (em($cl)==='public'){ $hx[] = $cl; } } } catch (AeMySQLException $e){ kv($e); if(Log::$cy)__log('Could not get list from database'); } return $hx; }, ]; if($this->isCached and is_file($this->cacheFilename)) { $this->cacheable=@unserialize(file_get_contents($this->cacheFilename)) or $this->cacheable=[]; } $gx=true; if (!empty ($this->cacheExpiresFilename)) { if($this->isCached and is_file($this->cacheExpiresFilename)) { $t4=time(); $wx=(int) @file_get_contents($this->cacheExpiresFilename); if(Log::$cy)__log('List expires '. date('r',$wx) .', now '. date('r',$t4)); $gx=($t4 < $wx); } } $ux=false; foreach ($jx as $wz => $ix){ if (!array_key_exists($wz,$this->cacheable) or !$gx){ if(Log::$cy)__log('Build cache: "'. $wz .'"'); $this->cacheable[$wz]=$ix(); $ux=true; } else { if(Log::$cy)__log('Retrieved from cache: "'. $wz .'"'); } } if ($ux){ n3($this->cacheFilename,serialize($this->cacheable)); if($this->cacheExpiresFilename){ @n3($this->cacheExpiresFilename,time()+$this->viewExpiration); } } } private function run(){ $this->hasRun=true; if(Log::$cy)__log('AeArbitraryNotesCollectionView "'. $this->name .'" run {'); if(Log::$cy)__log('Cacheable data {'); $this -> prepareCacheableData(); if(Log::$cy)__log('}'); if(Log::$cy)__log('Uncacheable data {'); $this->notesCTree=[]; foreach($this->cacheable['notes-records'] as $cl){ if(in_array($cl['ID'],$this->filterOutIDs)) continue; $noteView=new AeNoteView($cl); $l2=$noteView -> getNoteCTree(); $l2['current?'] = ($l2['href']==$this->currentURL); $this->notesCTree[] = $l2; AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID($cl['ID']); } if(Log::$cy)__log('}'); if(Log::$cy)__log('}'); } } class AeNoteView { private $noteRecord=[]; private $isCached=false; private $hasRun=false; private $cacheFilename=null; private $noteCTree=null; private $highlightedTags=null; private $cacheable=[]; private $OGImages=[]; private $wantRichText=false; private $wantCommentsLink=false; private $wantNewCommentsCount=false; private $wantReadHref=false; private $wantPreviewHref=false; private $wantControls=false; private $wantHiddenTags=false; private $wantSharingButtons=false; private $wantRelatedNotes=false; private $filterOutRelatedNoteIDs=[]; private $useLocalHref=false; public function __construct($noteRecord){ $this->noteRecord=$noteRecord; if(CACHE_NOTES){ $this->isCached=true; $this->cacheFilename=e2_note_cache_filename_with_id_($noteRecord['ID']); } } public function setHighlightedTags($highlightedTags){ $this->highlightedTags=$highlightedTags; } public function setWantRichText($wantRichText){ $this->wantRichText=$wantRichText; } public function setWantCommentsLink($wantCommentsLink){ $this->wantCommentsLink=$wantCommentsLink; } public function setWantNewCommentsCount($wantNewCommentsCount){ $this->wantNewCommentsCount=$wantNewCommentsCount; } public function setWantReadHref($wantReadHref){ $this->wantReadHref=$wantReadHref; } public function setWantPreviewHref($wantPreviewHref){ $this->wantPreviewHref=$wantPreviewHref; } public function setWantControls($wantControls){ $this->wantControls=$wantControls; } public function setWantHiddenTags($wantHiddenTags){ $this->wantHiddenTags=$wantHiddenTags; } public function setWantSharingButtons($wantSharingButtons){ $this->wantSharingButtons=$wantSharingButtons; } public function setWantRelatedNotes($wantRelatedNotes){ $this->wantRelatedNotes=$wantRelatedNotes; } public function setFilterOutRelatedNoteIDs($filterOutRelatedNoteIDs){ $this->filterOutRelatedNoteIDs=$filterOutRelatedNoteIDs; } public function setUseLocalHref($useLocalHref){ $this->useLocalHref=$useLocalHref; } public function getNoteCTree(){ if (!$this->hasRun)$this -> run(); return$this->noteCTree; } private function prepareCacheableData(){ $jx=[ 'title' => function () { return h3( htmlspecialchars($this->noteRecord['Title'],ENT_NOQUOTES,HSC_ENC) ); }, 'text-format-info' => function () { return u3( $this->noteRecord['FormatterID'], $this->noteRecord['Text'], 'full' ); }, 'summary' => function () { if ((string)$this->noteRecord['Summary']!==''){ return h3(htmlspecialchars($this->noteRecord['Summary'],ENT_NOQUOTES,HSC_ENC)); } else { return xm($this->cacheable['text-format-info']['text-final']); } }, 'comments-count' => function () { if (!$this->noteRecord['IsPublished']) { return false; } else { return c2($this->noteRecord['ID']); } }, 'tags-data' => function () { $s2=vf($this->noteRecord['ID']); $ox['ctree'] = []; $ox['all-resnames-uploads'] = []; foreach ($s2 as $r => $q2){ $ox['ctree'][] = [ 'visible?' => (bool)$q2['IsVisible'], 'name' => htmlspecialchars($q2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag', array ('*tag' => $q2)), ]; $ox['all-resnames-uploads']=array_merge( $ox['all-resnames-uploads'], q3('tag',$q2['ID']) ); } $ox['all-resnames-uploads']=array_unique( $ox['all-resnames-uploads'] ); return $ox; }, ]; if($this->isCached and is_file($this->cacheFilename)) { $this->cacheable=@unserialize(file_get_contents($this->cacheFilename)) or $this->cacheable=[]; } $ux=false; foreach ($jx as $wz => $ix){ if (!array_key_exists($wz,$this->cacheable)) { if(Log::$cy)__log('Build cache: "'. $wz .'"'); $this->cacheable[$wz]=$ix(); $ux=true; } else { if(Log::$cy)__log('Retrieved from cache: "'. $wz .'"'); } } if ($ux){ n3($this->cacheFilename,serialize($this->cacheable)); } } private function run(){ $this->hasRun=true; if(Log::$cy)__log('AeNoteView run {'); if(Log::$cy)__log('Cacheable data {'); $this -> prepareCacheableData(); if(Log::$cy)__log('}'); if(Log::$cy)__log('Uncacheable data {'); $px=false; if($this->noteRecord['IsPublished']) { if ((string)$this->noteRecord['OriginalAlias']!==''){ $px=jv('e2m_note', ['alias' => $this->noteRecord['OriginalAlias']]); } else { $ce=$this->noteRecord; $ce['__force_ymdn']=true; $px=jv('e2m_note', ['*note' => $ce]); } } $zl=dy($this->noteRecord); $ve=[(int)$this->noteRecord['LastModified'],$zl]; $t4=( $this->noteRecord['IsPublished'] ? [(int)$this->noteRecord['Stamp'],$zl]:$ve ); $be=em($this->noteRecord); $gs=$this->cacheable['text-format-info']['meta']['resources-detected']; if (!is_array($gs))$gs=[]; if(count($gs)) { rb($gs); } $ye=db($gs); $ws=@unserialize($this->noteRecord['Uploads']) or $ws=[]; $ne=array_merge( sb( $gs,$ws ), $this->cacheable['tags-data']['all-resnames-uploads'] ); $me=d3($ne); $fe=db($ne); $de=$this->noteRecord['SourceNoteData']; $de=@json_decode($de,true); $se=@$de['og_images'][0] or $se=''; if($this->noteRecord['IsExternal']) { $ae=qd($this->noteRecord); } else { $ae=[]; } $qe=false; $le=$this->cacheable['tags-data']['ctree']; foreach ($le as $t => $xf){ if($this->highlightedTags!==null){ $le[$t]['current?']=in_array($le[$t]['name'],$this->highlightedTags); } if (!$this->wantHiddenTags and !$le[$t]['visible?']) { unset ($le[$t]); } } if($this->wantSharingButtons and $this->noteRecord['IsPublished'] and !$this->scheduled){ $ze=cm($me); } else { $ze=false; } if($this->wantNewCommentsCount){ $ke=pf($this->noteRecord['ID']); } else { $ke=false; } $this->noteCTree=[ 'id' => (int)$this->noteRecord['ID'], 'title' => (string)$this->cacheable['title'], 'href' => jv('e2m_note', ['*note' => $this->noteRecord]), 'href-original' => $px, 'time' => $t4, 'last-modified' => $ve, 'text' => (string)$this->cacheable['text-format-info']['text-final'], 'format-info' => $this->cacheable['text-format-info']['meta'], 'summary' => (string)$this->cacheable['summary'], 'snippet-text' => (string)$this->cacheable['summary'], 'draft?' => $be==='draft', 'scheduled?' => $be==='scheduled', 'public?' => $be==='public', 'hidden?' => $be==='hidden', 'current?' => false, 'favourite?' => (bool) ($this->noteRecord['IsFavourite'] and $be!=='draft'), 'images' => ab($ye), 'thumbs' => qb($ye), 'source-main-image-url' => (string)$se, 'og-images' => $me, 'og-images-thumbs' => qb($fe), 'tags' => $le, 'sharing-buttons' => $ze, 'related' => $qe, 'read-href' => ($this->wantReadHref and $this->noteRecord['IsPublished'])? jv('e2m_note_read', ['*note' => $this->noteRecord]) : false, 'preview-href' => ($this->wantPreviewHref and ($be!=='public'))? jv('e2m_note', [ '*note' => $this->noteRecord, 'preview-key' => tm($this->noteRecord) ]) : false, 'comments-count' => $this->cacheable['comments-count'], 'comments-count-text' => is_int($this->cacheable['comments-count'])? e2l_get_string('gs--n-comments', [ 'number' => $this->cacheable['comments-count'] ]) : '', 'new-comments-count' => $ke, 'new-comments-count-text' => is_int($ke)? e2l_get_string('gs--comments-n-new', [ 'number' => $ke ]) : '', 'comments-link?' => (bool) ( $this->wantCommentsLink and $this->noteRecord['IsPublished'] and ( m2($this->noteRecord) or ($this->cacheable['comments-count'] > 0) ) ), ]; if($this->noteRecord['IsExternal']) { $this->noteCTree=array_merge($this->noteCTree,$ae); $this->noteCTree['href-original']=$this->noteCTree['href-external']; if (!$this->useLocalHref){ $this->noteCTree['href']=$this->noteCTree['href-external']; } } if($this->wantControls){ $this->noteCTree['edit-href']=jv( 'e2m_note_edit', array ('*note' => $this->noteRecord) ); if($this->noteRecord['IsPublished'] and !$this->noteRecord['IsVisible']) { $this->noteCTree['show-href']=jv('e2m_note_flag', [ '*note' => $this->noteRecord, 'flag' => 'IsVisible', 'value' => 1 ]); } if($this->noteRecord['IsPublished']) { $this->noteCTree['favourite-toggle-href']=jv( 'e2m_note_flag_favourite', [ '*note' => $this->noteRecord, 'value' => !$this->noteRecord['IsFavourite'] ] ); } } if(Log::$cy)__log('}'); AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID($this->noteRecord['ID']); if(Log::$cy)__log('}'); } } function cm($me){ global$_config; $xe=$_config['share_to']; $ee='|twitter|facebook|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $lv['twitter']['via']=$_config['share_to_twitter_via']; } if(count($me) > 0){ $re=$me[0]; $ee.='pinterest|'; $lv['pinterest']['media']=$re; } $te=[]; foreach(explode(',',$xe) as $je){ $je=trim($je); if(strstr($ee,'|'. $je. '|')) { $te[$je]['share?']=true; if ($lv[$je]) { $te[$je]['data']=$lv[$je]; } } } return $te; } function e2m_note($parameters=[]) { global$settings,$_config,$_strings; if(Log::$cy)__log('Note {'); $n2=$parameters['*note']; if ($n2==false) return e2_error404_mode(); $he=tm($n2); $ge=em($n2); $we=x2(); $ue=($parameters['preview-key']==$he); if (!empty ($parameters['preview-key']) and !$ue) return e2_error404_mode(); if (!$we and !$ue and $ge!=='public') return e2_error404_mode(); if (!empty ($parameters['preview-key']) and $ge==='public'){ unset($parameters['preview-key']); $ie=jv('e2m_note',$parameters); c($ie); } $ie=jv('e2m_note',$parameters); $noteView=new AeNoteView($n2); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($we and !@$_config['read_only']); $noteView -> setWantHiddenTags($we); if ($ge==='draft' or $ge==='scheduled'){ if (!$ue){ $oe=[ '.note-id' => $n2['ID'], 'form-action' => jv('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-note'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], ]; } } $pe=[]; if ($ge==='public'){ $noteView -> setWantNewCommentsCount($we); $noteView -> setWantSharingButtons($settings['appearance']['show_sharing_buttons']); $noteView -> setWantRelatedNotes(true); if(Log::$cy)__log('Navigation {'); $c6=mm($n2,'prev'); $v6=mm($n2,'next'); if ($c6){ $pe['prev-href']=jv('e2m_note', array ('*note' => $c6)); $pe['prev-title']=h3(htmlspecialchars($c6['Title'],ENT_NOQUOTES,HSC_ENC)); } if ($v6){ $pe['next-href']=jv('e2m_note', array ('*note' => $v6)); $pe['next-title']=h3(htmlspecialchars($v6['Title'],ENT_NOQUOTES,HSC_ENC)); } $pe['title']=$_strings['nm--posts']; $pe['timeline?']=false; $pe['this-title']=h3(htmlspecialchars($n2['Title'],ENT_NOQUOTES,HSC_ENC)); if(Log::$cy)__log('}'); if(Log::$cy)__log('Comments {'); $b6=''; $y6=false; $n6=false; $m6=array(); if ($we){ $f6=e2_note_cache_filename_with_id_($n2['ID'] .'-comments-author'); } else { $f6=e2_note_cache_filename_with_id_($n2['ID'] .'-comments'); } $d6=null; if(CACHE_NOTES_COMMENTS and is_file($f6)) { $d6=@unserialize(file_get_contents($f6)); } if(is_array($d6)) { if(Log::$cy)__log('retrieve cached ctree'); $b6=$d6; } else { if(Log::$cy)__log('assemble ctree...'); $s6=y2($n2['ID']); $a6=array(); $q6=true; foreach ($s6 as $t => $l6){ if ($l6['IsVisible']) { $z6=gf( $n2, $l6, $t+1 ); if ($z6['new?'] and $q6){ $z6['first-new?']=true; $q6=false; } $a6[] = $z6; } } $b6=$a6; if(CACHE_NOTES_COMMENTS)n3($f6,serialize($b6)); } if (!@$_config['read_only'] and m2($n2)) { $k6=of($n2); $k6['.comment-number']=count($b6)+1; } if(Log::$cy)__log('} // Comments'); } $zx=$noteView -> getNoteCTree(); if ($we and m2($n2,NOTE_COMMENTABLE_NOW_CONDITIONALLY)) { if ($n2['IsCommentable']) { $m6['href']=jv('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 0, )); $m6['text']=$_strings['bt--close-comments-to-post']; } else { $m6['href']=jv('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 1, )); $m6['text']=$_strings['bt--open-comments-to-post']; } } if ($we and $zx['new-comments-count'] > 0){ if(Log::$cy)__log('mark comments as not new'); e2_drop_caches_for_note_($dx,true); nn('Comments', array ('IsNew' => 0), array ('NoteID' => $n2['ID'])); } if ($we and ($n2['FormatterID']=='calliope')) { if(is_file(USER_FOLDER.'calliope/WikiFormatter.php')) { $zx['text']=w3().$zx['text']; } } $d=[ 'title' => $n2['Title'], 'notes' => ['only' => $zx], 'pages' => $pe, 'summary' => $zx['summary'], ]; if ($b6) $d['comments']['each']=$b6; if ($m6) $d['comments']['toggle']=$m6; $d['comments']['count']=$zx['comments-count']; $d['comments']['count-text']=$zx['comments-count-text']; $d['comments']['new-count']=$zx['new-comments-count']; $d['comments']['new-count-text']=$zx['new-comments-count-text']; $d['comments']['display-form?']=m2($n2); if (!empty ($k6)) { $d['form']='form-comment'; $d['form-comment']=$k6; } if (!empty ($oe)) { $d['form']='form-note-publish'; $d['form-note-publish']=$oe; } if(Log::$cy)__log('} // Note'); return $d; } function e2m_note_read($parameters=array ()) { global$_config; if (!$_config['count_reads']) { die ('Read counting disabled'); } if(Log::$cy)__log('Note read {'); $n2=$parameters['*note']; xn( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `ReadCount` = `ReadCount` + 1 ". "WHERE `ID` = ". $n2['ID'] ); $x6=time(); $x6=$x6 - ($x6 % SECONDS_IN_AN_HOUR); yn( 'Actions', [ 'EntityID' => $n2['ID'], 'Stamp' => $x6, 'ReadCount' => 1, ], 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); xn( "DELETE LOW_PRIORITY FROM `". $_config['db_table_prefix']."Actions` ". "WHERE (`Stamp` < ". (time() - (SECONDS_IN_A_MONTH)) .")" ); if(Log::$cy)__log('}'); c(jv('e2m_note',$parameters)); } function e2m_note_withdraw($parameters=array ()) { global$_strings; $cl=$parameters['*note']; if (!$cl) return e2_error404_mode(); if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_note', array ('*note' => $cl))); } $e6=jv('e2m_note_broadcast', array ('*note' => $cl)); $cl['IsPublished']=0; $cl['IsCommentable']=0; $cl['IsVisible']=1; $cl['Stamp']=time(); $cl['IP']=l2(); if($parameters['alias']) { $cl['OriginalAlias']=$parameters['alias']; } else { $cl['OriginalAlias']=pn( 'find','n',$cl['ID'],$cl['Title'] ); } e2_drop_caches_for_note_($cl['ID'],null); if ($cl['IsFavourite']) { @unlink(CACHE_FILENAME_FAVS); } nn('Notes',$cl); ka($cl['ID']); p3($e6); pn('set','n',$cl['ID'],''); c(jv('e2m_note', ['*note' => $cl])); } function e2m_note_delete($parameters=array()) { global$_strings; $cl=$parameters['*note']; if (!$cl) return e2_error404_mode(); $ge=em($cl); $r6=!$cl['IsPublished']; if ($r6){ $t6=e2l_get_string('gs--draft-will-be-deleted', array ( 'draft' => htmlspecialchars($cl['Title'],ENT_NOQUOTES,HSC_ENC), )); } else { $t6=e2l_get_string('gs--post-will-be-deleted', array ( 'post' => htmlspecialchars($cl['Title'],ENT_NOQUOTES,HSC_ENC), )); } $j6=$r6? $_strings['pt--draft-deletion']:$_strings['pt--post-deletion']; $h6=array ( '.note-id' => $cl['ID'], '.is-draft' => (int)$r6, 'note-title' => htmlspecialchars($cl['Title'],ENT_COMPAT,HSC_ENC), 'caution-text' => $t6, 'form-action' => jv('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int)$r6, ); if ($ge==='public'){ $h6['hide-href']=jv( 'e2m_note_flag', [ '*note' => $parameters['*note'], 'flag' => 'IsVisible', 'value' => 0 ] ); } if ($cl['IsPublished']) { $h6['withdraw-href']=jv( 'e2m_note_withdraw',$parameters ); } $d=array ( 'title' => $j6. ': '. htmlspecialchars($cl['Title'],ENT_NOQUOTES,HSC_ENC), 'heading' => $j6, 'form' => 'form-note-delete', 'form-note-delete' => $h6, ); return $d; } function e2m_note_flag_favourite($parameters){ global$_config; $parameters['flag']='IsFavourite'; s([ 'flag-name' => 'favourite', 'candy-name' => 'e2m_note_flag_favourite', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ vm($parameters); }, ]); } function e2m_note_flag($parameters){ vm($parameters); c(jv('e2m_note',$parameters)); } function vm($parameters){ $dx=$parameters['*note']['ID']; if (!is_numeric($dx)) { return e2_error404_mode(); } e2_drop_caches_for_note_($dx,$parameters['*note']['IsPublished']); if($parameters['flag']=='IsFavourite'){ @unlink(CACHE_FILENAME_FAVS); } if($parameters['flag']=='IsVisible'){ ss(); } nn('Notes', array ( 'ID' => $dx, $parameters['flag'] => (int) ($parameters['value']==1), )); try { cy(nm($dx)); } catch (AeMySQLException $e){ kv($e,'Could not broadcast note flag change'); } return true; } function e2m_note_use_formatter($parameters){ $dx=$parameters['*note']['ID']; if (!is_numeric($dx)) { return e2_error404_mode(); } e2_drop_caches_for_note_($dx,$parameters['*note']['IsPublished']); if(in_array($parameters['formatter'], array ('calliope','raw','neasden'))) { nn('Notes', array ( 'ID' => $dx, 'FormatterID' => $parameters['formatter'], )); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function bm($g6,$parameters=array ()) { global$full_blog_url,$_strings,$_config; $j6=$_strings['pt--new-post']; $w6=$_strings['pt--new-post']; $dx='new'; $u6=$_config['default_formatter']; if ($g6=='edit'){ $cl=$parameters['*note']; if (!$cl) return e2_error404_mode(); if ($cl){ $i6=(string)$cl['Summary']; if ($cl['IsPublished']) { $w6=$_strings['pt--edit-post']; $o6=''; $i7=$parameters['alias']; } else { $w6=$_strings['pt--edit-draft']; $o6=pn( 'find','n',$cl['ID'],$cl['Title'] ); if (@$cl['OriginalAlias']) { $i7=$cl['OriginalAlias']; } else { $i7=$o6; } } } $dx=$cl['ID']; $u6=$cl['FormatterID']; $j6=$cl['Title']; } $p6=ff(); $cr=array(); if ($p6!==null) foreach ($p6 as $vr){ $cr[] = $vr['tag']; } $br=array(); if ($g6=='edit' and count($cr)) { $p6=vf($cl['ID']); foreach ($p6 as $vr){ $br[] = htmlspecialchars($vr['Keyword'],ENT_NOQUOTES,HSC_ENC); } } $yr=array(); foreach ($cr as $vr){ $nr['name']=$vr; $nr['selected?']=in_array($vr,$br); $yr[] = $nr; } $mr=''; $br=implode(', ',$br); if ($br)$mr=$br; if ($g6=='write'){ $fr=$_strings['fb--save-and-preview']; } if ($g6=='edit'){ if(array_key_exists('draft',$parameters)) { $fr=$_strings['fb--save-and-preview']; } else { $fr=$_strings['fb--save-changes']; } } $gs=[]; if ($g6=='edit'){ $gs=g3( $cl['FormatterID'],$cl['Text'],'full' ); } $ws=@unserialize( $cl['Uploads'] ) or $ws=[]; $dr=qb( fb( sb( $gs,$ws ) ) ); if ($g6=='edit'){ k3( 'Notes', $cl, $gs ); } $m4=min($cl['Stamp'],time()); $qq=r3(); $lq=t3($qq); $zl=dy($cl); $ge=em($cl); $d['title']=$j6; $d['heading']=$w6; $d['form']='form-note'; $d['uploads'] = [ 'enabled?' => $lq, 'each' => $dr, 'default-name' => htmlspecialchars($i7,ENT_COMPAT,HSC_ENC), 'upload-action' => jv('e2j_file_upload'), 'remove-action' => jv('e2j_file_remove'), ]; $d['form-note'] = [ '.note-id' => $dx, '.formatter-id' => $u6, '.last-modified-stamp' => (int)$cl['LastModified'], '.published?' => (bool)$cl['IsPublished'], '.old-tags-hash' => md5($mr), '.action' => $g6, 'form-action' => jv('e2s_note_process'), 'form-note-livesave-action' => jv('e2j_note_livesave'), 'create:edit?' => (bool) ($g6=='write'), 'title' => htmlspecialchars($cl['Title'],ENT_COMPAT,HSC_ENC), 'tags' => $mr, 'tags-info' => $yr, 'text' => htmlspecialchars($cl['Text'],ENT_NOQUOTES,HSC_ENC), 'all-tags' => $cr, 'stamp-formatted' => ky('d.m.Y H:i:s',$m4,$zl), 'time' => $cl['IsPublished']? [(int)$m4,$zl]:false, 'draft?' => $ge==='draft', 'uploads-enabled?' => $lq, 'summary' => $i6, 'alias-autogenerated' => htmlspecialchars($o6,ENT_COMPAT,HSC_ENC), 'alias' => htmlspecialchars($i7,ENT_COMPAT,HSC_ENC), 'submit-text' => $fr, 'space-usage' => j3($qq), ]; if ($g6=='edit'){ $d['related-delete-href']=jv( 'e2m_note_delete', array ('*note' => $cl) ); } return $d; } function e2m_note_edit($parameters=array ()) { return bm('edit',$parameters); } function e2m_write(){ return bm('write'); } function e2s_note_process(){ global$_fp_error,$_strings; $dx=zm(); if (!$dx){ if($_fp_error==FP_TITLE_OR_TEXT_EMPTY){ mv($_strings['er--post-must-have-title-and-text'],E2E_USER_ERROR); } elseif($_fp_error==FP_NO_ID_OR_NEW){ } else { mv($_strings['er--error-occurred']); } c(jv('e2m_write')); } try { $n2=nm($dx); c(jv('e2m_note', ['*note' => $n2])); } catch (AeMySQLException $e){ kv($e,'Could not get note by ID'); c(); } die; } function e2s_note_publish(){ global$_strings,$_config,$settings; $dx=false; if(array_key_exists('note-id',$_POST)) { $dx=$_POST['note-id']; $sr=false; $cl=nm($dx); $ar=$cl['OriginalAlias']; $qr=$cl['Stamp']; $lr=!$cl['IsExternal']; $cl['ID']=$dx; $cl['IsVisible']=1; $cl['IsPublished']=1; $cl['IsCommentable'] = (int)$settings['comments']['default_on']; $cl['IsFavourite']=0; if(array_key_exists('browser-offset',$_POST)) { $zl=wy(@$_POST['browser-offset']); } else { $zl=ay(); } if ($sr and $m4=lm($sr,$zl)) { $cl['Stamp']=$m4; } elseif ($lr){ $cl['Stamp']=time(); } else { $cl['Stamp']=$qr; } if (za($cl)) { $cl['IsIndexed']='1'; } if ($zl){ $cl['Offset'] = (int)$zl['offset']; $cl['IsDST'] = (int)$zl['is_dst']; } e2_drop_caches_for_note_($dx,null); nn('Notes',$cl); $i7=''; if ($ar or $ar==='0'){ $i7=pn('set','n',$dx,$ar); $cl['OriginalAlias']=$i7; } if ($i7!=$ar){ nn('Notes',$cl); } if ($ge==='public'){ cy($cl); } c(jv('e2m_note', array ('*note' => $cl))); } c(); } function ym($dx,$zr=-1){ global$_config; $kr=true; if ($zr){ $kr=false; } if ($zr === -1){ $kr=null; } e2_drop_caches_for_note_($dx,$kr); if (!$zr or $zr === -1) { @unlink(CACHE_FILENAME_FAVS); } xn( "DELETE FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$dx) ."'", 'delete note by ID' ); ka($dx); xn( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 'n' ". "AND `EntityID`=". ((int)$dx), 'delete aliases after deleting note' ); xn( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". ((int)$dx), 'delete tag bindings after deleting note' ); } function e2s_note_delete(){ global$_strings,$_config; $dx=$_POST['note-id']; $zr=(bool)$_POST['is-draft']; $cl=nm($dx); $e6=jv('e2m_note_broadcast', array ('*note' => $cl)); ym($dx,$zr); p3($e6); if ($zr){ c(jv('e2m_drafts', ['page' => 1])); } else { c(); } die; } function e2j_note_livesave(){ die (zm('ajaxresult')); } function nm($xs){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $xs ."'" ); $ib=en(); if(count($ib) > 0){ return $ib[0]; } else { return false; } } function mm($n2,$xr,$er=1){ global$_strings,$_config; $rr=($xr=='next')?'>':'<'; $tr=($xr=='next')?'':'DESC '; try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". $er ." ". "AND `Stamp` ". $rr ." '". $n2['Stamp'] ."' ". "OR (`Stamp` = '". $n2['Stamp'] ."' AND `ID` ". $rr.$n2['ID'] .") ". rm(x2()). "ORDER BY `Stamp` ". $tr.", `ID` ". $tr . "LIMIT 1", 'get '. $xr .' note' ); $ib=en(); if(count($ib) > 0) return $ib[0]; else return false; } catch (AeMySQLException $e){ kv($e,'Could not get '. $xr .' note'); return null; } } function fm($jr){ global$_config; if(Log::$cy)__log('Lastmodifieds for Local Copier'); if(CACHE_LASTMODIFIEDS and is_file(CACHE_FILENAME_LASTMODIFIEDS)) { $hr=@unserialize(file_get_contents(CACHE_FILENAME_LASTMODIFIEDS)); if ($hr['ids_csv']==$jr){ if(Log::$cy)__log('Returned from cache'); return $hr['lastmodifieds_json']; } } $b='`ID`='. str_replace(',',' OR `ID`=',$jr); $gr=array(); xn( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")", 'get lastmodifieds for Local Copier' ); if(Log::$cy)__log('Requested from DB'); $q1=en(); foreach ($q1 as $t => $xf){ $gr[(int)$xf['ID']] = (int)$xf['LastModified']; } $wr=json_encode($gr); if ($wr=='[]')$wr='{}'; $hr=array ( 'ids_csv' => $jr, 'lastmodifieds_json' => $wr, ); if(CACHE_LASTMODIFIEDS){ n3(CACHE_FILENAME_LASTMODIFIEDS,serialize($hr)); } return $wr; } function dm($hb,$jb,$tb=false){ global$_config; list ($ir,$or_)=jy($hb,$jb,$tb); xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` AND (`Stamp` BETWEEN " .$ir. " AND " .$or_. ") ". "ORDER BY Stamp", 'get all notes for the date '. $tb .'.'. $jb .'.'. $hb ); $d=[]; foreach (en() as $pr){ if(is_numeric($tb)) { $ct=((int)$hb) .'/'. ((int)$jb) .'/'. ((int)$tb) == ky('Y/n/j',$pr['Stamp'],dy($pr)); } elseif(is_numeric($jb)) { $ct=((int)$hb) .'/'. ((int)$jb) == ky('Y/n',$pr['Stamp'],dy($pr)); } else { $ct=((int)$hb) == ky('Y',$pr['Stamp'],dy($pr)); } if ($ct)$d[] = $pr; } return $d; } function e2_published_noterec_with_parameters_($parameters=array ()) { $n2=e2_noterec_with_parameters_($parameters); if ($n2['IsPublished']) return $n2; } function e2_noterec_with_parameters_($parameters=array ()) { global$_config; $n2=false; $vt=false; if ((string) @$parameters['oalias']!=='')$vt=$parameters['oalias']; if ((string)$vt!==''){ xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias` = '". $vt ."' ". "AND `IsPublished` = 0", 'get note record by original alias' ); $n2=en(); if(count($n2)===1) { $n2=@$n2[0]; if ($n2) return $n2; } } $bt=false; if (@$parameters['draft']!=='') $bt=$parameters['draft']; if (@$parameters['draft2']!=='')$bt=$parameters['draft2']; if ($bt){ $n2=nm($bt); return $n2; } if ((string)$vt!==''){ $parameters['alias']=$vt; } if ((string) @$parameters['alias']!==''){ if ($yt=on(@$parameters['alias'])) { if ($yt['type']=='n'){ $n2=nm($yt['id']); if ($n2['IsPublished']) return $n2; } } } $nt=dm($parameters['year'],$parameters['month'],$parameters['day']); if (@$nt[$parameters['day-number']-1]) { return $nt[$parameters['day-number']-1]; } } function qm($j6,$tv,$zl,$mt){ global$_config; as_(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $n2=array ( 'Title' => $j6, 'Text' => $tv, 'FormatterID' => $_config['default_formatter'], 'OriginalAlias' => pn('find','','',$j6), 'Uploads' => $mt, 'Stamp' => (int)time(), 'LastModified' => (int)time(), ); if ($zl and is_array($zl)) { $n2['Offset'] = (int)$zl['offset']; $n2['IsDST'] = (int)$zl['is_dst']; } $n2=yn('Notes',$n2); return $n2['ID']; } function lm($ft,$zl){ $dt='/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if(preg_match($dt,$ft,$jb)) { $m4=gmmktime($jb[4],$jb[5],$jb[6],$jb[2],$jb[1],$jb[3]); $m4 -= ly($zl,$m4); return $m4; } else { return false; } } function zm($st=''){ global$_fp_error,$_config,$_e2utf8__unformat_htmlentity_neasden,$_db; if(Log::$cy)__log('Process note form'); try { $_fp_error=false; $dx=$j6=$at=$tv=$qt=''; if(array_key_exists('note-id',$_POST)) $dx=$_POST['note-id']; if(array_key_exists('title',$_POST)) $j6=trim($_POST['title']); if(array_key_exists('tags',$_POST)) $at=$_POST['tags']; if(array_key_exists('text',$_POST)) $tv=trim($_POST['text'],"\r\n"); if(array_key_exists('summary',$_POST)) $i6=trim($_POST['summary'],"\r\n"); if(array_key_exists('old-tags-hash',$_POST)) $qt=$_POST['old-tags-hash']; if(is_array($at))$at=implode(', ',$at); $at=trim($at); if ($dx=='new'){ $_e2utf8__unformat_htmlentity_neasden=($_config['default_formatter']=='neasden'); } else { $_e2utf8__unformat_htmlentity_neasden=($_POST['formatter-id']=='neasden'); } $lt=vn('Notes'); if(stripos($lt['Collation'],'utf8mb4')!==0){ $j6=nb($j6); $at=nb($at); $tv=nb($tv,true); } $zt=$tv; $zt=str_replace("\n",'\n'."\n",$zt); $zt=str_replace("\r",'\r'."\r",$zt); $kt=n(',',$at,'sort'); $at=implode(', ',$kt); $xt=md5($at); if(array_key_exists('browser-offset',$_POST)) { $zl=wy(@$_POST['browser-offset']); } else { $zl=ay(); } $et=@$_POST['old-stamp']; $sr=@$_POST['stamp']; $i7=@$_POST['alias']; if ($dx!='new'){ $rt=nm($dx); } else { $rt=array(); } if ($dx){ if ((string)$j6!=='' and (string)$tv!==''){ if ($dx=='new'){ $mt=''; if(is_file(USER_FOLDER.'new-uploads.psa')) { $mt=@file_get_contents(USER_FOLDER.'new-uploads.psa'); } try { $dx=qm($j6,$tv,$zl,$mt); @unlink(USER_FOLDER.'new-uploads.psa'); $tt=array ( '*note' => nm($dx), ); $jt=[ 'success' => true, 'data' => [ 'status' => 'created', 'id' => $dx, 'note-url' => jv('e2m_note',$tt), 'note-edit-url' => jv('e2m_note_edit',$tt) ] ]; $q1=(int)$dx; } catch (AeMySQLException $e){ kv($e,'Could not insert note'); $jt=[ 'success' => false, 'error' => [ 'message' => 'Cannot create record' ] ]; $q1=false; } } else { e2_drop_caches_for_note_($dx,$rt['IsPublished']); $ht=$rt; $ht['ID']=$dx; $ht['Title']=$j6; $ht['Summary']=$i6; $ht['Text']=$tv; $ht['FormatterID']=$rt['FormatterID']; $ht['LastModified']=time(); $ht['IsIndexed']='0'; if ($ht['FormatterID']==='calliope'){ $ht['FormatterID']=$_config['default_formatter']; } if ($et!=$sr){ if ($m4=lm($sr,$zl)) { $ht['Stamp']=min($m4,time()); } } $u7=$i7; if ((string)$i7!==''){ $gt=$i7; } elseif (!$rt['IsPublished']) { $gt=$j6; } else { $gt=''; } if ($rt['IsPublished']) { $u7=pn( 'set','n',$dx,$gt ); $tt=array ( '*note' => $ht, 'alias' => $u7, ); } else { $wt=true; $u7=pn('find','n',$dx,$gt); $ht['OriginalAlias']=$u7; $tt=array ( '*note' => $ht, 'alias' => $u7, ); } $gs=g3( $ht['FormatterID'],$ht['Text'],'full' ); if(count($gs) > 0){ eb($gs); rb($gs); } try { nn('Notes',$ht); if ($ht['IsPublished']) { if (za($ht)) { $ht['IsIndexed']='1'; nn('Notes',$ht); } if ($et!=$sr){ wn(true); } cy($ht); } $jt=[ 'success' => true, 'data' => [ 'status' => 'saved', 'new-alias' => $u7, 'note-url' => jv('e2m_note',$tt), 'note-edit-url' => jv('e2m_note_edit',$tt) ] ]; $q1=(int)$dx; } catch (AeMySQLException $e){ kv($e,'Could not update record'); $jt=[ 'success' => false, 'error' => [ 'message' => 'Cannot update record ('. mysqli_error(). ')' ] ]; $q1=false; } } if ($xt!=$qt){ bf(array ('NoteID' => $dx)); foreach ($kt as $am){ $ut=df($am); if (!$ut){ $ut['ID']=nf($am); } xn( "INSERT INTO `". $_config['db_table_prefix']."NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$_config['db_table_subset']) .", ". ((int)$dx) .", ". ((int)$ut['ID']). ")", 'add new tag bindings' ); } } if ( $st!='ajaxresult' and $q1 and $_POST['instant-publish']=='yes' ){ $_POST['note-id']=$dx; e2s_note_publish(); } } else { $jt=[ 'success' => false, 'error' => [ 'message' => 'Title or text is empty' ] ]; $_fp_error=FP_TITLE_OR_TEXT_EMPTY; $q1=false; } } else { $jt=[ 'success' => false, 'error' => [ 'message' => 'No note id/new specified' ] ]; $_fp_error=FP_NO_ID_OR_NEW; $q1=false; } if($_config['backup_automatically']) { tn(); } } catch (AeMySQLException $e){ kv($e); $jt=[ 'success' => false, 'error' => [ 'message' => 'Database error' ] ]; $q1=false; } if ($st=='ajaxresult') return json_encode($jt); else return $q1; } function km($it,$ot){ global$_config; if (!($it and $ot) and !x2()) { if(Log::$cy)__log('Error: e2_notes_count_generic called for invisible items unsecurely'); return null; } if (!is_bool($it) or !is_bool($ot)) { if(Log::$cy)__log ('Error: e2_notes_count_generic called with non-bool params'); return null; } if (!$it and !$ot){ if(Log::$cy)__log ('Error: e2_notes_count_generic called with nonsensical parameters'); return null; } $pt=( CACHES_FOLDER . 'notes-count-p'. (int)$it . ($it ? ('v'. (int)$ot):'') . '.txt' ); $q1=false; if(CACHE_NOTES_COUNTS and is_file($pt)) { $q1=@file_get_contents($pt); } if(is_numeric($q1) and $q1 > 0){ return $q1; } else { $q1=null; try { xn( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". (int)$it. " ". ($it ? ( "AND `IsVisible`=". (int)$ot ):""), 'count notes with flags p'. (int)$it . ($it ? ('v'. (int)$ot):'') ); $q1=en(); $q1=$q1[0]['NotesCount']; if(CACHE_NOTES_COUNTS)n3($pt,$q1); } catch (AeMySQLException $e){ kv($e); if(Log::$cy)__log('Could not count notes'); } return $q1; } } function xm($tv){ $i6=$tv; $i6=preg_match( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/mu', $i6, $y3 ); $i6=$y3[3]; if (!$i6)$i6=$tv; if(mb_strlen($i6) <= 50)$i6=$tv; $i6=str_replace(array ( '<p>','<blockquote>','<ul>','<ol>','<br />', ), "\n",$i6); $i6=trim(strip_tags($i6)); if(mb_strlen($i6) > 50){ $c5=mb_strpos($i6,"\n",50); } else { $c5=mb_strrpos($i6,"\n"); } if ($c5!==false){ $i6=mb_substr($i6,0,$c5); $i6=trim($i6,' :.()'."\n"); } if(preg_match('/^(.{100,}?)(?:[:.!?()]|'."\n".')/su',$i6,$y3)) { $i6=trim($y3[0],' :.()'."\n"); } if(preg_match('/^(.{150,}?)[:.!?(),]/su',$i6,$y3)) { $i6=trim($y3[0],' :.(),'."\n"); } if(preg_match('/^(.{200,}?)[:.!?(), ]/su',$i6,$y3)) { $i6=trim($y3[0],' :.()'."\n"); } $i6=preg_replace('/[ \n\r\t]+/su',' ',$i6); if(mb_substr($i6, -1)==='.')$i6=mb_substr($i6,0, -1); if(mb_substr($i6, -1)===':')$i6=mb_substr($i6,0, -1); if(mb_substr($i6, -1)==='!')$i6=mb_substr($i6,0, -1); if(in_array($i6[mb_strlen($i6)-1], array (',',' '))) { $i6=trim($i6,', '). '...'; } if(mb_strlen($i6) > 250){ $i6=trim(mb_substr($i6,0,250)). '...'; } return $i6; } function em($n2){ $v5=false; if ($n2['IsPublished']) { if ($v5){ return 'scheduled'; } else { if ($n2['IsVisible']) { return 'public'; } else { return 'hidden'; } } } else { return 'draft'; } } function rm($we=false){ if ($we){ return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time() .') '; } } function tm($n2){ return ''; } function e2m_drafts($parameters){ global$_strings,$_config; $we=x2(); $draftsView=new AePageableNotesView('e2m_drafts',$parameters); $draftsView -> setPortionSize((int)$_config['drafts_per_page']); $draftsView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $draftsView -> setWantPaging(true); $draftsView -> setUseLocalHrefs(true); if($draftsView -> isFirstPage() and CACHE_DRAFTS){ $draftsView -> setCacheFilename(CACHE_FILENAME_DRAFTS); } $draftsView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `LastModified` DESC" ); $s5=$draftsView -> getNotesCTree(); if(count($s5)) { if(Log::$cy)__log('Thumbnails {'); foreach ($s5 as $t => $xf){ $s5[$t]['thumbs']=qb(@$xf['format-info']['resources-detected']); } if(Log::$cy)__log('}'); } $d=[ 'title' => $_strings['pt--drafts'], 'heading' => $_strings['pt--drafts'], 'notes' => $s5, 'pages' => $draftsView -> getPagesCTree(), ]; if($draftsView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-drafts']; } elseif (!$draftsView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function wm($a5){ global$_config; if(Log::$cy)__log('Drafts: find duplicate OriginalAliases...'); if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $q5=@unserialize(file_get_contents(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_array($q5)) { if(Log::$cy)__log('Drafts: retrieve cached'); } else { if(Log::$cy)__log('Drafts: assemle cacheable...'); $q5=array(); xn( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `ID`", 'get original aliases of drafts to calculate use counts' ); $q1=en(); $l5=array(); foreach ($q1 as $t => $n2){ @$q5[$n2['OriginalAlias']] ++; } if(CACHE_DRAFTS_ALIAS_USE_COUNTS){ n3(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS,serialize($q5)); } } return $q5[$a5]; } function um(){ global$_strings,$_user_folder_name; $z5='https://'. $_strings['e2--website-host'] .'/'; $k5='('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; return [ 'built?' => BUILT, 'installed?' => (fn_()!==null), 'version' => 'v'. E2_VERSION, 'version-description' => $_strings['e2--vname-aegea'] .' '. $k5, 'user-folder-name' => $_user_folder_name, 'cookie-prefix' => b(), 'href' => $z5, 'about' => ( '<span title="E2 '.$k5 .'">'. $_strings['e2--powered-by'] .' '. '<a href="'. $z5 .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> '. '<span class="e2-svgi">'. os('aegea') .'</span></a></span>' ), ]; } function im($candy,$x5,$e5,$r5,$pe){ global$full_blog_url,$content, $_config, $_candies_indexable, $_candies_indexable_conditionally, $_template, $_newsfeeds, $_current_url; $meta['base-href']=$full_blog_url. '/'; $meta['current-href']=$_current_url; $meta['stylesheets']=ca(); $meta['scripts']=va(); $meta['newsfeeds']=$_newsfeeds; $meta['favicon-type']='image/x-icon'; $meta['favicon-href']='favicon.ico'; if ($t5=yd()) { $meta['favicon-type']=v3($t5); $meta['favicon-href']=$t5; $meta['apple-touch-icon-href']=yd('square'); } $meta['navigation-links'] = [[ 'rel' => 'index', 'href' => jv('e2m_frontpage', ['page' => 1]), 'id' => 'link-index', ]]; if (!empty ($pe)) { foreach (['prev','next','earlier','later'] as $j5){ if(array_key_exists($j5 .'-href',$pe)) { $rr=$j5; if ($j5=='earlier')$rr='prev'; if ($j5=='later')$rr='next'; $meta['navigation-links'][] = [ 'rel' => $rr, 'href' => $pe[$j5 .'-href'], 'id' => 'link-'. $j5, ]; } } } $h5='noindex, follow'; if (@$_config['index_follow_everything']) { $h5='index, follow'; } if(in_array($candy,$_candies_indexable)) { $meta['robots']='index, follow'; } if(in_array($candy,$_candies_indexable_conditionally)) { $meta['robots']=$h5; } $meta['viewport']=$_template['meta_viewport']; if(is_file(MEDIA_ROOT_FOLDER.'manifest.json')) { $meta['manifest-href']=$full_blog_url. '/manifest.json'; } $meta['og-images'] = []; if(is_array($x5['only']['og-images'])) { $meta['og-images']=$x5['only']['og-images']; $meta['twitter-card']='summary_large_image'; } if(is_array($e5['og-images'])) { $meta['og-images']=$e5['og-images']; $meta['twitter-card']='summary_large_image'; } if (!count($meta['og-images'])) { $meta['og-images'] = array ($r5['userpic-large-href']); $meta['twitter-card']='summary'; } return$meta; } function om(){ global$_superconfig,$_config; $g5=[ 'new-note-href' => jv('e2m_write'), 'drafts-href' => jv('e2m_drafts', ['page' => 1]), 'drafts-count' => (int)km(false,true), 'settings-href' => jv('e2m_settings'), 'theme-preview-href' => jv('e2m_theme_preview', array ('theme' => '')), 'password-href' => jv('e2m_password', array ('recovery-key' => '')), 'database-href' => jv('e2m_database'), 'timezone-href' => jv('e2m_timezone'), 'sessions-href' => jv('e2m_sessions'), 'sign-out-href' => jv('e2m_sign_out'), ]; if (p()) { $g5['get-backup-href']=jv('e2m_get_backup'); } if (@$_config['read_only']) { unset ($g5['new-note-href']); unset ($g5['settings-href']); unset ($g5['timezone-href']); } if (@$_superconfig['disallow_themes_preview']) { unset ($g5['theme-preview-href']); } if (@$_superconfig['disallow_db_config']) { unset ($g5['database-href']); } list ($ke,$w5,$u5)=b2(); if ($ke){ $g5['new-comments-count']=$ke; $g5['new-comments-href']=$u5; } return $g5; } function e2m_tags(){ global$_strings; $d['title']=$_strings['pt--tags']; $d['heading']=$_strings['pt--tags']; $d['tags']=mf([]); $i5=ff(true); if ($i5===null){ $d['unavailable?']=true; } else { $d['tags']['each']=$i5; if(count($i5)==0){ $d['nothing']=$_strings['gs--no-tags']; } } return $d; } function e2m_tag($parameters=[]) { global $settings, $_config, $_current_tags, $_strings, $page, $full_blog_url; if(Log::$cy)__log('Tag {'); $we=x2(); $tagNotesView=new AePageableNotesView('e2m_tag',$parameters); $tagNotesView -> setPortionSize($settings['appearance']['notes_per_page']); $tagNotesView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $tagNotesView -> setWantPaging(true); $tagNotesView -> setWantNewCommentsCount($we); $tagNotesView -> setWantReadHrefs($_config['count_reads']); $tagNotesView -> setWantControls($we and !@$_config['read_only']); $tagNotesView -> setWantHiddenTags($we); $o5=[]; if(array_key_exists('*tags',$parameters)) { foreach($parameters['*tags'] as $q2){ if ($we or $q2['IsVisible']) { $o5[] = $q2; } } } if (!$o5[0]) return e2_error404_mode(); $p5=count($o5); $vr=$o5[0]; $cj=$parameters['tag-alias']; $_current_tags=[]; foreach ($o5 as $vr)$_current_tags[] = $vr['Keyword']; $tagNotesView -> setHighlightedTags($_current_tags); if(CACHE_TAG and $tagNotesView -> isFirstPage() and $p5===1){ if ($we){ $tagNotesView -> setCacheFilename(e2_cache_filename_with_id_($vr['ID'],CACHE_FILENAMES_TAG_AUTHOR)); } else { $tagNotesView -> setCacheFilename(e2_cache_filename_with_id_($vr['ID'],CACHE_FILENAMES_TAG)); } } foreach ($o5 as $vr) if ($vr)$vj[] = "nk.`KeywordID`=". $vr['ID']; $bj=( "FROM `". $_config['db_table_prefix'] ."Notes` n ". "JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (". implode(" OR ",$vj).") ". "AND IsPublished=1 ". rm($we). "GROUP BY n.`ID` ". "HAVING COUNT(*)>=". $p5 ); $tagNotesView -> setSQLCountRequest( "SELECT COUNT(*) Total FROM (SELECT 1 ". $bj .") _" ); $tagNotesView -> setLimitlessSQLRequest( "SELECT n.*, COUNT(*) ". $bj ." ". "ORDER BY n.`Stamp` DESC" ); $yj=yf($vr['ID'],5); $nj=''; $e5['description']=''; $e5['summary']=''; $e5['visible?'] = (bool)$vr['IsVisible']; if ($p5==1){ if ($we){ $e5['edit-href']=jv( 'e2m_tag_edit', array ('tag-alias' => $cj) ); } if ((string)$vr['Description']!==''){ $z1=i3($vr['Description'],'full'); $vn=$z1['text-final']; $e5['description']=$vn; $e5['description-format-info']=$z1['meta']; ba(@$z1['meta']['links-required']); } if ((string)$vr['Summary']!==''){ $e5['summary']=h3(htmlspecialchars($vr['Summary'],ENT_NOQUOTES,HSC_ENC)); } elseif ((string)$e5['description']!==''){ $e5['summary']=xm($e5['description']); }; $mj=jv('e2m_tag_rss', array ('tag-alias' => $cj)); $fj=jv('e2m_tag_json', array ('tag-alias' => $cj)); kd( 'rss', vd() .': '. $vr['Keyword'], $mj ); kd( 'json', vd() .': '. $vr['Keyword'], $fj ); $e5['og-images']=d3( sb( $e5['description-format-info']['resources-detected'], q3('tag',$vr['ID']) ) ); $e5['name']=htmlspecialchars($vr['Keyword'],ENT_COMPAT,HSC_ENC); $nj=htmlspecialchars($vr['PageTitle'],ENT_COMPAT,HSC_ENC); } $dj=$tagNotesView -> getTotalNotes(); $e5['notes-count']=$dj; $e5['notes-count-text']=e2l_get_string('pt--n-posts', array ('number' => $dj)); $sj=$e5['notes-count-text'] .' '. $_strings['gs--tagged']; $aj=[]; foreach ($o5 as $xf){ $aj[] = htmlspecialchars($xf['Keyword'],ENT_COMPAT,HSC_ENC); } $aj=implode(', ',$aj); if ((string)$nj!==''){ $j6=$nj; $w6=$nj; } else { $j6=vd() .': '. $sj .' '. $aj; if(count($o5) > 1){ $w6=$_strings['pt--tags'] .': '. $aj; } else { $w6=$_strings['pt--tag'] .': '. $aj; } } $le=mf($parameters); $d=[ 'title' => $j6, 'heading' => htmlspecialchars_decode($w6,ENT_COMPAT), 'notes' => $tagNotesView -> getNotesCTree(), 'pages' => $tagNotesView -> getPagesCTree(), 'tags' => $le, ]; if ( !$tagNotesView -> isExistingPage() and !$tagNotesView -> isFirstPageOfEmptyView() ) { return e2_error404_mode(); } if ( $tagNotesView -> isFirstPageOfEmptyView() and !$we ){ return e2_error404_mode(); } if($tagNotesView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } if ((string)$e5['summary']!==''){ $d['summary']=$e5['summary']; } if(count($o5)==1){ $d['tag']=$e5; if (x2()) { $d['related-edit-href']=$e5['edit-href']; $d['related-edit-title']=$_strings['tt--edit-tag']; } } if(Log::$cy)__log('} // Tag'); return $d; } function e2m_tag_edit($parameters=array()) { global$_strings; if(array_key_exists('*tag',$parameters)) { $vr=$parameters['*tag']; } if (!$vr) return e2_error404_mode(); $gs=g3( 'neasden',$vr['Description'],'full' ); $ws=@unserialize( $vr['Uploads'] ) or $ws=[]; $dr=qb( fb( sb( $gs,$ws ) ) ); k3( 'Keywords', $vr, $gs ); $qq=r3(); $qj=[ 'enabled?' => t3($qq), 'each' => $dr, 'default-name' => htmlspecialchars($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'upload-action' => jv('e2j_file_upload'), 'remove-action' => jv('e2j_file_remove'), ]; $lj=array ( '.tag-id' => $vr['ID'], '.formatter-id' => 'neasden', 'form-action' => jv('e2s_tag_edit'), 'submit-text' => $_strings['fb--save-changes'], 'tag' => htmlspecialchars($vr['Keyword'],ENT_COMPAT,HSC_ENC), 'page-title' => htmlspecialchars($vr['PageTitle'],ENT_COMPAT,HSC_ENC), 'page-title-placeholder' => htmlspecialchars($vr['Keyword'],ENT_COMPAT,HSC_ENC), 'alias' => htmlspecialchars($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'description' => htmlspecialchars($vr['Description'],ENT_COMPAT,HSC_ENC), 'summary' => (string)$vr['Summary'], 'favourite?' => (bool)$vr['IsFavourite'], 'space-usage' => j3($qq), ); $lj['.cache-sensitive-hash']=md5( $lj['tag'] . $lj['uploads'] . $lj['urlname'] ); $d=array ( 'body-uploads-enabled?' => t3($qq), 'title' => $_strings['pt--tag-edit'] .': '. $vr['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $lj, 'uploads' => $qj, 'related-delete-href' => jv('e2m_tag_delete', array ('*tag' => $vr)), ); return $d; } function e2m_tag_flag_ajax($parameters){ s([ 'flag-name' => 'tag', 'candy-name' => 'e2m_tag_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ pm($parameters); }, ]); } function pm($parameters){ if(array_key_exists('*tag',$parameters)) { $vr=$parameters['*tag']; } if (!$vr) return e2_error404_mode(); e2_drop_caches_for_tag_($vr['ID']); nn('Keywords', array ( 'ID' => $vr['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); return true; } function e2m_tag_delete($parameters=array()) { global$_strings; if(array_key_exists('*tag',$parameters)) { $vr=$parameters['*tag']; } if (!$vr) return e2_error404_mode(); $zj=array ( '.tag-id' => $vr['ID'], 'caution-text' => e2l_get_string('gs--tag-will-be-deleted-notes-remain', array ( 'tag' => htmlspecialchars($vr['Keyword'],ENT_COMPAT,HSC_ENC) )), 'tag' => htmlspecialchars($vr['Keyword'],ENT_COMPAT,HSC_ENC), 'form-action' => jv('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ); $d=array ( 'title' => $_strings['pt--tag-delete'] .': '. $vr['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $zj, ); return $d; } function e2m_untagged($parameters=[]) { global$settings,$_strings,$_config; $we=x2(); $untaggedView=new AePageableNotesView('e2m_untagged',$parameters); $untaggedView -> setPortionSize($settings['appearance']['notes_per_page']); $untaggedView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $untaggedView -> setWantPaging(true); $untaggedView -> setWantNewCommentsCount($we); $untaggedView -> setWantReadHrefs($_config['count_reads']); $untaggedView -> setWantControls($we and !@$_config['read_only']); $untaggedView -> setWantHiddenTags($we); $bj=( "FROM `". $_config['db_table_prefix']."Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished`=1 ". "AND nk.`SubsetID` IS NULL ". rm($we) ); $untaggedView -> setSQLCountRequest( "SELECT COUNT(*) Total ". $bj ); $untaggedView -> setLimitlessSQLRequest( "SELECT n.* ". $bj ." ORDER BY n.`Stamp` DESC" ); $d=[ 'title' => $_strings['pt--posts-without-tags'], 'heading' => $_strings['pt--posts-without-tags'], 'notes' => $untaggedView -> getNotesCTree(), 'pages' => $untaggedView -> getPagesCTree(), ]; if($untaggedView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-posts-without-tags']; } elseif (!$untaggedView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function e2s_tag_edit(){ global$_strings,$_config; $kj=$am=$vn=$gt=''; if(array_key_exists('tag-id',$_POST)) $kj=$_POST['tag-id']; if(array_key_exists('tag',$_POST)) $am=$_POST['tag']; if(array_key_exists('page-title',$_POST)) $nj=trim($_POST['page-title'],"\r\n"); if(array_key_exists('description',$_POST)) $vn=trim($_POST['description'],"\r\n"); if(array_key_exists('summary',$_POST)) $i6=trim($_POST['summary'],"\r\n"); if(array_key_exists('urlname',$_POST)) $gt=trim($_POST['urlname'],"\r\n"); if(array_key_exists('cache-sensitive-hash',$_POST)) { $xj=$_POST['cache-sensitive-hash']; $ej=md5($am.$gt); } $lt=vn('Notes'); if(stripos($lt['Collation'],'utf8mb4')!==0){ $am=nb($am); $nj=nb($nj); $vn=nb($vn,true); } xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = ".((int)$kj)."", 'get tag record to update' ); $rj=en(); if(count($rj)!=1) die; $q2=$rj[0]; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword` = '". rn($am) ."' ". "AND (`ID` != ".((int)$kj).")", 'make sure new tag name does not conflict with existing ones' ); $rj=en(); if(count($rj)==0){ if ($ej!=$xj){ ss(); } e2_drop_caches_for_tag_($kj); $q2['ID'] = ((int)$kj); $q2['Keyword']=$am; $q2['PageTitle']=$nj; $q2['Description']=$vn; $q2['Summary']=$i6; $gs=g3( 'neasden',$q2['Description'],'full' ); if(count($gs) > 0){ eb($gs); rb($gs); } nn('Keywords',$q2); $u7=pn( 'set','t',$q2['ID'],$gt ); c(jv('e2m_tag', array ('tag-alias' => $u7))); } else { mv($_strings['er--cannot-rename-tag'],E2E_USER_ERROR); v(); } die; } function e2s_tag_delete(){ global$_strings,$_config; $kj=((int)$_POST['tag-id']); ss(); e2_drop_caches_for_tag_($kj); xn( "DELETE FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $kj, 'delete note by ID' ); xn( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 't' ". "AND `EntityID` = ". ((int)$kj), 'delete aliases after deleting note' ); xn( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID`=". $kj, 'delete tag bindings after deleting tag' ); c(jv('e2m_tags')); } function cf($tj){ global$_current_tags,$_config; $jj=null; if(CACHE_FAVTAGS and is_file(CACHE_FILENAME_FAVTAGS)) { $jj=@unserialize(file_get_contents(CACHE_FILENAME_FAVTAGS)); } if (!is_array($jj)) { try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsFavourite`=1 ORDER BY `Keyword`", 'get favorite tags for tags menu' ); $hj=en(); $jj=array(); foreach ($hj as $q2){ $gj['tag']=htmlspecialchars($q2['Keyword'],ENT_NOQUOTES,HSC_ENC); $gj['href']=jv( 'e2m_tag', array ('*tag' => $q2) ); $gj['visible?'] = (bool)$q2['IsVisible']; $jj[] = $gj; } if(CACHE_FAVTAGS)n3(CACHE_FILENAME_FAVTAGS,serialize($jj)); } catch (AeMySQLException $e){ kv($e); if(Log::$cy)__log('Count not get tags menu from database'); } } if (!is_array($jj)) return null; if (!empty ($_current_tags)) { $wj=false; foreach ($jj as $t => $xf){ $jj[$t]['current?']=in_array($jj[$t]['tag'],$_current_tags); if ($jj[$t]['current?']) { $wj=true; $uj=$tj; $uj['flag']='IsFavourite'; $uj['value']=0; if (x2()) { $jj[$t]['pinnable?']=true; $jj[$t]['pinned?']=true; $jj[$t]['pinned-toggle-href'] = ( jv('e2m_tag_flag_ajax',$uj) ); } } } } if (x2()) { if (!$wj and array_key_exists('*tag',$tj)) { $ij=$tj; $ij['flag']='IsFavourite'; $ij['value']=1; $oj=[ 'tag' => htmlspecialchars($tj['*tag']['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag',$tj), 'visible?' => (bool)$tj['*tag']['IsVisible'], 'current?' => true, 'pinnable?' => true, 'pinned?' => false, 'pinned-toggle-href' => jv('e2m_tag_flag_ajax',$ij), ]; $jj[] = $oj; } } return $jj; } function vf($dx){ global$_config; $s2=array(); xn( "SELECT k.* ". "FROM `". $_config['db_table_prefix']."Keywords` k, ". "`". $_config['db_table_prefix']."NotesKeywords` nk ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID`=". ((int)$dx) ." ". "AND k.`ID`=nk.`KeywordID` ". "ORDER BY `Keyword`", 'get tag records for note by id' ); $s2=en(); return $s2; } function bf($pj){ global$_config; $ch=array(); foreach (array ( 'ID', 'NoteID', 'KeywordID', ) as $wz) if(array_key_exists($wz,$pj)) { $gz[] = '`'. $wz .'`'."='". rn($pj[$wz]) ."'"; if ($wz=='ID')$vh='tagbinging-id'; if ($wz=='NoteID')$vh='tagbinging-note-id'; if ($wz=='KeywordID')$vh='tagbinging-tag-id'; $ch[$vh]=$pj[$wz]; } $bf=( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND ". implode(' AND ',$gz) ); xn($bf); } function yf($kj,$bh){ global$_config; xn( "SELECT `ID`, `Keyword`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] ."Keywords` k ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND k.`ID` IN (". "SELECT `KeywordID` FROM (". "SELECT COUNT(`NoteID`) NotesCount, `KeywordID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID` IN (". "SELECT nk2.`NoteID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk2 ". "WHERE nk2.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk2.`KeywordID`=". $kj. ") ". "GROUP BY nk.`KeywordID` ". "HAVING NotesCount > 1 ". "ORDER BY NotesCount DESC ". "LIMIT 1, ". $bh. ") k_ids". ")", 'find related tags' ); $yj=[]; foreach (en() as $q2){ if ($q2['ID']===$kj) continue; $yj[] = [ 'name' => htmlspecialchars($q2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag', array ('*tag' => $q2)), 'visible?' => true, ]; } return $yj; } function nf($am){ @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); wn(true); $q2=array ( 'Keyword' => $am, 'OriginalAlias' => pn('find','','',$am), 'Description' => '', ); $q2=yn('Keywords',$q2); $yh=pn( 'set','t',$q2['ID'],$am ); if ($yh!=$q2['OriginalAlias']) { $q2['OriginalAlias']=$yh; nn('Keywords',$q2); } return $q2['ID']; } function mf($parameters){ if (($nh=ff()) === null) return []; $le['each']=$nh; if(count($le['each']) > 0){ $le['href']=jv('e2m_tags'); } if (($mh=cf($parameters)) !== null){ $le['menu-each']=$mh; } return $le; } function ff($fh=false){ global$_config; $we=x2(); $pt=CACHE_FILENAME_TAGS; if ($we)$pt=CACHE_FILENAME_TAGS_AUTHOR; if ($fh){ $pt=CACHE_FILENAME_TAGS_FULL; if ($we)$pt=CACHE_FILENAME_TAGS_AUTHOR_FULL; } $dh=null; if(CACHE_TAGS and is_file($pt)) { $dh=@unserialize(file_get_contents($pt)); } if (!is_array($dh)) { try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY `Keyword`", 'get all tags' ); $sh=array(); foreach (en() as $q2){ $am['id'] = (int)$q2['ID']; $am['tag']=htmlspecialchars($q2['Keyword'],ENT_NOQUOTES,HSC_ENC); $am['favourite?'] = (bool)$q2['IsFavourite']; $am['visible?'] = (bool)$q2['IsVisible']; $am['notes-count']=0; $am['last-used']=0; $am['freshness']=0; $am['weight']=0; if ($fh){ $am['href']=jv('e2m_tag', array ('*tag' => $q2)); } $sh[$q2['ID']] = $am; } xn( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix']."NotesKeywords` nk, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". rm($we). "AND nk.`NoteID` = n.`ID` ". "GROUP BY nk.KeywordID", 'get tags ordering info' ); $ah=0; $qh=0; $lh=0; foreach (en() as $zh){ $gj =& $sh[$zh['KeywordID']]; $gj['notes-count']=$zh['Count']; if (@$gj['last-used'] < $zh['LastUsed']) { $gj['last-used']=$zh['LastUsed']; $kh=(time()-$gj['last-used']) / SECONDS_IN_A_YEAR; $gj['freshness']=pow(1/2,$kh); } $ah=max($ah,$gj['notes-count']); $qh=max($qh,$gj['freshness']); $lh=max($lh,$gj['notes-count']*$gj['freshness']); } $dh=array(); foreach ($sh as $r => $xf){ if (!$we and $xf['notes-count']==0) continue; $xh=mb_strtolower($xf['tag']); $dh[$xh]=$xf; if ($qh!=0){ $dh[$xh]['freshness']=$xf['freshness']/$qh; } else { $dh[$xh]['freshness']=0; } if ($lh!=0){ $dh[$xh]['weight'] = ( $xf['freshness']*$xf['notes-count']/$lh ); } else { $dh[$xh]['weight']=0; } if ($dh[$xh]['favourite?'])$dh[$xh]['weight']=1; } if(CACHE_TAGS)n3($pt,serialize($dh)); } catch (AeMySQLException $e){ kv($e); if(Log::$cy)__log('Could not get tags from database'); } } return $dh; } function df($vr){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". rn($vr) ."'", 'get tag by name' ); $t=en(); if (isset ($t[0])) { return $t[0]; } else { return null; } } function sf($eh){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias`='".rn($eh)."'", 'get tag by legacy urlname name' ); $ib=en(); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function af($xs){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`='".((int)$xs)."'", 'get tag by id' ); $ib=en(); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function e2_tagrecs_with_parameters_($parameters){ $rh=array(); if (@$parameters['tag-alias'] or $parameters['tag-alias']==='0'){ $rh=explode(',',$parameters['tag-alias']); } $s2=array(); foreach ($rh as $eh) if ($eh or $eh==='0'){ if ( $yt=on(@$eh) and ($yt['type']=='t') and ($q2=af($yt['id'])) ) { $s2[] = $q2; } else { if ($th=sf($eh)) { $s2[] = $th; } } } return $s2; } function lf(){ global$full_blog_url; static $jh; $rm=u2(); if (empty ($jh)) { $jh=md5($full_blog_url .'email'. $rm); } return $jh; } function zf(){ global$full_blog_url; static $hh; $rm=u2(); if (empty ($hh)) { $hh=md5($full_blog_url .'nospam'. $rm.date('n-Y')); } return $hh; } function kf(){ global$full_blog_url; static $gh; $rm=u2(); if(empty($gh)) { $gh=md5($full_blog_url .'nospam'. $rm.date('n-Y',strtotime('-1 month'))); } return $gh; } function xf($dx){ global$full_blog_url; $rm=u2(); return b('comment_'. md5($full_blog_url .'nospam_cookie'. $rm.$dx)); } function ef(){ global$full_blog_url; $wh=$_SERVER['HTTP_USER_AGENT']; $rm=u2(); return md5($full_blog_url .'nospam_cookie'. $rm.$wh); } function rf(){ if ( array_key_exists('email',$_POST) and $_POST['email']!=='' ) return true; $hh=zf(); $gh=kf(); if ( !array_key_exists($hh,$_POST) and !array_key_exists($gh,$_POST) ) return true; if ( ( array_key_exists($hh,$_POST) and $_POST[$hh]!=='' ) or ( array_key_exists($gh,$_POST) and $_POST[$gh]!=='' ) ) return true; if ( !array_key_exists('comment',$_POST) or (strlen($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($dx){ if ( !array_key_exists(xf($dx),$_COOKIE) or ($_COOKIE[xf($dx)] !== ef()) ) return true; return false; } function e2m_comment($parameters=array ()) { c(jv('e2m_note',$parameters)); } function e2m_comment_edit($parameters=array ()) { return jf('edit',$parameters); } function jf($g6,$parameters=array ()) { global$_config,$_strings,$full_blog_url; $j6=$w6=$_strings['pt--new-comment']; $uh='new'; if ($g6=='edit'){ $l6=e2_commentrec_with_parameters_($parameters); $fr=$_strings['fb--save-changes']; $n2=$l6['noterec']; $j6=$w6=$_strings['pt--edit-comment']; $ih=gf($n2,$l6,$parameters['comment-number']); $uh=$oh['ID']; if (!$l6){ return e2_error404_mode(); } $ph=array ( '.note-id' => $l6['NoteID'], '.comment-id' => $l6['ID'], '.comment-number' => $parameters['comment-number'], '.already-subscribed?' => false, '.gip' => $l6['GIP'], 'create:edit?' => false, 'form-action' => jv('e2s_comment_process'), 'submit-text' => $fr, 'show-subscribe?' => true, 'subscribe?' => (bool)$l6['IsSubscriber'], 'name' => htmlspecialchars($l6['AuthorName'],ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars($l6['AuthorEmail'],ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars($l6['Text'],ENT_COMPAT,HSC_ENC), 'email-field-name' => lf(), ); if (''!=trim($l6['IP'])) { $ph['ip']=$l6['IP']; } } $d=array ( 'title' => $j6, 'heading' => $w6, 'form' => 'form-comment', 'form-comment' => $ph, ); if (!empty ($ih)) { $d['comments'] = array ('each' => array ('only' => $ih)); } return $d; } function e2m_comment_reply($parameters=array ()) { global$_strings; $l6=e2_commentrec_with_parameters_($parameters); if (!$l6){ return e2_error404_mode(); } $n2=$l6['noterec']; $ih=gf($n2,$l6,$parameters['comment-number']); $ih['replying?'] = (bool)true; $c8=($l6['Reply']=='' or !$l6['IsReplyVisible']); $j6=$c8? $_strings['pt--reply-to-comment']:$_strings['pt--edit-reply-to-comment']; $v8=array ( '.note-id' => $n2['ID'], '.comment-id' => $l6['ID'], '.reply-action' => $c8? 'new':'edit', 'form-action' => jv('e2s_comment_edit_reply'), 'submit-text' => $c8? $_strings['fb--publish']:$_strings['fb--save-changes'], 'create:edit?' => (bool) ($c8), 'reply-text' => htmlspecialchars($l6['Reply'],ENT_COMPAT,HSC_ENC), 'emailing-possible?' => MAIL_ENABLED, 'mail-back?' => (bool) ($c8), ); return array ( 'title' => $j6, 'heading' => $j6, 'comments' => array ('each' => array ('only' => $ih)), 'form' => 'form-comment-reply', 'form-comment-reply' => $v8, ); } function e2m_comment_delete($parameters=array ()) { global$_strings,$settings,$b8,$_config; $l6=e2_commentrec_with_parameters_($parameters); $dx=$l6['NoteID']; if (!$l6){ return e2_error404_mode(); } e2_drop_caches_for_note_($dx,true); @unlink(USER_FOLDER. '/last-comment.psa'); xn( "DELETE FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$l6['ID']). "'" ); v(); } function e2m_comment_reply_delete($parameters=array ()) { global$_strings,$settings,$_config; $l6=e2_commentrec_with_parameters_($parameters); if (!$l6){ return e2_error404_mode(); } xn( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$l6['ID']) ); v(); } function e2m_unsubscribe($parameters){ global$_strings,$_config; $y8="ORDER BY `ID` DESC"; $n8=false; $n2=$parameters['*note']; $dx=$n2['ID']; $z3=$parameters['unsubscribe-email']; $m8=$parameters['unsubscribe-key']; $z3=str_replace(' ','+',$z3); if ($dx){ xn( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $dx ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`='". $z3 ."' ". $y8, 'get subscriber’s comments ids' ); $q1=en(); if(count($q1) < 1) { $d['unsubscribe']['error-message']=$_strings['gs--you-are-not-subscribed']; } else { $z6=@$q1[0]; $f8=md5($z6['ID'].$z6['Stamp'] .'x'); if ($m8==$f8){ xn( "UPDATE `". $_config['db_table_prefix']."Comments` ". "SET `IsSubscriber`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $dx ." ". "AND `AuthorEmail` = '". rn($z3). "'", 'unsubscribe' ); $n8=true; $d['unsubscribe']['note-title']=h3( htmlspecialchars($n2['Title'],ENT_COMPAT,HSC_ENC) ); $d['unsubscribe']['note-href']=jv( 'e2m_note', array ('*note' => $n2) ); } if (!$n8){ $d['unsubscribe']['error-message']=$_strings['gs--unsubscription-didnt-work']; } } } else { $d['unsubscribe']['error-message']=$_strings['gs--post-not-found']; } if ($n8){ $j6=$_strings['pt--unsubscription-done']; } else { $j6=$_strings['pt--unsubscription-failed']; } $d['unsubscribe']['success?']=$n8; $d['title']=$j6; $d['heading']=$j6; return $d; } function e2m_comment_flag($parameters){ hf($parameters); c(jv('e2m_note',$parameters)); } function e2m_comment_flag_ajax($parameters){ s([ 'flag-name' => 'comment', 'candy-name' => 'e2m_comment_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ hf($parameters); }, ]); } function hf($parameters){ $l6=e2_commentrec_with_parameters_($parameters); $dx=$l6['NoteID']; if ($l6){ nn('Comments', array ( 'ID' => $l6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); e2_drop_caches_for_note_($dx,true); } } function e2s_comment_process(){ global$_strings,$_fp_error; list ($dx,$uh,$d8)=d2(); if(Log::$cy)__log('Comments: processed, noteid <'. $dx .'>, commentid <'. $uh .'>'); if (!$uh){ $s8=''; if($_fp_error==FP_NOT_COMMENTABLE){ mv($_strings['er--post-not-commentable'],E2E_USER_ERROR); } elseif($_fp_error==FP_EMPTY_FIELD){ mv($_strings['er--name-email-text-required'],E2E_USER_ERROR); } elseif($_fp_error==FP_COMMENT_TOO_LONG){ $a8=$_strings['gs--comment-too-long']; $s8=$_strings['gs--comment-too-long-description']; } elseif($_fp_error==FP_COMMENT_DOUBLE_POST){ $a8=$_strings['gs--comment-double-post']; $s8=$_strings['gs--comment-double-post-description']; } elseif($_fp_error==FP_COMMENT_SPAM_SUSPECT){ $a8=$_strings['gs--comment-spam-suspect']; $s8=$_strings['gs--comment-spam-suspect-description']; } elseif($_fp_error==FP_NO_ID_OR_NEW){ mv($_strings['er--error-occurred'].' (FP_NO_ID_OR_NEW)'); } else { mv($_strings['er--error-occurred'].' (FP '. $_fp_error .')'); } if ($s8){ $d['title']=$a8; $d['heading']=$a8; $d['form']='form-unaccepted-comment'; $d['form-unaccepted-comment'] = array ( 'reason' => $s8, 'text' => @htmlspecialchars($d8['text'],ENT_COMPAT,HSC_ENC), ); return $d; } } if ($dx){ c(jv('e2m_note', array ('*note' => nm($dx)))); } else { c(); } die; } function e2s_comment_edit_reply(){ global$_strings,$v,$_config; $q8=@$_POST['text']; if(trim($q8)=='')$q8=''; $dx=@$_POST['note-id']; $n2=nm($dx); $uh=@$_POST['comment-id']; $l6=wf($uh); $l8=isset ($_POST['mail-back']); $z8=time(); if (@$_POST['reply-action']=='new'){ $k8=time(); } @unlink(e2_note_cache_filename_with_id_($dx .'-comments')); @unlink(e2_note_cache_filename_with_id_($dx .'-comments-author')); if ($l6){ xn( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='". rn($q8) ."', ". ( isset ($k8)? ( "`ReplyStamp`='". $k8 ."', " ) : ( "" ) ). "`ReplyLastModified`='". $z8 ."', ". "`IsReplyVisible`='1' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$uh), 'update comment reply' ); $ie=jv('e2m_note', array ('*note' => $n2)); if ($l8 and $q8!=''){ $gj['comment-time'] = array ($l6['Stamp'],ay()); $gj['commenter']=$l6['AuthorName']; $gj['commenter-email']=$l6['AuthorEmail']; $gj['comment-text']=$l6['Text']; $gj['note-title']=h3($n2['Title']); $gj['reply-time'] = array (time(),ay()); $gj['blog-author']=bd(); $gj['note-href']=$ie; $gj['comment-href']=$ie; $gj['reply-text']=$q8; if(1){ $x8=d1( 'comment-reply',$gj ); $e8=e2l_get_string( 'em--comment-reply', $gj ); $r8=$l6['AuthorEmail']; $t8='From: '. s1(); a1($r8,$e8,$x8,$t8); } if(1){ unset ($gj['commenter-email']); $t8='From: '. s1(); foreach (n2($n2,$l6['AuthorEmail']) as $j8){ $h8=$j8['AuthorEmail']; $g8=md5($j8['ID'].$j8['Stamp'].'x'); $gj['unsubscribe-href']=jv('e2m_unsubscribe', array ( '*note' => $n2, 'unsubscribe-email' => $h8, 'unsubscribe-key' => $g8, ) ); $r8=$h8; $x8=d1('comment-reply-to-public',$gj); $e8=e2l_get_string( 'em--comment-reply-to-public-subject', $gj ); a1($r8,$e8,$x8,$t8); } } } c($ie); } else { v(); } die; } function gf($n2,$z6,$wv){ global$_config,$full_blog_url; if(Log::$cy)__log('Package comment '. $z6['ID'] .'...'); if ($n2===null){ $n2=nm($z6['NoteID']); } $gj['number']=$wv; $w8=!empty ($z6['IsGIPUsed']); $gj['gip-used?']=$w8; $gj['gip']=$gj['gip-used?']?$z6['GIP']:''; $gj['name']=htmlspecialchars($z6['AuthorName'],ENT_NOQUOTES,HSC_ENC); $gj['userpic-set?']=false; if ($w8){ $u8=AVATARS_FOLDER.$z6['GIP'] .'-'. $z6['GIPAuthorID'] .'.jpg'; if(is_file(MEDIA_ROOT_FOLDER.$u8)) { $gj['userpic-set?']=true; $gj['userpic-href']=$full_blog_url .'/'. $u8; } } $gj['name-href']=''; if ( $w8 and $i8=e2_get_user_profile_url($z6['GIP'],$z6['GIPAuthorID'],$z6['AuthorProfileLink']) ) { $gj['name-href']=$i8; } if (x2()) { $gj['email']=htmlspecialchars($z6['AuthorEmail'],ENT_NOQUOTES,HSC_ENC); if (''!=trim($z6['IP'])) { $gj['ip']=$z6['IP']; } } $gj['author-name']=bd(); $gj['important?'] = (bool)$z6['IsFavourite']; $gj['reply-visible?'] = (bool) ($z6['IsVisible'] && $z6['IsReplyVisible']); $gj['reply-important?'] = (bool)$z6['IsReplyFavourite']; $gj['spam-suspect?'] = (bool)$z6['IsSpamSuspect']; $o8=array ((int)$z6['Stamp'],dy($n2)); $gj['time']=$o8; $gj['last-modified']=$o8; if ($z6['LastModified']) $gj['last-modified'] = array ((int)$z6['LastModified'],dy($n2)); if ($z6['ReplyStamp']) $gj['reply-time'] = array ((int)$z6['ReplyStamp'],dy($n2)); if ($z6['ReplyLastModified']) $gj['reply-last-modified'] = array ((int)$z6['ReplyLastModified'],dy($n2)); if (x2()) { $gj['subscriber?'] = (bool)$z6['IsSubscriber']; $gj['new?'] = (bool)$z6['IsNew']; $gj['first-new?']=false; if (!@$_config['read_only']) { if ($z6['IsFavourite']) { $gj['important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ('*note' => $n2,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 0) ); } else { $gj['important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ('*note' => $n2,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 1) ); } if ($z6['IsReplyFavourite']) { $gj['reply-important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 0 ) ); } else { $gj['reply-important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 1 ) ); } $gj['edit-href']=jv( 'e2m_comment_edit', array ('*note' => $n2,'comment-number' => $wv) ); $gj['removed-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => !$z6['IsVisible'] ) ); $gj['removed-reply-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => !$z6['IsVisible'] ) ); $gj['removed-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 0 ) ); $gj['removed-reply-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 0 ) ); $gj['replaced-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 1 ) ); $gj['replaced-reply-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 1 ) ); $p8=jv( 'e2m_comment_reply', array ('*note' => $n2,'comment-number' => $wv) ); if ($z6['Reply']=='' or !$z6['IsReplyVisible']) { $gj['reply-href']=$p8; } else { $gj['edit-reply-href']=$p8; } } } if(mb_strlen($z6['Text']) > $_config['max_comment_length']) { $z6['Text']=mb_substr($z6['Text'],0,$_config['max_comment_length']); } $cg=$n2['FormatterID']==='raw'?'neasden':$n2['FormatterID']; $z1=u3($cg,$z6['Text'],'simple'); $gj['text']=$z1['text-final']; $gj['reply']=''; $gj['replying?'] = (bool)false; $gj['replied?'] = (bool) ( (trim($z6['Reply']) != '') && ($z6['IsReplyVisible']) ); if ((string)$z6['Reply']!==''){ $z1=u3($n2['FormatterID'],$z6['Reply'],'full'); $gj['reply']=$z1['text-final']; } if(Log::$cy)__log('Comments: done'); return $gj; } function wf($xs){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $xs ."'" ); $ib=en(); if(count($ib) > 0){ return $ib[0]; } else { return false; } } function uf($ot){ e2_comment_set_flag('IsVisible',$ot); } function if_($vg){ e2_comment_set_flag('IsReplyVisible',$vg); } function of($cl){ global$_strings,$_config,$settings; $bg=@$_COOKIE[b('commenter_name')]; $yg=@$_COOKIE[b('commenter_email')]; $ng=@$_COOKIE[b('commenter_ph')]; $mg=false; if ($yg and $ng){ foreach (n2($cl) as $j8){ $f8=md5($j8['ID'].$j8['Stamp'] .'x'); if ( $j8['AuthorEmail']==$yg and $ng==$f8 ){ $mg=true; break; } } } $fr=$_strings['fb--submit']; $hh=zf(); $ph=array ( '.note-id' => $cl['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool)$mg, 'cookie-name' => xf($cl['ID']), 'cookie-value' => ef(), 'email-field-name' => lf(), 'nospam-field-name-part-1' => substr($hh,0,4), 'nospam-field-name-part-2' => substr($hh,4), 'create:edit?' => true, 'form-action' => jv('e2s_comment_process'), 'submit-text' => $fr, 'show-subscribe?' => (bool) !$mg, 'emailing-possible?' => MAIL_ENABLED, 'subscribe?' => (bool)$mg, 'subscription-status' => $mg? $_strings['gs--you-are-already-subscribed']:'', 'name' => htmlspecialchars($bg,ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars($yg,ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars($z6['Text'],ENT_COMPAT,HSC_ENC), 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => array (), ); $fg=false; $dg=''; foreach(e2_list_gips() as $sg){ if (!is_file(SYSTEM_FOLDER .'gips/'. $sg .'.json')) { continue; } $ag=e2_is_logged_in($sg); $ph['gips'][$sg] = ( e2_get_gip_auth_url($sg) ); if ($ag){ $fg=true; $qg=e2_get_gip_session($sg); $dg=$qg['GIP']; $ph['name']=htmlspecialchars( $qg['AuthorName'],ENT_COMPAT,HSC_ENC ); } } if (!$ph['email-comments-enabled?'] and !count($ph['gips'])) { return false; } $ph['email-comments-only?'] = (count($ph['gips']) === 0); $ph['logged-in?']=$fg; $ph['logged-in-gip']=$dg; $ph['logout-url']=$fg?jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $ph; } function pf($dx){ return v2($dx,'`IsNew` = 1'); } function c2($dx){ return v2($dx,'`IsVisible` = 1'); } function v2($dx,$b){ global$_config; if (!is_numeric($dx)) return 0; $lg=0; xn( "SELECT count(*) ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $dx ." ". "AND (". $b. ")", 'count comments' ); $q1=en(); $q1=(int)$q1[0]['count(*)']; $lg=$q1; return (int)$lg; } function b2(){ global$_config; if(Log::$cy)__log('Count new comments'); $zg=0; $kg=''; $tq=''; try { xn( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsNew`=1 ORDER BY `Stamp`", 'count new comments for author menu' ); $q1=en(); $zg=count($q1); if ($zg){ $dx=$q1[0]['NoteID']; $tq=jv( 'e2m_note', array ('*note' => nm($dx)) ); } } catch (AeMySQLException $e){ kv($e); if(Log::$cy)__log('Could not count new comments or provide link to the latest one'); } return array ((int)$zg,$kg,$tq); } function y2($dx){ global$_config; if(Log::$cy)__log('Comments: getting comments for note '. $dx); xn( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$dx." ". "ORDER BY `Stamp`", 'get comments including deleted' ); $q1=en(); return $q1; } function n2($n2,$xg=''){ global$_config; $y8="ORDER BY `ID` DESC"; $d=$eg=[]; xn( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `IsVisible`, ". "`AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$n2['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `IsVisible`=1 ". "AND `AuthorEmail`!='". rn($xg) ."' ". $y8, 'get subscribers by note' ); $q1=en(); foreach ($q1 as $j8){ if (!in_array($j8['AuthorEmail'],$eg)) { $d[] = $j8; } $eg[] = $j8['AuthorEmail']; } return $d; } function m2($n2,$ct=NOTE_COMMENTABLE_NOW){ global$settings,$_config; $rg=true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($n2['Stamp'] < time()-$_config['comment_freshness_days']*SECONDS_IN_A_DAY) $rg=false; $tg=$n2['IsCommentable']; if ($ct==NOTE_COMMENTABLE_NOW_CONDITIONALLY){ $tg=true; } return ( em($n2)==='public' and $rg and $tg ); } function e2_commentrec_with_parameters_($parameters=array ()) { $n2=$parameters['*note']; $a6=y2($n2['ID']); $l6=@$a6[$parameters['comment-number']-1]; if ($l6){ $l6['noterec']=$n2; return $l6; } } function d2($st=''){ global$settings,$b8,$_config,$_fp_error; $_fp_error=false; $jh=lf(); $dx=$uh=$name=$z3=$tv=''; if(array_key_exists('note-id',$_POST)) $dx=trim(@$_POST['note-id']); if(array_key_exists('comment-id',$_POST)) $uh=trim(@$_POST['comment-id']); if(array_key_exists('comment-number',$_POST)) $wv=trim(@$_POST['comment-number']); if(array_key_exists('name',$_POST)) $name=trim(@$_POST['name']); if(array_key_exists($jh,$_POST)) $z3=trim(@$_POST[$jh]); if(array_key_exists('text',$_POST)) $tv=trim(@$_POST['text']); $jg=vn('Comments'); if(stripos($jg['Collation'],'utf8mb4')!==0){ $name=nb($name); $tv=nb($tv); } if ($uh=='new'){ $hg=e2_get_logged_gip_name(); if ($hg){ $qg=e2_get_gip_session($hg); $name=trim($qg['AuthorName']); $z3=''; $gg=$qg['GIPAuthorID']; } } else { if(array_key_exists('gip',$_POST))$hg=trim(@$_POST['gip']); } $wg=( (array_key_exists('already-subscribed',$_POST) and $_POST['already-subscribed']) or (array_key_exists('subscribe',$_POST) and $_POST['subscribe']) ); $ug=time(); $d8['text']=$tv; if ($uh=='new' and !$hg){ y('commenter_name',$name); y('commenter_email',$z3); } $ig=($uh=='new' and ( rf() or e2_cookie_data_is_spam_suspicios_for_note_id_($dx) )); $og=1; $q1=false; if (!is_numeric($dx)) { $_fp_error=FP_NO_ID_OR_NEW; } elseif (!is_numeric($uh) and !($uh=='new')) { $_fp_error=FP_NO_ID_OR_NEW; } else { if ( $tv=='' or ( !$hg and ($name=='' or $z3=='') ) ) { $_fp_error=FP_EMPTY_FIELD; } if ($uh=='new'){ $pg=@unserialize(file_get_contents(USER_FOLDER. '/last-comment.psa')); if(md5($name.$z3.$tv)==$pg['md5']) { $_fp_error=FP_COMMENT_DOUBLE_POST; } if ( isset ($_config['max_comment_length']) and strlen(@$_POST['text']) > ($_config['max_comment_length']) ){ $_fp_error=FP_COMMENT_TOO_LONG; } $n2=nm($dx); if ($uh=='new' and !m2($n2)) { $_fp_error=FP_NOT_COMMENTABLE; } if ($ig){ $_fp_error=FP_COMMENT_SPAM_SUSPECT; } } } if (!$_fp_error){ e2_drop_caches_for_note_($dx,true); if ($uh=='new'){ $l6=array ( 'NoteID' => (int)$dx, 'AuthorName' => $name, 'AuthorEmail' => $z3, 'Text' => $tv, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int)$wg, 'IsSpamSuspect' => (int)$ig, 'IsNew' => (int)$og, 'Stamp' => (int)time(), 'LastModified' => (int)time(), 'IP' => rn(l2()), 'IsGIPUsed' => intval(!empty ($hg) && !empty ($gg)), 'GIP' => !empty ($hg)?rn($hg):'', 'GIPAuthorID' => !empty ($gg)?rn($gg):'', ); $l6=yn('Comments',$l6); $uh=$l6['ID']; $pg=array ( 'id' => $uh, 'md5' => md5($name.$z3.$tv), ); @n3(USER_FOLDER. 'last-comment.psa',serialize($pg)); $q1=(int)$uh; $cw=md5($l6['ID'].$l6['Stamp'].'x'); y('commenter_ph',$cw); $n2=nm($dx); $ie=jv('e2m_note', array ('*note' => $n2)); $gj['comment-time'] = array ($ug,ay()); $gj['commenter']=$name; $gj['commenter-email']=$z3; $gj['comment-text']=$tv; $gj['note-title']=$n2['Title']; $gj['note-href']=$ie; $gj['comment-href']=$ie; $gj['comments-disable-href']=jv('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 0 )); $gj['reply-href']=jv( 'e2m_comment_reply', array ( '*note' => $n2, 'comment-number' => $wv ) ); if (isset ($settings['author_email']) and @$settings['notifications']['new_comments']) { $x8=d1( 'comment-new-to-author',$gj ); $e8=e2l_get_string( 'em--comment-new-to-author-subject', $gj ); $r8=$settings['author_email']; $t8 = 'From: '. s1() ."\r\n". 'Reply-to: '. $name .' <'. $z3 .">"; a1($r8,$e8,$x8,$t8); } if (!$ig){ unset ($gj['commenter-email']); $t8='From: '. s1(); foreach (n2($n2,$z3) as $j8){ $h8=$j8['AuthorEmail']; $g8=md5($j8['ID'].$j8['Stamp'].'x'); $gj['unsubscribe-href']=jv('e2m_unsubscribe', array ( '*note' => $n2, 'unsubscribe-email' => $h8, 'unsubscribe-key' => $g8 ) ); $r8=$h8; $x8=d1('comment-new-to-public',$gj); $e8=e2l_get_string( 'em--comment-new-to-public-subject', $gj ); a1($r8,$e8,$x8,$t8); } } } else { $vw=array ( 'ID' => $uh, 'Text' => $tv, 'IsSubscriber' => ((int)$wg), 'LastModified' => time(), ); if (!empty ($name))$vw['AuthorName']=$name; if (!empty ($z3))$vw['AuthorEmail']=$z3; nn('Comments',$vw); $q1=(int)$uh; } } if ($st=='ajaxresult') return $jt; else return array ((int)$dx,$q1,$d8); } function e2m_most_commented($parameters=[]) { global$settings,$_strings,$_config; $we=x2(); $mostCommentedView=new AePageableNotesView('e2m_most_commented',$parameters); $mostCommentedView -> setPortionSize($settings['appearance']['notes_per_page']); $mostCommentedView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $mostCommentedView -> setWantNewCommentsCount($we); $mostCommentedView -> setWantReadHrefs($_config['count_reads']); $mostCommentedView -> setWantControls($we and !@$_config['read_only']); $mostCommentedView -> setWantHiddenTags($we); $bw=$_config['hot_period']; $yw=time()-s2($_config['hot_period']); $mostCommentedView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm($we). "AND `ID` IN ( ". "SELECT `NoteID` FROM ( ". "SELECT `NoteID`, COUNT(*) CommentsCount ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND `Stamp` > ". $yw." ". "GROUP BY `NoteID` ". "ORDER BY CommentsCount DESC ". ") As MostCommentedNotesIDs ". ")" ); $d=[ 'title' => e2l_get_string('pt--most-commented', ['period' => $bw]), 'heading' => e2l_get_string('pt--most-commented', ['period' => $bw]), 'notes' => $mostCommentedView -> getNotesCTree(), 'pages' => $mostCommentedView -> getPagesCTree(), ]; if($mostCommentedView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$mostCommentedView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function e2m_favourites($parameters=[]) { global$settings,$_config,$_strings; $we=x2(); $favouritesView=new AePageableNotesView('e2m_favourites',$parameters); $favouritesView -> setPortionSize($settings['appearance']['notes_per_page']); $favouritesView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $favouritesView -> setWantPaging(true); $favouritesView -> setWantNewCommentsCount($we); $favouritesView -> setWantReadHrefs($_config['count_reads']); $favouritesView -> setWantControls($we and !@$_config['read_only']); $favouritesView -> setWantHiddenTags($we); $favouritesView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `IsFavourite`=1 ". rm($we). "ORDER BY `Stamp` DESC" ); $d=[ 'title' => $_strings['pt--favourites'], 'heading' => $_strings['pt--favourites'], 'notes' => $favouritesView -> getNotesCTree(), 'pages' => $favouritesView -> getPagesCTree(), ]; if($favouritesView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-favourites']; } elseif (!$favouritesView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function s2($bw){ if ('year'==$bw) return SECONDS_IN_A_YEAR; elseif ('month'==$bw) return SECONDS_IN_A_MONTH; elseif ('week'==$bw) return SECONDS_IN_A_DAY*7; elseif ('day'==$bw) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function e2m_popular($parameters=[]) { global$settings,$_config,$_strings; $we=x2(); $popularView=new AePageableNotesView('e2m_popular',$parameters); $popularView -> setPortionSize($settings['appearance']['notes_per_page']); $popularView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $popularView -> setWantNewCommentsCount($we); $popularView -> setWantReadHrefs($_config['count_reads']); $popularView -> setWantControls($we and !@$_config['read_only']); $popularView -> setWantHiddenTags($we); $bw=$_config['popular_period']; $yw=time()-s2($_config['popular_period']); $bj=( "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND a.`Stamp` > ". $yw ." ". "AND n.`IsPublished` = 1 ". rm($we). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID`" ); $popularView -> setSQLCountRequest( "SELECT COUNT(*) Total FROM (SELECT 1 ". $bj .") _" ); $popularView -> setLimitlessSQLRequest( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". $bj ." ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC" ); $d=[ 'title' => e2l_get_string('pt--most-read', ['period' => $bw]), 'heading' => e2l_get_string('pt--most-read', ['period' => $bw]), 'notes' => $popularView -> getNotesCTree(), 'pages' => $popularView -> getPagesCTree(), ]; if($popularView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$popularView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function a2($kj=false,$ax=[]) { global$_config,$_current_url; $nw=$mw=''; $mostReadNotesCollectionView=new AeArbitraryNotesCollectionView('most read or most read by tag'); $mostReadNotesCollectionView -> setCurrentURL($_current_url); $mostReadNotesCollectionView -> setFilterOutIDs($ax); $yw=time()-s2($_config['popular_period']); $mostReadNotesCollectionView -> setSQLRequest( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". $nw. "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". $mw. "AND a.`Stamp` > ". $yw ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". rm(x2()). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC ". "LIMIT 10" ); if ($kj===false){ if(CACHE_POPULAR){ $mostReadNotesCollectionView -> setViewExpiration(SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename(CACHE_FILENAME_POPULAR); $mostReadNotesCollectionView -> setCacheExpiresFilename(CACHE_FILENAME_POPULAR_EXPIRES); } } else { if(CACHE_POPULAR_WITH_TAG){ $mostReadNotesCollectionView -> setViewExpiration(SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename(e2_cache_filename_with_id_($kj,CACHE_FILENAMES_POPULAR_WITH_TAG)); $mostReadNotesCollectionView -> setCacheExpiresFilename( e2_cache_filename_with_id_($kj,CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES) ); } } return$mostReadNotesCollectionView -> getNotesCTree(); } function q2($kj=false,$ax=[]) { global$_strings; $fw=[ 'title' => $_strings['nm--most-read'], ]; $fw['each']=a2($kj,$ax); if ($kj){ $fw['seed']=$kj; } if(count($fw['each']) < 7){ return []; } return $fw; } function e2m_password_reset(){ global$_strings,$_superconfig,$settings; if (!is_file(USER_FOLDER. 'password-reset.psa')) { $rm=sha1(rand()); $sm=jv('e2m_password', array ('recovery-key' => $rm)); @n3(USER_FOLDER. 'password-reset.psa',$sm); } $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; $dw=(bool) ($r8=$settings['author_email']); $d['form']='form-password-reset-email'; $d['form-password-reset-email'] = array ( 'form-action' => jv('e2s_password_reset_email'), 'show-controls?' => $dw, 'submit-text' => $_strings['fb--send-link-by-email'], ); if (!@$_superconfig['user_has_no_access_to_files']) { $d['form-password-reset-email']['reset-info']=$_strings['gs--password-reset-link-saved']; } elseif (!$dw){ mv($_strings['er--cannot-reset-password']); } return $d; } function e2s_password_reset_email(){ global$_strings,$settings; if($_SERVER['REQUEST_METHOD']!='POST')c(); if(array_key_exists('email',$_POST))$z3=trim($_POST['email']); if (!$z3){ mv($_strings['er--cannot-send-link-email-empty']); c(jv('e2m_password_reset')); } $sw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($sw)==0){ mv($_strings['er--error-occurred']); c(jv('e2m_password_reset')); } if ($r8=$settings['author_email']) { if ($z3==$r8){ $x8=d1( 'password-reset', array ('reset-href' => $sw) ); $e8=$_strings['em--password-reset-subject']; $t8='From: '. s1(); a1($r8,$e8,$x8,$t8); } mv($_strings['gs--password-reset-link-sent-maybe'],E2E_MESSAGE); c(jv('e2m_password_reset')); } die; } function e2m_password($parameters){ global$settings,$_strings; $aw=false; $rm=''; if(array_key_exists('recovery-key',$parameters)) { $rm=$parameters['recovery-key']; $sm=jv('e2m_password', array ('recovery-key' => $rm)); $sw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($sw) > 0){ $aw=($sm==$sw); } } if (x2() or $aw){ $d['title']=$_strings['pt--password']; $d['heading']=$_strings['pt--password-for-blog']; if ($aw){ $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; } $d['form']='form-password'; $d['form-password'] = array ( 'form-action' => jv('e2s_password_save'), '.recovery-key' => $rm, 'recovering?' => $aw, 'submit-text' => $_strings['fb--change'], ); return $d; } else { c(); } } function e2m_sessions(){ global$settings,$_strings; $mk=e2_(); $d['title']=$_strings['pt--sessions']; $d['heading']=$_strings['pt--sessions']; $qw=array(); $rm=$_COOKIE[b('key')]; foreach ($mk['sessions'] as $t => $xf){ $qw[] = array ( 'current?' => sha1($rm)===$xf['key_hash'], 'opened' => array ((int)$xf['stamp'],sy()), 'ip-address' => $xf['remote_ip'], 'source' => ($xf['remote_ip']=='127.0.0.1')? $_strings['gs--locally']:$xf['remote_ip'], 'title' => h2($xf['ua']), 'user-agent' => $xf['ua']? $xf['ua']:$_strings['gs--unknown'], ); } $qw=array_reverse($qw); $d['sessions']['each']=$qw; if(count($qw) > 1){ $d['form']='form-sessions'; $d['form-sessions'] = array ( 'form-action' => jv('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $d; } function e2m_sign_in(){ if (x2()) { c(jv('e2m_frontpage', array ('page' => 1))); } else { return array (); } } function e2m_sign_out(){ global$_strings; $mk=e2_(); $lw=-1; if(array_key_exists('sessions',$mk) and is_array($mk['sessions'])) { foreach ($mk['sessions'] as $t => $xf){ $rm=$_COOKIE[b('key')]; if(sha1($rm)===$xf['key_hash']) { $lw=$t; break; } } } if ($lw > -1) unset ($mk['sessions'][$lw]); if (!r2($mk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } y('key',''); c(); } function e2s_password_save(){ global$settings,$_strings; $aw=false; $zw=trim($_POST['old-password']); if ($rm=trim($_POST['recovery-key'])) { $sm=jv('e2m_password', array ('recovery-key' => $rm)); $sw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($sw) > 0){ $aw=($sm==$sw); } } if (z2($zw) or $aw){ $nk=trim($_POST['new-password']); if ($nk!=''){ if (@n3(USER_FOLDER. '/password-hash.psa',serialize(sha1($nk)))) { @unlink(USER_FOLDER. 'password-reset.psa'); mv($_strings['gs--password-changed'],E2E_MESSAGE); c(); } else { mv($_strings['er--could-not-change-password'],E2E_PERMISSIONS_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } } else { mv($_strings['er--no-password-entered'],E2E_USER_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } } else { mv($_strings['er--wrong-password'],E2E_USER_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } die; } function l2(){ $gv=$_SERVER['REMOTE_ADDR']; if(array_key_exists('HTTP_X_FORWARDED_FOR',$_SERVER)) { $gv=array_pop(explode(',',$_SERVER['HTTP_X_FORWARDED_FOR'])); } return $gv; } function e2s_sign_in(){ global$_strings; $mk=e2_(); if($_SERVER['REQUEST_METHOD']=='POST'){ $bz=@$_POST['password']; $kw=@$_POST['is_public_pc']; } else { $bz=@$_GET['password']; $kw=false; } if (z2($bz)) { @unlink(USER_FOLDER. 'password-reset.psa'); $xw=array ( 'stamp' => time(), 'remote_ip' => l2(), 'key_hash' => k2($kw), 'ua' => $_SERVER['HTTP_USER_AGENT'], ); $mk['sessions'][] = $xw; } elseif(strlen(trim($bz)) > 0){ w2(); mv($_strings['er--wrong-password'],E2E_USER_ERROR); } if (!r2($mk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); c(); } v(); } function e2s_drop_other_sessions(){ global$_strings; $mk=e2_(); foreach ($mk['sessions'] as $t => $xf){ $rm=$_COOKIE[b('key')]; if(sha1($rm)===$xf['key_hash']) { $xw=$xf; break; } } $mk['sessions'] = array ($xw); if (!r2($mk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } v(); die; } function z2($bz){ $ew=@unserialize(file_get_contents(USER_FOLDER. '/password-hash.psa')); return (sha1($bz)===$ew and trim($bz)!=''); } function k2($rw=false){ global$settings; $rm=g2(); $tw=sha1($rm); y('key',$rm, !$rw); return $tw; } function x2(){ global $nn,$settings,$_auth_sessions; if (isset ($nn)) return $nn; $nn=false; if (isset ($_COOKIE[b('key')])) { $rm=$_COOKIE[b('key')]; $mk=e2_(); $jw=array(); if(array_key_exists('sessions',$mk) and is_array($mk['sessions'])) { foreach ($mk['sessions'] as $xw){ $jw[] = $xw['key_hash']; } $_auth_sessions['count']=count($mk['sessions']); } if(1){ $nn=(bool)in_array(sha1($rm),$jw,true); } if (!$nn){ y('key',''); } } return $nn; } function e2_(){ if(is_file(USER_FOLDER.'auth.psa')) { $mk=unserialize(@file_get_contents(USER_FOLDER.'auth.psa')); if ($mk) return $mk; } return array (); } function r2($mk){ return n3(USER_FOLDER.'auth.psa',serialize($mk)); } function t2(){ if ($rm=$_COOKIE[b('key')]) { return b('key') .'='. $rm .""; } } function j2(){ if ($rm=$_COOKIE[b('key')]) { return 'Cookie: '. b('key') .'='. $rm ."\r\n"; } return "\r\n"; } function h2($xv){ global$_strings; if(strstr($xv,'iPhone')) return$_strings['gs--ua-iphone']; if(strstr($xv,'iPad')) return$_strings['gs--ua-ipad']; if(strstr($xv,'Opera'))$d=$_strings['gs--ua-opera']; if(strstr($xv,'Firefox'))$d=$_strings['gs--ua-firefox']; if(strstr($xv,'Chrome'))$d=$_strings['gs--ua-chrome']; if(strstr($xv,'Safari') and !strstr($xv,'Chrome'))$d=$_strings['gs--ua-safari']; if (!$d)$d=$_strings['gs--ua-unknown']; if(strstr($xv,'Macintosh')) { if ($d)$d.=' '. $_strings['gs--ua-for-mac']; } return $d; } function e2j_check_password(){ $ew=@unserialize(file_get_contents(USER_FOLDER. '/password-hash.psa')); $bz=''; if(array_key_exists('password',$_POST))$bz=$_POST['password']; w2(); $zv=[ 'success' => true, 'data' => [ 'password-correct' => trim($bz)!=='' and sha1($bz)===$ew ], ]; $zv=json_encode($zv); die ($zv); } function g2(){ $hw=''; $gw='0123456789abcdef'; for ($r=0; $r < 40; $r++)$hw.=$gw[mt_rand(0,15)]; $hw.=time(); $hw=sha1($hw); return $hw; } function w2(){ if(is_file(USER_FOLDER. 'password-wait.psa')) { $ww=unserialize( file_get_contents(USER_FOLDER. '/password-wait.psa') ); if ($ww['delay'] < 5){ $ww['delay'] ++; } if(time()-$ww['time'] > SECONDS_IN_A_MINUTE){ $ww['delay']=0; } $ww['time']=time(); } else { $ww=array ( 'time' => time(), 'delay' => 5, ); } n3(USER_FOLDER.'password-wait.psa',serialize($ww)); sleep($ww['delay']); } function u2(){ static $uw; if(empty($uw))$uw=md5('seсret'); return $uw; } function i2($x){ $rm=u2(); $iw=strlen($rm); $ow=strlen($x); $d=''; for ($r=0; $r < $ow+rand(16,64); ++ $r){ if ($r > $ow){ $pw=rand(0,127); } elseif ($r==$ow){ $pw=0; } else { $pw=ord($x[$r]); } $cu=chr(($pw+ord($rm[$r%$iw])) % 256); $d.=$cu; } $d=base64_encode($d); return $d; } function o2($x){ $rm=u2(); $iw=strlen($rm); $x=base64_decode($x); $ow=strlen($x); $d=''; for ($r=0; $r < $ow; ++ $r){ $vu=(ord($x[$r]) + 256-ord($rm[$r%$iw])) % 256; if ($vu===0) break; $d.=chr($vu); } return $d; } function p2(){ global$settings; if (x2()) { return null; } else { return [ 'form-action' => jv('e2s_sign_in'), 'form-check-password-action' => jv('e2j_check_password'), 'login-name' => @$settings['author'], 'public-pc?' => false, 'reset-href' => jv('e2m_password_reset'), ]; } } $_candies_installer=array ( 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', 'e2s_update_perform', ); $_candies_public=array ( 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_tags', 'e2m_tag', 'e2m_untagged', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_sitemap_xml', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_notify', 'e2s_dump', ); $_candies_to_disallow_in_read_only=array ( 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2m_note_flag_favourite', 'e2m_note_flag', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2m_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ); $_candies_public=array_merge($_candies_public,$_candies_installer); $_candies_indexable=array ( 'e2m_note', ); $_candies_indexable_conditionally=array ( 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ); $_candies_ajax=array ( 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_userpic_remove', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2m_note_flag_favourite', 'e2m_comment_flag_ajax', 'e2m_tag_flag_ajax', ); function cd(){ global$settings,$_lang,$_config,$_strings,$c; if(Log::$cy)__log('Blog information'); $bu['author']=htmlspecialchars(bd(),ENT_NOQUOTES,HSC_ENC); if(array_key_exists('blog_subtitle',$settings)) { $z1=i3($settings['blog_subtitle'],'full'); $s3=$z1['text-final']; $bu['subtitle']=$s3; $bu['subtitle-format-info']=$z1['meta']; ba(@$z1['meta']['links-required']); } $bu['title']=htmlspecialchars(vd(),ENT_NOQUOTES,HSC_ENC); $bu['userpic-set?']=false; $bu['userpic-changeable?']=x2(); if ($bu['userpic-href']=yd()) { $bu['userpic-set?']=true; $bu['userpic-large-href']=yd('large'); $bu['userpic-square-href']=yd('square'); $bu['userpic-changeable-href']=$bu['userpic-href']; } else { unset ($bu['userpic-href']); } if (x2()) { $bu['userpic-upload-action']=jv('e2j_userpic_upload'); $bu['userpic-remove-action']=jv('e2j_userpic_remove'); } $bu['href']=jv('e2m_frontpage', array ('page' => 1)); $bu['rss-href']=jv('e2m_rss'); $bu['jsonfeed-href']=jv('e2m_json'); $bu['language']=$_lang; $bu['show-subscribe-button?']=false; $rb=array (time(),ay()); $yu=xy('Y',$rb[0]); $bu['now']=$rb; $nu=$yu; $mu=ys('start'); if(array_key_exists('stamp',$mu)) { $nu=xy('Y',$mu['stamp']); $bu['start-time'] = array ((int)$mu['stamp'],$mu['timezone']); } $fu=false; $du=km(true,true); if ($du!==null){ if (x2()) { $su=km(true,false); if ($su!==null){ $fu=($du+$su==0); } } else { $fu=($du==0); } } $bu['notes-count'] = (int)$du; $bu['virgin?']=$fu; $au=$_config['years_range_separator']? $_config['years_range_separator']:$_strings['gs--range-separator']; $bu['years-range']=$nu . (($nu==$yu)? '':($au.$yu)); if ($c){ $bu['parent-site-href']=substr($c, (int)strpos('/',$c)); } return $bu; } function vd(){ global$settings,$_strings; if ( array_key_exists('blog_title',$settings) and trim($settings['blog_title']) != '' ){ return trim($settings['blog_title']); } else { return$_strings['e2--default-blog-title']; } } function bd(){ global$settings,$_strings; if ( array_key_exists('author',$settings) and trim($settings['author']) != '' ){ return trim($settings['author']); } else { return$_strings['e2--default-blog-author']; } } function yd($size=''){ global$full_blog_url; $qu=false; if($size=='' and is_file($fb=USER_FOLDER .'userpic@2x.jpg')) { $qu=USER_FOLDER_URLPATH .'userpic@2x.jpg'; } elseif($size=='' and is_file($fb=USER_FOLDER .'userpic@2x.png')) { $qu=USER_FOLDER_URLPATH .'userpic@2x.png'; } elseif($size=='large' and is_file($fb=USER_FOLDER .'userpic-large@2x.jpg')) { $qu=USER_FOLDER_URLPATH .'userpic-large@2x.jpg'; } elseif($size=='square' and is_file($fb=USER_FOLDER .'userpic-square@2x.jpg')) { $qu=USER_FOLDER_URLPATH .'userpic-square@2x.jpg'; } if ($qu===false) return false; $ry=stat($fb); if ($ry['mtime'])$qu.='?'. $ry['mtime']; $qu=$full_blog_url .'/'. $qu; return $qu; } function nd(){ global$_config,$_stopwatch,$yz; $lu=round(w()-$_stopwatch,3); return [ 'show?' => ($_config['display_stat'] > (int) !x2()), 'generation-time' => str_replace('.',',',$lu), 'peak-memory-mb' => str_replace('.',',',round((memory_get_peak_usage()/1024/1024)*100)/100), 'db-query-count' => (int) @$yz, ]; } function e2m_info(){ global$settings,$_config,$v,$c,$_template; $hv=array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (fn_()!==null), 'server_name' => $v, 'folder_on_server' => $c, '---', 'default formatter' => $_config['default_formatter'], '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba max_image_width' => $_template['max_image_width'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr(md5(file_get_contents('system/neasden/neasden.php')), 0,4), '---', ); echo '<pre>'; foreach ($hv as $t => $xf){ if ($xf=='---'){ echo "\n"; continue; } echo str_pad($t,24); echo '\''; print_r($xf); echo '\''; echo "\n"; } echo '</pre>'; die; } function e2s_notify(){ global$_config; if($_config['holborn']) { $zu=@$_GET['src']; if ($zu==''){ if(Log::$cy)__log('Holborn: No src URL'); die; } $ku=file_get_contents($zu); $ku=sd($ku); $xu=json_decode($ku,true); if (!$xu){ if(Log::$cy)__log('Holborn: No meaningful info from '. $zu .' ('. json_last_error() .')'); if ($eu=fd($zu)) { if(Log::$cy)__log('Holborn: Delete note with ID '. $eu['ID']); ym($eu['ID']); } die; } md($xu,$zu); } die; } function e2m_sources($parameters){ global$_config; $ru=$_GET['ord']; if (!$ru)$ru='ID'; $ru="`". rn($ru) ."`"; xn( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix']."Sources` " . "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY ". $ru ); $q1=en(); foreach ($q1 as $bm){ $tu=$bm['ID']; if ($bm['ID']!=$bm['TrueID'])$tu.='<br />'. $bm['TrueID']; $g7=array ( 'id' => $tu, 'userpic-href' => $bm['PictureURL'], 'href' => $bm['URL'], 'href-display' => str_replace('/','/<wbr>',$bm['URL']), 'href-filtered' => str_replace('/','/<wbr>',$bm['_URLX']), 'title' => $bm['Title'], 'author' => $bm['AuthorName'], 'true?' => $bm['ID']==$bm['TrueID'], 'whitelisted?' => (bool)$bm['IsWhiteListed'], 'trusted?' => (bool)$bm['IsTrusted'], ); if (!$bm['IsTrusted']) { $g7['trust-url']=jv( 'e2m_source_trust', array ('source' => $bm['ID']) ); } if ($bm['IsTrusted']) { $g7['premoderate-url']=jv( 'e2m_source_premoderate', array ('source' => $bm['ID']) ); } $g7['ban-url']=jv( 'e2m_source_ban', array ('source' => $bm['ID']) ); $g7['forget-url']=jv( 'e2m_source_forget', array ('source' => $bm['ID']) ); $ju[] = $g7; } $d=array ( 'title' => 'Sources', 'heading' => 'Sources', ); if(count($ju)) { $d['sources']=$ju; } else { $d['nothing']='No sources'; } return $d; } function e2m_source_trust($parameters){ global$_config; $hu=$parameters['source']; xn( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $hu, 'trust source' ); xn( "UPDATE  ". $_config['db_table_prefix']."Notes ". "SET `IsPublished`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $hu, 'publish all notes from the just trusted source' ); qa(); ss(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function e2m_source_premoderate($parameters){ global$_config; $hu=$parameters['source']; xn( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $hu, 'distrust source, set to premoderation' ); ss(); c(); } function e2m_source_ban($parameters){ global$_config; $hu=$parameters['source']; xn( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $hu, 'ban source' ); xn( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $hu, 'delete all notes from the just banned source' ); ss(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function e2m_source_forget($parameters){ global$_config; $hu=$parameters['source']; xn( "DELETE FROM  ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $hu, 'forget source' ); xn( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $hu, 'delete all notes from the just forgotten source' ); ss(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function md($gu,$zu){ global$_config; $wu=ad(array ( 'author' => $gu['author']['name'], 'title' => $gu['title'], 'href' => $gu['author']['url'], 'userpic-href' => $gu['author']['avatar'], )); if (!$wu['IsWhiteListed']) return; if(preg_match('/\+(\d\d)\:(\d\d)/',$gu['items'][0]['date_published'],$y3)) { $nl=$y3[1]*SECONDS_IN_AN_HOUR+$y3[2]*SECONDS_IN_A_MINUTE; } $uu=@$gu['items'][0]['_e2_data'] or $uu=array(); $uu=json_encode($uu); $iu=$wu['IsTrusted']; $n2=array ( 'Title' => $gu['items'][0]['title'], 'Text' => $gu['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime($gu['items'][0]['date_published']), 'Offset' => (int)$nl, 'IsDST' => 0, 'LastModified' => strtotime($gu['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $iu, 'IsExternal' => 1, 'SourceID' => $wu['ID'], 'SourceNoteID' => $gu['items'][0]['id'], 'SourceNoteURL' => $gu['items'][0]['url'], 'SourceNoteJSONURL' => $zu, 'SourceNoteData' => $uu, ); $dx=$gu['items'][0]['id']; if ( $eu=dd($wu['ID'],$dx) ) { $n2['ID']=$eu['ID']; nn('Notes',$n2); } else { $n2=yn('Notes',$n2); } if ($iu){ if (za($n2)) { $n2['IsIndexed']='1'; nn('Notes',$n2); } } e2_drop_caches_for_note_($n2['ID'],$iu); if($_config['backup_automatically']) { tn(); } } function fd($zu){ global$_config; xn( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceNoteJSONURL`='". rn($zu) ."' ". "LIMIT 1", 'get note ID by source JSON URL' ); $q1=en(); return $q1[0]; } function dd($hu,$ou){ global$_config; xn( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`= '". $hu ."' ". "AND `SourceNoteID`= '". $ou ."' ". "LIMIT 1", 'get note ID by source ID and source note ID' ); $q1=en(); return $q1[0]; } function sd($ku){ for ($r=0; $r <= 31; ++$r){ $ku=str_replace(chr($r),'',$ku); } $ku=str_replace(chr(127),'',$ku); if(0===strpos(bin2hex($ku),'efbbbf')) { $ku=substr($ku,3); } return $ku; } function ad($pu){ global$_config; $c0=false; xn( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `URL`= '". $pu['href'] ."' ". "LIMIT 1", 'get source record by the URL from blog info' ); $q1=en(); if(count($q1)) { $c0=$q1[0]; if ($c0['ID']!=$c0['TrueID']) { xn( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`= '". $c0['TrueID'] ."' ". "LIMIT 1", 'get true source record by using the TrueID of just found record' ); $q1=en(); if(count($q1)) { $c0=$q1[0]; } } } $wu=array ( 'Title' => $pu['title'], 'AuthorName' => $pu['author'], 'PictureURL' => $pu['userpic-href'], ); if ($c0!==false){ if ( $c0['Title']!==$pu['title'] or $c0['AuthorName']!==$pu['author'] or $c0['PictureURL']!==$pu['userpic-href'] ) { $wu['ID']=$c0['ID']; nn('Sources',$wu); } return $c0; } else { $wu['URL']=$pu['href']; $wu['IsWhiteListed']=1; $wu['IsTrusted']=0; $wu=yn('Sources',$wu); $wu['TrueID']=$wu['ID']; nn('Sources',$wu); return $wu; } } function qd($n2){ global$_config; $gj=array(); if (@$n2['IsExternal']) { if(array_key_exists('SourceID',$n2)) { xn( "SELECT * FROM `". $_config['db_table_prefix']."Sources` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $n2['SourceID'] ."'", 'get source by id' ); $ib=en(); $gj['source']=$ib[0]['Title']; $gj['source-id'] = (int)$n2['SourceID']; $gj['source-true-id'] = (int)$ib[0]['TrueID']; $gj['source-whitelisted?'] = (bool)$ib[0]['IsWhiteListed']; $gj['source-trusted?'] = (bool)$ib[0]['IsTrusted']; if (!$ib[0]['IsTrusted']) { $gj['source-trust-url']=jv( 'e2m_source_trust', array ('source' => $n2['SourceID']) ); } if ($ib[0]['IsTrusted']) { $gj['source-premoderate-url']=jv( 'e2m_source_premoderate', array ('source' => $n2['SourceID']) ); } $gj['source-ban-url']=jv( 'e2m_source_ban', array ('source' => $n2['SourceID']) ); $gj['source-forget-url']=jv( 'e2m_source_forget', array ('source' => $n2['SourceID']) ); $gj['author']=$ib[0]['AuthorName']; $gj['author-href']=$ib[0]['URL']; $gj['userpic-href']=$ib[0]['PictureURL']; } if(array_key_exists('SourceNoteURL',$n2) and @$n2['SourceNoteURL']!=''){ $gj['href-external']=$n2['SourceNoteURL']; } } return $gj; } function e2m_frontpage($parameters=[]) { global$settings,$_strings,$_config; if(Log::$cy)__log('Frontpage {'); $we=x2(); $frontpageView=new AePageableNotesView('e2m_frontpage',$parameters); $frontpageView -> setPortionSize($settings['appearance']['notes_per_page']); $frontpageView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $frontpageView -> setWantPaging(true); $frontpageView -> setWantNewCommentsCount($we); $frontpageView -> setWantReadHrefs($_config['count_reads']); $frontpageView -> setWantControls($we and !@$_config['read_only']); $frontpageView -> setWantHiddenTags($we); $frontpageView -> setWantRelatedNotes(true); if(CACHE_FRONTPAGE and $frontpageView -> isFirstPage()) { if ($we){ $frontpageView -> setCacheFilename(CACHE_FILENAME_FRONTPAGE_AUTHOR); } else { $frontpageView -> setCacheFilename(CACHE_FILENAME_FRONTPAGE); } } $frontpageView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm($we). "ORDER BY `Stamp` DESC" ); $d=[ 'title' => vd(), 'heading' => '', 'notes' => $frontpageView -> getNotesCTree(), 'pages' => $frontpageView -> getPagesCTree(), 'frontpage?' => $frontpageView -> isFirstPage(), ]; if ( !$frontpageView -> isExistingPage() and !$frontpageView -> isFirstPageOfEmptyView() ) { return e2_error404_mode(); } if(Log::$cy)__log('} // Frontpage'); return $d; } function e2m_json($parameters=array ()) { list ($v0,$ug)=rd(); $ku=json_encode($v0,E2_JSON_STYLE); gd($ku,$ug,'json'); } function e2m_rss($parameters=array ()) { list ($v0,$ug)=rd(); $b0=e2feeds__rss_using_jsonfeed_array_($v0); gd($b0,$ug,'rss'); } function e2m_tag_json($parameters=array ()) { if(array_key_exists('*tag',$parameters)) { $q2=$parameters['*tag']; } else { return e2_error404_mode(); } list ($v0,$ug)=td($q2); $ku=json_encode($v0,E2_JSON_STYLE); gd($ku,$ug,'json'); } function e2m_tag_rss($parameters=array ()) { global$settings,$_config,$_strings; if(array_key_exists('*tag',$parameters)) { $q2=$parameters['*tag']; } else { return e2_error404_mode(); } list ($v0,$ug)=td($q2); $b0=e2feeds__rss_using_jsonfeed_array_($v0); gd($b0,$ug,'rss'); } function e2m_note_json($parameters=array ()) { global$settings,$_current_url; $n2=$parameters['*note']; if ($n2==false) return e2_error404_mode(); $we=x2(); if (!( em($n2)==='public' or ($we and $n2['IsPublished']) )) return e2_error404_mode(); $ug=$n2['Stamp']; $y0=e2_jsonfeed_item_array_from_noterec_($n2); $n0=array ($y0); $v0=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($n0); $v0['title']=vd(); $v0['_rss_description']=ed(); $v0['home_page_url']=jv('e2m_frontpage', array ('page' => 1)); $v0['feed_url']=$_current_url; gd(json_encode($v0,E2_JSON_STYLE),$ug,'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($n0){ global$_lang,$_config,$settings; $d=[ 'version' => 'https://jsonfeed.org/version/1', 'title' => null, '_rss_description' => null, '_rss_language' => $_lang, '_itunes_email' => '', '_itunes_categories_xml' => '', '_itunes_image' => '', '_itunes_explicit' => '', 'home_page_url' => null, 'feed_url' => null, 'icon' => yd(), 'author' => array ( 'name' => bd(), 'url' => jv('e2m_frontpage', array ('page' => 1)), 'avatar' => yd(), ), 'items' => $n0, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ]; return $d; } function e2_jsonfeed_item_array_from_noterec_($n2){ global$settings; $sm=jv('e2m_note', array ('*note' => $n2)); $m0=( xy('Y-m-d\TH:i:s',$n2['Stamp']) . gy($n2['Stamp'],':') ); $f0=( xy('Y-m-d\TH:i:s',$n2['LastModified']) . gy($n2['LastModified'],':') ); $d0=( xy('D, d M Y H:i:s ',$n2['Stamp']) . gy($n2['Stamp']) ); $z1=u3($n2['FormatterID'], @$n2['Text'],'full-rss'); $me=d3( sb( $z1['meta']['resources-detected'], q3('note',$n2['ID']) ) ); $eq=array ( 'id' => (string)$n2['ID'], 'url' => $sm, 'title' => h3($n2['Title']), 'content_html' => $z1['text-final'], 'date_published' => $m0, 'date_modified' => $f0, ); if ($n2['IsExternal']) { $a0=qd($n2); $eq['url']=$a0['href-external']; $eq['author'] = array ( 'name' => $a0['author'], 'url' => $a0['author-href'], 'avatar' => $a0['userpic-href'], ); } if(count($me) > 0){ $eq['image']=$me[0]; } $eq['_date_published_rfc2822']=$d0; $eq['_rss_guid_is_permalink']='false'; $eq['_rss_guid'] = (string)$n2['ID']; $eq['_e2_data'] = array ( 'is_favourite' => (bool)$n2['IsFavourite'], 'links_required' => $z1['meta']['links-required'], 'og_images' => $me, ); return $eq; } function kd($q0,$j6,$tq){ global$_newsfeeds; if (!isset ($_newsfeeds))$_newsfeeds=[]; $l0=''; if ($q0=='rss')$l0='application/rss+xml'; if ($q0=='json')$l0='application/json'; $_newsfeeds[] = [ 'type' => $l0, 'title' => htmlspecialchars($j6,ENT_NOQUOTES,HSC_ENC), 'href' => $tq ]; } function xd(){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm(). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get recent public noterecs for RSS or JSONFeed' ); return en(); } function ed(){ global$settings; if (!empty ($settings['meta_description'])) { $z0=strip_tags(h3(htmlspecialchars($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } elseif (!empty ($settings['blog_subtitle'])) { $z1=i3($settings['blog_subtitle'],'full'); $z0=$z1['text-final']; $z0=xm($z0); } else { $z0=vd(); } return $z0; } function rd(){ global$settings,$_current_url; $ug=0; $n0=array(); $v0=array(); $pt=CACHE_FILENAME_FRONTPAGE_FEED; if(CACHE_FRONTPAGE_FEED and is_file($pt)) { if(Log::$cy)__log('Feed array (RSS, JSON): cached'); $v0=@unserialize(file_get_contents($pt)); $ug=filemtime($pt); } else { if(Log::$cy)__log('Feed array (RSS, JSON): not cached, will need to build'); $nt=xd(); foreach ($nt as $n2){ $n0[] = e2_jsonfeed_item_array_from_noterec_($n2); $ug=max($ug,$n2['Stamp']); } $v0=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($n0); $v0['title']=vd(); $v0['_rss_description']=ed(); $v0['home_page_url']=jv('e2m_frontpage', array ('page' => 1)); $v0['feed_url']=$_current_url; if(CACHE_FRONTPAGE_FEED)n3($pt,serialize($v0)); } return array ($v0,$ug); } function td($q2){ global$settings,$_config,$_strings,$_current_url; $ug=0; $n0=array(); xn( "SELECT n.* ". "FROM `". $_config['db_table_prefix']."Notes` n ". "INNER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (nk.`KeywordID` = ". $q2['ID'] .") ". "AND n.`IsPublished` = 1 ". rm(x2()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get tag noterecs for RSS or JSONFeed' ); $nt=en(); foreach ($nt as $n2){ $n0[] = e2_jsonfeed_item_array_from_noterec_($n2); $ug=max($ug,$n2['Stamp']); } if ((string)$q2['Summary']!==''){ $z0=strip_tags(h3(htmlspecialchars($q2['Summary'],ENT_NOQUOTES,HSC_ENC))); } else if ((string)$q2['Description']!==''){ $z1=i3($q2['Description'],'full'); $z0=$z1['text-final']; $z0=xm($z0); } else { $z0=ed(); } $nj=htmlspecialchars($q2['PageTitle'],ENT_COMPAT,HSC_ENC); if ((string)$nj!==''){ $j6=$nj; } else { $j6=( vd() .': '. $_strings['gs--posts-tagged'] .' '. htmlspecialchars($q2['Keyword'],ENT_COMPAT,HSC_ENC) ); } $v0=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($n0); $v0['title']=$j6; $v0['_rss_description']=$z0; $v0['home_page_url']=jv('e2m_tag', array ('*tag' => $q2)); $v0['feed_url']=$_current_url; return array ($v0,$ug); } function e2feeds__rss_using_jsonfeed_array_($content){ $k0=USER_FOLDER.'rss/rss.tmpl.php'; if (!is_file($k0)) { $k0=DEFAULTS_FOLDER.'rss/rss.tmpl.php'; } if(is_file($k0)) { ob_start(); include $k0; $b0=ob_get_contents(); ob_end_clean(); } return $b0; } function hd($b0){ $b0=str_replace("\x0",'',$b0); for ($r=0; $r < strlen($b0); ++$r){ if(ord($b0[$r]) < 32 and !in_array(ord($b0[$r]), array (10,13))) { $b0[$r]=''; } } return $b0; } function gd($x0,$ug,$q0){ global$_config; $e0=gmdate('r',$ug); $r0=md5($ug); if ($q0=='rss'){ if (@$_config['dev_xml_as_text']) { header('Content-Type: text/plain'); } else { header('Content-Type: application/xml; charset=utf-8'); } } elseif ($q0=='json'){ header('Content-Type: application/json'); } else { header('Content-Type: text/plain'); } header('Last-modified: '. $e0); header('Etag: '. $r0); header('Cache-Control: public'); header('Expires: '. date('r',$ug+SECONDS_IN_A_DAY)); $t0=isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $j0=isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$t0 && !$j0 or $j0 && $j0!=$r0 or $t0 && $t0!=$e0 ){ if ($q0=='rss'){ $b0=hd($b0); } ini_set('zlib.output_compression',0); echo $x0; ini_set('zlib.output_compression',1); } else { header('HTTP/1.1 304 Not Modified'); } die; } function e2m_year($parameters=array ()) { global$_strings,$_config; $h0=$parameters['year']; $g0=e2l_get_string('pt--nth-year', array ('year' => $h0)); if (!id($h0)) { return e2_error404_mode(); } $w0=gmmktime(0,0,0,1,1,$h0-1); $u0=gmmktime(0,0,0,1,1,$h0+1); list ($i0,$o0)=e2__fruitful_neighbours_with_ymd_($h0); $p0='e2m_year'; if ($i0){ $c9['prev-href']=jv( $p0,e2__parameters_with_timestamp_($i0) ); $c9['prev-jump?'] = (bool) (gmdate('Y',$w0)!=gmdate('Y',$i0)); $c9['prev-title']=gmdate('Y',$i0); } if ($o0){ $c9['next-href']=jv( $p0,e2__parameters_with_timestamp_($o0) ); $c9['next-jump?'] = (bool) (gmdate('Y',$u0)!=gmdate('Y',$o0)); $c9['next-title']=gmdate('Y',$o0); } $c9['timeline?']=false; $c9['this']=$h0; $c9['this-title']=$h0; $v9=ys('start'); $b9=ys('end'); if ( $h0==ky('Y',$v9['stamp'],$v9['timezone']) ) { $y9=ky('m',$v9['stamp'],$v9['timezone']); } else { $y9=1; } if ( $h0==xy('Y',time()) ) { $n9=xy('m',time()); } else { $n9=12; } $m9=vs($h0); for ($f9=1; $f9 <= 12; ++ $f9){ $d9=gmmktime(0,0,0,$f9,1,$h0); $s9[$f9] = array ( 'number' => $f9, 'start-time' => array ($d9,sy()), 'href' => gmdate('Y/m/',$d9), 'real?' => $f9 >= $y9 and $f9 <= $n9, 'fruitful?' => @in_array(gmdate('n',$d9),$m9), ); } list ($ir,$or_)=jy($h0); $d=[ 'title' => $g0, 'heading' => $g0, 'pages' => $c9, 'year' => (int)$h0, 'year-months' => $s9, ]; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". rm(x2()). "AND `Stamp` BETWEEN ". $ir ." ". "AND ". $or_ ." ". "ORDER BY `Stamp`", 'get all notes for the year' ); $q1=en(); $l5=cs($q1,$h0); if(count($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_month($parameters=array ()) { global$_strings,$_config; $h0= $parameters['year']; $f9=$parameters['month']; $g0=e2l_get_string( 'pt--nth-month-of-nth-year', array ('year' => $h0,'month' => $f9) ); if (!id($h0,$f9)) { return e2_error404_mode(); } $w0=gmmktime(0,0,0,$f9-1,1,$h0); $u0=gmmktime(0,0,0,$f9+1,1,$h0); list ($i0,$o0)=e2__fruitful_neighbours_with_ymd_($h0,$f9); $p0='e2m_month'; if ($i0){ $c9['prev-href']=jv( $p0,e2__parameters_with_timestamp_($i0) ); $c9['prev-jump?'] = (bool) (gmdate('Y/m',$w0)!=gmdate('Y/m',$i0)); $c9['prev-title']=e2l_get_string( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate('Y',$i0),'month' => gmdate('n',$i0) ) ); } if ($o0){ $c9['next-href']=jv( $p0,e2__parameters_with_timestamp_($o0) ); $c9['next-jump?'] = (bool) (gmdate('Y/m',$u0)!=gmdate('Y/m',$o0)); $c9['next-title']=e2l_get_string( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate('Y',$o0),'month' => gmdate('n',$o0) ) ); } $c9['timeline?']=false; $c9['this-title']=$g0; list ($ir,$or_)=jy($h0,$f9); $d=[ 'title' => $g0, 'heading' => $g0, 'pages' => $c9, 'year' => (int)$h0, 'month' => (int)$f9, 'month-days' => e2_pack_month_days_with_ymd_($h0,$f9,false), ]; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". rm(x2()). "AND `Stamp` BETWEEN ". $ir ." ". "AND ". $or_ ." ". "ORDER BY `Stamp`", 'get all notes for the month' ); $q1=en(); $l5=cs($q1,$h0,$f9); if(count($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_day($parameters=array ()) { global$_strings,$_config; $h0= (int)$parameters['year']; $f9=(int)$parameters['month']; $q9= (int)$parameters['day']; if (!(id($h0,$f9,$q9))) { return e2_error404_mode(); } $g0=e2l_get_string( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $h0,'month' => $f9,'day' => $q9) ); $w0=gmmktime(0,0,0,$f9,$q9-1,$h0); $u0=gmmktime(0,0,0,$f9,$q9+1,$h0); list ($i0,$o0)=e2__fruitful_neighbours_with_ymd_($h0,$f9,$q9); $p0='e2m_day'; if ($i0){ $c9['prev-href']=jv( $p0,e2__parameters_with_timestamp_($i0) ); $c9['prev-jump?'] = (bool) (gmdate('Y/m/d',$w0)!=gmdate('Y/m/d',$i0)); $c9['prev-title']=e2l_get_string( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate('Y',$i0),'month' => gmdate('n',$i0),'day' => gmdate('j',$i0), ) ); } if ($o0){ $c9['next-href']=jv( $p0,e2__parameters_with_timestamp_($o0) ); $c9['next-jump?'] = (bool) (gmdate('Y/m/d',$u0)!=gmdate('Y/m/d',$o0)); $c9['next-title']=e2l_get_string( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate('Y',$o0),'month' => gmdate('n',$o0),'day' => gmdate('j',$o0), ) ); } $c9['timeline?']=false; $c9['this-title']=$g0; $d=[ 'title' => $g0, 'heading' => $g0, 'pages' => $c9, 'month-days' => e2_pack_month_days_with_ymd_($h0,$f9,$q9), ]; $q1=dm($h0,$f9,$q9); $q1=array_reverse($q1); $we=x2(); $l5=[]; foreach ($q1 as $t => $n2){ if (!( em($n2)==='public' or ($we and $n2['IsPublished']) )) continue; $noteView=new AeNoteView($n2); $noteView -> setWantNewCommentsCount($we); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($we and !@$_config['read_only']); $noteView -> setWantHiddenTags($we); $noteView -> setWantCommentsLink(true); $l5[] = $noteView -> getNoteCTree(); } if(count($l5)) { $d['notes']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function wd(){ global$_config; $l5=null; if(CACHE_FULLLIST and is_file(CACHE_FILENAME_FULLLIST)) { $l5=@unserialize(file_get_contents(CACHE_FILENAME_FULLLIST)); if(Log::$cy)__log('Retrieving full notes list from cache...'); } if (!is_array($l5)) { if(Log::$cy)__log('Retrieving full notes list from database...'); xn( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". rm(). "ORDER BY `Stamp`", 'get full notes list' ); $q1=en(); $l5=cs($q1); if(CACHE_FULLLIST)n3(CACHE_FILENAME_FULLLIST,serialize($l5)); } return $l5; } function e2m_everything($parameters=array ()) { global$_strings; $l5=wd(); $l9=count($l5); $g0=e2l_get_string('pt--n-posts', array ('number' => $l9)); $d=[ 'title' => $g0, 'heading' => $g0, ]; if(count($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-notes']; } return $d; } function e2m_sitemap_xml($parameters=array ()) { global$_config; $l5=wd(); if (@$_config['dev_xml_as_text']) { header('Content-Type: text/plain'); } else { header('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; if(count($l5)) { $ug=@$l5[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. jv('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo gmdate('Y-m-d\TH:i:s\Z',$ug[0]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($l5 as $l2){ echo '<url>'."\r\n"; echo '<loc>'; echo $l2['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo gmdate('Y-m-d\TH:i:s\Z',$l2['last-modified'][0]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function e2_pack_month_days_with_ymd_($h0,$f9,$q9){ $z9=ky('t',gmmktime(0,0,0,$f9,1,$h0),sy()); $v9=ys('start'); $b9=ys('end'); if ( $h0 .'/'. $f9 == ky('Y/n',$v9['stamp'],$v9['timezone']) ) { $k9=ky('d',$v9['stamp'],$v9['timezone']); } else { $k9=1; } if ( $h0 .'/'. $f9 == xy('Y/n',time()) ) { $x9=xy('d',time()); } else { $x9=$z9; } $e9=bs($h0,$f9); for ($r=1; $r <= $z9; ++ $r){ $d9=gmmktime(0,0,0,$f9,$r,$h0); $r9[$r] = array ( 'number' => $r, 'start-time' => array ($d9,sy()), 'href' => gmdate('Y/m/d/',$d9), 'this?' => (bool) ($r==$q9), 'real?' => $r >= $k9 and $r <= $x9, 'fruitful?' => @in_array(gmdate('d',$d9),$e9), ); } return $r9; } function id($h0,$f9=false,$q9=false){ $v9=ys('start'); if ($v9===false){ return false; } $t9=ky('Y',$v9['stamp'],$v9['timezone']); $j9=xy('Y',time()); if ($f9===false){ return (bool) ( $h0 >= $t9 and $h0 <= $j9 ); } else { $h9=ky('n',$v9['stamp'],$v9['timezone']); $g9=xy('n',time()); if ($q9===false){ return (bool) ( $f9 >= 1 and $f9 <= 12 and ( ($h0 > $t9 and $h0 < $j9) or ($h0==$t9 and $f9 >= $h9) or ($h0==$j9 and $f9 <= $g9) ) ); } else { $w9=ky('j',$v9['stamp'],$v9['timezone']); $u9=xy('j',time()); if(1){ return (bool) ( checkdate($f9,$q9,$h0) and ( ($h0 > $t9 and $h0 < $j9) or ($h0==$t9 and $f9 > $h9) or ($h0==$t9 and $f9==$h9 and $q9 >= $w9) or ($h0==$j9 and $f9 < $g9) or ($h0==$j9 and $f9==$g9 and $q9 <= $u9) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($hb,$jb=false,$tb=false){ global$_db,$_config; list ($i9,$o9)=jy($hb,$jb,$tb); $p9=SECONDS_IN_A_DAY; if ($tb===false)$p9=SECONDS_IN_A_MONTH; if ($jb===false)$p9=SECONDS_IN_A_YEAR; $ci=$vi=null; xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` < '". ($o9-$p9) ."' ". rm(x2()). "ORDER BY Stamp DESC", 'get previous fruitful neighbour with ymd' ); while ($u=mysqli_fetch_array($_db['result'],MYSQLI_ASSOC)) { list ($h0,$f9,$q9)=explode('/', ky('Y/n/j',$u['Stamp'],dy($u)) ); $bi=$hb*10000 + ($jb? ($jb*100):0) + ($tb? $tb:0); $yi=$h0*10000 + ($jb? ($f9*100):0) + ($tb? $q9:0); if ($yi < $bi){ $ci=gmmktime(0,0,0,$f9,$q9,$h0); break; } } xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` > '". ($i9+$p9) ."' ". rm(x2()). "ORDER BY Stamp", 'get next fruitful neighbour with ymd' ); while ($u=mysqli_fetch_array($_db['result'],MYSQLI_ASSOC)) { list ($h0,$f9,$q9)=explode('/', ky('Y/n/j',$u['Stamp'],dy($u)) ); $bi=$hb*10000 + ($jb? ($jb*100):0) + ($tb? $tb:0); $yi=$h0*10000 + ($jb? ($f9*100):0) + ($tb? $q9:0); if ($yi > $bi){ $vi=gmmktime(0,0,0,$f9,$q9,$h0); break; } } return [$ci,$vi]; } function e2__parameters_with_timestamp_($m4){ list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode('/',gmdate('Y/m/d',$m4)); return$parameters; } function cs($nt,$h0=false,$f9=false){ $ni=0; $l5=array(); $t7=''; $l5=array(); $mi=array(); foreach ($nt as $t => $n2){ $l2['href'] = jv('e2m_note', array ('*note' => $n2)); $l2['time'] = array ((int)min($n2['Stamp'],time()), dy($n2)); $l2['last-modified'] = array ((int)min($n2['LastModified'],time()), dy($n2)); $l2['favourite?'] = (bool) ($n2['IsFavourite'] && $n2['IsPublished']); $ge=em($n2); $l2['draft?'] = $ge==='draft'; $l2['scheduled?'] = $ge==='scheduled'; $l2['public?'] = $ge==='public'; $l2['hidden?'] = $ge==='hidden'; if(array_key_exists('SourceNoteURL',$n2) and @$n2['SourceNoteURL']!=''){ $l2['href']=$n2['SourceNoteURL']; $l2['href-original']=$n2['SourceNoteURL']; } if ( ($h0 and $f9 and ( ((int)$h0) .'/'. ((int)$f9) == ky('Y/n',$n2['Stamp'],dy($n2)) )) or ($h0 and !$f9 and ( (int)$h0 == ky('Y',$n2['Stamp'],dy($n2)) )) or (!$h0 and !$f9) ) { array_unshift($l5,$l2); array_unshift($mi,str_replace("\n",' ',$n2['Title'])); } } if(Log::$cy)__log('Will do typography'); $fi=implode("\n",$mi); $fi=h3(htmlspecialchars($fi,ENT_NOQUOTES,HSC_ENC)); $mi=explode("\n",$fi); foreach ($l5 as $t => $xf){ $l5[$t]['title']=$mi[$t]; } return $l5; } function vs($hb){ global$_config; list ($di,$si)=jy($hb); xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $di. "' AND '". $si ."' ". rm(x2()), 'get all notes for the year '. $hb .' to list months with notes' ); $q1=en(); $ai=array(); foreach ($q1 as $pr){ if ( ((int)$hb) == ky('Y',$pr['Stamp'],dy($pr)) ) { $ai[] = (int)ky('n',$pr['Stamp'],dy($pr)); } } $ai=@array_unique($ai); sort($ai); return $ai; } function bs($hb,$jb){ global$_config; list ($qi,$li)=jy($hb,$jb); xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $qi ."' AND '". $li ."' ". rm(x2()), 'get all notes for the month '.$jb.' of the year '. $hb .' to list days with notes' ); $q1=en(); $zi=array(); foreach ($q1 as $pr){ if ( ((int)$hb) .'/'. ((int)$jb) == ky('Y/n',$pr['Stamp'],dy($pr)) ) { $zi[] = (int)ky('j',$pr['Stamp'],dy($pr)); } } $zi=@array_unique($zi); sort($zi); return $zi; } function ys($ki){ global$_config; $xi='p1'; if (!x2()) { $xi='p1v1'; } $pt=CACHES_FOLDER.$ki .'-stamp-'. $xi .'.e2time.psa'; if(CACHE_EDGE_TIMEINFO and is_file($pt)) { $d=@unserialize(file_get_contents($pt)); } if(is_array($d)) { return $d; } else { $d=array ( 'stamp' => time(), 'timezone' => ay(), ); if ($ki=='start'){ xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm(x2()). "ORDER BY `Stamp` LIMIT 1", 'get blog start timestamp' ); } elseif ($ki=='end'){ xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm(x2()). "ORDER BY `Stamp` DESC LIMIT 1", 'get blog latest note timestamp' ); } $q1=en(); if(count($q1)) { $d=array ( 'stamp' => $q1[0]['Stamp'], 'timezone' => dy($q1[0]), ); if(CACHE_EDGE_TIMEINFO)n3($pt,serialize($d)); return $d; } return $d; } } define('CACHE',true); define('CACHE_ALIASMAP',CACHE and true); define('CACHE_NOTES',CACHE and true); define('CACHE_NOTES_RELATED',CACHE and true); define('CACHE_NOTES_COMMENTS',CACHE and true); define('CACHE_POPULAR',CACHE and true); define('CACHE_POPULAR_WITH_TAG',CACHE and true); define('CACHE_TAGS',CACHE and true); define('CACHE_FAVTAGS',CACHE and true); define('CACHE_NOTES_COUNTS',CACHE and true); define('CACHE_EDGE_TIMEINFO',CACHE and true); define('CACHE_FRONTPAGE',CACHE and true); define('CACHE_FRONTPAGE_FEED',CACHE and true); define('CACHE_TAG',CACHE and true); define('CACHE_FULLLIST',CACHE and true); define('CACHE_DRAFTS',CACHE and true); define('CACHE_DRAFTS_ALIAS_USE_COUNTS',CACHE and true); define('CACHE_LASTMODIFIEDS',CACHE and true); define('CACHE_FILENAME_ALIASMAP',CACHES_FOLDER.'aliasmap.psa'); define('CACHE_FILENAMES_NOTES',CACHES_FOLDER.'note-*.psa'); define('CACHE_FILENAMES_NOTES_RELATED',CACHES_FOLDER.'note-*-related.psa'); define('CACHE_FILENAMES_NOTES_COMMENTS',CACHES_FOLDER.'note-*-comments.ctree.psa'); define('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR',CACHES_FOLDER.'note-*-comments-author.ctree.psa'); define('CACHE_FILENAMES_NOTES_COUNTS',CACHES_FOLDER.'notes-count-*.txt'); define('CACHE_FILENAMES_EDGE_TIMEINFO',CACHES_FOLDER.'*.e2time.psa'); define('CACHE_FILENAME_POPULAR',CACHES_FOLDER.'popular.ctree.psa'); define('CACHE_FILENAME_POPULAR_EXPIRES',CACHES_FOLDER.'popular-expires.txt'); define('CACHE_FILENAMES_POPULAR_WITH_TAG',CACHES_FOLDER.'popular-*.ctree.psa'); define('CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES',CACHES_FOLDER.'popular-*-expires.txt'); define('CACHE_FILENAME_TAGS',CACHES_FOLDER.'tags.ctree.psa'); define('CACHE_FILENAME_TAGS_FULL',CACHES_FOLDER.'tags-full.ctree.psa'); define('CACHE_FILENAME_TAGS_AUTHOR',CACHES_FOLDER.'tags-author.ctree.psa'); define('CACHE_FILENAME_TAGS_AUTHOR_FULL',CACHES_FOLDER.'tags-author-full.ctree.psa'); define('CACHE_FILENAME_FAVTAGS',CACHES_FOLDER.'favtags.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE',CACHES_FOLDER.'frontpage.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE_AUTHOR',CACHES_FOLDER.'frontpage-author.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE_FEED',CACHES_FOLDER.'frontpage-feed.psa'); define('CACHE_FILENAMES_TAG',CACHES_FOLDER.'tag-*.ctree.psa'); define('CACHE_FILENAMES_TAG_AUTHOR',CACHES_FOLDER.'tag-*-author.ctree.psa'); define('CACHE_FILENAME_FULLLIST',CACHES_FOLDER.'notes-list.ctree.psa'); define('CACHE_FILENAME_DRAFTS',CACHES_FOLDER.'drafts.psa'); define('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS',CACHES_FOLDER.'drafts-auc.psa'); define('CACHE_FILENAME_LASTMODIFIEDS',CACHES_FOLDER.'last-modifieds-by-id.psa'); function e2_cache_filename_with_id_($xs,$xi){ return str_replace('*',$xs,$xi); } function e2_note_cache_filename_with_id_($xs){ return e2_cache_filename_with_id_($xs,CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($dx,$kr){ if(is_numeric($dx)) { if(Log::$cy)__log('Caches: Drop caches for note id '. $dx); @unlink(e2_note_cache_filename_with_id_($dx)); @unlink(e2_note_cache_filename_with_id_($dx .'-comments')); @unlink(e2_note_cache_filename_with_id_($dx .'-comments-author')); } else { r(CACHE_FILENAMES_NOTES); r(CACHE_FILENAMES_NOTES_COMMENTS); r(CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } as_(); if ($kr!==false){ qs(); r(CACHE_FILENAMES_NOTES_RELATED); r(CACHE_FILENAMES_POPULAR_WITH_TAG); r(CACHE_FILENAMES_TAG); r(CACHE_FILENAMES_TAG_AUTHOR); @unlink(CACHE_FILENAME_POPULAR); @unlink(CACHE_FILENAME_FRONTPAGE); @unlink(CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink(CACHE_FILENAME_FRONTPAGE_FEED); @unlink(CACHE_FILENAME_FULLLIST); @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); } if ($kr!==true){ @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } @unlink(CACHE_FILENAME_LASTMODIFIEDS); } function e2_drop_caches_for_tag_($kj){ if(is_numeric($kj)) { @unlink(e2_cache_filename_with_id_($kj,CACHE_FILENAMES_TAG)); @unlink(e2_cache_filename_with_id_($kj,CACHE_FILENAMES_TAG_AUTHOR)); } else { r(CACHE_FILENAMES_TAG); r(CACHE_FILENAMES_TAG_AUTHOR); } @unlink(CACHE_FILENAME_FAVTAGS); @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); } function ss(){ if(Log::$cy)__log('Caches: Drop notes caches'); e2_drop_caches_for_note_(null,null); } function as_(){ if(Log::$cy)__log('Caches: Drop notes counts cache'); r(CACHE_FILENAMES_NOTES_COUNTS); } function qs(){ if(Log::$cy)__log('Caches: Drop egde time info cache'); r(CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache(){ if(Log::$cy)__log('Caches: Drop all kinds of caches'); r(CACHES_FOLDER.'*'); return true; } define('OLBA_SPECIAL_CHAR',"\x1"); define('OLBA_SPECIAL_SEQUENCE_LENGTH',6); function ls($ei=null){ global$_template,$_config,$settings; if ($ei===null)$ei=@$settings['template']; $ri=null; $ti=null; $ji=null; $hi=null; $gi=array(); $wi=$ei; if ($wi!==null){ while (1){ if(Log::$cy)__log('Prepare theme "'. $wi .'"'); $ui=TEMPLATES_FOLDER.$wi .'/'; if ( !is_dir($ui) or !is_file($ui .'/theme-info.php') ) { if(Log::$cy)__log('Theme "'. $wi .'" not found, using default theme "'. DEFAULT_TEMPLATE .'"'); $wi=DEFAULT_TEMPLATE; $ui=TEMPLATES_FOLDER.$wi .'/'; } array_push($gi,$ui); $ii=include $ui .'/theme-info.php'; $oi[$ui]=$ii; if(array_key_exists('max_image_width',$ii)) { if ($ri===null){ $ri=$ii['max_image_width']; } } if(array_key_exists('meta_viewport',$ii)) { if ($ti===null){ $ti=$ii['meta_viewport']; } } if(array_key_exists('supports_dark_mode',$ii)) { if ($ji===null){ $ji=$ii['supports_dark_mode']; } } if(array_key_exists('use_likely_light',$ii)) { if ($hi===null){ $hi=$ii['use_likely_light']; } } if(array_key_exists('based_on',$ii)) { $wi=$ii['based_on']; } else { break; } } } if ($ri===null){ $ri=$_config['max_image_width']; } if ($ti===null)$ti=''; if ($ji===null)$ji=false; if ($hi===null)$hi=false; $ui=SYSTEM_TEMPLATE_FOLDER; array_push($gi,$ui); $_template['name']=$ei; $_template['max_image_width']=$ri; $_template['meta_viewport']=$ti; $_template['supports_dark_mode']=$ji; $_template['use_likely_light']=$hi; $_template['stack']=$gi; $_template['infos']=$oi; }; function zs($pi){ global$content; if (!isset ($_olba_includes))$_olba_includes=0; ++ $_olba_includes; if(Log::$cy)__log('Eat "'. $pi .'"'); ob_start(); include $pi; return ob_get_clean(); } function ks($lz){ return ( OLBA_SPECIAL_CHAR. str_pad($lz,OLBA_SPECIAL_SEQUENCE_LENGTH,'0',STR_PAD_LEFT). OLBA_SPECIAL_CHAR ); } function xs($name){ static $lz=0; ya($name,'_olba_placeholders'); return ks($lz ++); } function es($co){ global$_olba_placeholders; foreach($_olba_placeholders as $lz => $s){ $vo=ks($lz); $bo=strpos($co,$vo); $yo=ts($s,true); if ($bo!==false){ $co=substr_replace( $co,$yo,$bo,strlen($vo) ); } else { break; } } return $co; } function rs($no){ if(is_dir(EXTRAS_FOLDER)) { $mo=EXTRAS_FOLDER.$no .'.tmpl.php'; if(is_file($mo)) { return zs($mo); } } return ''; } function ts($no){ global$_template,$_olba_includes; $mo='templates/'. $no .'.tmpl.php'; if ($pi=e2o__usable_file_with_basename_($mo)) { return zs($pi); } else { ob_end_clean(); throw new AeOlbaTemplateMissingException('Missing: '. $mo); } } function js(){ global$_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists('raw',$_GET) ) { $fo='raw'; } else { $fo='main'; } return ts($fo,true); } function hs($do_){ ya($do_ .'.css','_olba_used_stylesheets'); } function gs($so){ ya($so .'.js','_olba_used_scripts'); } function ws($ao){ foreach (array (SYSTEM_LIBRARY_FOLDER,USER_LIBRARY_FOLDER) as $qo){ foreach(glob($qo.$ao .'/*') as $fy){ $za=pathinfo($fy,PATHINFO_EXTENSION); if ($za=='js'){ ya($fy,'_olba_used_scripts'); } if ($za=='css'){ ya($fy,'_olba_used_stylesheets'); } } } } function us(){ global$_template,$_config,$settings; if ($lo=@opendir(TEMPLATES_FOLDER)) { while (false !== ($zo=readdir($lo))) { if(is_dir(TEMPLATES_FOLDER. $zo) and $zo!='.' and $zo!='..'){ if(is_file(TEMPLATES_FOLDER.$zo .'/theme-info.php')) { $ko[$zo]=TEMPLATES_FOLDER.$zo .'/'; } } } closedir($lo); } $ua=array(); $xo=1000; foreach ($ko as$name => $ta){ $ii=include $ta .'theme-info.php'; $n3=@$ii['display_name']; if (!$n3) continue; if(is_array($n3)) { if(array_key_exists($settings['language'],$n3)) { $n3=$n3[$settings['language']]; } else { $n3=array_shift($n3); } } $lz=@$ii['index'] or $lz=$xo ++; $eo=@$ii['colors']; if (!$eo)$eo=array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $ro=(bool) ($name==$_template['name']); if ($ro){ $to=jv('e2m_theme_preview', array ('theme' => '')); } else { $to=jv('e2m_theme_preview', array ('theme' => $name)); } $ua[$lz] = array ( 'name' => $name, 'display-name' => $n3, 'colors' => $eo, 'current?' => $ro, 'preview-url' => $to, 'supports-dark-mode?' => $ii['supports_dark_mode'], ); } ksort($ua); return $ua; } function is($fb){ return e2o__usable_file_with_basename_('images/'. $fb); } function os($jo){ return file_get_contents(e2o__usable_file_with_basename_('images/'. $jo .'.svg')); } function ps($do_){ global$_template; $ea='styles/'. $do_ .'.css'; $ho=array(); foreach($_template['stack'] as $ui){ if(is_file($fb=$ui.$ea)) { $ho[] = $fb; } if ( array_key_exists('reset_styles',$_template['infos'][$ui]) and in_array($do_,$_template['infos'][$ui]['reset_styles']) ) { break; } } $ho=array_reverse($ho); } function ca(){ global$_olba_used_stylesheets,$_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets=array_unique($_olba_used_stylesheets); $go=array(); foreach($_olba_used_stylesheets as $do_){ if(is_file($do_)) { $go[] = $do_; continue; } if(is_file($fb=USER_FOLDER .'js/'. $do_)) { $go[] = $fb; } $ea='styles/'. $do_; $ho=array(); foreach($_template['stack'] as $ui){ if(is_file($fb=$ui.$ea)) { $ho[] = $fb; } if ( array_key_exists('reset_styles',$_template['infos'][$ui]) and in_array($do_,$_template['infos'][$ui]['reset_styles']) ) { break; } } $ho=array_reverse($ho); $go=array_merge($go,$ho); } foreach ($go as $t => $xf){ $ry=stat($xf); $go[$t].='?'. $ry['mtime']; } return $go; } function va(){ global$_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts=array_unique($_olba_used_scripts); $wo=array(); foreach($_olba_used_scripts as $so){ if ( substr($so,0,7)=='http://' or substr($so,0,8)=='https://' or substr($so,0,2)=='//' ){ $wo[] = $so; continue; } if(is_file($so)) { $wo[] = $so; continue; } if(is_file($uo=USER_FOLDER .'js/'. $so)) { $wo[] = $uo; } $ea='js/'. $so; if ($uo=e2o__usable_file_with_basename_($ea)) { $wo[] = $uo; } } foreach ($wo as $t => $xf){ $ry=stat($xf); if ($ry['mtime']) { $wo[$t].='?'. $ry['mtime']; } } return $wo; } function ba($io){ if (!is_array($io)) return; foreach ($io as $nz){ if(substr($nz, -3)=='.js'){ gs(substr($nz,0, -3)); } if(substr($nz, -4)=='.css'){ hs(substr($nz,0, -4)); } } } function ya($s,$hv){ if (!isset ($GLOBALS[$hv])) { $GLOBALS[$hv] = array ($s); } else { $GLOBALS[$hv][] = $s; } } function e2o__usable_file_with_basename_($ea){ global$_template; if (!isset ($_template))ls(); foreach($_template['stack'] as $ui){ if(is_file($fb=$ui.$ea)) { return $fb; } } return ''; } function e2m_theme_preview($parameters){ global$_lang,$_strings,$_superconfig,$_template; if (@$_superconfig['disallow_themes_preview']) { return e2_error404_mode(); } if($parameters['theme']==$_template['name']) { c(jv('e2m_theme_preview', array ('theme' => ''))); } if($parameters['theme']) { ls($parameters['theme']); } $oo=$_lang; if (!is_file($fy='system/preview/'. $oo .'.php')) { $oo=$_strings['--secondary-language']; $fy='system/preview/'. $oo .'.php'; } if (!is_file($fy='system/preview/'. $oo .'.php')) { $fy='system/preview/'. DEFAULT_LANGUAGE .'.php'; } $eq=include $fy; return $eq; } define('SEARCH_EXTRA_PREFIX','Rose'); define('SEARCH_LIMIT',20); define('SEARCH_SNIPPETS_LIMIT',20); define('SEARCH_USE_ROSE',1); define('SEARCH_USE_MYSQL',1); define('BSI_SELECT_PORTION',10); define('BSI_GIVE_UP_TIMEOUT',10); define('BSI_UNLOCK_TIMEOUT',10); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Storage\Database\MysqlRepository; use S2\Rose\Stemmer\PorterStemmerEnglish; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Entity\ExternalContent; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found($parameters=array ()) { global$_strings,$_config,$settings,$full_blog_url; $parameters['query']=trim($parameters['query']); $bf=$parameters['query']; if (!$bf){ return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $fvv=false; $yj=[]; try { if (x2()) { $dvv=''; } else { $dvv='AND `IsVisible` = 1 '; } xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". $dvv . "AND `Keyword`='". rn($bf) ."'", 'get tags matching the search query' ); $ib=en(); if (isset ($ib[0]['ID'])) { $fvv=[ 'href' => jv('e2m_tag', array ('*tag' => $ib[0])), 'name' => htmlspecialchars($bf,ENT_NOQUOTES,HSC_ENC), 'visible?' => (bool)$ib[0]['IsVisible'], ]; $yj=yf($ib[0]['ID'],4); array_unshift($yj,$fvv); } } catch (AeMySQLException $e){ kv($e,'Could not get tags matching the search query'); } $svv=n(' ',$parameters['query']); if(SEARCH_USE_ROSE){ $avv=new PorterStemmerRussian(new PorterStemmerEnglish()); foreach ($svv as $t => $xf){ $svv[$t]=$avv -> stemWord($svv[$t]); } } $qvv=array(); $we=x2(); if(SEARCH_USE_ROSE){ try { $p3=ra(); $lvv=new Finder($p3,$avv); $lvv -> setHighlightTemplate('<mark>%s</mark>'); $zvv=new Query($bf); $zvv -> setInstanceId($_config['db_table_subset']); $zvv -> setLimit(SEARCH_LIMIT); $resultSet=$lvv -> find($zvv); foreach($resultSet -> getFoundExternalIds() as $kvv){ $xvv=$kvv -> getId(); if ($xvv[0]=='n'){ $dx=substr($xvv,1); $n2=nm($dx); if (!empty ($_config['search_favourites_boost'])) { if ($n2['IsFavourite']) { $resultSet->setRelevanceRatio( $xvv, $_config['search_favourites_boost'] ); } } } } $snippetBuilder=new SnippetBuilder($avv); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets( $resultSet, static function (array $rvv){ $q1=new ExternalContent(); foreach ( array_slice($rvv,0,SEARCH_SNIPPETS_LIMIT) as $kvv ){ $xvv=$kvv -> getId(); if ($xvv[0]=='n'){ $dx=substr($xvv,1); $n2=nm($dx); if ($n2){ $noteView=new AeNoteView($n2); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($we and !@$_config['read_only']); $noteView -> setWantHiddenTags($we); $zx=$noteView -> getNoteCTree(); $tvv[$n2['ID']] = $zx; $q1 -> attach($kvv,$zx['text']); } } } return $q1; } ); foreach($resultSet -> getItems() as $jvv){ $hvv=$jvv -> getId(); if ($hvv[0]=='n'){ $dx=substr($hvv,1); $n2=nm($dx); if (!( em($n2)==='public' or ($we and $n2['IsPublished']) )) continue; $n2['_']['_srprovider']='Rose'; $n2['_']['_rose_relevance']=$jvv -> getRelevance(); $n2['_']['_rose_title']=$jvv -> getHighlightedTitle($avv); $n2['_']['_rose_snippet']=$jvv -> getSnippet(); $qvv[] = $n2; } } if (@$_config['dev_rose_info']) { $gvv=print_r($resultSet -> getTrace(),true); } } catch (EmptyIndexException $e){ aa(); } catch (AeMySQLException $e){ kv($e,'Could not do something with the database while working on Rose search results'); } } if(SEARCH_USE_MYSQL){ $wvv=rn(preg_quote($bf)); $uvv=( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 AND MATCH (`Title`, `Text`) AGAINST ('". $wvv ."') ". rm($we). "LIMIT ". SEARCH_LIMIT ); try { xn( $uvv, 'search using MySQL fulltext search' ); $q1=en(); foreach ($q1 as $t => $n2){ $n2['_']['_srprovider']='MySQL'; $qvv[] = $n2; } } catch (AeMySQLException $e){ kv($e,'Could not search using MySQL fulltext search'); } } $ivv=array(); $l5=array(); $r=0; foreach ($qvv as $n2){ if (!in_array($n2['ID'],$ivv)) { if (!empty ($tvv[$n2['ID']])) { $l2=$tvv[$n2['ID']]; } else { $noteView=new AeNoteView($n2); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($we and !@$_config['read_only']); $l2=$noteView -> getNoteCTree(); } $l2['search-result-provider']=$n2['_']['_srprovider']; if ($n2['_']['_srprovider']=='Rose'){ $l2['search-rose'] = [ 'relevance' => $n2['_']['_rose_relevance'], 'title' => $n2['_']['_rose_title'], 'snippet' => $n2['_']['_rose_snippet'], ]; } if (@$n2['_']['_rose_title']) { $l2['title']=$n2['_']['_rose_title']; } else { $l2['title']=ta($l2['title'],$svv); } $l2['title']=h3($l2['title']); if (!empty ($n2['_']['_rose_snippet'])) { $l2['snippet-text']=$n2['_']['_rose_snippet']; } else { $tv=$l2['text']; $tv=preg_replace('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i','',$tv); $tv=preg_replace('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i','',$tv); $tv=str_replace( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $tv ); $tv=strip_tags($tv); $ovv=array(); $pvv=preg_split('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis',$tv); $cbv=0; $vbv=''; foreach ($pvv as $bbv){ $bbv=trim($bbv); if (!$bbv) continue; if (!$vbv)$vbv=$bbv; $ybv=$bbv; $ybv=ta($ybv,$svv); if ($ybv!=$bbv){ $ovv[] = ja($ybv); $cbv ++; if ($cbv > 3) break; } } if(count($ovv)) { $l2['snippet-text']=implode(' · ',$ovv); } else { $l2['snippet-text']=$vbv; } } $l2['has-highlighed-thumbs?']=false; if ($gs=@$l2['format-info']['resources-detected']) { $nbv=qb( db($gs) ); foreach ($nbv as $t => $xf){ $nbv[$t]['highlighted?'] = ( strstr($xf['original-filename'],$bf)!==false ); if ($nbv[$t]['highlighted?']) { $l2['has-highlighted-thumbs?']=true; } } $l2['thumbs']=$nbv; } $l5[] = $l2; $ivv[] = $n2['ID']; $r ++; if ($r >= SEARCH_LIMIT) break; } } $dj=count($l5); if ($dj){ $mbv=e2l_get_string( 'pt--n-posts', array ('number' => $dj) ); } else { $mbv=$_strings['pt--no-posts']; $d['nothing']=$_strings['gs--nothing-found']; } if ($r >= SEARCH_LIMIT){ $mbv=$_strings['gs--many-posts']; } if ($yj){ $d['search-related-tags']=$yj; } $d['notes']=$l5; $d['pages'] = array (); $d['title']=$mbv .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars($bf,ENT_NOQUOTES,HSC_ENC); $d['heading']=$bf; if (@$gvv){ $d['rose-debug-info']=$gvv; } return $d; } function da($parameters){ if(Log::$cy)__log('Search form'); $bf=trim((string) @$parameters['query']); return [ 'form-action' => jv('e2s_search'), 'query' => htmlspecialchars($bf,ENT_COMPAT,HSC_ENC), ]; } function e2s_search(){ $bf=@$_POST['query']; $bf=str_replace('?',urlencode('?'),$bf); $bf=str_replace('/',' ',$bf); $bf=trim($bf); $bf=str_replace(' ','+',$bf); c(jv('e2m_found', array ('query' => $bf))); } function sa(){ global$_config; $fbv=@unserialize(file_get_contents(USER_FOLDER.'indexing.psa')); if (!is_array($fbv))$fbv=array ('spent' => '?'); $dbv=$sbv=$dv='?'; try { xn( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ", 'count total published notes' ); $sy=en(); $dbv=$sy[0]['c']; xn( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=1 AND `IsPublished`=1 ", 'count indexed published notes' ); $sy=en(); $sbv=$sy[0]['c']; } catch (AeMySQLException $e){ kv($e,'Could not count some notes'); return false; } $abv=true; foreach (ea() as $qbv){ if (!cn(SEARCH_EXTRA_PREFIX. $qbv)) { $abv=false; break; } } if (!$abv){ $sbv=0; $fbv['spent']=false; } return [ 'indexed_count' => $sbv, 'total_count' => $dbv, 'time_spent' => $fbv['spent']? $fbv['spent']:false, ]; } function e2s_bsi_step(){ global$_db,$_config,$_strings; echo '<pre>'; if($_config['log_bsi']) { Log::$cy=true; if(Log::$cy)bv('bsi'); } if(Log::$cy)__log('BSI step'); if (!la()) { if(Log::$cy)__log('Not indexing'); die ('Not indexing</pre>'); } $fbv=@unserialize(file_get_contents(USER_FOLDER.'indexing.psa')); if (!is_array($fbv))$fbv=array ('spent' => '?'); if ( !isset ($fbv['lock']) or $fbv['lock'] < time() - (BSI_GIVE_UP_TIMEOUT+BSI_UNLOCK_TIMEOUT) ) { if (isset ($fbv['lock'])) { if(Log::$cy)__log('Indexer: old lock is '. $fbv['lock']); echo 'Old lock is '. $fbv['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $fbv['lock']=time(); if (!@n3(USER_FOLDER.'indexing.psa',serialize($fbv))) { if(Log::$cy)__log('Indexer: can’t get a new lock'); die ('Can’t get a new lock<br />'); } if(Log::$cy)__log('Indexer: new lock is '. $fbv['lock']); echo 'New lock is '. $fbv['lock'] .'<br /><br />'; try { $r=0; $lbv=0; $zbv=w(); $kbv=false; $sn=false; while ($lbv < BSI_GIVE_UP_TIMEOUT){ xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION, 'get portion of unindexed notes for indexing' ); $sy=en(); if(count($sy)) { ++ $r; if(Log::$cy)__log('Indexer: portion '. $r); echo 'Portion '. $r .'<br />'; foreach ($sy as $cl){ if(Log::$cy)__log('Indexer: indexing "'. $cl['Title'].'"'); echo 'Indexing: '. $cl['Title'] .'<br />'; if (za($cl)) { $cl['IsIndexed']='1'; nn('Notes',$cl); } else { $sn=true; break 2; } if($_config['broadcast_on_indexing']) { by($cl); } } $lbv=round(w()-$zbv,3); if(Log::$cy)__log('Indexer: step done '. count($sy) .', spent '. $lbv .' ms so far'); echo 'Step done '. count($sy) .', spent '. $lbv .' ms so far<br /><br />'; if(Log::$cy)__log($co); } else { $kbv=true; break; } } if ($kbv){ if(Log::$cy)__log('Indexer: indexing complete'); echo 'Indexing complete<br /><br />'; @unlink(USER_FOLDER.'indexing.psa'); } elseif ($sn){ if(Log::$cy)__log('Indexer: indexing failed'); echo 'Indexing failed<br /><br />'; } else { echo 'Time out<br />'; unset ($fbv['lock']); $fbv['done']=count($sy); if ($fbv['spent']!='?')$fbv['spent']+=$lbv; @n3(USER_FOLDER.'indexing.psa',serialize($fbv)); } } catch (AeMySQLException $e){ kv($e,'Could not index notes'); if(Log::$cy)__log('Indexer: DB unaccessible'); echo 'DB unaccessible<br />'; } } else { if(Log::$cy)__log('Indexer: locked'); echo 'Locked<br />'; } die ('</pre>'); } function e2s_bsi_drop(){ if($_SERVER['REQUEST_METHOD']=='POST'){ aa(true); } c(jv('e2m_underhood')); } function aa($xbv=false){ global$_db,$_config; try { ha(); if ($xbv)mv('Notes marked for reindexing',E2E_MESSAGE); $p3=ra(); try { $p3 -> erase(); if ($xbv)mv('Indexes erased',E2E_MESSAGE); } catch (\S2\Rose\Exception\RuntimeException $e){ kv($e,'Rose threw RuntimeException'); } qa(); } catch (AeMySQLException $e){ kv($e,'Could not mark all notes for reindexing'); } } function qa(){ $fbv=array(); @n3(USER_FOLDER.'indexing.psa',serialize($fbv)); } function la(){ return (is_file(USER_FOLDER.'indexing.psa')); } function za($n2){ global$_config; if(Log::$cy)__log('Indexer: index noterec'); static $ebv=null; try { if ($ebv===null){ $avv=new PorterStemmerRussian(new PorterStemmerEnglish()); $ebv=new Indexer(ra(),$avv); } $z1=u3($n2['FormatterID'], @$n2['Text'],'full-rss'); f3( 'note',$n2, $z1['meta']['resources-detected'] ); $tv=strip_tags($z1['text-final']); $rbv=new Indexable( 'n'. $n2['ID'], $n2['Title'], $tv, $_config['db_table_subset'] ); $ebv -> index($rbv); return true; } catch (EmptyIndexException $e){ aa(); } catch (\Exception $e){ kv($e,'Could not index note'); return false; } } function ka($xs){ global$_config; static $ebv=null; try { if ($ebv===null){ $avv=new PorterStemmerRussian(new PorterStemmerEnglish()); $ebv=new Indexer(ra(),$avv); } return $ebv -> removeById('n'. $xs,$_config['db_table_subset']); } catch (EmptyIndexException $e){ aa(); } catch (\Exception $e){ kv($e,'Could not index note'); return false; } } function xa($tbv){ $sz='S2\\Rose\\'; $jbv=__DIR__.'/library/rose/'; $e2_=strlen($sz); if(strncmp($sz,$tbv,$e2_)!==0) return; $hbv=substr($tbv,$e2_); $fy=$jbv.str_replace('\\','/',$hbv).'.php'; if(file_exists($fy)) require $fy; } function ea(){ return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function ra(){ global$_config,$settings; static $gbv=null; if ($gbv===null and SEARCH_USE_ROSE){ $wbv=new \PDO( 'mysql:'. 'host='. $settings['db']['server'] .';'. 'dbname='. $settings['db']['name'], $settings['db']['user_name'], o2($settings['db']['passw']) ); $vk=$wbv -> getAttribute(\PDO::ATTR_SERVER_VERSION); $ubv=version_compare($vk,'5.5.3','>=')?'utf8mb4':'utf8'; $wbv -> exec('SET NAMES '.$ubv); $wbv -> setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); $ibv=ea(); $gbv=new PdoStorage( $wbv, $_config['db_table_prefix'].SEARCH_EXTRA_PREFIX, array ( MysqlRepository::TOC => $ibv['TOC'], MysqlRepository::WORD => $ibv['WORD'], MysqlRepository::FULLTEXT_INDEX => $ibv['FULLTEXT_INDEX'], MysqlRepository::KEYWORD_INDEX => $ibv['KEYWORD_INDEX'], MysqlRepository::KEYWORD_MULTIPLE_INDEX => $ibv['KEYWORD_MULTIPLE_INDEX'], ) ); } return $gbv; } function ta($tv,$svv){ foreach ($svv as $v4){ if ($v4=='-') continue; $v4=preg_quote($v4,'/'); $v4=str_replace('е','[её]',$v4); $v4=str_replace('Е','[ЕЁ]',$v4); $tv=preg_replace('/(?<=^|\W)('.$v4.'[\w\p{M}]*)/iu','<mark>$1</mark>',$tv); } $tv=str_replace('</mark> <mark>',' ',$tv); $tv=str_replace('</mark> <mark>',' ',$tv); return $tv; } function ja($o2){ $obv=mb_strtoupper(mb_substr($o2,0,1)); return $obv.mb_substr($o2,1); } function ha(){ global$_config; xn( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `IsIndexed`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'mark all notes for reindexing' ); } function e2_check_timeout(){ static $pbv; if(is_null($pbv)) { $c3v=ini_get('max_execution_time'); if ($c3v){ $pbv=time()+$c3v-5; } else { $pbv=0; } } return ($pbv==0)?true:$pbv >= time(); } function e2_write_dump_header($fy){ $pq=( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($fy,$pq); return true; } function e2_write_dump_footer($fy){ $v3v='COMMIT;' .PHP_EOL; $v3v .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" .PHP_EOL ."/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" .PHP_EOL ."/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" .PHP_EOL ."/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;".PHP_EOL ."/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" .PHP_EOL ."/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" .PHP_EOL; fwrite($fy,$v3v); return true; } function e2_get_table_definition($b3v,$dz){ $y3v=null; $q1=mysqli_query($b3v,"SHOW CREATE TABLE `{$dz}`"); if ($q1){ $n3v=mysqli_fetch_array($q1); $y3v=$n3v['Create Table']; } return $y3v; } function e2_write_table_definition($fy,$b3v,$dz){ $m3v=e2_get_table_definition($b3v,$dz); if(e2_check_timeout() && $m3v){ fwrite($fy,$m3v); fwrite($fy,';'); fwrite($fy,PHP_EOL.PHP_EOL); return true; } return false; } function e2_get_table_data($b3v,$dz,$nl,$limit){ $bf="SELECT * FROM `{$dz}` LIMIT {$nl}, {$limit}"; $q1=mysqli_query($b3v,$bf); if (!$q1){ return false; } $f3v=''; $d3v="INSERT INTO `{$dz}` VALUES"; while ($u4=mysqli_fetch_row($q1)) { $cvv=array(); foreach($u4 as $s){ $cvv[] = is_null($s)?"NULL":"'".mysqli_real_escape_string($b3v,$s)."'"; } $f3v.=$d3v.'('.join(', ',$cvv).');'.PHP_EOL; } return $f3v; } function e2_table_disable_keys($dz){ return "ALTER TABLE `{$dz}` DISABLE KEYS;".PHP_EOL; } function e2_table_enable_keys($dz){ return "ALTER TABLE `{$dz}` ENABLE KEYS;".PHP_EOL; } function e2_get_total_records($b3v,$dz){ $t=mysqli_fetch_row(mysqli_query($b3v,"SELECT COUNT(*) FROM `{$dz}`")); return $t[0]; } function e2_backup_select_chuck_size_for_table_($dz){ $limit=5000; if(substr($dz, -7)==='Actions')$limit=50000; if(substr($dz, -7)==='Aliases')$limit=20000; if(substr($dz, -7)==='NotesKeywords')$limit=50000; if(Log::$cy)__log('Backup: chunk size '. (int)$limit); return$limit; } function e2_write_table_data($fy,$b3v,$dz){ $dj=e2_get_total_records($b3v,$dz); $nl=0; $limit=e2_backup_select_chuck_size_for_table_($dz); $q1=true; $s3v=20000; $a3v=30; if ($dj){ $q3v=e2_table_disable_keys($dz); fwrite($fy,$q3v); } $f3v="INSERT INTO `{$dz}` VALUES"; $l3v=$dj; while ($l3v > 0){ $bf="SELECT * FROM `{$dz}` ORDER BY `ID` LIMIT {$nl}, {$limit}"; $q1=mysqli_query($b3v,$bf); $z3v=mysqli_num_rows($q1); if (!$q1 || !e2_check_timeout()) { $q1=false; break; } $k3v=array(); $x3v=0; $e3v=0; while ($u4=mysqli_fetch_row($q1)) { if (!e2_check_timeout()) { $q1=false; break; } $z3v--; $az=array(); foreach($u4 as $s){ $az[] = is_null($s)?"NULL":"'".mysqli_real_escape_string($b3v,$s)."'"; } $lv='('.join(', ',$az).')'; $x3v+=strlen($lv); $k3v[] = $lv; $e3v++; if ( ($x3v >= $s3v) || ($e3v >= $a3v) || ($z3v==0)) { $bf=$f3v.join(', ',$k3v).';'; fwrite($fy,$bf); fwrite($fy,PHP_EOL); $x3v=0; $e3v=0; $k3v=array(); } } $nl+=$limit; $l3v -= $limit; } if ($dj){ $r3v=e2_table_enable_keys($dz); fwrite($fy,$r3v); } return $q1; } function e2_backup($b3v,$k7,$t3v,$cb=array()) { $j3v=tmpfile(); e2_write_dump_header($j3v); if(Log::$cy)__log('Backup: wrote header'); $h3v=true; foreach($k7 as $dz){ if(Log::$cy)__log('Backup: table '. $dz); $g3v=e2_write_table_definition($j3v,$b3v,$dz); if(Log::$cy)__log('Backup: wrote table definition with result '. (int)$g3v); $w3v=e2_write_table_data($j3v,$b3v,$dz); if(Log::$cy)__log('Backup: wrote table data with result '. (int)$w3v); $h3v=$g3v && $w3v; if ($h3v===false){ break; } } if(Log::$cy)__log('Backup: wrote data with running == '. (int)$h3v); if ($h3v){ e2_write_dump_footer($j3v); fseek($j3v,0); $fy=fopen($t3v,'w+'); while ($h3v && ($lv=fread($j3v,1024))) { if(e2_check_timeout()) { fwrite($fy,$lv); } else { $h3v=false; } } fclose($fy); } fclose($j3v); return $h3v; } function d1($u3v,$content){ $i3v=MTMPL_FOLDER.$u3v .'.mtmpl.php'; if(is_file($i3v)) { ob_start(); include $i3v; $x8=ob_get_contents(); ob_end_clean(); return trim($x8); } } function s1(){ global$_config,$_superconfig; $o3v=$_config['mail_from']; if (@$_superconfig['mail_from']) { $o3v=$_superconfig['mail_from']; } if ($o3v[strlen($o3v)-1]=='@'){ $o3v.=$_SERVER['HTTP_HOST']; } return $o3v; } function a1($w,$subject,$xn,$p3v=''){ global$_superconfig; if (@$_superconfig['mail_debug']) { $ta='mail-debug'; $dn=basename(tempnam($ta,'m-')); $tv=( 'To:       '.$w ."\n". 'Subject:  '.$subject ."\n". $p3v ."\n". "--------------------------------------------------\n". $xn ); n3($ta .'/'. $dn,$tv); chmod($ta .'/'. $dn,E2_NEW_FILES_RIGHTS); rename($ta .'/'. $dn,$ta .'/'. $dn.'.txt'); } $subject='=?UTF-8?B?'. base64_encode($subject) .'?='; $p3v.="\r\nContent-Type: text/plain; charset=utf-8"; if(MAIL_ENABLED){ mail($w,$subject,$xn,trim($p3v)); } } function _A($tv){ global$_candy,$_protocol,$v,$c,$_current_url; if ( preg_match('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si',$tv,$y3) and ( $y3[1]==='' or $y3[1]===$_current_url or $_protocol .'://'. $v.$y3[1]===$_current_url or $_protocol .'://'. $v.$c .'/'. $y3[1]===$_current_url or $_candy=='e2m_install' ) ) { return $y3[2]; } else { return $tv; } } function _AT($tq){ global$_candy,$v,$c,$_current_url; return ( $tq==='' or $tq===$_current_url or $_protocol .'://'. $v.$tq===$_current_url or $_protocol .'://'. $v.$c .'/'. $tq===$_current_url ); } function _READS($zx){ if (!empty ($zx['read-count'])) return $zx['read-count']; return AeNoteReadCountsProvider :: getReadCountForNoteID($zx['id']); } function _IMGSRC($fb){ return is($fb); } function _SVG($fb){ return os($fb); } function _COLOR($xx,$ex,$cyv,$vyv=1){ if(strlen($xx)!=3 and strlen($xx)!=6) return 'f0f'; if(strlen($ex)!=3 and strlen($ex)!=6) return 'f0f'; if(strlen($xx)==3)$xx=$xx[0].$xx[0].$xx[1].$xx[1].$xx[2].$xx[2]; if(strlen($ex)==3)$ex=$ex[0].$ex[0].$ex[1].$ex[1].$ex[2].$ex[2]; $tz=array ( $xx[0].$xx[1],$xx[2].$xx[3],$xx[4].$xx[5], $ex[0].$ex[1],$ex[2].$ex[3],$ex[4].$ex[5], ); foreach ($tz as $t => $xf){ $tz[$t]=hexdec($xf); } $ty=array ( $tz[0]+pow($cyv,$vyv) * ($tz[3]-$tz[0]), $tz[1]+pow($cyv,$vyv) * ($tz[4]-$tz[1]), $tz[2]+pow($cyv,$vyv) * ($tz[5]-$tz[2]), ); $byv=''; foreach ($ty as $t => $xf){ $byv.=str_pad(dechex($xf),2,'0',STR_PAD_LEFT); } return $byv; } function _DT($hl,$yyv){ if (!$yyv) return ''; list ($m4,$zl)=$yyv; $d=$hl; $f9=ky('m',$m4,$zl); $d=str_replace('{zone}',e2__escape_all(my($zl['offset'])), $d); $d=str_replace('{month}',e2__escape_all(e2l_get_string('um--month', array ('month' => $f9))), $d); $d=str_replace('{month-short}',e2__escape_all(e2l_get_string('um--month-short', array ('month' => $f9))), $d); $d=str_replace('{month-g}',e2__escape_all(e2l_get_string('um--month-g', array ('month' => $f9))), $d); $d=ky($d,$m4,$zl); return $d; } function _AGO($yyv){ return oy($yyv[0], array ('offset' => $yyv[1]['offset'],'is_dst' => $yyv[1]['is_dst']) ); } function _NUM($tv){ return e2_decline_for_number($tv); } function _CSS($nyv){ return hs($nyv); } function _CSS_HREF($nyv){ return ps($nyv); } function _JS($myv){ return gs($myv); } function _LIB($ao){ return ws($ao); } function _T($no){ echo ts($no); } function _T_DEFER($name){ echo xs($name); } function _X($no){ echo rs($no); } function _T_FOR($no,$fyv=null){ global$content; if ($fyv===null)$fyv=$no; if(array_key_exists($fyv,$content)) { echo ts($no); } else { echo ''; } } function _FIT($vp,$bp){ } function _GUIDES($dyv=false){ global$_olba_guides; if(is_array($dyv))$_olba_guides=$dyv; if (!is_array($_olba_guides)) return; $syv='<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $ayv=0; $qyv=$_olba_guides; $qyv[] = 100; foreach ($qyv as $r => $c7){ if ($c7==100) break; $ayv+=$c7; $syv.='<div style="position: fixed; left: '. $c7 .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $lyv='position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($qyv[$r+1]-$qyv[$r] < 4){ $syv.='<div style="'. $lyv.'; right: '. (100-$c7) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $c7 .'%</div>'; } else { $syv.='<div style="'. $lyv.'; left: '. $c7 .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $c7 .'%</div>'; } } $syv.='</div>'; $_olba_current_col=0; return $syv; } function _S($x){ global$_strings; return$_strings[$x]; } function _SHORTCUT($name){ return a($name); } function e2__escape_all($x){ $d=''; for ($r=0; $r < mb_strlen($x); ++ $r){ $d.='\\'. mb_substr($x,$r,1); } return $d; } abstract class E2GIP { protected $gip_cookie_name='gip'; protected $gip_token_cookie_name='gip_access_token'; protected $gip_token=null; abstract public function get_auth_url(); abstract public static function get_profile_url($xs,$nz); abstract public function callback(); const PHP_VERSION_VK_FEATURE=70100; public static function set_session_data($rm,$s){ if(session_status()==PHP_SESSION_NONE){ session_start(); } $_SESSION[$rm]=$s; } public static function get_session_data($rm,$zyv=false){ if(session_status()==PHP_SESSION_NONE){ session_start(); } if(!isset($_SESSION[$rm])) { return null; } $s=$_SESSION[$rm]; if($zyv){ unset($_SESSION[$rm]); } return $s; } public static function get_gips_order(){ return [ 'twitter' => 0, 'facebook' => 1, 'vk' => 2, 'telegram' => 3 ]; } public function get_config($rm){ $kyv='gips/'. $this->type .'.json'; if(is_file(USER_FOLDER.$kyv)) { $ku=@file_get_contents(USER_FOLDER.$kyv); } else { $ku=@file_get_contents(SYSTEM_FOLDER.$kyv); } if ($ku!==false){ $d=json_decode($ku,true,512,JSON_BIGINT_AS_STRING)[$rm]; if ($d) return $d; } return null; } public function get_callback_url(){ return jv('e2m_gip_sign_in_callback', array('provider' => $this->type)); } protected function get_proxy_param(){ global$settings; $oo=DEFAULT_LANGUAGE; if(array_key_exists('language',$settings))$oo=$settings['language']; return '?language='.$oo.'&type='.$this->type.'&callback_url='.urlencode($this->get_callback_url()); } public function get_gip_session_data(){ global$_config; $xyv=$this->gip_token?$this->gip_token:$_COOKIE[b($this->gip_token_cookie_name)]; xn( "SELECT * FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '". $this->type ."' ". "AND `SessionToken` = '".rn($xyv)."' ". "ORDER BY `ID` DESC LIMIT 1", 'get GIP session data' ); $q1=en(); return $q1?$q1[0] : array(); } public function is_logged_in(){ if(empty($_COOKIE[b($this->gip_cookie_name)]) || !in_array($_COOKIE[b($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[b($this->gip_cookie_name)] != $this->type || empty($_COOKIE[b($this->gip_token_cookie_name)])) { return false; } $lv=$this->get_gip_session_data(); return (bool)$lv; } protected function save_session($xs,$name,$accessToken,$eyv='',$userEmail='',$userLink=''){ $m4=time(); yn( 'GIPsSessions', [ 'GIP' => $this->type, 'GIPAuthorID' => $xs, 'AuthorName' => $name, 'AuthorEmail' => $userEmail, 'AuthorProfileLink' => $userLink, 'SessionToken' => $accessToken, 'Stamp' => $m4, ], 'INSERT', 'ON DUPLICATE KEY UPDATE '. '`SessionToken` = "'.rn($accessToken).'", '. '`AuthorName` = "'.rn($name).'", '. '`Stamp` = "'.$m4.'"' ); y($this->gip_cookie_name,$this->type); y($this->gip_token_cookie_name,$accessToken); if(isset($userEmail) && !empty($userEmail))y('commenter_email',$userEmail); $this->gip_token=$accessToken; } public static function get_logout_key(){ if ($ryv=self::get_session_data('logout_key')) { return $ryv; } $ryv=md5(microtime()); self::set_session_data('logout_key',$ryv); return $ryv; } public static function is_valid_logout_key($rm){ $tyv=self::get_session_data('logout_key',true); if (empty($tyv) || empty($rm) || $tyv!=$rm){ return false; } return true; } public function logout(){ global$_config; y($this->gip_cookie_name); y($this->gip_token_cookie_name); xn( "DELETE FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '".$this->type."' ". "AND `SessionToken` = '" . rn($_COOKIE[b($this->gip_token_cookie_name)]) . "'", 'logout' ); } public function get_avatar_width(){ return USERPIC_WIDTH; } public function get_avatar_height(){ return USERPIC_HEIGHT; } public function save_avatar($xs,$jyv){ global$_config; if (!preg_match('/^https?\:\/\/i',$jyv)) return; $jyv=str_replace("\0",'',$jyv); @j(MEDIA_ROOT_FOLDER.AVATARS_FOLDER); @chmod(MEDIA_ROOT_FOLDER.AVATARS_FOLDER,$_config['uploaded_files_mode']); $fb=MEDIA_ROOT_FOLDER.AVATARS_FOLDER.$this->type .'-'. $xs .'.jpg'; if ($hyv=file_get_contents($jyv)) { file_put_contents($fb,$hyv); } return $fb; } } function e2m_gip_sign_in($lv){ global$_config,$settings; $type=$lv['provider']; $ck=e2_get_gip_instance($type); if (!$ck)v(); header('Location: '.$ck->get_auth_url()); die; } function e2m_gip_sign_in_callback($lv){ global$_config; $type=$lv['provider']; $ck=e2_get_gip_instance($type); if (!$ck){ die ('Unknown provider'); } $gyv=$ck->callback(); echo '<script>'; if ($gyv===true){ $qg=$ck->get_gip_session_data(); $wyv=[ 'name' => $qg['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized('.json_encode($wyv).');'; } else { echo 'alert (\''. $gyv. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($lv){ global$_config; $ryv=$lv['provider']; if (!E2GIP::is_valid_logout_key($ryv)) { die('invalid logout key'); } $ck=e2_get_logged_gip(); if($ck){ $ck->logout(); } v(); } function e2_list_gips(){ static $uyv=null; if(!is_null($uyv)) { return $uyv; } $iyv=SYSTEM_FOLDER. 'gips/'; $oyv=opendir($iyv); $uyv=[]; $pyv=E2GIP::get_gips_order(); $cnv=count($pyv); while (($fy=readdir($oyv)) !== false){ if(pathinfo($fy,PATHINFO_EXTENSION)!='php') continue; $vnv=pathinfo($fy,PATHINFO_FILENAME); if ($vnv=='vk'){ if(PHP_VERSION_ID < E2GIP::PHP_VERSION_VK_FEATURE) continue; } $rm=isset($pyv[$vnv]) ? $pyv[$vnv] : ++$cnv; $uyv[$rm]=$vnv; } closedir($oyv); ksort($uyv); return $uyv; } function e2_get_gip_class_name($type){ return "E2GIP".ucfirst($type); } function e2_get_gip_instance($type){ if (!in_array($type,e2_list_gips())) { return false; } $bnv=e2_get_gip_class_name($type); $ck=new $bnv; return $ck; } function e2_get_gip_auth_url($type){ return jv('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type=''){ $ynv=!$type?e2_list_gips() : array($type); foreach($ynv as$type){ $ck=e2_get_gip_instance($type); if ($ck && $ck->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip(){ foreach(e2_list_gips() as$type){ $ck=e2_get_gip_instance($type); if ($ck && $ck->is_logged_in()) { return $ck; } } return false; } function e2_get_logged_gip_name(){ foreach(e2_list_gips() as$type){ $ck=e2_get_gip_instance($type); if ($ck && $ck->is_logged_in()) { return$type; } } return false; } function e2_get_user_profile_url($type,$xs,$nz){ $bnv=e2_get_gip_class_name($type); return $bnv::get_profile_url($xs,$nz); } function e2_get_gip_session($type){ $ck=e2_get_gip_instance($type); if (!$ck || !$ck->is_logged_in()) { return false; } return $ck->get_gip_session_data(); } foreach(e2_list_gips() as $sg){ require_once 'system/gips/'.$sg.'.php'; } define('__DEV', (@$_config['dev_verbose'] > (int) !x2())); $_stopwatch=w($_stopwatch); spl_autoload_register('xa'); vv(); o(); $_strings=cv(); if(!BUILT) @include 'builder.php'; function e2(){ global$settings,$content, $_candy, $_lang, $_config, $_strings, $_candies_installer, $_candies_public, $_candies_ajax, $_candies_to_disallow_in_read_only, $_template, $_diagnose; k(); set_error_handler('dv'); set_exception_handler('ev'); header('X-Powered-By: E2 Aegea v'. E2_VERSION); header('Content-type: text/html; charset=UTF-8'); list ($candy,$parameters)=hv(); try { $content=[]; $_candy=$candy; if ( @$_config['dev_slow_ajax'] and ( in_array($candy,$_candies_ajax) ) ) { sleep(1+2 * (rand()/getrandmax())); } if (!in_array($candy,$_candies_installer)) { an(); } if (@$_config['read_only'] and in_array($candy,$_candies_to_disallow_in_read_only)) { $candy='e2m_error404'; } $nnv=(bool)x2(); $mnv=!in_array($candy,$_candies_public); if(Log::$cy)__log('User signed in? '. ($nnv? 'Yes':'No')); $_newsfeeds=[]; kd('rss',vd(),jv('e2m_rss')); kd('json',vd(),jv('e2m_json')); if(substr($candy,0,4)=='e2m_'){ ls(); } if(is_callable($candy)) { if ($mnv && !$nnv){ if(substr($candy,0,4)=='e2s_'){ c(jv('e2m_sign_in')); } else { $content['title']=$_strings['pt--sign-in']; } } else { if(Log::$cy)__log('Candy call {'); $content=call_user_func($candy,$parameters); if(Log::$cy)__log('}'); } } else { $mnv=false; $content=e2_error404_mode(); } } catch (AeMySQLException $e){ if(substr($candy,0,4)=='e2s_'){ xv($e); } else { kv($e); $parameters=array(); $content['unavailable?']=true; } } if (!is_array($content))$content=array(); $content['template']['respond-to-dark-mode?'] = ( $_template['supports_dark_mode'] and (bool) @$settings['appearance']['respond_to_dark_mode'] ); $content['template']['use-likely-light?']=$_template['use_likely_light']; if (!array_key_exists('class',$content)) { $content['class']=str_replace('_','-',str_replace('e2m_','',$candy)); } if (!array_key_exists('notes',$content))$content['notes'] = array (); if (!array_key_exists('drafts',$content))$content['drafts'] = array (); if (!array_key_exists('comments',$content))$content['comments'] = array (); if (!array_key_exists('notes-list',$content))$content['notes-list'] = array (); if (fn_()!==null){ if(Log::$cy)__log('Stuff for installed engine {'); $content['sign-in'] = [ 'done?' => $nnv, 'required?' => $mnv, 'necessary?' => $mnv && !$nnv, 'href' => jv('e2m_sign_in'), 'prompt' => $_strings['gs--need-password'], ]; $content['hrefs'] = array ( 'everything' => jv('e2m_everything'), ); if (!array_key_exists('tags',$content)) $content['tags']=mf($parameters); $content['blog']=cd(); $content['form-search']=da($parameters); $content['engine']=um(); $content['form-login']=p2(); if($content['form-login']===null) unset($content['form-login']); if (!array_key_exists('summary',$content)) { if (!empty ($settings['meta_description'])) { $content['summary']=strip_tags(h3(htmlspecialchars($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } else { $content['summary']=trim(strip_tags($content['blog']['subtitle'])); } } if (x2()) { $content['admin']=om(); $content['last-modifieds-by-id']='{}'; if (@$_COOKIE[b('local_copies')]) { $content['last-modifieds-by-id'] = ( fm($_COOKIE[b('local_copies')]) ); } } if(Log::$cy)__log('}'); } $content['title']=strip_tags(h3(htmlspecialchars($content['title'],ENT_NOQUOTES,HSC_ENC))); if (@$content['heading']) { $content['heading']=strip_tags(h3(htmlspecialchars($content['heading'],ENT_NOQUOTES,HSC_ENC))); } $content['language']=$_lang; if (!@isset ($_diagnose['ok?'])) { if (@$_COOKIE[b('diagnose')] or @$_diagnose['need?']) { fv(); } } if (fn_()!==null){ if ( $settings['appearance']['show_view_counts'] ) { AeNoteReadCountsProvider :: setSQLRequestTemplateToMapIDsToReadCounts( "SELECT `ID`, `ReadCount` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } foreach($content['notes'] as $l2){ ba($l2['format-info']['links-required']); } } $content['message']=av(); $co=js(); $content['meta']=im( $candy, $content['notes'], $content['tag'], $content['blog'], $content['pages'] ); $content['stat']=nd(); $co=es($co); if (fn_()!==null){ $fnv=false; if (fn_()!==null and la()) { if(is_writable(USER_FOLDER.'indexing.psa')) { $fnv=true; } else { $_diagnose['need?']=true; y('diagnose','1'); } } } echo $co; if (fn_()!==null){ if ($fnv){ if(Log::$cy)__log('Spawn BSI step'); p3(jv('e2s_bsi_step', array ())); } } if (@$_config['dev_dump_ctree'])yv($content); } ?>