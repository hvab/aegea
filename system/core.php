<?php $_stopwatch=microtime(); define('E2_VERSION',3753); define('E2_RELEASE','2.10a'); define('E2_EDITION',1); define('E2_UA_STRING','E2 (v'. E2_VERSION .'; Aegea)'); define('E2_MINIMUM_PHP','5.6'); define('E2_MINIMUM_MYSQL',4.1); define('BUILDER_OBFUSCATE',1); define('BUILDER_FLATTEN',1); define('E2_NEW_FILES_RIGHTS',0777); define('E2_JSON_STYLE',JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); define('E2_RUN_ID',chr(rand(65,90))); define('HSC_ENC','UTF-8'); define('SECONDS_IN_A_MINUTE',60); define('SECONDS_IN_AN_HOUR',3600); define('SECONDS_IN_A_DAY',86400); define('SECONDS_IN_A_WEEK',604800); define('SECONDS_IN_A_MONTH',2592000); define('SECONDS_IN_A_YEAR',31536000); if(version_compare(PHP_VERSION,E2_MINIMUM_PHP) < 0){ die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } if(!function_exists('getimagesize')) { die ('Function getimagesize is not defined, php_gd not installed?'); } if(!function_exists('mb_internal_encoding')) { die ('Function mb_internal_encoding is not defined, php_mbstring not installed?'); } error_reporting(E_ALL); setlocale(LC_CTYPE,'ru_RU.UTF'); mb_internal_encoding('UTF-8'); date_default_timezone_set('GMT'); if(version_compare(PHP_VERSION,'7.0') < 0){ error_reporting(E_ALL & ~E_STRICT); } if(is_file('superconfig.php')) { include 'superconfig.php'; } $_protocol=( !empty ($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off' or $_SERVER['SERVER_PORT']==443 or isset ($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO']=='https' or isset ($_SERVER['HTTP_X_HTTPS']) && ($_SERVER['HTTP_X_HTTPS']) ) ? 'https':'http'; if(is_file('force-https')) { $_protocol='https'; } $c=substr( $_SERVER['PHP_SELF'],0,strpos($_SERVER['PHP_SELF'],'/index.php') ); list ($v, ) = explode(':',$_SERVER['HTTP_HOST']); $full_blog_url=$_protocol. '://'. $v.$c; $_user_folder_name=str_replace('/','--',$v.$c); if(substr($_user_folder_name,0,4)=='www.'){ $_user_folder_name=substr($_user_folder_name,4); } if(is_file('multiuser')) { if ( !empty ($_superconfig) and array_key_exists('rewrites',$_superconfig) and array_key_exists($_user_folder_name,$_superconfig['rewrites']) ) { $_user_folder_name=$_superconfig['rewrites'][$_user_folder_name]; } define('USER_FOLDER','users/'. $_user_folder_name .'/'); } else { define('USER_FOLDER','user/'); } if( !empty ($_superconfig) and array_key_exists('store_files_by_users',$_superconfig) and $_superconfig['store_files_by_users'] ) { define('MEDIA_ROOT_FOLDER',USER_FOLDER .'files/'); } else { define('MEDIA_ROOT_FOLDER',''); } if(in_array('mail',explode(',',ini_get('disable_functions')))) { define('MAIL_ENABLED',false); } else { define('MAIL_ENABLED',true); } define('EXTRAS_FOLDER',USER_FOLDER.'extras/'); define('BACKUP_FOLDER',USER_FOLDER.'backup/'); define('CACHES_FOLDER',USER_FOLDER.'caches/'); define('USER_LIBRARY_FOLDER',USER_FOLDER.'library/'); define('LOG_FOLDER',USER_FOLDER.'logs/'); define('LICENSE_FILE',USER_FOLDER.'license.psa'); define('PICTURES_FOLDER','pictures/'); define('THUMBNAILS_FOLDER','pictures/thumbs/'); define('AVATARS_FOLDER','pictures/avatars/'); define('VIDEO_FOLDER','video/'); define('AUDIO_FOLDER','audio/'); define('TEMPLATES_FOLDER','themes/'); define('SYSTEM_FOLDER','system/'); define('SCRIPTS_FOLDER','system/js/'); define('SYSTEM_LIBRARY_FOLDER','system/library/'); define('SYSTEM_TEMPLATE_FOLDER','system/theme/'); define('VIDEO_ICON_IMAGE','system/theme/images/video.svg'); define('VIDEO_ICON_WIDTH',180); define('VIDEO_ICON_HEIGHT',120); define('AUDIO_ICON_IMAGE','system/theme/images/audio.svg'); define('AUDIO_ICON_WIDTH',120); define('AUDIO_ICON_HEIGHT',120); define('LANGUAGES_FOLDER','system/languages/'); define('DEFAULTS_FOLDER','system/default/'); define('MTMPL_FOLDER','system/default/mail/'); define('DEFAULT_TEMPLATE','acute'); if(!is_file(DEFAULTS_FOLDER. 'config.php')) die ('System config missing'); include DEFAULTS_FOLDER.'config.php'; $_default_config=$_config; if(is_file(USER_FOLDER. 'config.php')) { include USER_FOLDER.'config.php'; $_config=array_merge($_default_config,$_config); } define('E2E_STRANGE_ERROR',10); define('E2E_USER_ERROR',20); define('E2E_PERMISSIONS_ERROR',30); define('E2E_MESSAGE',100); define('E2E_DIAGNOSTICS_MESSAGE',110); define('DEFAULT_ITEMS_PER_PAGE',10); define('MAX_ITEMS_PER_PAGE',100); define('FP_NO_ID_OR_NEW', -1); define('FP_INSERT_ERROR', -10); define('FP_UPDATE_ERROR', -11); define('FP_EMPTY_FIELD', -20); define('FP_TITLE_OR_TEXT_EMPTY', -21); define('FP_NOT_COMMENTABLE', -30); define('FP_COMMENT_DOUBLE_POST', -101); define('FP_COMMENT_TOO_LONG', -102); define('FP_COMMENT_SPAM_SUSPECT', -103); define('NOTE_COMMENTABLE_NOW', -1); define('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define('THUMB_WIDTH',180); define('THUMB_HEIGHT',120); define('THUMB_JPG_QUALITY',50); define('SCALED_IMAGE_JPG_QUALITY',80); define('USERPIC_WIDTH',80); define('USERPIC_HEIGHT',80); define('USERPIC_JPG_QUALITY',80); $_fp_error=false; if(strstr(__FILE__,'all.php')) { define('BUILT',0); } else { define('BUILT',1); } function c($b=''){ global$_protocol,$errors,$v,$c; @session_start(); $_SESSION['errors']=$errors; if(substr($b,0,strlen($_protocol)+3)!=$_protocol .'://'){ header('Location: '. $_protocol .'://'. $v.$c .'/'. $b); } else { header('Location: '. $b); } flush(); die; } function v(){ $y=$_SERVER['HTTP_REFERER']; c($y); } function b($n=''){ global $c; $m=str_replace('/','--',trim($c,'/')); if ($m!=='')$m.='-'; $f=substr_count($_SERVER['HTTP_HOST'],'.'); $d=$m . @str_repeat('_',$f).$n; return $d; } function y($n,$s='',$a=true){ $q=$a? (time()+3600*24*365) : (0); $l=$_SERVER['HTTP_HOST']; $z=substr_count($l,'.'); if ($z < 3)$l=str_repeat('.',3-$z).$l; $f=setcookie(b($n),$s,$q,'/'); } function n($k,$x,$e_=''){ if(trim($x)!=''){ $x=explode($k,$x); foreach ($x as $r => $t)$x[$r]=trim($t); foreach ($x as $r => $t) if ($t=='') unset ($x[$r]); $j=array_unique($x); if ('sort'==$e_)sort($j); return $j; } else return array (); } function m($x){ $h=array(); if(is_file(DEFAULTS_FOLDER.'romanize.txt')) { $h=file(DEFAULTS_FOLDER.'romanize.txt'); } $g=$w=''; foreach ($h as $r => $u){ if (!($r%2))$g.=rtrim($u) .' '; else $w.=rtrim($u) .' '; if ($r%2){ while (mb_strlen($w) < mb_strlen($g))$w.=' '; while (mb_strlen($w) > mb_strlen($g))$g.=' '; } } $i=''; $o=-1; for ($r=0; $r < mb_strlen($g); ++ $r){ $p=mb_substr($g,$r,1); if ($p!=' '){ $i.=$p; if ($o == -1)$o=$r; } elseif ($i){ $cv=trim(mb_substr($w,$o,mb_strpos($w,' ',$o+1)-$o)); $vv=array ($i,$cv); $bv[mb_strlen($i)][] = $vv; $i=''; $o=-1; } } $yv=array(); for ($r=count($bv); $r > 0; -- $r){ foreach ($bv[$r] as $vv)$yv[$vv[0]] = $vv[1]; } return strtr($x,$yv); } function f($nv,$mv,$fv=0){ if ($mv==0) return 0; $dv=round($nv/$mv*100,$fv); $sv=pow(10, -$fv); if ($nv > 0 and $dv==0)$dv=$sv; if ($nv < $mv and $dv==100)$dv=100-$sv; return $dv; } function d($av,$action,$qv){ if (!is_array($av))$av=array(); if($action=='add'){ $av=array_unique(array_merge($av,$qv)); } if($action=='remove'){ unset ($av[array_search($qv,$av)]); } if (!is_array($av))$av=array(); return $av; } function s($lv){ $parameters=$lv['parameters']; $zv=[ 'success' => false ]; try { $lv['flipping-function'] ($parameters); $kv=$parameters; $kv['value'] = !$parameters['value']; $zv=[ 'success' => true, 'data' => [ 'flag-now-on' => ($parameters['value']==1), 'new-href' => jv($lv['candy-name'],$kv), ] ]; } catch (AeMySQLException $e){ kv($e,'Could not set '. $lv['flag-name'] .' flag'); } if(array_key_exists('result',$_POST) and ($_POST['result']=='ajaxresult')) { $zv=json_encode($zv); die ($zv); } else { c(jv('e2m_tag',$parameters)); } } function a($x){ $xv=@$_SERVER['HTTP_USER_AGENT'] or $xv=''; $ev=strstr($xv,'iPhone') || strstr($xv,'iPad'); $rv=strstr($xv,'Macintosh'); if ($ev) return ''; if ($x=='submit'){ if ($rv){ return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($x=='livesave'){ if ($rv){ return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($x=='navigation'){ if ($rv){ return '&#x2325;'; } else { return 'Ctrl'; } } if ($x=='navigation-later'){ if ($rv){ return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($x=='navigation-earlier'){ if ($rv){ return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function q($tv){ $tv=str_replace('<','&lt;',$tv); $tv=str_replace('>','&gt;',$tv); return $tv; } function l($tv){ $tv=str_replace('"','&quot;',$tv); return $tv; } function z($s,$jv){ return str_replace('.',',',round($s,$jv)); } function e2_stripslashes_array($hv){ return is_array($hv)?array_map('e2_stripslashes_array',$hv):stripslashes($hv); } function k(){ if(version_compare(PHP_VERSION,'7.4') >= 0) return; if(get_magic_quotes_runtime()) { set_magic_quotes_runtime(0); } if(get_magic_quotes_gpc()) { $_GET=e2_stripslashes_array($_GET); $_POST=e2_stripslashes_array($_POST); $_COOKIE=e2_stripslashes_array($_COOKIE); $_REQUEST=e2_stripslashes_array($_REQUEST); } } function x($gv){ return sprintf('%u',ip2long($gv)); } function e_($wv){ return long2ip(sprintf('%d',$wv)); } function e2_decline_for_number($tv,$wv=null){ $uv=$tv; if ($wv===null){ $wv=substr($tv,0,strpos($tv,' ')); $uv=substr($tv,strpos($tv,' ')+1); } $iv=strpos($uv,'('); $ov=strpos($uv,')'); if ($ov > $iv)$pv=substr($uv,$iv,$ov-$iv+1); $cb=explode(',',trim(@$pv,'()')); if(count($cb)==2)array_unshift($cb,''); $vb=array (2,0,1,1,1,2,2,2,2,2); if ($wv%100 > 10 and $wv%100 < 20)$bb=2; else $bb=$vb[$wv%10]; $yb=$cb[$bb]; $tv=str_replace($pv,$yb,$tv); if(strstr($tv,'(') and strstr($tv,')')) { return e2_decline_for_number($tv,$wv); } else { return $tv; } } function r($nb){ $mb=glob($nb,GLOB_NOSORT); if(is_array($mb)) { foreach ($mb as $fb){ @unlink($fb); } } } function t($db){ $mb=glob($db .'*',GLOB_NOSORT); if(is_array($mb)) { foreach ($mb as $fb){ if(basename($fb)!='.' and basename($fb)!='..'){ if(is_dir($fb)) { if (t($fb .'/')) { if (!rmdir($fb)) { return false; } } else { return false; } } else { @unlink($fb); } } } return true; } else { return false; } } function j($sb){ $sb=trim($sb,'/'); $sb=explode('/',$sb); $db=''; foreach ($sb as $ab){ $db=$db.$ab; if (!is_dir($db)) { if (@mkdir($db)) { @chmod($db,E2_NEW_FILES_RIGHTS); } else { return false; } } $db=$db.'/'; } return true; } function h($sb){ return preg_replace('/\/([^\/]+?)\/\.\./','',$sb); } function g($x){ $qb=get_html_translation_table(HTML_ENTITIES); $qb=array_flip($qb); return strtr($x,$qb); } function w($lb=NULL){ if(NULL==$lb)$lb=microtime(); list ($zb,$kb)=explode(' ',$lb); return ((float)$zb + (float)$kb); } if(E2_EDITION){ function u($xb=false){ global$_config,$v; static $eb=null; if(is_array($eb)) return $eb; $eb=@unserialize(file_get_contents(LICENSE_FILE)); $rb=time(); if(is_array($eb)) { if (@$eb['checked-stamp'] >= $rb-SECONDS_IN_A_DAY){ return $eb; } } if (!$xb) return false; $eb=file_get_contents($_config['license_url'].$v); $eb=json_decode($eb,true); list ($tb,$jb,$hb)=explode('.',$eb['until']); $gb=gmmktime(23,59,59,$jb,$tb,$hb); $gb -= ly(ay(),$rb); $eb['checked-stamp']=time(); $eb['until-stamp']=$gb; @n3(LICENSE_FILE,serialize($eb)); return $eb; } function i(){ if (!u()) { p3(jv('e2s_post_service', ['service' => 'verify']), true); } } } function o(){ global$settings; if (!isset ($settings))$settings=array(); $ib=array(); if(is_file(USER_FOLDER.'settings.json')) { $ib=json_decode(file_get_contents(USER_FOLDER.'settings.json'),true); $ob=13; } elseif(is_file(USER_FOLDER.'settings.psa')) { $ib=unserialize(file_get_contents(USER_FOLDER.'settings.psa')); } if (!is_array($ib))$ib=array(); $settings=array_merge($settings,$ib); if ( !array_key_exists('appearance',$settings) or !array_key_exists('notes_per_page',$settings['appearance']) or !is_numeric($settings['appearance']['notes_per_page']) or $settings['appearance']['notes_per_page'] < 1 ){ $settings['appearance']['notes_per_page']=DEFAULT_ITEMS_PER_PAGE; } if($settings['appearance']['notes_per_page'] > MAX_ITEMS_PER_PAGE){ $settings['appearance']['notes_per_page']=MAX_ITEMS_PER_PAGE; } if ( !array_key_exists('comments',$settings) or !array_key_exists('default_on', @$settings['comments']) ) { $settings['comments']['default_on']=false; } if (!array_key_exists('respond_to_dark_mode',$settings['appearance'])) { $settings['appearance']['respond_to_dark_mode']=true; } return true; } function e2m_settings(){ global$settings,$_template,$_strings,$_config; $pb=array(); $c3=DEFAULT_LANGUAGE; if(array_key_exists('language',$settings)) { $c3=$settings['language']; } foreach(glob(LANGUAGES_FOLDER. '*.php') as $fb){ $v3=substr(basename($fb),0,2); $b3=file_get_contents($fb); if(preg_match( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu',$b3,$y3 )) { $n3=$y3[1]; } else { $n3=$v3; } $pb[$v3] = array ( 'selected?' => (bool) ($c3==$v3), 'display-name' => $n3, ); } $eb=$m3=false; if(E2_EDITION){ $eb=u(); $m3=true; } $d['title']=$_strings['pt--settings']; $d['heading']=$_strings['pt--settings']; $d['form']='form-preferences'; $d['form-preferences'] = array ( 'blog-title-default' => htmlspecialchars($_strings['e2--default-blog-title'],ENT_COMPAT,HSC_ENC), 'blog-title' => htmlspecialchars(yd(),ENT_COMPAT,HSC_ENC), 'blog-subtitle' => htmlspecialchars(@$settings['blog_subtitle'],ENT_COMPAT,HSC_ENC), 'blog-meta-description' => htmlspecialchars(@$settings['meta_description'],ENT_COMPAT,HSC_ENC), 'blog-author-default' => htmlspecialchars($_strings['e2--default-blog-author'],ENT_COMPAT,HSC_ENC), 'blog-author' => htmlspecialchars(@$settings['author'],ENT_COMPAT,HSC_ENC), 'languages' => $pb, 'language' => $c3, 'form-action' => jv('e2s_settings_save'), 'userpic-href' => md('square'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'emailing-possible?' => MAIL_ENABLED, 'email-notify?' => (bool) @$settings['notifications']['new_comments'], 'email' => htmlspecialchars(@$settings['author_email'],ENT_NOQUOTES,HSC_ENC), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-view-counts?' => (bool)$settings['appearance']['show_view_counts'], 'show-sharing-buttons?' => (bool)$settings['appearance']['show_sharing_buttons'], 'includes-google-analytics?' => false, 'includes-yandex-metrika?' => false, 'template-name' => $_template['name'], 'templates' => os(), 'respond-to-dark-mode?' => (bool) @$settings['appearance']['respond_to_dark_mode'], 'submit-text' => $_strings['fb--save-changes'], 'show-payment-info?' => $m3 and ($eb!==false), 'paid-period' => $eb['licensed?'] ? (time() <= $eb['until-stamp']) : false, 'paid-period-ended' => $eb['licensed?'] ? (time() > $eb['until-stamp']) : false, 'paid-until' => $eb['licensed?'] ? ([$eb['until-stamp'],ay()]) : false, 'pay-href' => (string) @$eb['pay-href'], 'space-usage' => j3(r3(),true), ); if(E2_EDITION){ $d['form-preferences']['includes-google-analytics?']=true; $d['form-preferences']['google-analytics'] = ( htmlspecialchars( @$settings['embed']['google-analytics'],ENT_COMPAT,HSC_ENC ) ); $d['form-preferences']['includes-yandex-metrika?']=true; $d['form-preferences']['yandex-metrika'] = ( htmlspecialchars( @$settings['embed']['yandex-metrika'],ENT_COMPAT,HSC_ENC ) ); } return $d; } function e2s_settings_save(){ global$settings,$_strings; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_settings')); } $f3=$d3=''; if(array_key_exists('blog-title',$_POST)) { $f3=trim($_POST['blog-title']); } if(array_key_exists('blog-subtitle',$_POST)) { $d3=trim($_POST['blog-subtitle']); } if(array_key_exists('blog-meta-description',$_POST)) { $s3=trim($_POST['blog-meta-description']); } if(array_key_exists('blog-author',$_POST)) { $a3=trim($_POST['blog-author']); } if(array_key_exists('language',$_POST)) $q3=$_POST['language']; if(array_key_exists('email',$_POST)) $l3=trim($_POST['email']); $z3=(int)$_POST['notes-per-page']; $settings['blog_title']=$f3; $settings['blog_title']=yd(); $settings['author']=$a3; $settings['author_email']=$l3; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if(array_key_exists('template',$_POST)) { $settings['template']=trim($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); $settings['appearance']['show_view_counts'] = isset ($_POST['show-view-counts']); if ( !array_key_exists('language',$settings) or $settings['language']!=$q3 ){ e2_drop_all_kinds_of_cache(); $settings['language']=$q3; } if ( $settings['blog_subtitle']!=$d3 or $settings['meta_description']!=$s3 or $settings['appearance']['notes_per_page']!=$z3 or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['appearance']['respond_to_dark_mode'] != isset ($_POST['respond-to-dark-mode']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink(CACHE_FILENAME_FRONTPAGE); @unlink(CACHE_FILENAME_FRONTPAGE_FEED); @unlink(CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['blog_subtitle']=$d3; $settings['meta_description']=$s3; $settings['appearance']['notes_per_page']=$z3; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['appearance']['respond_to_dark_mode'] = isset ($_POST['respond-to-dark-mode']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } if(E2_EDITION){ if(array_key_exists('google-analytics',$_POST)) { $settings['embed']['google-analytics']=trim($_POST['google-analytics']); } if(array_key_exists('yandex-metrika',$_POST)) { $settings['embed']['yandex-metrika']=trim($_POST['yandex-metrika']); } } r(CACHE_FILENAMES_NOTES_COMMENTS); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_settings')); } c(jv('e2m_frontpage', array ('page' => 1))); } function e2m_underhood(){ global$_db; $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['title']='Underhood'; $d['heading']='Underhood'; xn('check version'); $k3=$x3=0; foreach(glob(CACHES_FOLDER .'/*') as $fb){ $k3 ++; $x3+=stat($fb)['size']; } $e3=$r3=0; foreach(glob(LOG_FOLDER .'*') as $fb){ $e3 ++; $r3+=stat($fb)['size']; } $t3=qa(); $j3=f($t3['indexed_count'],$t3['total_count']); $h3=false; if ($t3['time_spent']) { $h3=floor($t3['time_spent']); if ($h3 >= 60){ $h3=( floor($h3/60) .'min '. str_pad($h3 % 60,2,'0',STR_PAD_LEFT). 's' ); } elseif ($h3 > 0){ $h3.='s'; } else { $h3=false; } } $g3=array_keys(hn()); $d['form']='form-underhood'; $d['form-underhood'] = [ 'mysql-version' => $_db['version'], 'form-action-engine-rebuild' => BUILT? false:jv('e2s_post_service', ['service' => 'build']), 'cache-files-count' => $k3, 'cache-files-size' => $x3, 'form-action-cache-invalidate' => jv('e2s_post_service', ['service' => 'sync']), 'search-index-items-count' => $t3['indexed_count'], 'search-index-total-items-count' => $t3['total_count'], 'search-index-time-spent' => $h3, 'search-index-percentage' => $j3, 'form-action-search-index-continue' => za()? jv('e2s_bsi_step'):false, 'form-action-search-index-rebuild' => jv('e2s_bsi_drop'), 'log-files-count' => $e3, 'log-files-size' => $r3, 'form-action-logs-enable' => jv('e2s_post_service', ['service' => 'log']), 'backup-last' => count($g3)? xy('D, M d, Y \a\t H:i:s',$g3[0]) : false, 'form-action-backup' => jv('e2s_dump'), 'form-action-database-migrate' => jv( 'e2s_post_service', ['service' => 'migrate'] ), 'form-action-license-verify' => jv( 'e2s_post_service', ['service' => 'verify'] ), ]; return $d; } function e2m_database(){ global$settings,$_strings,$_superconfig; if (@$_superconfig['disallow_db_config']) { return e2_error404_mode(); } $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['form']='form-database'; $d['form-database'] = array ( 'form-action' => jv('e2s_database_save'), 'db-server' => htmlspecialchars(@$settings['db']['server']? $settings['db']['server']:'localhost'), 'db-user' => htmlspecialchars(@$settings['db']['user_name']? $settings['db']['user_name']:'root'), 'db-password' => htmlspecialchars(cd(@$settings['db']['passw'])), 'db-database' => htmlspecialchars(@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $d; } function e2s_database_save(){ global$settings,$_db,$_superconfig,$_strings,$_config; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_database')); } if (@$_superconfig['disallow_db_config']) { return e2_error404_mode(); } $w3['server'] = @$_POST['db-server']; $w3['user_name'] = @$_POST['db-user']; $w3['passw'] = p2(@$_POST['db-password']); $w3['name'] = @$_POST['db-database']; $u3=false; try { xn('check database from HTTP post',$w3); $i3=e2_model_data_check($w3['name']); if (!$i3['occupied'] or !$i3['migrateable']) { mv($_strings['er--db-data-incomplete']); c(jv('e2m_database')); } qn(); $u3=true; } catch (AeMySQLCannotConnectException $e){ mv( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error() .' ('. mysqli_connect_errno() .')' ); } catch (AeMySQLTooOldException $e){ mv(e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv($_strings['er--cannot-find-db'] .' '. $w3['name']); } if (!$u3){ c(jv('e2m_database')); } $settings['db']=$w3; if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_database')); } e2_drop_all_kinds_of_cache(); if (!$_config['retain_search_indexes_on_db_switch']) { $o3=ta(); try { $o3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$p3)__log('Rose not available'); } la(); } p3(jv('e2s_bsi_step')); c(jv('e2m_settings')); } function p(){ return class_exists('ZipArchive'); } function e2m_get_backup(){ if (p()) { $cy=new ZipArchive(); $vy=BACKUP_FOLDER .'backup.zip'; if ($cy -> open($vy,ZIPARCHIVE::CREATE)) { @ $cy -> addEmptyDir('backup'); @ $cy -> addFile(USER_FOLDER.'userpic@2x.jpg','backup/files/userpic@2x.jpg'); @ $cy -> addFile(USER_FOLDER.'userpic@2x.png','backup/files/userpic@2x.png'); $by=BACKUP_FOLDER .'backup-tail.sql'; $yy=''; $ny=-1; foreach(glob(BACKUP_FOLDER .'backup-*.sql') as $my){ if ($my===$by) continue; $fy=stat($my); if ($fy['ctime'] > $ny)$yy=$my; $ny=$fy['ctime']; } $cy -> addFile($yy,'backup/'. basename($yy)); if(is_file($by)) { @file_put_contents($by,"COMMIT;\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod($by,E2_NEW_FILES_RIGHTS); } $cy -> addFile($by,'backup/backup-tail.sql'); $cy -> close(); } if(is_file($vy)) { header('Content-Type: application/zip'); header('Content-Disposition: attachment; filename="backup.zip"'); readfile($vy); unlink($vy); } else { die ('Cannot get backup'); } die; } else { die ('Cannot get backup'); } } if(substr(@$_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2)=='ru'){ define('DEFAULT_LANGUAGE','ru'); } else { define('DEFAULT_LANGUAGE','en'); } function e2l_get_string($sy,$lv){ global$_strings; $name=$_strings[$sy]; if(preg_match_all('/\$\[(.+?)\]/u',$name,$y3,PREG_SET_ORDER)) { foreach ($y3 as $ay){ $n=$ay[1]; $qy=''; if(strstr($n,'.')) list ($n,$qy)=explode('.',$n,2); if(array_key_exists($n,$lv)) { if ($qy){ $name=str_replace($ay[0],e2l__format_value($qy,$lv[$n],$sy),$name); } else { $name=str_replace($ay[0],$lv[$n],$name); } } } } return$name; } function e2l__format_value($qy,$s,$sy){ list ($qy,$ly)=explode('.',$qy,2); $zy='e2lstr_'. $qy; if(function_exists($zy)) { return call_user_func($zy,$s,$ly,$sy); } else { return $s; } return $s; } function cv(){ global$_lang,$settings; if ( array_key_exists('language',$settings) and is_file($ky=LANGUAGES_FOLDER.$settings['language'] .'.php') ) { $_lang=$settings['language']; include $ky; } elseif(is_file($ky=LANGUAGES_FOLDER.DEFAULT_LANGUAGE .'.php')) { $_lang=DEFAULT_LANGUAGE; include $ky; } else { die ('Language file missing: '. $ky); } return e2l_load_strings(); } define('LOG_FILE',LOG_FOLDER.'main.log'); define('LOG_DEBUG_FILE',LOG_FOLDER.'debug.log'); class Log { public static $p3=false; public static $xy=false; } function vv(){ global$_config; if ( $_config['write_log'] and ($_config['write_log_create'] or is_file(LOG_FILE)) ) { Log::$p3=true; Log::$xy=true; } else { Log::$p3=false; Log::$xy=false; } if (!Log::$p3) return; @j(LOG_FOLDER); if($_config['write_log_reset']) { @file_put_contents(LOG_FILE,''); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } if (@$_config['write_log_limit'] and is_file(LOG_FILE)) { $ey=@stat(LOG_FILE); $ey=$ey['size']; if ($ey > $_config['write_log_limit']) { @rename(LOG_FILE,LOG_FILE .'.bak'); @chmod(LOG_FILE .'.bak',E2_NEW_FILES_RIGHTS); @file_put_contents(LOG_FILE,''); } } __log('────────────────────────────────────────────────────────────────────────────────'); } function bv($ry=false) { static $ty=false; if ($ry===false) return $ty; if ($ry==='') return $ty=false; $fb=str_replace( '$',gmdate('Y-m-d-\a\t-H-i-s'),$ry ); return $ty= $fb; } function __log($tv){ static $hy; global$_stopwatch; $gy=bv(); $wy=''; $uy=str_pad(round(w()-$_stopwatch,5),10,' ',STR_PAD_RIGHT); if ($tv[0]=='}'){ -- $hy; if ($hy < 0)$hy=0; } $iy=( E2_RUN_ID .' '. $wy .''. $uy .' '. str_repeat(' ',$hy*2). $tv."\n" ); if ($tv[strlen($tv)-1]=='{'){ ++ $hy; } $oy=FILE_APPEND; if(Log::$xy){ @file_put_contents(LOG_FILE,$iy,$oy); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } if ($gy!==false){ $fb=LOG_FOLDER.$gy .'.log'; @j(LOG_FOLDER); @file_put_contents($fb,$iy,$oy); @chmod($gy,E2_NEW_FILES_RIGHTS); } if ($tv[0]=='#'){ @j(dirname(LOG_DEBUG_FILE). '/'); @file_put_contents(LOG_DEBUG_FILE,$iy,$oy); @chmod(LOG_DEBUG_FILE,E2_NEW_FILES_RIGHTS); } } function yv($py){ @n3( USER_FOLDER .'ctree.php', "<?php\r\n\r\n". var_export($py,true). "\r\n\r\n?>php" ); } function nv(){ @j(LOG_FOLDER); @file_put_contents(LOG_FILE,''); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } function mv($cn,$type=E2E_STRANGE_ERROR){ global$errors,$settings, $_config, $_strings, $_diagnose; if (!isset ($errors))$errors=[]; $vn=(!r2()+1 <= (int)$_config['show_call_stack']); if ($cn){ if ($cn[0]!='<')$cn='<p>'.$cn .'</p>'; $bn=array ( 'description' => $cn, 'type' => $type, ); if($type==E2E_STRANGE_ERROR and $vn){ $bn['backtrace']=debug_backtrace(); } $errors[] = $bn; } if($type==E2E_PERMISSIONS_ERROR){ $_diagnose['need?']=true; y('diagnose','1'); } return true; } function fv(){ global$errors,$yn,$_strings,$_diagnose; $nn=y3(); if(count($nn)==0){ y('diagnose',''); unset($_COOKIE['diagnose']); $_diagnose['need?']=false; $_diagnose['ok?']=true; return true; } else { $mn=''; $mn.='<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $mn.='<ul>'; foreach ($nn as $fn_){ if ($fn_=='.')$fn_=''; $mn.='<li><tt>./'. $fn_ .'</tt></li>'; if(Log::$p3)__log('Diagnostics: cannot write <'. $fn_ .'>'); } $mn.='</ul>'; $bn=array ( 'title' => $_strings['et--fix-permissions-on-server'], 'description' => $mn, 'type' => E2E_DIAGNOSTICS_MESSAGE, 'class' => 'serious', ); $errors[] = $bn; $_diagnose['ok?']=false; return false; } } function dv($sn,$cn,$an,$qn,$ln){ global$errors; if(0==error_reporting() or ($sn & 8)) return; $an=str_replace(__DIR__,'',$an); mv($an .', line '. $qn .'<br />Error '. $sn .': '. $cn); $errors[count($errors)-1]['phpcode']=$sn; } function sv($zn,$kn,$my,$u){ if (!(error_reporting() & $zn)) return; throw new ErrorException($kn,0,$zn,$my,$u); } function av(){ global$errors,$settings,$_config; if (!isset ($errors))$errors=[]; @session_start(); if(is_array(@$_SESSION['errors'])) { $e=array_merge(@$_SESSION['errors'],$errors); } else { $e=$errors; } $vn=(!r2()+1 <= (int)$_config['show_call_stack']); if (@$_config['store_backtrace'] and $vn and $e!=NULL){ @n3('backtrace.psa',serialize($e)); } else { @unlink('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset($_SESSION['errors']); $d=array(); $xn=false; if(count($e) > 0){ foreach($e as $r => $en){ if ($en['type']==E2E_STRANGE_ERROR){ $en['class']='serious'; $xn=true; if ($vn){ $en['backtrace']=lv($en['backtrace']); } } if ($en['type']==E2E_MESSAGE){ $en['class']='info'; } $e[$r]=$en; } $d['each']=$e; if ( $xn and @$_config['store_backtrace'] and $vn and is_file('debug.php') ) { $d['debug-link']='debug.php'; } } return $d; } function qv(){ $errors=av(); foreach($errors['each'] as $rn){ echo '<p>'. $rn['description'] .'</p>'; } die; } function lv($tn){ global $c; if (!is_array($tn)) return 'No backtrace info'; $tn=array_reverse($tn); $tn=array_splice($tn,0,count($tn)-1); $e='<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($tn as $r => $h){ $jn=@$h['args'] or $jn=array(); $hn=array(); foreach ($jn as $gn){ $hn[] = var_export($gn,true); } $my=@$h['file']; $my=str_replace($_SERVER['DOCUMENT_ROOT'],'',$my); $u=(@$h['line']? (' #'. $h['line']) : '?'); $e.='<div style="margin: .25em 0 .5em '. $r*3 .'em">'; $e.='<span style="float: right; color: #666"> '. $my.$u .'</span>'; $e.='<tt><b>'. @$h['function'] .' (</b>'; if(count($hn)) { $wn=str_replace("array (\n)",'array ()',$hn); $wn=implode(', ',$wn); if(0){ $wn=highlight_string('<?'. $wn .'?'.'>',true); $wn=substr($wn,77, -28); } $wn=str_replace('&nbsp;',' ',$wn); $wn=nl2br($wn); $e.='<div style="margin: 0 0 0 1.12em">'. $wn .'</div>'; } $e.='<b>)</b> &rarr;</tt></div>'; } $e.='</p>'; return$e; } class AeException extends \Exception {} class AeMySQLException extends AeException {} class AeMySQLNotFoundException extends AeMySQLException {} class AeMySQLTooOldException extends AeMySQLException {} class AeMySQLCannotConnectException extends AeMySQLException {} class AeMySQLAccessDeniedException extends AeMySQLCannotConnectException {} class AeMySQLQueryException extends AeMySQLException {} class AeMySQLCorruptedUpdateRecordCallException extends AeMySQLException {} class AeInstallException extends AeException {} class AeInstallAlreadyInstalledException extends AeInstallException {} class AeInstallDatabaseOccupiedException extends AeInstallException {} class AeNotSavedException extends AeException {} class AePasswordHashNotSavedException extends AeNotSavedException {} class AeSettingsNotSavedException extends AeNotSavedException {} class AeModelUnknownTableException extends AeException {} class AeOlbaException extends AeException {} class AeOlbaTemplateMissingException extends AeOlbaException {} class AeNotAndCannotBeInstalledException extends AeException {} class AeUpdateAlreadyInProcess extends AeException {} class AeUpdateCannotLock extends AeException {} function zv($un,$in=false){ $on=substr(__DIR__,0,strrpos(__DIR__,'/')); $pn=''; $cm=[]; foreach(array_reverse($un -> getTrace()) as $vm){ $bm['where']=str_replace( $on .'/','',$vm['file'] ) .':'. $vm['line']; $ym=[]; foreach ($vm['args'] as $nm){ $ym[] = htmlspecialchars( str_replace("\n","\n  ",var_export($nm,true)), ENT_NOQUOTES,HSC_ENC ); } $mm=''; if(count($ym)) { $mm=("\n". '  '. implode(",\n  ",$ym). "\n" ); } $bm['call']=$vm['function'] .' ('. $mm .')'; $cm[] = $bm; } do { if ((string)$un -> getMessage()!==''){ $pn.=$un -> getMessage() ."\n"; } $pn.="\n";; $pn .= ( get_class($un) .' in '. str_replace( $on .'/','',$un -> getFile() ) .':'. $un -> getLine(). "\n" ); if ($un -> getCode()) { $pn.='Code: '. $un -> getCode() ."\n"; } $fm=''; $r=1; foreach ($cm as $u){ $fm.=$r++ .'. '. $u['where'] .' '. $u['call']. "\n"; if (!$in)$fm.="\n";; } $pn.="\n";; } while ($un=$un -> getPrevious()); if ($in){ $fm=preg_replace('/^.*?$/smu','│            $0',$fm); $pn.='┌─'. "\n"; $pn.=$fm; $pn.='└─'; } else { $pn.=$fm; } return $pn; } function kv($un,$kn=''){ global$_config; if(__DEV)mv('<pre>'. zv($un) .'</pre>'); if($_config['log_errors']) { Log::$p3=true; if(Log::$p3)bv('error-$'); } if(Log::$p3)__log('Exception caught: '. zv($un,true)); if(Log::$p3)bv(''); if ((string)$kn!==''){ if(Log::$p3)__log($kn); } } function xv($un){ global$_config,$content,$c; $content['title']=':-('; $content['exception-message']=$un -> getMessage(); if(__DEV)$content['exception-string']=zv($un); if($_config['log_errors']) { Log::$p3=true; if(Log::$p3)bv('error-$'); } if(Log::$p3)__log('Panic: '. zv($un,true)); $d=hs('panic',true); if(Log::$p3)__log(':-('); echo $d; die; } function ev($un){ xv($un); } $_url_map=array ( '@log' => 'e2://e2s_log', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note?is_published=1&preview-key=0', ':note/:preview' => 'e2://e2m_note?is_published=1', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts?page=1', 'drafts-:page' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_note?is_published=0&preview-key=0', 'drafts/:draft/:preview' => 'e2://e2m_note?is_published=0', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=0', 'hot' => 'e2://e2m_most_commented?page=1', 'hot/:page' => 'e2://e2m_most_commented', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'popular' => 'e2://e2m_popular?page=1', 'popular/:page' => 'e2://e2m_popular', 'untagged' => 'e2://e2m_untagged?page=1', 'untagged/:page' => 'e2://e2m_untagged', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'install' => 'e2://e2m_install', 'settings' => 'e2://e2m_settings', 'settings/underhood' => 'e2://e2m_underhood', 'settings/underhood/build' => 'e2://e2s_post_service?service=build', 'settings/underhood/sync' => 'e2://e2s_post_service?service=sync', 'settings/underhood/log' => 'e2://e2s_post_service?service=log', 'settings/underhood/migrate' => 'e2://e2s_post_service?service=migrate', 'settings/underhood/verify' => 'e2://e2s_post_service?service=verify', 'settings/underhood/backup' => 'e2://e2s_dump', 'settings/underhood/index' => 'e2://e2s_bsi_step', 'settings/underhood/reindex' => 'e2://e2s_bsi_drop', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', ); $_url_chunks=array ( '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => array ( 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ), '\:draft' => array ( '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ), '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9,]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9\=\/\\\+\-\_\,]+)', ); $_url_autoredirects=array ( '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ); function rv($dm){ global$_url_autoredirects,$c; $dm=preg_replace(array_keys($_url_autoredirects),array_values($_url_autoredirects),$dm); if(preg_match('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/',$dm,$y3)) { if(2==strlen($y3[3]))$y3[3]='20'.$y3[3]; return ($y3[3].'/'.$y3[2].'/'.$y3[1].$y3[4]); } if(preg_match('/^tags\-rss\/(.*?)\/?$/',$dm,$y3)) { $sm=substr($y3[1],strrpos($y3[1],'/')+1); return ('tags/'. $sm.'/rss/'); } return $dm; } function tv(){ static $am=false; global$__synthetic_urls,$_config,$_superconfig; if ($am) return; $qm=$_config['url_composition']; if (!empty ($_superconfig) and array_key_exists('url_composition',$_superconfig)) { $qm=$_superconfig['url_composition']; } $__synthetic_urls=false; if ($qm=='synthetic'){ $__synthetic_urls=true; } if ($qm=='auto'){ if(function_exists('apache_get_modules')) { if(in_array('mod_rewrite',apache_get_modules())) { $__synthetic_urls=true; } } } $am=true; } function jv($candy,$parameters=array ()) { global$_url_map,$_url_chunks,$_config,$__synthetic_urls,$_protocol,$v,$c; $lm=array_flip($_url_map); if ( @$_config['preferred_domain_name'] and $_SERVER['HTTP_HOST']!=$_config['preferred_domain_name'] ) { $v=$_config['preferred_domain_name']; } $dm=$_protocol .'://'. $v.$c .'/'; $zm='e2://'. $candy; if(array_key_exists('page',$parameters)) { $page=$parameters['page']; } else { $page=1; } if($parameters){ $zm.='?'; $km=array(); $xm=array(); foreach($parameters as $em => $s){ if ($em=='*note'){ $xm[] = $em; $km[] = wv($s); } if ($em=='*tags'){ $xm[] = $em; $km[] = uv($s); } if ($em=='*tag'){ $xm[] = $em; $km[] = uv([$s]); } } foreach ($xm as $em) unset($parameters[$em]); foreach ($km as $rm){ $parameters=array_merge($parameters,$rm); } foreach($parameters as $em => $s){ if (@$em[0]!='_'){ $zm.=$em .'='. urlencode($s) .'&'; } } $zm=substr($zm,0, -1); } if(array_key_exists($zm,$lm)) { if ($lm[$zm]!=='')$dm.=$lm[$zm] .'/'; return $dm; } else { $hm=false; foreach ($lm as $gm => $wm){ $um=$gm; $um=preg_quote($um,'/'); $im=parse_url($gm); $om=$im['host']; $pm=parse_url($zm); if(strstr($gm,'::')) { $cf=$pm['scheme'] .'://'. $pm['host']; $um=str_replace('\:\:','(.*)',$um); $um='/^'. $um .'$/s'; if(preg_match($um,$cf,$y3)) { $sb=str_replace('::',$y3[1],$wm); $sb=str_replace('_','-',$sb); $vf=$pm['query']; if($__synthetic_urls and $vf){ $dm.=$sb .'/?'. $vf; } elseif($__synthetic_urls){ $dm.=$sb .'/'; } elseif ($vf){ $dm.='?go='. $sb .'/?'. $vf; } else { $dm.='?go='. $sb .'/'; } return $dm; } } $bf=false; if($candy===$om){ $hm=true; if ($im['query']) { $yf=explode('&',$im['query']); foreach ($yf as $nf){ list ($em,$s)=explode('=',$nf); $s=urldecode($s); $em=str_replace('_','-',$em); if ( array_key_exists($em,$parameters) and $parameters[$em]!=$s ){ $bf=true; break; } } } if (!$bf){ if(preg_match_all('/\:[\-a-z]+/i',$wm,$y3)) { foreach ($y3[0] as $mf){ $ff=$_url_chunks['\\'. $mf]; if (!is_array($ff)) { $ff=array ($ff); } $df=$ff[0]; foreach ($ff as $df){ $sf='/\(\?P\<(.*?)\>.*?\)/'; $af=true; if (@preg_match_all($sf,$df,$y3)) { $y3=$y3[1]; $af=true; for ($r=0; $r < count($y3); ++ $r){ if ( !array_key_exists(str_replace("_","-",$y3[$r]), $parameters) or $parameters[str_replace("_","-",$y3[$r])] === '' ){ $af=false; break; } } } if (!$af) continue; $qf=@preg_replace_callback( $sf, function ($y3) use ($parameters){ return$parameters[str_replace("_","-",$y3[1])]; }, $df ); $qf=stripslashes($qf); $lf=str_replace($mf,$qf,$wm); break; } $wm=$lf; } } $zf=array(); if ($wm){ if($__synthetic_urls){ $dm.=$wm .'/'; } else { $zf[] = 'go='. $wm .'/'; } } foreach($_GET as $t => $kf) if(in_array($t, array ('result','themeless'))) { $zf[] = $t . ($kf? ('='. urlencode($kf)) : ''); } if(count($zf)) { $dm.='?'. implode('&',$zf); } return $dm; } } } if ($hm){ return $dm; } else { die ('Cannot compose url for candy '. $candy); } } } function hv($dm=null){ global$_url_map,$_url_chunks,$_config,$_current_url,$__synthetic_urls,$_protocol,$v,$c; if ($dm===null) $dm=urldecode($_GET['go']); if(Log::$p3)__log('Resolve "'. $dm .'" {'); tv(); $xf=$dm; $dm=trim($dm,'/'); $dm=rv($dm); $parameters=array(); foreach($_url_map as $ef => $gm){ $rf=$ef; $rf=preg_quote($rf,'/'); if(strstr($ef,'::')) { $rf=str_replace('\:\:','(.*)',$rf); $rf='/^'. $rf .'$/s'; if(preg_match($rf,$dm,$y3)) { $tf=str_replace('-','_',$y3[1]); $zm=str_replace('::',$tf,$gm); } } elseif(strstr($ef,':')) { $jf=array(); foreach($_url_chunks as $t => $kf){ if(is_array($kf)) { $jf[$t]='(?:(?:'. implode(')|(?:',$kf) .'))'; } else { $jf[$t]=$kf; } } $rf=str_replace( array_keys($jf), array_values($jf), $rf ); $rf='/^'. $rf .'$/s'; if(preg_match($rf,$dm,$y3)) { $zm=$gm; foreach ($y3 as $em => $s) if (!is_numeric($em)) { $em=str_replace('_','-',$em); $parameters[$em]=$s; } } } else { if ($ef==$dm){ $zm=$gm; break; } } } $hf=(bool)$zm; if (!$zm)$zm='e2://e2_error404_mode'; $pm=parse_url($zm); $candy=$pm['host']; if ($pm['query']) { $yf=explode('&',$pm['query']); foreach ($yf as $nf){ list ($em,$s)=explode('=',$nf); $s=urldecode($s); $em=str_replace('_','-',$em); $parameters[$em]=$s; } } $d=false; $parameters=iv($parameters); if ($hf){ if($_config['force_canonical_urls']) { foreach (['draft2','oalias2'] as $gf){ if(array_key_exists($gf,$parameters)) { unset($parameters[$gf]); } } $wf=jv($candy,$parameters); list ($uf,$if_)=explode('?',$_SERVER['REQUEST_URI'],2); $of=$_protocol .'://'. $_SERVER['HTTP_HOST'].$uf; $pf=$_protocol .'://'. $_SERVER['HTTP_HOST'].urldecode($uf); $if_=explode('&',$if_); foreach ($if_ as $c2){ list ($v2, ) = explode('=',$c2); if ($v2=='go'){ $of.='?'. $c2; $pf.='?'. urldecode($c2); } } $_current_url=$of; if ( $of!=$wf and $pf!=$wf and $of!=$_protocol .'://'. $_SERVER['HTTP_HOST'].$c.'/@notify' ){ if(Log::$p3)__log('Used URL "'. $of .'" or "'. $_2used_url .'"'); if(Log::$p3)__log('Redirecting to canonical URL "'. $wf .'"'); if(Log::$p3)__log('}'); c($wf); } } if(is_callable($candy)) { $d=array ($candy,$parameters); } else { $d=array (null, array ()); } } else { $d=array (null, array ()); } foreach($_GET as $em => $s){ if ($em!=='go')$d[1][$em]=$s; } if(Log::$p3){ if(count($d[1]) > 0){ $b2=print_r($d[1],true); $b2=substr($b2,8, -2); $b2='    '. trim($b2); $b2=preg_replace('/^.*?$/smu','         $0',$b2); $b2=' with parameters:'."\r\n". $b2; } __log( 'Resolved to candy "'. $d[0] .'"'. $b2 ); } if(Log::$p3)__log('}'); return $d; } function wv($y2){ global $c,$_config; if (!isset ($y2['IsPublished'])) { return []; } if (!$y2['IsPublished']) { $parameters['is-published']=0; if ($y2['OriginalAlias']===''){ $parameters['draft']=$y2['ID']; } elseif (im($y2['OriginalAlias']) == 1){ $parameters['oalias']=$y2['OriginalAlias']; } else { $parameters['draft2']=$y2['ID']; $parameters['oalias2']=$y2['OriginalAlias']; } return$parameters; } $parameters['is-published']=1; $n2=un(); $m2='n'. $y2['ID']; $f2=$n2[$m2]; if (isset ($y2['__force_ymdn']) and ((string)$y2['OriginalAlias']==='')) { $m2='n'. $y2['ID'] .'-ymdn'; if(array_key_exists($m2,$n2)) { $f2=$n2[$m2]; } } if(preg_match( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $f2,$y3 )) { $parameters['year']=$y3['year']; $parameters['month']=$y3['month']; $parameters['day']=$y3['day']; $parameters['day-number']=$y3['day_number']; } else { $parameters['alias']=$f2; } return$parameters; } function uv($d2){ $s2=$parameters=[]; foreach ($d2 as $a2){ $s2[] = un() ['t'. $a2['ID']]; } if(count($s2)) { $parameters['tag-alias']=implode(',',$s2); } return$parameters; } function iv($parameters){ if ( (string) @$parameters['alias']!=='' or ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' and (string) @$parameters['day-number']!=='' ) ) { if ($q2=e2_published_noterec_with_parameters_($parameters)) { $parameters['*note']=$q2; } } if ( (string) @$parameters['oalias']!=='' or (string) @$parameters['draft']!=='' or (string) @$parameters['oalias2']!=='' or (string) @$parameters['draft2']!=='' ){ if ($q2=e2_noterec_with_parameters_($parameters)) { $parameters['*note']=$q2; } } if ( (string) @$parameters['tag-alias']!=='' ){ $parameters['*tags']=e2_tagrecs_with_parameters_($parameters); if(count($parameters['*tags']) == 1){ $parameters['*tag']=$parameters['*tags'][0]; } } return$parameters; } function ov($f){ global$_e2utf8__unformat_htmlentity_neasden; if($_e2utf8__unformat_htmlentity_neasden){ return $f; } else { return '((html '. $f .'))'; } } function pv($l2,$z2=false){ $k2=''; $x2=strlen($l2); for ($r=0; $r < 256; ++ $r){ $e2_[$r]=0; $r2=$r; while ($r2 & 0x00000080){ $r2 <<= 1; ++ $e2_[$r]; } } for ($r=0xd090; $r <= 0xd0bf; $r++)$t2[$r]=chr(($r & 0x000000ff)+48); for ($r=0xd180; $r <= 0xd18f; $r++)$t2[$r]=chr(($r & 0x000000ff)+112); $t2[0xd081]="\xa8"; $t2[0xd191]="\xb8"; $t2[0xc299]="\x99"; $t2[0xc2a9]="\xa9"; $t2[0xc2ae]="\xae"; $t2[0xc2ab]="\xab"; $t2[0xc2bb]="\xbb"; $t2[0xc2a0]="\xa0"; $r=0; while ($r < $x2){ $j2=$l2[$r]; $h2=ord($j2); if ($e2_[$h2]==0){ $k2.=$j2; ++ $r; } elseif ($e2_[$h2]==2){ $g2=$t2[($h2 << 8) | ord($l2[$r+1])]; $k2 .= ($g2!=null)? $g2 : ( $z2? (ov( cb(substr($l2,$r,2)) )) : '?' ); $r+=2; } else { $w2=substr($l2,$r,$e2_[$h2]); if ($w2=="\xe2\x84\x96")$k2.="\xb9"; elseif ($w2=="\xe2\x80\x93")$k2.="\x96"; elseif ($w2=="\xe2\x80\x94")$k2.="\x97"; elseif ($w2=="\xe2\x80\x98")$k2.="\x91"; elseif ($w2=="\xe2\x80\x99")$k2.="\x92"; elseif ($w2=="\xe2\x80\x9a")$k2.="\x82"; elseif ($w2=="\xe2\x80\x9c")$k2.="\x93"; elseif ($w2=="\xe2\x80\x9d")$k2.="\x94"; elseif ($w2=="\xe2\x80\x9e")$k2.="\x84"; elseif ($w2=="\xe2\x80\xa6")$k2.="\x85"; elseif ($w2=="\xe2\x80\xb9")$k2.="\x8b"; elseif ($w2=="\xe2\x80\xba")$k2.="\x9b"; elseif ($w2=="\xe2\x82\xac")$k2.="\x88"; elseif ($w2=="\xe2\x84\xa2")$k2.="\x99"; else $k2.=$z2? (ov( cb($w2) )) : '?'; $r+=$e2_[$h2]; } } return $k2; } function cb($p){ $u2=''; $x2=strlen($p); for ($r=0; $r < $x2; ++ $r){ $u2.=preg_replace('/^1*0/','',decbin(ord($p[$r]))); } return '&#'. bindec($u2) .';'; } function vb($i2) { $d=$i2; $d=preg_replace_callback('/([\x80-\xFF])/','e2_utf_from_windows_1251_char',$d); return $d; } function e2_utf_from_windows_1251_char($p){ list (, $p)=$p; if ($p=="\xa8") return "\xd0\x81"; if ($p=="\xb8") return "\xd1\x91"; if ($p >= "\xc0" && $p <= "\xef") return "\xd0".chr(ord($p)-48); if ($p >= "\xf0") return "\xd1".chr(ord($p)-112); if ($p=="\x85") return "\xe2\x80\xa6"; if ($p=="\x96") return "\xe2\x80\x93"; if ($p=="\x97") return "\xe2\x80\x94"; if ($p=="\xab") return "\xc2\xab"; if ($p=="\xbb") return "\xc2\xbb"; if ($p=="\x91") return "\xe2\x80\x98"; if ($p=="\x92") return "\xe2\x80\x99"; if ($p=="\x93") return "\xe2\x80\x9c"; if ($p=="\x94") return "\xe2\x80\x9d"; if ($p=="\x84") return "\xe2\x80\x9e"; if ($p=="\x99") return "\xe2\x84\xa2"; if ($p=="\xb9") return "\xe2\x84\x96"; if ($p=="\xa0") return "\xc2\xa0"; return '?'; }; function e2_utf8_version_of_array_($hv){ foreach ($hv as $t => $kf){ if (!array_key_exists($t.'.u?',$hv)) { if(is_string($hv[$t])) { $hv[$t]=vb($hv[$t]); } elseif(is_array($hv[$t])) { $hv[$t]=e2_utf8_version_of_array_($hv[$t]); } } } return $hv; } function yb($jb){ return mb_convert_encoding($jb[0],'HTML-ENTITIES','UTF-8'); } function nb($i2,$o2=false){ if ($o2){ return preg_replace_callback( '/[\x{10000}-\x{fffff}]/u','e2_question_long_utf8_chars_helper',$i2 ); } else { return preg_replace('/[\x{10000}-\x{fffff}]/u','?',$i2); } } function e2img_filename_by_processing( $p2,$cd, $vd,$bd,$yd ){ global$_config; if(Log::$p3)__log('Process image: "'. $p2 .'" -> "'. $cd .'"'); if (!is_file($p2)) return false; $nd=stat($p2)['size']; if (!wb($p2)) { if(Log::$p3)__log('Process image: SVG, no processing'); return $p2; } if(is_file($cd) and !b3($p2,$cd)) { if(Log::$p3)__log('Process image: Already exists'); return $cd; } if (!extension_loaded('gd')) return false; $md=pathinfo($cd); if (!@j($md['dirname'])) { if(Log::$p3)__log( 'Process image: Can’t create directory <'. $md['dirname'] .'>' ); return false; } if(Log::$p3)__log('Process image: Detecting image type'); $type=e2img__type_of_file($p2); if (!$type) return false; $fd='imagecreatefrom'. $type; if (!function_exists($fd)) return false; if(Log::$p3)__log('Process image: Opening original image ('. $fd .')'); $dd=call_user_func($fd,$p2); if (!$dd) return false; if ($sd=e2img__orientation_of_file($p2)) { if(Log::$p3)__log('Process image: Needs orientation fix'); $dd=e2img__res_rotate($dd, -$sd); } $ad=[imagesx($dd),imagesy($dd)]; $qd=$ad; $ld=[0,0,0,0]; if ($bd==CROP_SQUARE){ if(Log::$p3)__log('Process image: Needs crop'); list ($qd,$ld) = ( e2img__crop_metrics_to_square($qd) ); } $qd=e2_fit_metrics_to_constraints( $qd,$vd ); if ( $sd===0 and $qd===$ad ){ if(Log::$p3)__log('Process image: No changes necessary, leaving original'); return $p2; } if(Log::$p3)__log(var_export($qd,true)); if(Log::$p3)__log(var_export($ld,true)); $zd=e2img__create_copy_resampled( $dd, $qd, $ld, $type ); imagejpeg($zd,$cd,$yd); if (!is_file($cd)) { if(Log::$p3)__log('Process image: File not created by imagejpeg'); return false; } if ($sd===0){ $kd=stat($cd)['size']; if ($kd >= $nd){ if(Log::$p3)__log('Process image: Conversion to JPEG made file bigger, back up'); unlink($cd); $cd=$p2; } } @chmod($cd,$_config['uploaded_files_mode']); if(Log::$p3)__log('Process image: Done'); return $cd; } function e2img__create_copy_resampled( $dd,$qd,$ld,$type ){ list ($xd,$ed)=$qd; list ($rd,$td,$jd,$hd)=$ld; $zd=imagecreatetruecolor($xd,$ed); if($type==='png'){ imagefill($zd,0,0,imagecolorallocate($zd,255,255,255)); imagealphablending($zd,true); } $gd=imagesx($dd); $wd=imagesy($dd); imagecopyresampled( $zd, $dd, 0,0, 0+$rd,0+$td, $xd,$ed, $gd-$jd,$wd-$hd ); imageinterlace($zd,1); return $zd; } function e2img__type_of_file($fb){ $ud=@getimagesize($fb); if (!$ud or $ud[2] > 3) return false; if ($ud[2]==IMAGETYPE_GIF) return 'gif'; if ($ud[2]==IMAGETYPE_JPEG) return 'jpeg'; if ($ud[2]==IMAGETYPE_PNG) return 'png'; return false; } function e2img__orientation_of_file($fb){ if (!function_exists('exif_read_data')) return 0; if (($id=@exif_read_data($fb)) === false) return 0; if ($id['Orientation']==3) return -180; if ($id['Orientation']==6) return -270; if ($id['Orientation']==8) return -90; return 0; } function e2img__res_rotate($dy,$sd){ $od=imagerotate($dy,$sd,0); if ($od!==false){ imagedestroy($dy); $dy=$od; } return $dy; } function e2_fit_metrics_to_constraints( $pd,$vd ){ if ($vd===false)$vd=[0,0]; list ($cs,$vs)=$pd; list ($bs,$ys)=$vd; $ns=[1]; if ($bs)$ns[] = $bs/$cs; if ($ys)$ns[] = $ys/$vs; $ms=min($ns); if ($ms < 1){ $cs=(int)round($cs*$ms); $vs=(int)round($vs*$ms); } return [$cs,$vs]; } function e2img__crop_metrics_to_square($pd){ $fs=$ds=$ss=$as_=0; list ($cs,$vs)=$pd; if ($cs > $vs){ $ss=$cs-$vs; $fs=floor($ss/2); $vs=$cs; } elseif ($cs < $vs){ $as_=$vs-$cs; $ds=floor($ss/2); $cs=$vs; } $ld=[$fs,$ds,$ss,$as_]; $qs=[$cs,$vs]; return [$qs,$ld]; } define('PROVIDE_MEDIA_ASYNC',10); define('PROVIDE_MEDIA_NOW',20); function mb($ls){ global$full_blog_url; $zs=parse_url($ls); if (isset ($zs['host'])) { $dm=$ls; if ($zs['host']=='www.youtube.com'){ $ks=basename($zs['path']); $xs='remote/youtube-'. $ks .'-cover.jpg'; return [ 'url' => $dm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'youtube', 'video-id' => $ks, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER.$xs, 'local-relative-filename' => $xs, 'local-full-filename' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$xs, 'local-full-failname' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$xs.'.failed', ]; } elseif ($zs['host']=='player.vimeo.com'){ $ks=basename($zs['path']); $xs='remote/vimeo-'. $ks .'-cover.jpg'; return [ 'url' => $dm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'vimeo', 'video-id' => $ks, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER.$xs, 'local-relative-filename' => $xs, 'local-full-filename' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$xs, 'local-full-failname' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$xs.'.failed', ]; } elseif (gb($zs['path'])) { return [ 'url' => $dm, 'type' => 'remote-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => false, 'mime-type' => v3($zs['path']), 'length' => '', ]; } else { return [ 'url' => $dm, 'type' => 'remote-non-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($zs['path']), 'length' => '', ]; } } else { if (gb($zs['path'])) { $dm=$full_blog_url .'/'. PICTURES_FOLDER.$zs['path']; $es=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$zs['path']; return [ 'url' => $dm, 'type' => 'local-image', 'is-local?' => true, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => wb($zs['path']), 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'mime-type' => v3($zs['path']), 'length' => @stat($es)['size'], 'local-href' => $dm, 'local-cover-href' => $dm, 'local-relative-filename' => $zs['path'], 'local-full-filename' => $es, 'thumb-full-filename' => $es, ]; } elseif (ib($zs['path'])) { $dm=$full_blog_url .'/'. VIDEO_FOLDER.$zs['path']; $es=MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$zs['path']; return [ 'url' => $dm, 'type' => 'local-video', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($zs['path']), 'length' => @stat($es)['size'], 'local-href' => $dm, 'local-relative-filename' => $zs['path'], 'local-full-filename' => $es, 'thumb-full-filename' => VIDEO_ICON_IMAGE, ]; } else { $dm=$full_blog_url .'/'. AUDIO_FOLDER.$zs['path']; $es=MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$zs['path']; return [ 'url' => $dm, 'type' => 'local-non-image', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($zs['path']), 'length' => @stat($es)['size'], 'local-href' => $dm, 'local-full-filename' => $es, 'thumb-full-filename' => AUDIO_ICON_IMAGE, ]; } } } function fb($rs){ $ts=[]; foreach ($rs as $ls){ $js=mb($ls); if ($js['is-local?'])$ts[] = $ls; } return $ts; } function db($rs){ $ts=[]; foreach ($rs as $ls){ $js=mb($ls); if ($js['is-snippetable?'])$ts[] = $ls; } return $ts; } function sb( $hs,$gs ){ if (!is_array($hs))$hs=[]; if (!is_array($gs))$gs=[]; $rs=array_merge($gs,$hs); $rs=array_reverse($rs); $rs=array_unique($rs); $rs=array_reverse($rs); return $rs; } function ab($rs){ global$full_blog_url; if (!is_array($rs) or !count($rs)) return []; rb($rs); $ws=[]; foreach ($rs as $ls){ if (!empty ($us[$ls])) continue; $js=mb($ls); if (!$js['is-usable-as-cover?']) continue; if (!is_file($js['local-full-filename'])) continue; $size=m3($js['local-full-filename']); list ($cs,$vs,$is,$os)=$size; $ws[] = [ 'src' => $js['local-cover-href'], 'width' => $cs, 'height' => $vs, 'horizontality' => $is, 'verticality' => $os, ]; $us[$ls]=true; } return $ws; } function qb($rs){ global$full_blog_url,$_strings; if (!is_array($rs) or !count($rs)) return []; rb($rs); $ps=[]; foreach ($rs as $ls){ if (!empty ($us[$ls])) continue; $js=mb($ls); if (!$js['is-using-thumbnails?']) continue; if (!is_file($js['local-full-filename'])) continue; $ca=[ 'is-available?' => true, 'src' => '', 'width' => '', 'height' => '', 'original-filename' => '', 'original-filesize' => '', ]; if (!$js['is-local?'] or is_file($js['local-full-filename'])) { if ($js['is-generating-thumbnail?']) { $va=tb( $js ); } else { $va=$js['thumb-full-filename']; } } if (empty ($va)) { $ca['is-available?']=false; $va=jb( $js['local-relative-filename'] ); } $ca['src']=x3($va); if ($ca['is-available?']) { $size=m3($va); list ($cs,$vs)=$size; } else { $cs=$vs=''; } if (!$cs)$cs=THUMB_WIDTH/2; if (!$vs)$vs=THUMB_HEIGHT/2; list ($cs,$vs)=e2_fit_metrics_to_constraints( [$cs,$vs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $ca['width']=$cs; $ca['height']=$vs; if ($js['is-local?']) { $ca['original-filename']=$ls; if(is_file($js['local-full-filename'])) { $ba=stat($js['local-full-filename'])[7]; $ba=round($ba/1024) .' '. $_strings['gs--kb']; $ca['original-filesize']=$ba; } } $ps[] = $ca; $us[$ls]=true; } return $ps; } function lb($ya){ foreach ( ['maxresdefault','hqdefault','mqdefault','sddefault','default'] as $fb ){ $dm='http://img.youtube.com/vi/'. $ya .'/'. $fb .'.jpg'; if(Log::$p3)__log('Trying '. $dm .'...'); $na=@file_get_contents($dm); if ($na!==false) return $na; } return false; } function zb($ma){ $fa=@unserialize( file_get_contents('http://vimeo.com/api/v2/video/'. $ma .'.php') ); if (!empty ($fa[0]['thumbnail_large'])) { return @file_get_contents($fa[0]['thumbnail_large']); } return false; } function kb($js,$da){ if(is_file($js['local-full-filename'])) { if(Log::$p3)__log('Already exists: '. $js['local-full-filename']); } elseif(is_file($js['local-full-failname'])) { if(Log::$p3)__log('Already tried and failed: '. $js['local-full-filename']); } else { if(Log::$p3)__log('Resource '. $js['url'].' is missing a cover, retrieving'); if ($da==PROVIDE_MEDIA_ASYNC){ p3(jv('e2s_retrieve', [ 'url' => strtr(base64_encode($js['url']), '+/','-_'), ])); } if ($da==PROVIDE_MEDIA_NOW){ if(Log::$p3)__log('Downloading "'. $js['video-service'] .'" cover as '. $js['local-full-filename'] .'...'); if ($js['video-service']=='youtube'){ $na=lb($js['video-id']); } if ($js['video-service']=='vimeo') { $na=zb($js['video-id']); } if ($na!==false){ n3($js['local-full-filename'],$na); } else { n3($js['local-full-failname'],''); } } } } function xb($ls,$da){ $js=mb($ls); if(Log::$p3)__log('Resource '. $ls .' is of type '. $js['type']); if ($js['type']=='local-image'){ tb($js); } if ($js['type']=='online-video'){ kb($js,$da); if ($da==PROVIDE_MEDIA_NOW and is_file($js['local-full-filename'])) { tb($js); } } if ($js['type']=='remote-image'){ } } function eb($rs){ foreach ($rs as $ls){ $js=mb($ls); if (empty ($js['local-full-failname'])) continue; if(is_file($js['local-full-failname'])) { if(Log::$p3)__log('Deleting '. $js['local-full-failname'] .' to try again'); unlink($js['local-full-failname']); } } } function rb($rs){ if (!is_array($rs)) return; if(Log::$p3)__log('Asynchronously provide data for resnames {'); foreach ($rs as $ls){ xb($ls,PROVIDE_MEDIA_ASYNC); } if(Log::$p3)__log('}'); } function tb($js){ if (!$js['is-generating-thumbnail?']) return false; return e2img_filename_by_processing( $js['local-full-filename'], jb($js['local-relative-filename']), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); } function jb($sa){ return pb( MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER.$sa, 'thumb@2x' ); } if(E2_EDITION){ function hb($rs){ $aa=[]; foreach ($rs as $ls){ $js=mb($ls); if ($js['is-rss-enclosure?']) { $aa[] = [ 'url' => $js['url'], 'type' => $js['mime-type'], 'length' => $js['length'], ]; } } return $aa; } } function gb($ls){ $qa=pathinfo($ls); $la=$qa['extension']; return (in_array(strtolower($la), ['jpg','jpeg','gif','png','svg'])); } function wb($ls){ $qa=pathinfo($ls); $la=$qa['extension']; return (in_array(strtolower($la), ['jpg','jpeg','gif','png'])); } function ub($ls){ $qa=pathinfo($ls); $la=$qa['extension']; return (in_array(strtolower($la), ['svg'])); } function ib($ls){ $qa=pathinfo($ls); $la=$qa['extension']; return (in_array(strtolower($la), ['mp4','mov'])); } function ob($ls){ $qa=pathinfo($ls); $la=$qa['extension']; return (in_array(strtolower($la), ['mp3'])); } function pb($ls,$za){ if (!empty ($za)) { $ka=explode('/',$ls); $xa=array_pop($ka); $ea=explode('.',$xa); if(count($ea) < 2)$ea[] = ''; $la=array_pop($ea); $ea[] = $za; if ($la)$ea[] = $la; $xa=implode('.',$ea); $ka[] = $xa; $ls=implode('/',$ka); } return $ls; } function c3($ra,$xa){ if (!is_file($ra.$xa)) return $xa; $ta=strrpos($xa,'.'); $ja=substr($xa,0,$ta); $la=substr($xa,$ta); $r=0; while (is_file($ra.$ja .'-'. (++ $r).$la)); $xa=$ja .'-'. $r.$la; return $xa; } function v3($ls){ $qa=pathinfo($ls); $la=$qa['extension']; if ($la=='png') return 'image/png'; if ($la=='gif') return 'image/gif'; if ($la=='jpg' or $la=='jpeg') return 'image/jpeg'; if ($la=='mp3') return 'audio/mpeg'; if ($la=='svg') return 'image/svg+xml'; if ($la=='mp4') return 'video/mp4'; if ($la=='mov') return 'video/quicktime'; } function b3($ha,$ga){ return strcasecmp($ha,$ga)===0; } $_folders_written=[ '.', USER_FOLDER, CACHES_FOLDER, BACKUP_FOLDER, LOG_FOLDER, MEDIA_ROOT_FOLDER.PICTURES_FOLDER, MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER, MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'remote/', MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER .'remote/', MEDIA_ROOT_FOLDER.VIDEO_FOLDER, MEDIA_ROOT_FOLDER.AUDIO_FOLDER, MEDIA_ROOT_FOLDER.AVATARS_FOLDER, ]; $_files_written=[ USER_FOLDER.'password-hash.psa', USER_FOLDER.'password-wait.psa', USER_FOLDER.'last-comment.psa', USER_FOLDER.'new-uploads.psa', USER_FOLDER.'settings.json', USER_FOLDER.'indexing.psa', USER_FOLDER.'auth.psa', USER_FOLDER.'scheduled.psa', ]; define('CROP_NONE',0); define('CROP_SQUARE',1); function y3(){ global$_folders_written,$_files_written; clearstatcache(); $wa=[]; foreach($_folders_written as $fn_){ if(is_dir($fn_) and !is_writable($fn_)) { $wa[] = $fn_; } } foreach($_files_written as $fn_){ if(is_file($fn_) and !is_writable($fn_)) { $wa[] = $fn_; } } return $wa; } function n3($my,$x){ @j(dirname($my)); if (!@file_put_contents($my,$x,LOCK_EX)) { return false; } @chmod($my,E2_NEW_FILES_RIGHTS); return true; } function m3($fb){ $cs=$vs=0; if (wb($fb)) { list ($cs,$vs)=getimagesize($fb); } elseif (ib($fb)) { try { require_once SYSTEM_LIBRARY_FOLDER .'getid3/getid3.php'; $ud=new getid3(); $ud=$ud->analyze($fb); $cs=$ud['video']['resolution_x']; $vs=$ud['video']['resolution_y']; } catch (\Exception $e){} } elseif (ub($fb)) { if(function_exists('simplexml_load_string')) { $ua=simplexml_load_string(file_get_contents($fb)); if ($ua){ $ia=$ua->attributes(); list ($cs,$vs) = [(string)$ia -> width, (string)$ia -> height]; } } } if(substr($fb,strrpos($fb,'.')-3,3)=='@2x'){ $cs=(int)floor($cs/2); $vs=(int)floor($vs/2); } $is=round(($vs > 0) ? ($cs/$vs):1,2); $os=round(($cs > 0) ? ($vs/$cs):1,2); return [$cs,$vs,$is,$os]; } function e2s_retrieve($parameters){ $dm=base64_decode(strtr($parameters['url'],'-_','+/')); if(Log::$p3)__log('Retrieve: '. $dm); xb($dm,PROVIDE_MEDIA_NOW); die; } function f3( $oa,$pa,$hs ){ $c1=[]; if(is_array($hs)) { $c1=fb($hs); } $v1=@unserialize( $pa['Uploads'] ) or $v1=[]; $b1=array_diff($c1,$v1); if(count($b1) > 0){ z3($oa,$pa['ID'],'add',$b1); } return $b1; } function d3($rs){ $wa=[]; foreach (ab($rs) as $y1){ $wa[] = $y1['src']; } return $wa; } function s3($name,$n1){ $name=m($name); if(preg_match('//u',$name))$name=pv($name,false); if ($n1=='image'){ $ra=MEDIA_ROOT_FOLDER.PICTURES_FOLDER; } elseif ($n1=='video'){ $ra=MEDIA_ROOT_FOLDER.VIDEO_FOLDER; } elseif ($n1=='audio'){ $ra=MEDIA_ROOT_FOLDER.AUDIO_FOLDER; } else { return false; } $m1=''; for ($r=0; $r < strlen($name); $r++) { if($name[$r]=='?'){ $m1.=''; } elseif($name[$r]==' '){ $m1.='-'; } elseif(ord($name[$r]) <= 127){ $m1.=$name[$r]; } } if ($m1=='')$m1=$n1; if ($m1[0]=='.')$m1=$n1.$m1; return $m1; } function a3($f1){ global$_config; if(Log::$p3)__log('Count references for upload <'. $f1 .'>'); if(is_file(USER_FOLDER.'new-uploads.psa')) { $d1=@unserialize(file_get_contents(USER_FOLDER.'new-uploads.psa')); } $s1='%'. str_replace('%','#%',$f1) .'%'; en( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Text` LIKE '". $s1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $s1 ."' ESCAPE '#')", 'get notes where uploads may be referenced' ); $a1=rn(); $q1=@unserialize($a1[0]['Uploads']); if (!is_array($q1)) { foreach ($a1 as $y2){ $l1=u3( $y2['FormatterID'], @$y2['Text'],'full-rss' ); $q1=f3( 'note',$y2, $l1['meta']['resources-detected'] ); } } en( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Description` LIKE '". $s1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $s1 ."' ESCAPE '#')", 'get tags where uploads may be referenced' ); $a1=rn(); $z1=@unserialize($a1[0]['Uploads']); if (!is_array($z1)) { foreach ($a1 as $a2){ $l1=i3( @$a2['Description'],'full-rss' ); $z1=f3( 'tag',$a2, $l1['meta']['resources-detected'] ); } } if (!is_array($d1))$d1=[]; if (!is_array($q1))$q1=[]; if (!is_array($z1))$z1=[]; $k1=array_merge($d1,$q1,$z1); if(Log::$p3)__log('References found in relevant entries: '. var_export($k1,true)); if(in_array($f1,$k1)) { if(Log::$p3)__log('Still referenced, do not delete file'); return true; } return false; } function q3($x1,$ks){ global$_config; if ($x1=='note' and $ks=='new'){ if(is_file(USER_FOLDER.'new-uploads.psa')) { $k1=@unserialize(file_get_contents(USER_FOLDER.'new-uploads.psa')); } } elseif ($x1=='note'){ en( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ks ); $a1=rn(); $k1=@unserialize($a1[0]['Uploads']); } elseif ($x1=='tag'){ en( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ks ); $a1=rn(); $k1=@unserialize($a1[0]['Uploads']); } if (!is_array($k1))$k1=array(); return $k1; } function l3($x1,$ks,$k1){ global$_config; if ($x1=='note' and $ks=='new'){ if (!@n3(USER_FOLDER.'new-uploads.psa',serialize($k1))) { mv('ERROR',E2E_PERMISSIONS_ERROR); } } elseif ($x1=='note'){ en( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `Uploads`='". serialize($k1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ks ); } elseif ($x1=='tag'){ en( "UPDATE `". $_config['db_table_prefix']."Keywords` ". "SET `Uploads`='". serialize($k1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ks ); } else { return false; } if (!is_array($k1))$k1=array(); return $k1; } function z3($x1,$ks,$action,$qv){ global$_config; $k1=array(); if(Log::$p3)__log('Register upload: <'. $x1.', '. $ks.', '. $action.', '. $qv .'>'); $k1=q3($x1,$ks); $k1=d($k1,$action,$qv); l3($x1,$ks,$k1); } function k3($e1,$r1,$hs){ $v1=@unserialize($r1['Uploads']) or $v1=array(); $t1=fb($hs); $k1=d($v1,'add',$t1); $k1=serialize($k1); if ($k1!=$r1['Uploads']) { $r1['Uploads']=$k1; nn($e1,$r1); } } function e2j_file_upload($parameters=array ()) { global$_config,$full_blog_url,$_strings; @j(MEDIA_ROOT_FOLDER.PICTURES_FOLDER); @chmod(MEDIA_ROOT_FOLDER.PICTURES_FOLDER,$_config['uploaded_files_mode']); @j(MEDIA_ROOT_FOLDER.VIDEO_FOLDER); @chmod(MEDIA_ROOT_FOLDER.VIDEO_FOLDER,$_config['uploaded_files_mode']); @j(MEDIA_ROOT_FOLDER.AUDIO_FOLDER); @chmod(MEDIA_ROOT_FOLDER.AUDIO_FOLDER,$_config['uploaded_files_mode']); $zv=[ 'success' => false ]; if(count($_FILES) > 0){ foreach($_FILES as $my){ if (!$my['error']) { if(Log::$p3)__log('Ajax file upload: <'. $my['name'].'>'); $zv['data']['file-kind']='image'; $ra=MEDIA_ROOT_FOLDER.PICTURES_FOLDER; if (ib($my['name'])) { $zv['data']['file-kind']='video'; $ra=MEDIA_ROOT_FOLDER.VIDEO_FOLDER; } elseif (ob($my['name'])) { $zv['data']['file-kind']='audio'; $ra=MEDIA_ROOT_FOLDER.AUDIO_FOLDER; } $j1=( array_key_exists('overwrite',$_GET) and is_file($ra.$my['name']) ); $h1=false; $zv['data']['overwrite'] = (int)$j1; if(Log::$p3)__log('Ajax file upload: Overwrite is resolved to <'. (int)$j1.'>'); $m1=s3($my['name'],$zv['data']['file-kind']); if(Log::$p3)__log('Ajax file upload: Safe name is <'. $m1.'>'); if(is_file($ra.$m1)) { if(file_get_contents($ra.$m1)==file_get_contents($my['tmp_name'])) { if(Log::$p3)__log('Ajax file upload: Existing file is the same'); $h1=true; } elseif (!$j1){ $m1=c3($ra,$m1); } } if (!$h1){ move_uploaded_file($my['tmp_name'],$ra.$m1); @chmod($ra.$m1,$_config['uploaded_files_mode']); } if(Log::$p3)__log('Ajax file upload: File kind is <'. $zv['data']['file-kind'].'>'); if ($zv['data']['file-kind']=='image'){ $la=pathinfo($m1,PATHINFO_EXTENSION); if (b3($la,'jpg')) { $g1=$m1; } else { $g1=$m1 .'.jpg'; $g1=c3( MEDIA_ROOT_FOLDER.PICTURES_FOLDER,$g1 ); } $w1=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$m1; $u1=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$g1; if(Log::$p3)__log('Ajax file upload: Process uploaded image <'. $w1.'>'. ' to possibly <'. $u1.'>'); $u1=e2img_filename_by_processing( $w1, $u1, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); $ba=$my['size']; if (!b3($u1,$w1)) { @unlink($w1); $m1=$g1; $ba=stat($u1)['size']; } if ($j1){ @unlink(jb($m1)); } if ($i1=e2img_filename_by_processing( $w1, jb($m1), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY )) { if(Log::$p3)__log('Ajax file upload: thumbnail, done as '. $i1); list ($cs,$vs)=m3($i1); if(Log::$p3)__log('Ajax file upload: image size '. $cs .'×'. $vs); if (!$cs)$cs=THUMB_WIDTH/2; if (!$vs)$vs=THUMB_HEIGHT/2; list ($cs,$vs)=e2_fit_metrics_to_constraints( [$cs,$vs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $zv['success']=true; $zv['data']['new-name']=$m1; $zv['data']['filesize']=round($ba/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=x3($i1); $zv['data']['width']=$cs; $zv['data']['height']=$vs; z3($parameters['entity'],$parameters['entity-id'],'add', array ($m1)); } else { if(Log::$p3)__log('Ajax file upload: couldn’t create thumbnail'); @unlink($ra.$m1); $zv['error']['message']=_S('er--cannot-create-thumbnail'); } } if ($zv['data']['file-kind']=='video'){ if(Log::$p3)__log('Ajax file upload: video, done'); $zv['success']=true; $zv['data']['new-name']=$m1; $zv['data']['filesize']=round($my['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=VIDEO_ICON_IMAGE; $zv['data']['width']=VIDEO_ICON_WIDTH/2; $zv['data']['height']=VIDEO_ICON_HEIGHT/2; z3($parameters['entity'],$parameters['entity-id'],'add', array ($m1)); } if ($zv['data']['file-kind']=='audio'){ if(Log::$p3)__log('Ajax file upload: audio, done'); $zv['success']=true; $zv['data']['new-name']=$m1; $zv['data']['filesize']=round($my['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=AUDIO_ICON_IMAGE; $zv['data']['width']=AUDIO_ICON_WIDTH/2; $zv['data']['height']=AUDIO_ICON_HEIGHT/2; z3($parameters['entity'],$parameters['entity-id'],'add', array ($m1)); } } elseif(4!=$my['error']) { if ($my['error']==1){ $zv['error']['message']='too-big'; } elseif ($my['error']==2){ $zv['error']['message']='too-big'; } elseif ($my['error']==3){ $zv['error']['message']='partial'; } else { $zv['error']=$my['error']; } } } } else { if(Log::$p3)__log('Ajax file upload error: no files'); $zv['error']['message']='no-files'; } $zv=json_encode($zv); die ($zv); } function x3($o1){ global$full_blog_url; $x2=strlen(MEDIA_ROOT_FOLDER); if ($x2 and substr($o1,0,$x2)==MEDIA_ROOT_FOLDER){ return substr($o1,$x2); } else { return$full_blog_url .'/'. $o1; } } function e3(){ @unlink(USER_FOLDER.'userpic@2x.png'); @unlink(USER_FOLDER.'userpic@2x.jpg'); @unlink(USER_FOLDER.'userpic-large@2x.jpg'); @unlink(USER_FOLDER.'userpic-square@2x.jpg'); } function e2j_userpic_remove(){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_settings')); } e3(); $zv=json_encode([ 'success' => true ]); die ($zv); } function e2j_userpic_upload(){ global$_config; $zv=[ 'success' => false ]; if(count($_FILES)!=1){ if(Log::$p3)__log('Ajax userpic upload error: no or too many files'); $zv['error']['message']='No or too many files'; $zv=json_encode($zv); die ($zv); } $my=array_pop($_FILES); if (!$my['error']) { if(Log::$p3)__log('Ajax userpic upload: <'. $my['name'].'>'); $p1=pathinfo($my['name']); $la=strtolower($p1['extension']); if ($la!='png')$la='jpg'; $fb='userpic.original.'. $la; move_uploaded_file($my['tmp_name'],USER_FOLDER.$fb); @chmod(USER_FOLDER.$fb,$_config['uploaded_files_mode']); e3(); copy( USER_FOLDER.$fb, USER_FOLDER .'userpic-large@2x.jpg' ); $cq=e2img_filename_by_processing( USER_FOLDER .'userpic-large@2x.jpg', USER_FOLDER .'userpic-large@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_NONE, USERPIC_JPG_QUALITY ); copy( USER_FOLDER.$fb, USER_FOLDER .'userpic-square@2x.jpg' ); $vq=e2img_filename_by_processing( USER_FOLDER .'userpic-square@2x.jpg', USER_FOLDER .'userpic-square@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_SQUARE, USERPIC_JPG_QUALITY ); $bq=e2img_filename_by_processing( USER_FOLDER.$fb, USER_FOLDER .'userpic@2x.jpg', [USERPIC_WIDTH,USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); if ($vq){ $zv=[ 'success' => true, 'data' => [ 'new-image-src' => $vq, ] ]; } else { $zv['error']['message']=_S('er--supported-only-png-jpg-gif'); } } elseif(4!=$my['error']) { if ($my['error']==1){ $zv['error']['message']='File too big'; } elseif ($my['error']==2){ $zv['error']['message']='File too big'; } elseif ($my['error']==3){ $zv['error']['message']='File upload is partial'; } else { $zv['error']['message']='File upload error '. $my['error']; } } $zv=json_encode($zv); die ($zv); } function e2j_file_remove($parameters){ if (!array_key_exists('file',$_POST)) { $zv=[ 'success' => false ]; $zv=json_encode($zv); die ($zv); } $my=$_POST['file']; $zv=[ 'success' => true ]; $zv=json_encode($zv); z3($parameters['entity'],$parameters['entity-id'],'remove',$my); if (!a3($my)) { if (ob($my)) { if(Log::$p3)__log('Not referenced, deleting '. MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$my); @unlink(MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$my); } elseif (ib($my)) { if(Log::$p3)__log('Not referenced, deleting '. MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$my); @unlink(MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$my); } else { $bq=pb($my,'thumb@2x'); $yq=@unlink(MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$my); $nq=@unlink(MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER.$bq); } } die ($zv); } function r3(){ global$_config; if (!$_config['files_total_size_limit']) return false; $mq=0; foreach(glob(MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'/*') as $my){ $f=stat($my); $mq+=$f['size']; } foreach(glob(MEDIA_ROOT_FOLDER.VIDEO_FOLDER .'/*') as $my){ $f=stat($my); $mq+=$f['size']; } foreach(glob(MEDIA_ROOT_FOLDER.AUDIO_FOLDER .'/*') as $my){ $f=stat($my); $mq+=$f['size']; } $fq=$_config['files_total_size_limit']; $dq=f($mq,$fq); return array ($mq,$fq,$dq); } function t3($sq){ $aq=true; if (list ($mq,$fq,$dq)=$sq){ $aq=($fq-$mq) > 0; } return $aq; } function j3($sq,$qq=false){ $lq=''; if (list ($mq,$fq,$dq)=$sq){ $sq=array ( 'used' => round($mq/1024/1024), 'total' => round($fq/1024/1024), 'percent' => $dq ); if ($qq or ($fq-$mq) < 1024*1024*10){ if ($mq < $fq){ $lq=e2l_get_string('gs--used',$sq); } else { $lq=e2l_get_string('gs--used-all',$sq); } } } return $lq; } function e2_error404_mode(){ global$_config,$_strings; if($_config['try_redirect_to_all']) { $zq='all/'. urldecode($_GET['go']); hv($zq); } header('HTTP/1.1 404 Not found'); $kq['class']='404'; $kq['heading']=$_strings['pt--page-not-found']; $kq['title']=$_strings['pt--page-not-found']; if(E2_EDITION){ $kq['popular']=z2(); } return $kq; } function e2s_post_service($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } if($parameters['service']==='build'){ e2_build(); mv('Engine core built',E2E_MESSAGE); } if($parameters['service']==='sync'){ e2_drop_all_kinds_of_cache(); mv('Caches invalidated',E2E_MESSAGE); } if($parameters['service']==='log'){ nv(); mv('Logs enabled',E2E_MESSAGE); } if($parameters['service']==='backup'){ } if($parameters['service']==='migrate'){ qn(); mv('Database structure up to date',E2E_MESSAGE); } if(E2_EDITION){ if($parameters['service']==='verify'){ u(true); } } c(jv('e2m_underhood')); } function h3($tv){ include_once 'neasden/neasden.php'; $Nn=new Neasden; $Nn->profile_name='kavychki'; return$Nn->format($tv); } function g3($qy,$tv,$xq){ include_once 'neasden/neasden.php'; if ($tv==='') return array (); if ($qy=='calliope'){ preg_match_all('/\(\(([^ ]*)( |\)\))/',$tv,$y3); return $y3[1]; } elseif ($qy=='neasden'){ $Nn=new Neasden; $Nn->profile_name=$xq; $Nn->format($tv); return$Nn->resources_detected; } else { return array (); } } function w3(){ return '<div class="foot" style="color: var(--errorColor); font-style: italic">This text was created with a very old version of Aegea that used a formatter called Calliope. It is no longer included with Aegea&nbsp;2.10.</div><div class="foot" style="color: var(--errorColor); font-style: italic">Edit this note to switch it and its comments to the current formatter, Neasden. If anything breaks, edit again to fix.</div><div class="foot" style="color: var(--errorColor); font-style: italic">To temporarily install Calliope, get the directory <tt>/system/calliope/</tt> from Aegea&nbsp;2.9 and copy it to your <tt>/user/calliope/</tt>. This will not work with Aegea&nbsp;2.11. See release notes for Aegea&nbsp;2.10 for details.</div>'; } function u3($qy,$tv,$xq){ include_once 'neasden/neasden.php'; if(Log::$p3)__log('Format: format with formatter "'. $qy .'" in context "'. $xq.'"'); if ($qy=='calliope'){ $tv=pv($tv); $tv=o3($tv,$xq); $meta=array(); $tv=vb($tv); $tv='<div class="e2-text-calliope-formatted">'. h3($tv) .'</div>'; } elseif ($qy=='neasden'){ $Nn=new Neasden; $Nn->profile_name=$xq; $tv=$Nn->format($tv); $meta=array ( 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ); } return array ( 'text-final' => $tv, 'meta' => $meta, ); } function i3($tv,$xq){ global$_config; return u3($_config['default_formatter'],$tv,$xq); } function o3($tv,$xq){ global$_config,$settings,$full_blog_url,$_template; @ (list ($xq,$eq)=explode('|',$xq)); if (!is_file(USER_FOLDER.'calliope/WikiFormatter.php')) { return w3(); } require_once USER_FOLDER.'calliope/WikiFormatter.php'; if ('full'==$xq)$rq=WF_FULL_MODE; elseif ('full-rss'==$xq)$rq=WF_FULL_MODE; elseif ('simple'==$xq)$rq=WF_SIMPLE_MODE; elseif ('simple-rss'==$xq)$rq=WF_SIMPLE_MODE; else return $tv; $tq=new WikiFormatter(); $tq -> replace=array ( '/' => 'i', '+' => 'small', '-' => 's', '*' => 'b', '^' => 'sup', 'v' => 'sub', '#' => 'tt', '!' => 'blockquote', ); $tq -> settings=array ( 'hrefSize' => 100, 'localImgDir' => $full_blog_url .'/'. PICTURES_FOLDER, 'maxImgWidth' => $_template['max_image_width'], 'mode' => $rq, 'enableShrinkLongHref' => 1, 'enableHr' => 0, 'enableBr' => 1, 'enableHeaders' => 1, 'headersStartWith' => 1, 'enableTables' => 1, 'simpleTableCSSClass' => 'e2-text-table', 'enableAutoAcronymEngine' => 0, 'enableAcronym' => 0, 'acronymBase' => '', 'enableList' => 1, 'mailSafe' => "<a href=\"\" onmouseover=\"this.href='mailto:'+{email}\">{icon}<script language=\"JavaScript\">document.write({name});</script></a>", 'ljUserTag' => '<a href="http://livejournal.com/users/{name}/">{name}</a>', 'fullVersionURL' => $eq, 'enableTagIcons' => 0, 'outerUrlInNewWindow' => 0, 'lineBreak' => "\n", 'extLinkHrefPrefix' => '', ); $tv=$tq -> Wiki2HTML($tv); return $tv; } function p3($dm,$jq=false){ if(Log::$p3)__log('Spawn: Curl '. $dm .' using '. ($jq? 'post':'get') .'...'); if(function_exists('curl_init')) { $hq=curl_init(); $gq=!ini_get('open_basedir'); curl_setopt_array($hq, array ( CURLOPT_URL => $dm, CURLOPT_POST => $jq, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => h2(), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $gq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content=curl_exec($hq); $wq=curl_errno($hq); $uq=curl_error($hq); $iq=curl_getinfo($hq); curl_close($hq); if(Log::$p3)__log('Spawn: Curl returns: ['. print_r($iq,true) .'] ['. $content .'], (errno='. $wq .', errstr='. $uq .')...'); } else { if(Log::$p3)__log('Spawn: Curl functions are not available'); } } function cy($oq){ global$_config; if (@$_config['broadcast_url'] and !$oq['IsExternal']) { if($_config['log_broadcast']) { Log::$p3=true; if(Log::$p3)bv('broadcast'); } if(Log::$p3)__log('Broadcast-async note: '. $oq['Title']); $dm=jv('e2m_note_broadcast', array ('*note' => $oq)); if(Log::$p3)__log('Broadcast will spawn url: '. $dm); p3($dm); } } function vy($pq){ global$_config; if (!$pq) return false; $dm=$_config['broadcast_url']; $dm.='?src='. urlencode($pq); if($_config['log_broadcast']) { Log::$p3=true; if(Log::$p3)bv('broadcast'); } if(Log::$p3)__log('Broadcast: Curl '. $dm .'...'); if(function_exists('curl_init')) { $hq=curl_init(); $gq=!ini_get('open_basedir'); curl_setopt_array($hq, array ( CURLOPT_URL => $dm, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => h2(), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $gq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content=curl_exec($hq); $wq=curl_errno($hq); $uq=curl_error($hq); $iq=curl_getinfo($hq); curl_close($hq); if(Log::$p3)__log('Broadcast: Curl returns: ['. print_r($iq,true) .'] ['. $content .'], (errno='. $wq .', errstr='. $uq .')...'); if ($wq===0) return true; } else { if(Log::$p3)__log('Spawn: Curl functions are not available'); } return false; } function by($oq){ if (!$oq) return false; $pq=jv('e2m_note_json', array ('*note' => $oq)); return vy($pq); } function e2m_note_broadcast($parameters=array ()) { global$_config; if (@$_config['broadcast_url']) { if(array_key_exists('*note',$parameters)) { $pq=jv('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif(array_key_exists('alias',$parameters)) { $pq=jv('e2m_note_json', array ('alias' => $parameters['alias'])); } if (vy($pq)) { die ('Broadcasted.'); } else { die ('Could not broadcast.'); } } else { return e2_error404_mode(); } } function e2m_timezone(){ global$_strings,$settings; $cl=array ( 'form-action' => jv('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => fy($settings['timezone']['offset'],1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $cl, ); } function yy(){ global$_strings; $vl=array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $vl; } function ny($bl){ $vl=yy(); return @$vl[(int)$bl/SECONDS_IN_A_MINUTE]; } function my($bl){ $yl='+'; if ($bl < 0)$yl='&ndash;'; $nl=str_pad((int) (abs($bl)/3600),2,'0',STR_PAD_LEFT); $ml=str_pad(abs($bl)/60 % 60,2,'0',STR_PAD_LEFT); return 'GMT'. $yl.$nl .':'. $ml; } function fy($fl,$dl=''){ global$_strings; $vl=yy(); $d=''; if (!$dl)$dl=count($vl); $d.='<select class="e2-select" name="offset" size="'. $dl .'">'; foreach ($vl as $bl => $sl){ $al=''; if ($bl*SECONDS_IN_A_MINUTE==$fl)$al=' selected="selected"'; $d.='<option'. $al .' value="'.$bl.'">'; $yl=''; if ($bl < 0)$yl='−'; if ($bl > 0)$yl='+'; $nl=(int) (abs($bl*SECONDS_IN_A_MINUTE)/3600); $ml=(int) (abs($bl*SECONDS_IN_A_MINUTE)/60 % 60); if ($nl){ $d .= ( $yl .' '. $nl .' '. $_strings['gs--timezone-offset-hours'] .' '. ($ml? ($ml .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($sl){ $d .= ' ('. $sl. ')'; } } else { $d .= $sl; } $d.='</option>'; } $d.='</select>'; return $d; } function e2s_select_timezone(){ global$settings,$_strings; if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780){ $settings['timezone']['offset'] = @$_POST['offset']*SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_timezone')); } c(jv('e2m_settings')); } function dy($q2){ return array ( 'offset' => (int)$q2['Offset'], 'is_dst' => (bool)$q2['IsDST'], ); } function sy(){ return array ( 'offset' => 0, 'is_dst' => false, ); } function ay(){ global$settings; if(array_key_exists('timezone',$settings)) { return$settings['timezone']; } else { return sy(); } } function qy($ql,$ll){ if (@$ql['is_dst']) { $zl=(int)date('I',$ll); $kl=date('Z',$ll)-$zl*SECONDS_IN_AN_HOUR; $xl=$ql['offset']; $el=$xl-$kl; $rl=date('I',$ll+$el); return $rl; } else { return 0; } } function ly($ql,$ll){ global$settings; if ($ql and is_array($ql)) { return ( $ql['offset'] + qy($ql,$ll)*SECONDS_IN_AN_HOUR ); } } function zy($ll){ return ly(ay(),$ll); } function ky($tl,$qv,$ql){ return gmdate($tl,$qv+ly($ql,$qv)); } function xy($tl,$qv){ return ky($tl,$qv,ay()); } function ey($hb,$jb=false,$tb=false){ if(is_numeric($tb)) { $jl=gmmktime(0,0,0,$jb,$tb,$hb); $hl=gmmktime(0,0,0,$jb,$tb+1,$hb)-1; } elseif(is_numeric($jb)) { $jl=gmmktime(0,0,0,$jb,1,$hb); $hl=gmmktime(0,0,0,$jb+1,1,$hb)-1; } else { $jl=gmmktime(0,0,0,1,1,$hb); $hl=gmmktime(0,0,0,1,1,$hb+1)-1; } return array ($jl,$hl); } function ry($ql,$hb,$jb=false,$tb=false){ list ($jl,$hl)=ey($hb,$jb,$tb); $jl -= ly($ql,$jl); $hl -= ly($ql,$hl); return array ($jl,$hl); } function ty($hb,$jb=false,$tb=false){ return ry(ay(),$hb,$jb,$tb); } function jy($hb,$jb=false,$tb=false){ $gl=13; $wl=-12; $gl+=1; $wl -= 1; list ($jl,$hl)=ey($hb,$jb,$tb); $jl -= $gl*3600; $hl -= $wl*3600; return array ($jl,$hl); } function hy($bl){ if ((int) @$bl > 0) return (string)'+'.abs(@$bl); elseif ((int) @$bl < 0) return (string)'-'.abs(@$bl); else return ''; } function gy($ll,$ul=''){ $il=zy($ll); $yl=($il >= 0)?'+':'-'; $il=abs($il); $ol=$il % 60; $il -= $ol; $jb=$il % 3600/60; $il -= $jb*60; $pl=$il/3600; if ($pl < 10)$pl='0'.$pl; if ($jb < 10)$jb='0'.$jb; return $yl.$pl.$ul.$jb; } function wy($c4){ global$settings; if(is_numeric($c4)) { $a1['offset']=SECONDS_IN_A_MINUTE*$c4; $a1['is_dst']=false; $v4=SECONDS_IN_A_MINUTE*$c4-SECONDS_IN_AN_HOUR; $b4=array ('offset' => $v4,'is_dst' => true); $b4=(int)ly($b4,time()); if ($a1['offset']==$b4){ $a1['offset']=$v4; $a1['is_dst']=true; } } else { if(array_key_exists('timezone',$settings)) { $a1=$settings['timezone']; } else { $a1['offset']=0; $a1['is_dst']=false; } } return $a1; } function uy($y4){ $pl=xy('H',$y4); if ($pl <= 4) return 4; elseif ($pl <= 10) return 1; elseif ($pl <= 16) return 2; elseif ($pl <= 22) return 3; else return 4; } function iy($n4,$m4=null){ global$_strings; if ($m4===null)$m4=ay(); $f4=ky('d.m.Y',$rb,$m4); $d4=ky('d.m.Y',$n4,$m4); $s4=SECONDS_IN_A_MINUTE; $a4=SECONDS_IN_AN_HOUR; $rb=time(); $q4=uy($rb); $l4=uy($n4); $kb=$rb-$n4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb >= 0 and $kb < 54) return$_strings['tt--just-now']; if ($kb >= 54 and $kb < 108) return$_strings['tt--one-minute-ago']; $z4=$kb+12; $k4=floor($z4/$s4); if ($kb >= 108 and $kb < 54*$s4) return e2l_get_string( 'tt--minutes-ago', array ('minutes' => $k4) ); if ($kb >= 54*$s4 and $kb < 108*$s4) return$_strings['tt--one-hour-ago']; $z4=$kb+12*$s4; $x4=floor($z4/$a4); if ($kb >= 108*$s4 and $kb < 4*$a4) return e2l_get_string( 'tt--hours-ago', array ('hours' => $x4) ); $e4=ky('G:i',$n4,$m4); if ($kb >= 4*$a4 and $q4 > $l4 and $f4==$d4){ return$_strings['tt--today']; } if ((($rb-$n4) <= 7884000)) { return e2l_get_string( 'tt--date', array ( 'day' => ky('j',$n4,$m4), 'month' => ky('m',$n4,$m4), ) ); } return ky('Y',$n4,$m4); } function oy($n4,$m4=null){ global$_strings; $kb=time()-$n4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb==0) return$_strings['tt--now']; $r4=array ( array (1,'tt--seconds-short'), array (SECONDS_IN_A_MINUTE,'tt--minutes-short'), array (SECONDS_IN_AN_HOUR,'tt--hours-short'), array (SECONDS_IN_A_DAY,'tt--days-short'), array (SECONDS_IN_A_MONTH,'tt--months-short'), array (SECONDS_IN_A_YEAR,'tt--years-short'), array (SECONDS_IN_A_YEAR+SECONDS_IN_A_MONTH,''), ); for ($r=0; $r < count($r4); ++ $r){ if ($kb >= $r4[$r][0] and $kb < $r4[$r+1][0]) { return e2l_get_string( $r4[$r][1], array ('value' => floor($kb/$r4[$r][0])) ); } } if ($m4===null)$m4=ay(); return ky('Y',$n4,$m4); } $_model_contractions=[ 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'pkey1' => "INT UNSIGNED DEFAULT '1' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v39' => "VARCHAR(39) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". $_config['default_formatter'] ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ]; $_model=[ 'Actions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityID', 'pkey'], ['Stamp', 'time'], ['ReadCount', 'int'], ], 'Aliases' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityType', 'v1'], ['EntityID', 'pkey'], ['Alias', 'v64'], ['Stamp', 'time'], ], 'Comments' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['Text', 'text'], ['Reply', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ['IsReplyVisible', '0'], ['IsReplyFavourite', '0'], ['IsAnswerAware', '1'], ['IsSubscriber', '0'], ['IsSpamSuspect', '0'], ['IsNew', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['ReplyStamp', 'time'], ['ReplyLastModified', 'time'], ['IP', 'v39'], ['IsGIPUsed', '0'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ], 'GIPsSessions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['AuthorProfileLink', 'v255'], ['SessionToken', 'v255'], ['Stamp', 'time'], ], 'Keywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Keyword', 'v255'], ['OriginalAlias', 'v64'], ['PageTitle', 'v255'], ['Description', 'text'], ['Summary', 'text'], ['Uploads', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ], 'Notes' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Title', 'v255'], ['Text', 'text'], ['Summary', 'text'], ['FormatterID', 'fid'], ['OriginalAlias', 'v64'], ['Uploads', 'text'], ['IsPublished', '0'], ['IsCommentable', '0'], ['IsVisible', '1'], ['IsFavourite', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['Offset', 'int'], ['IsDST', '0'], ['IsIndexed', '0'], ['IsExternal', '0'], ['ReadCount', 'uint'], ['SourceID', 'pkey'], ['SourceNoteID', 'pkey'], ['SourceNoteURL', 'v255'], ['SourceNoteJSONURL', 'v255'], ['SourceNoteData', 'text'], ], 'NotesKeywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['KeywordID', 'pkey'], ], 'Sources' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['TrueID', 'pkey'], ['Title', 'v255'], ['AuthorName', 'v255'], ['URL', 'v255'], ['PictureURL', 'v255'], ['IsWhiteListed', '0'], ['IsTrusted', '0'], ], ]; $_model_indexes_create_sql=[ 'index' => 'INDEX', 'unique' => 'UNIQUE INDEX', 'fulltext' => 'FULLTEXT', ]; $_model_indexes_check_sql=[ 'index' => 'KEY', 'unique' => 'UNIQUE KEY', 'fulltext' => 'FULLTEXT KEY', ]; $_model_indexes=[ 'Actions' => [ ['unique', ['EntityID','Stamp']], ['index', ['SubsetID']], ], 'Aliases' => [ ['index', ['SubsetID']], ['index', ['Alias']], ['index', ['EntityID']], ], 'Comments' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'GIPsSessions' => [ ['unique', ['GIP','GIPAuthorID']], ['index', ['SubsetID']], ], 'Keywords' => [ ['index', ['SubsetID']], ], 'Notes' => [ ['fulltext', ['Title','Text']], ['index', ['SubsetID']], ['index', ['Stamp']], ['index', ['SourceID']], ['index', ['SourceNoteID']], ], 'NotesKeywords' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'Sources' => [ ['index', ['SubsetID']], ], ]; $_model_minimal_table_list=[ 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ]; function e2_model_data_check($t4){ global$_db,$_model,$_model_minimal_table_list,$_config; $j4=false; $h4=array(); $sql='SHOW TABLES FROM `'. mysqli_real_escape_string($_db['link'],$t4). '`'; $a1=mysqli_query($_db['link'],$sql); if ($a1){ while ($g4=mysqli_fetch_row($a1)) { foreach(array_keys($_model) as $w4){ if(strcasecmp($g4[0],$_config['db_table_prefix'].$w4)===0){ $j4=true; $h4[] = $w4; } } } } $u4=true; foreach(array_keys($_model) as $w4){ if (!in_array($w4,$h4)) { $u4=false; } } $i4=true; foreach($_model_minimal_table_list as $w4){ if (!in_array($w4,$h4)) { $i4=false; } } return array ( 'occupied' => $j4, 'complete' => $u4, 'migrateable' => $i4, ); } function py($o4,$p4,$cz){ global $vz; if (($bz=mysqli_connect($o4,$p4,$cz)) === false) return []; $yz=[]; $nz=[ 'information_schema', 'performance_schema', 'sys', 'mysql' ]; @$vz ++; $vf='SHOW DATABASES'; if(Log::$p3)__log('DB ['. $vz .']: '. $vf); $a1=mysqli_query($bz,$vf); while ($g4=mysqli_fetch_row($a1)) { if(mysqli_select_db($bz,$g4[0]) and !in_array($g4[0],$nz)) { $yz[] = $g4[0]; } } return $yz; } function cn($mz){ global$_config; en( "SHOW TABLES LIKE '". $_config['db_table_prefix'].$mz . "'" ); $dy=rn(); return count($dy) > 0; } function vn($mz,$fz=null){ global$_config; if ($fz===null){ $fz=$_config['db_table_prefix']; } en( "SHOW TABLE STATUS LIKE '". $fz.$mz . "'" ); $a1=rn(); return $a1?$a1[0] : []; } function bn($mz){ global $_model, $_model_contractions, $_model_indexes, $_model_indexes_check_sql, $_config, $_db; if (!array_key_exists($mz,$_model)) throw new AeModelUnknownTableException(); if (cn($mz)) return; $fz=$_config['db_table_prefix']; $dz=[]; foreach($_model[$mz] as $sz){ list ($name,$type)=$sz; $dz[] = "`". $name ."` ". $_model_contractions[$type]; } if(is_array(@$_model_indexes[$mz])) { foreach($_model_indexes[$mz] as $az){ $qz=$_model_indexes_check_sql[$az[0]] . ' (`'. implode('`, `',$az[1]) .'`)'; $dz[] = $qz; } } $sql=( "CREATE TABLE `". $fz.$mz ."` ". "(". implode(", ",$dz) .") ". "ENGINE=InnoDB DEFAULT CHARSET=". $_db['charset'] ); en($sql); } function yn($mz,$r1,$lz='INSERT',$zz=''){ global$_config,$_db; $kz['SubsetID']=$_config['db_table_subset']; foreach ($r1 as $t => $kf){ $kz[$t]="'". tn($kf) ."'"; } $xz="`". implode("`, `",array_keys($kz)). "`"; $ez=implode(", ",array_values($kz)); en( $lz ." INTO `". $_config['db_table_prefix'].$mz ."` ". "(".$xz .") VALUES (". $ez .")". ($zz? (' '. $zz):'') ); $r1['ID']=mysqli_insert_id($_db['link']); return $r1; } function nn($mz,$r1,$rz=false,$tz=false){ global$_config; if(Log::$p3)__log('Model: update record in table '. $mz .' {'); $jz=array(); foreach(e2model__soft_fields_for_table_($mz) as $hz){ if(array_key_exists($hz,$r1)) { $jz[] = '`'. $hz .'`'."='". tn($r1[$hz]) ."'"; } } $gz=array(); if(is_array($rz)) { foreach(e2model__soft_fields_for_table_($mz) as $hz){ if(array_key_exists($hz,$rz)) { $gz[] = '`'. $hz .'`'."='". tn($rz[$hz]) ."'"; } } } if(count($gz)) { $b=implode(" AND ",$gz); } else { if (!array_key_exists('ID',$r1) or !is_numeric($r1['ID'])) { if(Log::$p3)__log('Error: e2_update_record must be called with an ID field in $record when updating single row'); return false; } $b="`ID`=". $r1['ID']; } if(count($jz) > 0){ $wz=$tz? 'LOW_PRIORITY ':''; en( "UPDATE ". $wz ."`". $_config['db_table_prefix'].$mz ."` ". "SET ". implode(', ',$jz) ." ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")" ); } if(Log::$p3)__log('}'); return true; } function e2model__soft_fields_for_table_($mz){ global$_model; $d=array(); if(array_key_exists($mz,$_model)) { foreach($_model[$mz] as $hz){ if (!in_array($hz[1], array ('key'))) { $d[] = $hz[0]; } } } return $d; } function e2m_install(){ global$_strings,$_superconfig,$_files_written,$_diagnose; if (fn_()!==null)c(); ks(DEFAULT_TEMPLATE); $d=array(); if($_superconfig['disallow_installer']) { die ('Installer disabled by superconfig'); } if(Log::$p3)__log('Installer: not installed, present user with form'); $uz=true; $iz['server'] = @$_COOKIE[b('install_db_server')]; $iz['user_name'] = @$_COOKIE[b('install_db_user_name')]; $iz['passw']=cd(@$_COOKIE[b('install_db_passw')]); $iz['name'] = @$_COOKIE[b('install_db_name')]; if (!@isset ($_diagnose['ok?']))fv(); if (!$_diagnose['ok?']) { if(Log::$p3)__log('Installer: problems, tell user'); $uz=false; } $d=[ 'title' => $_strings['pt--install'], 'heading' => $_strings['pt--install'], 'form-install' => [ 'form-action' => jv('e2s_install'), 'form-check-db-config-action' => jv('e2j_check_db_config'), 'form-list-databases-action' => jv('e2j_list_databases'), 'installation-possible?' => $uz, 'submit-text' => $_strings['fb--begin'], 'retry-href' => jv('e2m_install'), 'retry-text' => $_strings['fb--retry'], 'db-server' => htmlspecialchars(@$iz['server']? $iz['server']:'localhost'), 'db-user' => htmlspecialchars(@$iz['user_name']? $iz['user_name']:'root'), 'db-password' => '', 'db-database' => htmlspecialchars(@$iz['name']), ] ]; return $d; } function fn_(){ static $oz=null; if ($oz===null){ $oz=@unserialize( @file_get_contents(USER_FOLDER.'instance.psa') ) or $oz=null; } return $oz; } function dn($pz){ static $oz=null; $oz=fn_(); $oz['version']=$pz; if (n3(USER_FOLDER. '/instance.psa',serialize($oz))) { return $oz; } else { die ('Cannot instantiate v'. $pz .': probably permission denied'); } } function e2s_instantiate($parameters){ global$_strings; if (fn_()!==null){ die ('Remove the file "'. USER_FOLDER .'instance.psa" first'); } else { if(is_numeric($parameters['version'])) { if (dn($parameters['version'])) { mv($_strings['gs--instantiated-version'] .' v'. $parameters['version'],E2E_MESSAGE); c(jv('e2m_frontpage', array ('page' => 1))); } } } die ('Could not create instance of engine'); } function e2_install($lv){ global$_folders_written,$_model,$_strings,$_config,$settings; if (fn_()!==null){ throw new AeInstallAlreadyInstalledException('Instance already created'); } if($_config['log_installs']) { Log::$p3=true; if(Log::$p3)bv('install-$'); } if(Log::$p3)__log('Installer: force directories'); foreach($_folders_written as $ck){ @j($ck); } if(Log::$p3)__log('Installer: write password hash'); if (!@n3(USER_FOLDER.'password-hash.psa',serialize(sha1($lv['password'])))) { throw new AePasswordHashNotSavedException; } if(array_key_exists('plain_password',$lv['db_params'])) { $lv['db_params']['passw']=p2($lv['db_params']['plain_password']); unset ($lv['db_params']['plain_password']); } $settings['db']=$lv['db_params']; $settings['template']=DEFAULT_TEMPLATE; $settings['language']=DEFAULT_LANGUAGE; xn('check database during installation',$lv['db_params']); $i3=e2_model_data_check($lv['db_params']['name']); $vk=false; if ($i3['occupied']) { if ($i3['migrateable'] and $lv['allow_migration']) { $vk=true; if(Log::$p3)__log('Installer: data exists and migrateable'); } else { if(Log::$p3)__log('Installer: incomplete data in the database'); throw new AeInstallDatabaseOccupiedException('Database already has some data'); } } if ($vk){ if(Log::$p3)__log('Installer: no need to create tables, will migrate'); try { qn(); } catch (AeMySQLException $e){ kv($e,'Could not migrate'); mv($_strings['er--double-check-db-params']); } } else { if(Log::$p3)__log('Installer: create tables'); foreach(array_keys($_model) as $mz){ bn($mz); } } if(Log::$p3)__log('Installer: write settings'); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { throw new AeSettingsNotSavedException; } e2_drop_all_kinds_of_cache(); if(Log::$p3)__log('Installer: search index'); $o3=ta(); try { $o3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$p3)__log('Installer: Rose not available'); } la(); if(Log::$p3)__log('Installer: instantiate'); dn(E2_VERSION); if(Log::$p3)__log('Installer: complete'); } function sn(){ $w3['server']=$w3['user_name'] = $w3['passw']=$w3['name']=''; if(array_key_exists('db-server',$_POST)) $w3['server']=$_POST['db-server']; if(array_key_exists('db-user',$_POST)) $w3['user_name']=$_POST['db-user']; if(array_key_exists('db-password',$_POST))$w3['passw']=$_POST['db-password']; if(array_key_exists('db-database',$_POST))$w3['name']=$_POST['db-database']; return $w3; } function e2s_install(){ global$_strings,$_config,$_db; if (fn_()!==null)c(); $w3=sn(); foreach ($w3 as $t => $kf){ y('install_db_'. $t,$kf); } if (!array_key_exists('password',$_POST) or trim($_POST['password']) == ''){ mv($_strings['er--no-password-entered'],E2E_USER_ERROR); c(jv('e2m_install')); } $bk=trim($_POST['password']); @session_start(); $u3=false; try { e2_install([ 'allow_migration' => true, 'password' => $bk, 'db_params' => $w3, ]); $u3=true; } catch (AeMySQLCannotConnectException $e){ mv( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error() .' ('. mysqli_connect_errno() .')' ); } catch (AeMySQLTooOldException $e){ mv(e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv($_strings['er--cannot-find-db'] .' '. $w3['name']); } catch (AeInstallDatabaseOccupiedException $e){ mv($_strings['er--db-data-incomplete-install']); } catch (AeNotSavedException $e){ mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); } catch (AeInstallException $e){ } if (!$u3)c(jv('e2m_install')); $yk['sessions'] = [[ 'stamp' => time(), 'remote_ip' => k2(), 'key_hash' => e2_(true), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]]; if (!j2($yk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } p3(jv('e2s_bsi_step', array ())); c(); } function an(){ global $v,$c,$_superconfig,$_config; $oz=fn_(); if (fn_()!==null){ if(E2_VERSION < $oz ['version']) { if (@$_config['dev_ignore_version_mismatch']) return; if(Log::$p3)__log('Installer: cannot downdate'); header('HTTP/1.1 503 Service Unavailable'); die ('E2 does not support automatic downgrade.'); } elseif(E2_VERSION > $oz ['version']) { if(Log::$p3)__log('Installer: need to update'); header('Location: http://'. $v.$c .'/perform_update/'); header('Location: '. jv('e2s_update_perform')); die; } else { return; } } if(Log::$p3)__log('Installer: not installed {'); if ((strpos($_SERVER['SERVER_SOFTWARE'],'Apache')===0)) { if(Log::$p3)__log('Installer: running on Apache'); $nk=DEFAULTS_FOLDER.'default.htaccess'; $mk=false; if (!is_file($nk)) { echo 'File not found: '.$nk. '. Please use the full E2 installation package.'; die; } if(is_file('.htaccess')) { if(Log::$p3)__log('Installer: there is a .htaccess file in the installation directory'); $fk=file_get_contents($nk); $dk=file_get_contents('.htaccess'); if ($dk!=$fk){ $mk=true; $sk=$ak='.htaccess.old'; $qk=1; while (is_file($ak)) { $ak=$sk .'.'. $qk ++; } if(Log::$p3)__log('Installer: existing .htaccess wrong, backing up as <'. $ak .'>'); if (!@rename('.htaccess',$ak)) { if(Log::$p3)__log('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $mk=true; } if ($mk){ if(Log::$p3)__log('Installer: writing a correct .htaccess file'); if (!@copy($nk,'.htaccess')) { if(Log::$p3)__log('Installer: fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } } } if($_superconfig['disallow_installer']) { if(Log::$p3)__log('Installer: disallowed in superconfig'); xv(new AeNotAndCannotBeInstalledException); } else { $lk=jv('e2m_install'); if(Log::$p3)__log('Installer: will need to install, going to '. $lk); if(Log::$p3)__log('}'); c($lk); } } function e2j_check_db_config(){ global$_db,$_strings; $w3=sn(); $zv=[ 'success' => true, 'data' => [ 'message' => '', 'db-responding' => false, 'db-connected' => false, 'db-compatible' => false, 'db-occupied' => false, 'db-migrateable' => false, ] ]; try { $w3['passw']=p2($w3['passw']); xn('connect to check DB config (try 1)',$w3); } catch (AeMySQLAccessDeniedException $e){ $zv['data']['db-responding']=true; $zv=json_encode($zv); die ($zv); } catch (AeMySQLCannotConnectException $e){ $zv['data']['message']='no-connect'; $zv=json_encode($zv); die ($zv); } catch (AeMySQLTooOldException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['message']=e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ]); $zv=json_encode($zv); die ($zv); } catch (AeMySQLNotFoundException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; if (!$w3['name']) { $yz=py( $w3['server'],$w3['user_name'],$w3['passw'] ); if(count($yz) > 0){ $w3['name']=$yz[0]; } else { $zv['data']['db-responding']=true; $zv=json_encode($zv); die ($zv); } } } $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['db-compatible']=true; try { xn('connect to check DB config (try 2)',$w3); } catch (AeMySQLException $e){ $zv=json_encode($zv); die ($zv); } $zv['data']['db-good']=true; $i3=e2_model_data_check($w3['name']); if ($i3['occupied']) { if ($i3['migrateable']) { $zv['data']['message']=$_strings['gs--data-exists']; } else { $zv['data']['db-good']=false; $zv['data']['message']=$_strings['er--db-data-incomplete-install']; } } $zv=json_encode($zv); die ($zv); } function e2j_list_databases(){ $w3=sn(); $yz=py( $w3['server'],$w3['user_name'],$w3['passw'] ); $zv=[ 'success' => true, 'data' => [ 'databases-list' => $yz, ] ]; $zv=json_encode($zv); die ($zv); } function qn(){ global $_db, $_config, $_model, $_model_indexes, $_model_indexes_create_sql, $_model_indexes_check_sql; $fz=$_config['db_table_prefix']; en('SET sql_quote_show_create=1'); if($_db['charset']==='utf8mb4'){ if(Log::$p3)__log('Convert tables to utf8mb4 {'); kn($fz); if(Log::$p3)__log('}'); } else { if(Log::$p3)__log('Convert tables to utf8 {'); ln($fz); if(Log::$p3)__log('}'); } if(Log::$p3)__log('Get existing table information {'); foreach(array_keys($_model) as $mz){ bn($mz); try { en("SHOW CREATE TABLE `". $fz.$mz ."`"); $zk[$mz]=rn(); $zk[$mz]=$zk[$mz][0]['Create Table']; } catch (AeMySQLException $e){ kv($e); die ('Database table "'. $fz .$mz .'" not accessible during migration. Check your database availability'); } en("SHOW INDEX FROM `". $fz.$mz ."`"); $kk=rn(); $xk=array(); foreach ($kk as $az){ $az=$az['Key_name']; if(preg_match('/\_[0-9]+$/',$az)) { $ek[] = $az; $xk[] = 'DROP INDEX `'. $az. '`'; } } if(count($xk)) { $xk=implode(', ',array_unique($xk)); $ek=implode(', ',array_unique($ek)); if(Log::$p3)__log( 'Drop erroneous index "'. $ek .'" on "'. $fz.$mz .'"' ); en( "ALTER TABLE `". $fz.$mz ."` ". $xk ); } if (!strstr($zk[$mz],'InnoDB')) { en( "ALTER TABLE `". $fz.$mz ."` ". "ENGINE = InnoDB" ); } if (!strstr($zk[$mz],'`SubsetID`')) { en( "ALTER TABLE `". $fz.$mz."` ". "ADD `SubsetID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); } if($_config['db_table_subset'] > 0){ en( "UPDATE `". $fz.$mz ."` ". "SET `SubsetID` = ". $_config['db_table_subset'] ." ". "WHERE `SubsetID` = 0" ); } else { die ('db_table_subset must be greater than 0'); } } if(Log::$p3)__log('}'); if (!strstr($zk['Actions'],'`ReadCount`')) { en( "ALTER TABLE `". $fz."Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if(strstr($zk['Actions'],'`HitCount`')) { en( "ALTER TABLE `". $fz."Actions` ". "DROP `HitCount`" ); en( "DELETE FROM `". $fz."Actions` ". "WHERE `ReadCount` = 0" ); } if (!strstr($zk['Aliases'],'`EntityType`')) { en( "ALTER TABLE `". $fz."Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } en( "UPDATE `". $fz."Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); en( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `ID` IN (". "SELECT `ID` FROM (". "SELECT a.`ID` FROM `". $_config['db_table_prefix']."Aliases` a ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."Keywords` e ". "ON a.`EntityID` = e.`ID` ". "WHERE a.`EntityType` = 't' ". "AND e.`ID` IS NULL". ") AS temp". ")", 'clean up “leaked” tag aliases' ); if (!stristr($zk['Comments'],'`Text` MEDIUMTEXT')) { en( "ALTER TABLE `". $fz."Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!stristr($zk['Comments'],'`Reply` MEDIUMTEXT')) { en( "ALTER TABLE `". $fz."Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); } if (!stristr($zk['Comments'],'`IP` VARCHAR(39)')) { en( "ALTER TABLE `". $fz."Comments` ". "CHANGE `IP` `IP` VARCHAR(39)  DEFAULT '' NOT NULL" ); } if (!strstr($zk['Comments'],'`IsGIPUsed`')) { en( "ALTER TABLE `". $fz."Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr($zk['Comments'],'`GIP`')) { en( "ALTER TABLE `". $fz."Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr($zk['Comments'],'`GIPAuthorID`')) { en( "ALTER TABLE `". $fz."Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if(strstr($zk['Comments'],'`SocialType`')) { en( "ALTER TABLE `". $fz."Comments` ". "DROP `SocialType`" ); } if(strstr($zk['Comments'],'`SocialID`')) { en( "ALTER TABLE `". $fz."Comments` ". "DROP `SocialID`" ); } if (!strstr($zk['GIPsSessions'],'`AuthorEmail`')) { en( "ALTER TABLE `". $fz."GIPsSessions` ". "ADD `AuthorEmail` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorName`" ); } if (!strstr($zk['GIPsSessions'],'`AuthorProfileLink`')) { en( "ALTER TABLE `". $fz."GIPsSessions` ". "ADD `AuthorProfileLink` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorEmail`" ); } if(strstr($zk['Keywords'],'`ParentKeywordID`')) { en( "ALTER TABLE `". $fz."Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr($zk['Keywords'],'`OriginalAlias`')) { en( "ALTER TABLE `". $fz."Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } if (!strstr($zk['Keywords'],'`PageTitle`')) { en( "ALTER TABLE `". $fz."Keywords` ". "ADD `PageTitle` VARCHAR(255) DEFAULT '' NOT NULL AFTER `OriginalAlias`" ); } if (!stristr($zk['Keywords'],'`Description` MEDIUMTEXT')) { en( "ALTER TABLE `". $fz."Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); } if (!strstr($zk['Keywords'],'`Summary`')) { en( "ALTER TABLE `". $fz."Keywords` ". "ADD `Summary` MEDIUMTEXT AFTER `Description`" ); } if (!strstr($zk['Keywords'],'`Uploads`')) { en( "ALTER TABLE `". $fz."Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Summary`" ); } if (!stristr($zk['Keywords'],'`Uploads` MEDIUMTEXT')) { en( "ALTER TABLE `". $fz."Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr($zk['Keywords'],'`IsVisible`')) { en( "ALTER TABLE `". $fz."Keywords` ". "ADD `IsVisible` TINYINT(1) DEFAULT '1' NOT NULL AFTER `Uploads`" ); } if (!strstr($zk['Notes'],'`FormatterID`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL AFTER `Text`" ); } if (!strstr($zk['Notes'],"DEFAULT 'calliope'")) { en( "ALTER TABLE `". $fz."Notes` ". "CHANGE `FormatterID` `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL" ); } if (!strstr($zk['Notes'],'`OriginalAlias`')) { en( "ALTER TABLE `". $fz."Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if(strstr($zk['Notes'],'`IP`')) { en( "ALTER TABLE `". $fz."Notes` ". "DROP `IP`" ); } if (!stristr($zk['Notes'],'`Text` MEDIUMTEXT')) { en( "ALTER TABLE `". $fz."Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!strstr($zk['Notes'],'`Summary`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `Summary` MEDIUMTEXT AFTER `Text`" ); } if (!strstr($zk['Notes'],'`IsIndexed`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr($zk['Notes'],'`Uploads`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } if (!stristr($zk['Notes'],'`Uploads` MEDIUMTEXT')) { en( "ALTER TABLE `". $fz."Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr($zk['Notes'],'`IsExternal`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr($zk['Notes'],'`SourceID`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr($zk['Notes'],'`SourceNoteID`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr($zk['Notes'],'`SourceNoteURL`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr($zk['Notes'],'`SourceNoteData`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr($zk['Notes'],'`SourceNoteJSONURL`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if(strstr($zk['Notes'],'`SourceMainImageURL`')) { en( "ALTER TABLE `". $fz."Notes` ". "DROP `SourceMainImageURL`" ); } if(strstr($zk['Notes'],'`IsIssue`')) { en( "ALTER TABLE `". $fz."Notes` ". "DROP `IsIssue`" ); } if (!strstr($zk['Notes'],'`ReadCount`')) { en( "ALTER TABLE `". $fz."Notes` ". "ADD `ReadCount` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); en( "UPDATE `". $fz."Notes` n JOIN (". "SELECT `EntityID`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM  `". $fz."Actions` ". "GROUP BY `EntityID`". ") a ON n.`ID` = a.`EntityID` ". "SET `ReadCount` = `AggregateReadCount`" ); } if (!strstr($zk['Sources'],'`TrueID`')) { en( "ALTER TABLE `". $fz."Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); en( "UPDATE `". $fz."Sources` ". "SET `TrueID` = `ID`" ); } if(Log::$p3)__log('Ensure indexes {'); if(strstr($zk['Notes'],'`Title` (`Title`(191))')) { if(Log::$p3)__log('Drop erroneous index on "'. $fz .'Notes.Title"'); en( "ALTER TABLE `". $fz ."Notes` ". "DROP INDEX `Title`" ); } foreach(array_keys($_model) as $mz){ foreach($_model_indexes[$mz] as $az){ list ($type,$dz)=$az; $rk=$_model_indexes_check_sql[$type].' `'.$dz[0].'` (`'. implode('`,`',$dz) .'`)'; $tk=$_model_indexes_create_sql[$type].' (`'. implode('`, `',$dz) .'`)'; if (!strstr($zk[$mz],$rk)) { if(Log::$p3)__log( 'Table "'. $fz.$mz .'" is missing "'. $_model_indexes_check_sql[$type] .'" on columns "'. implode('", "',$dz) .'"' ); en( "ALTER TABLE `". $fz.$mz ."` ". "ADD ". $tk ); } } } if(Log::$p3)__log('}'); return true; } function ln($fz){ global$_model; foreach(array_keys($_model) as $w4){ $jk=vn($w4,$fz); if ($jk){ $hk=$jk['Collation']; if ($hk!='utf8_general_ci'){ if(Log::$p3)__log('Migrate: Convert table '. $w4. ' to utf8'); en( "ALTER TABLE `". $fz.$w4 ."` ". "CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci" ); } } } } function e2mig__queries_to_recreate_indexes_for_table_($mz){ $gk=$wk=[]; $uk=( "SELECT s.column_name, s.table_name, s.index_name, s.non_unique, engine ". "FROM information_schema.statistics s ". "JOIN information_schema.columns USING (table_name, table_schema, column_name) ". "JOIN information_schema.tables USING (table_name, table_schema) ". "WHERE engine = 'InnoDB' ". "AND character_set_name <> 'utf8mb4' ". "AND index_type = 'BTREE' ". "AND column_type LIKE '%varchar%' ". "AND s.table_schema = DATABASE() ". "AND table_name='".$mz."'" ); en($uk); foreach (rn() as $g4){ $gk[] = sprintf( "DROP INDEX %s ON %s", $g4['index_name'], $g4['table_name'] ); $ik=191; $wk[] = sprintf( "CREATE %s INDEX %s ON %s(%s($ik))", $g4['non_unique']?'':'UNIQUE', $g4['index_name'], $g4['table_name'], $g4['column_name'] ); } return array ($gk,$wk); } function kn($fz){ global$_model,$_db; $ok=ra(); foreach ($ok as $t => $kf){ $ok[$t]=SEARCH_EXTRA_PREFIX. $kf; } $pk=array_merge( array_keys($_model), array_values($ok) ); $gk=$wk=null; foreach ($pk as $w4){ if(Log::$p3)__log('Migrate: Convert table '. $w4. ' to utf8mb4?'); $jk=vn($w4,$fz); if ($jk){ $hk=$jk['Collation']; if(stripos($hk,'utf8mb4')!==0){ list ( $gk, $wk )=e2mig__queries_to_recreate_indexes_for_table_($fz.$w4); if ($gk!==null){ if(Log::$p3){ __log('Migrate: Drop indexes of table '. $w4); } foreach ($gk as $c7){ en($c7); } } if(Log::$p3){ __log('Migrate: Convert table '. $w4. ' to UTF8MB4'); } en( "ALTER TABLE `". $fz.$w4 ."` ". "CONVERT TO CHARACTER SET utf8mb4" ); if ($wk!==null){ if(Log::$p3){ __log('Migrate: Recreate indexes of table '.$w4); } foreach ($wk as $v7){ en($v7); } } } } } } function e2s_update_perform(){ global$_model,$settings,$_config,$_diagnose; if(1){ $b7=ini_get('max_execution_time')+5; $y7=@unserialize(file_get_contents(USER_FOLDER.'updating.psa')); if (!is_array($y7))$y7=[]; if ( isset ($y7['lock']) and $y7['lock'] >= time()-$b7 ){ throw new AeUpdateAlreadyInProcess('Update already in process'); } $y7['lock']=time(); if (!@n3(USER_FOLDER.'updating.psa',serialize($y7))) { throw new AeUpdateCannotLock('Update can’t get a new lock'); } } $oz=fn_(); $g=max((int) ($oz['version']), 2285); if ($oz['version']==E2_VERSION)v(); if($_config['log_updates']) { Log::$p3=true; if(Log::$p3)bv('update-$'); } if($_config['backup_before_update']) { if(Log::$p3)__log('Backup before update {'); if (!wn()) { die ('Could not make backup before update. Try again?'); } if(Log::$p3)__log('}'); } if(Log::$p3)__log('Update from v'. $g .' to v'. E2_VERSION.' {'); if ($g < 2587){ r('caches/*'); rmdir('caches'); } if ($g < 2691){ $settings=e2_utf8_version_of_array_($settings); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); qv(); } } if ($g < 2921){ $settings['template']='plain'; } if ($g < 3223){ $settings['v3223_rss_permalinks_before_stamp']=time(); } if ($g < 3354){ @rename('pictures/userpics/',AVATARS_FOLDER); @unlink(USER_FOLDER. 'password-reset.txt'); } if ($g < 3496){ $settings['appearance']['respond_to_dark_mode']=true; } @unlink(USER_FOLDER. 'last-update.psa'); @unlink(CACHES_FOLDER.'index.xml'); @j(CACHES_FOLDER); @j(BACKUP_FOLDER); @j(MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'remote/'); @j(MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER .'remote/'); @j(MEDIA_ROOT_FOLDER.VIDEO_FOLDER); if (@$settings['template']=='')$settings['template']=DEFAULT_TEMPLATE; if (isset ($settings['appearance']['hot_frontpage'])) { unset($settings['appearance']['hot_frontpage']); } if (!isset ($settings['blog_subtitle'])) { if (isset ($settings['description'])) { $settings['blog_subtitle']=$settings['description']; unset($settings['description']); } } if (!isset ($settings['blog_title'])) { if (isset ($settings['site_title'])) { $settings['blog_title']=$settings['site_title']; unset($settings['site_title']); } } if (!isset ($settings['author_email'])) { if (isset ($settings['user']['email'])) { $settings['author_email']=$settings['user']['email']; unset($settings['user']); } } if (isset ($settings['db']['table_prefix'])) { if($settings['db']['table_prefix'] != @$_config['db_table_prefix']) { die ('You’ve been using a database with a table prefix “'. $settings['db']['table_prefix'] .'”. Now this should be set in the configuration. Please add the following line to the file user/config.php:<br /><br />$_config[\'db_table_prefix\'] = \''. $settings['db']['table_prefix'] .'\';<br /><br />Then refresh this page.'); } else { unset($settings['db']['table_prefix']); } } if (isset ($settings['comments']['on'])) { if (!$settings['comments']['on']) { try { en( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `IsCommentable`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } catch (AeMySQLException $e){} } $settings['comments']['default_on'] = (bool)$settings['comments']['on']; unset($settings['comments']['on']); } if ( is_file(USER_FOLDER.'settings.json') and is_file(USER_FOLDER.'settings.psa') ) { @unlink(USER_FOLDER.'settings.psa'); } if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); } e2_drop_all_kinds_of_cache(); qn(); if ($g < 3601){ ga(); $o3=ta(); try { $o3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$p3)__log('Rose not available'); } la(); } $_diagnose['need?']=true; y('diagnose','1'); $oz=dn(E2_VERSION); if(Log::$p3)__log('}'); @unlink(USER_FOLDER.'updating.psa'); if (r2()) { mv(e2l_get_string('gs--updated-successfully', array ( 'from' => 'v'. $g, 'to' => 'v'. $oz['version'], )), E2E_MESSAGE); } c(); } define('E2_MYSQL_CONNECT_TIMEOUT',5); function xn($n7='',$w3=null){ static $m7=false; global$settings,$_db,$vz,$_config; if ($m7) return; if ($w3===null)$w3=$settings['db']; $f7=mysqli_init(); $f7 -> options(MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); if($_config['dev_chaos'] and !rand(0, (1/$_config['dev_chaos']) - 1)) { throw new AeMySQLCannotConnectException('Could not '. $n7 ."\n\nChaos in e2_mysql_ensure"); } $d7=@mysqli_real_connect( $f7, 'p:'. $w3['server'], $w3['user_name'], cd($w3['passw']) ); if (!$d7){ $wq=mysqli_connect_errno(); if ($wq==1045){ $d7=@mysqli_real_connect( $f7, 'p:'. $w3['server'], $w3['user_name'], $w3['passw'] ); if ($d7){ $w3['passw']=p2($w3['passw']); $settings['db']=$w3; if(Log::$p3)__log('Storing encrypted password'); @n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE)); } else { throw new AeMySQLAccessDeniedException('Could not '. $n7); } } else { throw new AeMySQLCannotConnectException('Could not '. $n7); } } $_db['version']=mysqli_get_server_info($f7); if(version_compare($_db['version'],E2_MINIMUM_MYSQL,'<')) { throw new AeMySQLTooOldException('Could not '. $n7); } if (!@mysqli_select_db($f7,$w3['name'])) { throw new AeMySQLNotFoundException('Could not '. $n7); } $_db['link']=$f7; $_db['charset']=version_compare($_db['version'],'5.5.3','>=')?'utf8mb4':'utf8'; $vf='SET NAMES '. $_db['charset']; mysqli_query($f7,$vf); @$vz ++; if(Log::$p3)__log('DB ['. $vz .']: '. $vf); $m7=true; } function en($vf,$n7='run some query'){ global $vz,$_db,$_strings,$_config; xn($n7); if($_config['dev_chaos'] and !rand(0, (1/$_config['dev_chaos']) - 1)) { throw new AeMySQLQueryException('Could not '. $n7 ."\n\nChaos in e2_mysql_query"); } @$vz ++; if(Log::$p3) if ($n7)__log('Will '. $n7); if(Log::$p3)__log('DB ['. $vz .']: '. $vf); $_db['result'] = @mysqli_query($_db['link'],$vf); if($_config['backup_tail']) { if ( stripos($vf,"SELECT")!==0 and stripos($vf,"SHOW")!==0 ){ $fb=BACKUP_FOLDER .'backup-tail.sql'; @file_put_contents($fb,$vf .";\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod($fb,E2_NEW_FILES_RIGHTS); } } if (!$_db['result']) { throw new AeMySQLQueryException('Could not '. $n7 ."\n\nMySQL says:\n". mysqli_error($_db['link'])); } } function rn($type=MYSQLI_ASSOC){ global$_db; $d=array(); while ($nv=@mysqli_fetch_array($_db['result'],$type)) { foreach ($nv as $r => $s7){ if(is_string($s7)) { $nv[$r]=$s7; } } $d[] = $nv; } return $d; } function tn($x){ global$_db; xn('escape string'); return mysqli_real_escape_string($_db['link'],$x); } function jn(){ global$_config; $wa=array_keys(hn()); if(Log::$p3)__log('Backup: Found '. count($wa) .' backups'); if(count($wa)) { $a7=time()-$wa[0]; $q7=($a7 >= $_config['backup_rebase_interval']); if(Log::$p3)__log('Backup: '. $a7 .' seconds since last backup'); } else { $q7=true; } if ($q7){ if(Log::$p3)__log('Backup: Will rebuild backup'); p3(jv('e2s_dump', []), true); } } function hn(){ $wa=[]; foreach(glob(BACKUP_FOLDER. '*.sql') as $my){ if(preg_match('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is',basename($my),$y3)) { list (, $hb,$jb,$tb,$pl,$r,$ol)=$y3; $y4=gmmktime($pl,$r,$ol,$jb,$tb,$hb); $wa[$y4]=$my; } } krsort($wa); return $wa; } function gn(){ $wa=hn(); if(count($wa) > 3){ $z7=-1; $k7=array (SECONDS_IN_A_MINUTE,SECONDS_IN_AN_HOUR,SECONDS_IN_A_DAY, -1); $r=0; foreach ($wa as $y4 => $my){ if ($z7 == -1){ $z7=$y4; } elseif ($k7[$r] == -1){ @unlink($my); } else { if ($z7-$y4 < $k7[$r]) { @unlink($my); } else { $r ++; $z7=$y4; } } } } else { } return; } function wn(){ global$_model,$_db,$_config; try { xn('make backup'); if($_db['link']) { en( "DELETE FROM `". $_config['db_table_prefix']."Actions` ". "WHERE (`Stamp` < ". (time() - (SECONDS_IN_A_MONTH)) .")" ); $x7=[]; foreach(array_keys($_model) as $mz){ $x7[] = $_config['db_table_prefix'].$mz; } $e4=time(); $fb=BACKUP_FOLDER .'backup-'.gmdate('Y-m-d-\a\t-H-i-s',$e4).'.sql'; e2_backup($_db['link'],$x7,$fb); @unlink(BACKUP_FOLDER .'backup-tail.sql'); gn(); return true; } } catch (AeMySQLException $e){ kv($e,'Could not do backup'); return false; } } function e2s_dump(){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } if (wn())mv('Backed up',E2E_MESSAGE); c(jv('e2m_underhood')); } define('ALIAS_MAX_LENGTH',64); function un($e7=false){ global$_config; static $n2=null; if ($e7){ if(Log::$p3)__log('Reset aliasmap'); @unlink(CACHE_FILENAME_ALIASMAP); $n2=null; return; } if(is_array($n2)) return $n2; if(CACHE_ALIASMAP and is_file(CACHE_FILENAME_ALIASMAP)) { $n2=@unserialize(file_get_contents(CACHE_FILENAME_ALIASMAP)); } if(is_array($n2)) return $n2; if(Log::$p3)__log('Build aliasmap {'); $n2=[]; en( "SELECT `EntityType`, `EntityID`, `Alias` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Stamp` IN (". "SELECT MAX(`Stamp`) `MaxStamp` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "GROUP BY `EntityType`, `EntityID`". ")", 'get all active aliases' ); foreach (rn() as $r7){ $m2=$r7['EntityType'].$r7['EntityID']; $n2[$m2]=$r7['Alias']; } en( "SELECT `ID`, `Stamp`, `Offset`, `IsDST`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". "ORDER BY `Stamp`", 'get all notes to cache y/d/m/n urls' ); $t7=0; $j7=false; foreach (rn() as $y2){ $m2='n'. $y2['ID']; $h7=ky( 'Y/m/d',$y2['Stamp'],dy($y2) ); if ($h7!==$j7)$t7=0; $t7 ++; $g7=$h7 .'/'. $t7; if (empty ($n2[$m2])) { $n2[$m2]=$g7; } else { if ((string)$y2['OriginalAlias']===''){ $n2[$m2.'-ymdn']=$g7; } } $j7=$h7; } en( "SELECT `ID`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'get original active aliases for tags' ); foreach (rn() as $a2){ $m2='t'. $a2['ID']; if (empty ($n2[$m2])) { $n2[$m2]=$a2['OriginalAlias']; } } if(CACHE_ALIASMAP)n3(CACHE_FILENAME_ALIASMAP,serialize($n2)); if(Log::$p3)__log('}'); return $n2; } function e2ali__alias_from_title_($w7){ global$_config; $u7=$w7; if(array_key_exists('autoreplace_for_aliases',$_config)) { $u7=strtr( $u7, $_config['autoreplace_for_aliases'] ); } $u7=m($u7); $u7=str_replace('\'','',$u7); $u7=str_replace('’','',$u7); $u7=str_replace(chr(146),'',$u7); $i7=''; for ($r=0; $r < strlen($u7); ++ $r){ if ( (ord($u7[$r]) >= 48 and ord($u7[$r]) <= 57) or (ord($u7[$r]) >= 65 and ord($u7[$r]) <= 90) or (ord($u7[$r]) >= 97 and ord($u7[$r]) <= 122) or 0 ){ $i7.=$u7[$r]; } else { $i7.='-'; } } $i7=preg_replace('/\-+/','-',$i7); $i7=trim($i7,'-'); $i7=strtolower($i7); if ($i7=='-')$i7=''; $i7=substr($i7,0,ALIAS_MAX_LENGTH); return $i7; } function on($o7){ global$_config; if ((string)$o7==='') return false; en( "SELECT * FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Alias` = '". $o7 ."' ". "ORDER BY `Stamp` LIMIT 1", 'get alias record for alias "'. $o7 .'"' ); $a1=rn(); if(count($a1)==1){ return $a1[0]; } else { return false; } } function pn($o7){ global$_config; if ((string)$o7==='') return false; if(Log::$p3)__log('Get entity type and id from alias "'. $o7 .'"'); $p7=@array_flip(un()); $m2=$p7[$o7]; if ($m2[0]=='n' or $m2[0]=='t'){ $vv=[ 'type' => $m2[0], 'id' => (int)substr($m2,1) ]; return $vv; } $r7=on($o7); if (!$r7) return false; $vv=[ 'type' => $r7['EntityType'], 'id' => (int)$r7['EntityID'], ]; if(Log::$p3)__log('Got entity type "'. $vv['type'] .'" and id "'. $vv['id'] .'"'); return $vv; } function cm($oy,$oa,$cx,$w7,$vx=1){ if(Log::$p3)__log('Aliases: "'. $oy .'" available alias for source "'. $w7. '"'); if ($oy=='set' and (!$oa or !$cx)) return false; $i7=e2ali__alias_from_title_($w7); if ($w7!=='' and $i7===''){ $i7=(string)$vx; } elseif ($vx > 1){ $bx='-'. $vx; $i7=substr($i7,0,ALIAS_MAX_LENGTH-strlen($bx)) . $bx; } if ($r7=on($i7)) { $yx=$r7['EntityType']; $nx=$r7['EntityID']; if ( (($cx and $nx==$cx) and ($oa and $yx==$oa)) or $i7!=un() [$yx.$nx] ) { if ($oy=='find'){ return $i7; } if ($oy=='set'){ if(Log::$p3)__log('Aliases: update alias timestamp'); nn('Aliases', array ( 'ID' => $r7['ID'], 'EntityType' => $oa, 'EntityID' => $cx, 'Alias' => $i7, 'Stamp' => time(), )); un(true); return $i7; } } else { return cm($oy,$oa,$cx,$w7,$vx+1); } } else { if ($oa and $cx and $i7==''){ if(preg_match( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', un() [$oa.$cx] )) { if(Log::$p3)__log('Aliases: d/m/y/n was already used for this entity'); return ''; } } if(Log::$p3)__log('Aliases: it’s an empty alias, and it was not being used for this entity'); if ( $oa=='t' and $mx=qf($i7) ) { if ($mx['ID']!=$cx){ return cm($oy,$oa,$cx,$w7,$vx+1); } } if ($oy=='find'){ return $i7; } if ($oy=='set'){ yn('Aliases', array ( 'EntityType' => $oa, 'EntityID' => $cx, 'Alias' => $i7, 'Stamp' => time(), )); un(true); return $i7; } } return ''; } class AePageableNotesView { private $candy; private $parameters; private $pageExists=false; private $isCached=false; private $hasRun=false; private $sql=null; private $sql_count=null; private $highlightedTags=null; private $cacheFilename=null; private $prevPageTitle=null; private $nextPageTitle=null; private $totalNotes=null; private $totalPages=null; private $notesCTree=null; private $pagesCTree=null; private $wantPaging=false; private $wantNewCommentsCount=false; private $wantReadHrefs=false; private $wantPreviewHrefs=false; private $wantControls=false; private $wantRelatedNotes=false; private $useLocalHrefs=false; private $page=1; private $limit=10; public function __construct($candy,$parameters){ $this->candy=$candy; $this->parameters=$parameters; if (empty ($parameters['page'])) { $this->page=1; } else { $this->page=(int)$parameters['page']; } } public function setSQLCountRequest($sql_count){ if(strpos($sql_count,"SELECT COUNT(*) Total FROM ")!==0){ die ('AePageableNotesView: Count request must start with "SELECT COUNT(*) Total FROM "'); } $this->sql_count=$sql_count; } public function setLimitlessSQLRequest($sql){ if(strstr($sql,"LIMIT")) { die ('AePageableNotesView: Request must not contain "LIMIT"'); } $this->sql=$sql; if($this->sql_count===null){ if(strpos($sql,"SELECT * ")===0){ $this->sql_count="SELECT COUNT(*) Total ". substr($sql,9); } else { die ('AePageableNotesView: setSQLCountRequest () must be used'); } } } public function setPortionSize($limit){ $this->limit=abs((int)$limit); } public function setNextPrevPageTitles($nextPageTitle,$prevPageTitle){ $this->nextPageTitle=$nextPageTitle; $this->prevPageTitle=$prevPageTitle; } public function setHighlightedTags($highlightedTags){ $this->highlightedTags=$highlightedTags; } public function setCacheFilename($cacheFilename){ $this->isCached=true; $this->cacheFilename=$cacheFilename; } public function setWantPaging($wantPaging){ $this->wantPaging=$wantPaging; } public function setWantNewCommentsCount($wantNewCommentsCount){ $this->wantNewCommentsCount=$wantNewCommentsCount; } public function setWantReadHrefs($wantReadHrefs){ $this->wantReadHrefs=$wantReadHrefs; } public function setWantPreviewHrefs($wantPreviewHrefs){ $this->wantPreviewHrefs=$wantPreviewHrefs; } public function setWantControls($wantControls){ $this->wantControls=$wantControls; } public function setWantRelatedNotes($wantRelatedNotes){ $this->wantRelatedNotes=$wantRelatedNotes; } public function setUseLocalHrefs($useLocalHrefs){ $this->useLocalHrefs=$useLocalHrefs; } public function isExistingPage(){ if (!$this->hasRun)$this -> run(); return$this->pageExists; } public function isFirstPage(){ return$this->page===1; } public function isFirstPageOfEmptyView(){ if (!$this->hasRun)$this -> run(); return$this->page===1 and $this->totalPages===0; } public function getTotalNotes(){ if (!$this->hasRun)$this -> run(); return$this->totalNotes; } public function getTotalPages(){ if (!$this->hasRun)$this -> run(); return$this->totalPages; } public function getNotesCTree(){ if (!$this->hasRun)$this -> run(); return$this->notesCTree; } public function getPagesCTree(){ if (!$this->hasRun)$this -> run(); return$this->pagesCTree; } private function prepareCacheableData(){ $this->totalNotes=0; if($this->limit){ $bl=($this->page-1)*$this->limit; $this->sql.=' LIMIT '. $bl .', '. $this->limit; } en($this->sql_count,'count total notes of "'. $this->candy .'" list'); $fx=rn(); $this->totalNotes=$fx ? (int)$fx[0]['Total']:0; en($this->sql,'get limited full notes "'. $this->candy .'" list'); $a1=rn(); $this->notesCTree=[]; foreach ($a1 as $t => $oq){ $noteView=new AeNoteView($oq); $noteView -> setWantNewCommentsCount($this->wantNewCommentsCount); $noteView -> setWantReadHref($this->wantReadHrefs); $noteView -> setWantPreviewHref($this->wantPreviewHrefs); $noteView -> setWantControls($this->wantControls); $noteView -> setWantCommentsLink(true); $noteView -> setWantRelatedNotes($this->wantRelatedNotes); $noteView -> setHighlightedTags($this->highlightedTags); $noteView -> setUseLocalHref($this->useLocalHrefs); $this->notesCTree[] = $noteView -> getNoteCTree(); } $this->pagesCTree=[]; if ( $this->limit and $this->totalPages=(int)ceil($this->totalNotes/$this->limit) ) { $this->pagesCTree['timeline?']=true; $this->pagesCTree['count'] = (int)$this->totalPages; $this->pagesCTree['this'] = (int)$this->page; if($this->wantPaging){ $this->pagesCTree['earlier-title']=$this->nextPageTitle; $this->pagesCTree['later-title']=$this->prevPageTitle; $dx=$this->parameters; if($this->page < $this->totalPages){ $dx['page']=$this->page+1; $this->pagesCTree['earlier-href']=jv($this->candy,$dx); } if($this->page > 1){ $dx['page']=$this->page-1; $this->pagesCTree['later-href']=jv($this->candy,$dx); } } } } private function run(){ $this->hasRun=true; if($this->isCached and is_file($this->cacheFilename)) { $sx=@unserialize(file_get_contents($this->cacheFilename)); $this->totalNotes=@$sx['notes_total']; $this->notesCTree=@$sx['notes_ctree']; $this->pagesCTree=@$sx['pages_ctree']; $this->totalPages=$this->pagesCTree['count']; } if ( is_int($this->totalNotes) and is_array($this->notesCTree) and is_array($this->pagesCTree) and is_int($this->totalPages) ) { if(Log::$p3)__log('Retrieved cached CTree'); } else { $this -> prepareCacheableData(); if($this->isCached){ n3($this->cacheFilename,serialize([ 'notes_total' => $this->totalNotes, 'notes_ctree' => $this->notesCTree, 'pages_ctree' => $this->pagesCTree, ])); } } $this->pageExists=( $this->totalPages > 0 and $this->page >= 1 and $this->page <= $this->totalPages ); } } class AeArbitraryNotesCollectionView { private $name=''; private $isCached=false; private $hasRun=false; private $sql=null; private $currentURL=null; private $cacheFilename=null; private $cacheExpiresFilename=null; private $cacheable=[]; private $viewExpiration=null; private $notesCTree=null; public function __construct($name){ $this->name=$name; } public function setSQLRequest($sql){ $this->sql=$sql; } public function setCurrentURL($currentURL){ $this->currentURL=$currentURL; } public function setCacheFilename($cacheFilename){ $this->isCached=true; $this->cacheFilename=$cacheFilename; } public function setCacheExpiresFilename($cacheExpiresFilename){ $this->cacheExpiresFilename=$cacheExpiresFilename; } public function setViewExpiration($viewExpiration){ $this->viewExpiration=$viewExpiration; } public function orderNotesCTreeByVerticality(){ if (!$this->hasRun)$this -> run(); usort($this->notesCTree, function ($ax,$qx){ if (empty ($ax['images'][0]['verticality']))$lx=0; else $lx=$ax['images'][0]['verticality']; if (empty ($qx['images'][0]['verticality']))$zx=0; else $zx=$qx['images'][0]['verticality']; return (int)round(($zx-$lx)*10000); }); } public function getNotesCTree(){ if (!$this->hasRun)$this -> run(); return$this->notesCTree; } private function prepareCacheableData(){ $kx=[ 'notes-records' => function () { $xx=[]; try { en($this->sql,'get "'. $this->name .'" list'); foreach (rn() as $oq){ if (rm($oq)==='public'){ $xx[] = $oq; } } } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not get list from database'); } return $xx; }, ]; if($this->isCached and is_file($this->cacheFilename)) { $this->cacheable=@unserialize(file_get_contents($this->cacheFilename)) or $this->cacheable=[]; } $ex=true; if (!empty ($this->cacheExpiresFilename)) { if($this->isCached and is_file($this->cacheExpiresFilename)) { $e4=time(); $rx=(int) @file_get_contents($this->cacheExpiresFilename); if(Log::$p3)__log('List expires '. date('r',$rx) .', now '. date('r',$e4)); $ex=($e4 < $rx); } } $tx=false; foreach ($kx as $hz => $jx){ if (!array_key_exists($hz,$this->cacheable) or !$ex){ if(Log::$p3)__log('Build cache: "'. $hz .'"'); $this->cacheable[$hz]=$jx(); $tx=true; } else { if(Log::$p3)__log('Retrieved from cache: "'. $hz .'"'); } } if ($tx){ n3($this->cacheFilename,serialize($this->cacheable)); if($this->cacheExpiresFilename){ @n3($this->cacheExpiresFilename,time()+$this->viewExpiration); } } } private function run(){ $this->hasRun=true; if(Log::$p3)__log('AeArbitraryNotesCollectionView "'. $this->name .'" run {'); if(Log::$p3)__log('Cacheable data {'); $this -> prepareCacheableData(); if(Log::$p3)__log('}'); if(Log::$p3)__log('Uncacheable data {'); $this->notesCTree=[]; foreach($this->cacheable['notes-records'] as $oq){ $noteView=new AeNoteView($oq); $q2=$noteView -> getNoteCTree(); $q2['current?'] = ($q2['href']==$this->currentURL); $this->notesCTree[] = $q2; } if(Log::$p3)__log('}'); if(Log::$p3)__log('}'); } } class AeNoteView { private $noteRecord=[]; private $isCached=false; private $hasRun=false; private $cacheFilename=null; private $noteCTree=null; private $highlightedTags=null; private $cacheable=[]; private $OGImages=[]; private $wantRichText=false; private $wantCommentsLink=false; private $wantNewCommentsCount=false; private $wantReadHref=false; private $wantPreviewHref=false; private $wantControls=false; private $wantSharingButtons=false; private $wantRelatedNotes=false; private $useLocalHref=false; public function __construct($noteRecord){ $this->noteRecord=$noteRecord; if(CACHE_NOTES){ $this->isCached=true; $this->cacheFilename=e2_note_cache_filename_with_id_($noteRecord['ID']); } } public function setHighlightedTags($highlightedTags){ $this->highlightedTags=$highlightedTags; } public function setWantRichText($wantRichText){ $this->wantRichText=$wantRichText; } public function setWantCommentsLink($wantCommentsLink){ $this->wantCommentsLink=$wantCommentsLink; } public function setWantNewCommentsCount($wantNewCommentsCount){ $this->wantNewCommentsCount=$wantNewCommentsCount; } public function setWantReadHref($wantReadHref){ $this->wantReadHref=$wantReadHref; } public function setWantPreviewHref($wantPreviewHref){ $this->wantPreviewHref=$wantPreviewHref; } public function setWantControls($wantControls){ $this->wantControls=$wantControls; } public function setWantSharingButtons($wantSharingButtons){ $this->wantSharingButtons=$wantSharingButtons; } public function setWantRelatedNotes($wantRelatedNotes){ $this->wantRelatedNotes=$wantRelatedNotes; } public function setUseLocalHref($useLocalHref){ $this->useLocalHref=$useLocalHref; } public function getNoteCTree(){ if (!$this->hasRun)$this -> run(); return$this->noteCTree; } private function prepareCacheableData(){ $kx=[ 'title' => function () { return h3( htmlspecialchars($this->noteRecord['Title'],ENT_NOQUOTES,HSC_ENC) ); }, 'text-format-info' => function () { return u3( $this->noteRecord['FormatterID'], $this->noteRecord['Text'], 'full' ); }, 'summary' => function () { if ((string)$this->noteRecord['Summary']!==''){ return h3(htmlspecialchars($this->noteRecord['Summary'],ENT_NOQUOTES,HSC_ENC)); } else { return em($this->cacheable['text-format-info']['text-final']); } }, 'comments-count' => function () { if (!$this->noteRecord['IsPublished']) { return false; } else { return b2($this->noteRecord['ID']); } }, 'tags-data' => function () { $d2=yf($this->noteRecord['ID']); $hx['ctree'] = []; $hx['all-resnames-uploads'] = []; foreach ($d2 as $r => $a2){ $hx['ctree'][] = [ 'visible?' => (bool)$a2['IsVisible'], 'name' => htmlspecialchars($a2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag', array ('*tag' => $a2)), ]; $hx['all-resnames-uploads']=array_merge( $hx['all-resnames-uploads'], q3('tag',$a2['ID']) ); } $hx['all-resnames-uploads']=array_unique( $hx['all-resnames-uploads'] ); return $hx; }, ]; if($this->isCached and is_file($this->cacheFilename)) { $this->cacheable=@unserialize(file_get_contents($this->cacheFilename)) or $this->cacheable=[]; } $tx=false; foreach ($kx as $hz => $jx){ if (!array_key_exists($hz,$this->cacheable)) { if(Log::$p3)__log('Build cache: "'. $hz .'"'); $this->cacheable[$hz]=$jx(); $tx=true; } else { if(Log::$p3)__log('Retrieved from cache: "'. $hz .'"'); } } if ($tx){ n3($this->cacheFilename,serialize($this->cacheable)); } } private function run(){ $this->hasRun=true; if(Log::$p3)__log('AeNoteView run {'); if(Log::$p3)__log('Cacheable data {'); $this -> prepareCacheableData(); if(Log::$p3)__log('}'); if(Log::$p3)__log('Uncacheable data {'); $gx=false; if($this->noteRecord['IsPublished']) { if ((string)$this->noteRecord['OriginalAlias']!==''){ $gx=jv('e2m_note', ['alias' => $this->noteRecord['OriginalAlias']]); } else { $wx=$this->noteRecord; $wx['__force_ymdn']=true; $gx=jv('e2m_note', ['*note' => $wx]); } } $ql=dy($this->noteRecord); $ux=[(int)$this->noteRecord['LastModified'],$ql]; $e4=( $this->noteRecord['IsPublished'] ? [(int)$this->noteRecord['Stamp'],$ql]:$ux ); $ix=rm($this->noteRecord); $hs=$this->cacheable['text-format-info']['meta']['resources-detected']; if (!is_array($hs))$hs=[]; if(count($hs)) { rb($hs); } $ox=db($hs); $gs=@unserialize($this->noteRecord['Uploads']) or $gs=[]; $px=array_merge( sb( $hs,$gs ), $this->cacheable['tags-data']['all-resnames-uploads'] ); $ce=d3($px); $ve=db($px); $be=$this->noteRecord['SourceNoteData']; $be=@json_decode($be,true); $ye=@$be['og_images'][0] or $ye=''; if($this->noteRecord['IsExternal']) { $ne=zd($this->noteRecord); } else { $ne=[]; } $me=false; if(E2_EDITION){ if($this->wantRelatedNotes){ $me=um($this->noteRecord['ID']); } } $fe=$this->cacheable['tags-data']['ctree']; if($this->highlightedTags!==null){ foreach ($fe as $t => $kf){ $fe[$t]['current?']=in_array($fe[$t]['name'],$this->highlightedTags); } } if($this->wantSharingButtons and $this->noteRecord['IsPublished'] and !$this->scheduled){ $de=vm($ce); } else { $de=false; } if($this->wantNewCommentsCount){ $se=v2($this->noteRecord['ID']); } else { $se=false; } $this->noteCTree=[ 'id' => (int)$this->noteRecord['ID'], 'title' => (string)$this->cacheable['title'], 'href' => jv('e2m_note', ['*note' => $this->noteRecord]), 'href-original' => $gx, 'time' => $e4, 'last-modified' => $ux, 'text' => (string)$this->cacheable['text-format-info']['text-final'], 'format-info' => $this->cacheable['text-format-info']['meta'], 'summary' => (string)$this->cacheable['summary'], 'snippet-text' => (string)$this->cacheable['summary'], 'draft?' => $ix==='draft', 'scheduled?' => $ix==='scheduled', 'public?' => $ix==='public', 'hidden?' => $ix==='hidden', 'current?' => false, 'favourite?' => (bool) ($this->noteRecord['IsFavourite'] and $ix!=='draft'), 'images' => ab($ox), 'thumbs' => qb($ox), 'source-main-image-url' => (string)$ye, 'og-images' => $ce, 'og-images-thumbs' => qb($ve), 'tags' => $fe, 'sharing-buttons' => $de, 'related' => $me, 'read-href' => ($this->wantReadHref and $this->noteRecord['IsPublished'])? jv('e2m_note_read', ['*note' => $this->noteRecord]) : false, 'preview-href' => ($this->wantPreviewHref and ($ix!=='public'))? jv('e2m_note', [ '*note' => $this->noteRecord, 'preview-key' => hm($this->noteRecord) ]) : false, 'comments-count' => $this->cacheable['comments-count'], 'comments-count-text' => is_int($this->cacheable['comments-count'])? e2l_get_string('gs--n-comments', [ 'number' => $this->cacheable['comments-count'] ]) : '', 'new-comments-count' => $se, 'new-comments-count-text' => is_int($se)? e2l_get_string('gs--comments-n-new', [ 'number' => $se ]) : '', 'comments-link?' => (bool) ( $this->wantCommentsLink and $this->noteRecord['IsPublished'] and ( d2($this->noteRecord) or ($this->cacheable['comments-count'] > 0) ) ), ]; if($this->noteRecord['IsExternal']) { $this->noteCTree=array_merge($this->noteCTree,$ne); $this->noteCTree['href-original']=$this->noteCTree['href-external']; if (!$this->useLocalHref){ $this->noteCTree['href']=$this->noteCTree['href-external']; } } if($this->wantControls){ $this->noteCTree['edit-href']=jv( 'e2m_note_edit', array ('*note' => $this->noteRecord) ); if($this->noteRecord['IsPublished'] and !$this->noteRecord['IsVisible']) { $this->noteCTree['show-href']=jv('e2m_note_flag', [ '*note' => $this->noteRecord, 'flag' => 'IsVisible', 'value' => 1 ]); } if($this->noteRecord['IsPublished']) { $this->noteCTree['favourite-toggle-href']=jv( 'e2m_note_flag_favourite', [ '*note' => $this->noteRecord, 'value' => !$this->noteRecord['IsFavourite'] ] ); } } if(Log::$p3)__log('}'); if(Log::$p3)__log('}'); } } function vm($ce){ global$_config; $ae=$_config['share_to']; $qe='|twitter|facebook|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $lv['twitter']['via']=$_config['share_to_twitter_via']; } if(count($ce) > 0){ $le=$ce[0]; $qe.='pinterest|'; $lv['pinterest']['media']=$le; } $ze=[]; foreach(explode(',',$ae) as $ke){ $ke=trim($ke); if(strstr($qe,'|'. $ke. '|')) { $ze[$ke]['share?']=true; if ($lv[$ke]) { $ze[$ke]['data']=$lv[$ke]; } } } return $ze; } function e2m_note($parameters=[]) { global$settings,$_config,$_strings; if(Log::$p3)__log('Note {'); $y2=$parameters['*note']; if ($y2==false) return e2_error404_mode(); $xe=hm($y2); $ee=rm($y2); $re=r2(); $te=($parameters['preview-key']==$xe); if (!empty ($parameters['preview-key']) and !$te) return e2_error404_mode(); if (!$re and !$te and $ee!=='public') return e2_error404_mode(); if (!empty ($parameters['preview-key']) and $ee==='public'){ unset($parameters['preview-key']); $je=jv('e2m_note',$parameters); c($je); } $je=jv('e2m_note',$parameters); $noteView=new AeNoteView($y2); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($re and !@$_config['read_only']); if ($ee==='draft' or $ee==='scheduled'){ if (!$te){ $he=[ '.note-id' => $y2['ID'], 'form-action' => jv('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-note'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], ]; if(E2_EDITION){ $he['can-schedule?']=true; $he['stamp-formatted']=''; if ($ee==='scheduled'){ $he['stamp-formatted']=ky( 'd.m.Y H:i:s',$y2['Stamp'],dy($y2) ); } $he['submit-schedule-text']=$_strings['fb--publish-note-at-this-time']; } } } $ge=[]; if ($ee==='public'){ $noteView -> setWantNewCommentsCount($re); $noteView -> setWantSharingButtons($settings['appearance']['show_sharing_buttons']); $noteView -> setWantRelatedNotes(true); if(Log::$p3)__log('Navigation {'); $we=fm($y2,'prev'); $ue=fm($y2,'next'); if ($we){ $ge['prev-href']=jv('e2m_note', array ('*note' => $we)); $ge['prev-title']=h3(htmlspecialchars($we['Title'],ENT_NOQUOTES,HSC_ENC)); } if ($ue){ $ge['next-href']=jv('e2m_note', array ('*note' => $ue)); $ge['next-title']=h3(htmlspecialchars($ue['Title'],ENT_NOQUOTES,HSC_ENC)); } $ge['title']=$_strings['nm--posts']; $ge['timeline?']=false; $ge['this-title']=h3(htmlspecialchars($y2['Title'],ENT_NOQUOTES,HSC_ENC)); if(Log::$p3)__log('}'); if(Log::$p3)__log('Comments {'); $ie=''; $oe=false; $pe=false; $c6=array(); if ($re){ $v6=e2_note_cache_filename_with_id_($y2['ID'] .'-comments-author'); } else { $v6=e2_note_cache_filename_with_id_($y2['ID'] .'-comments'); } $b6=null; if(CACHE_NOTES_COMMENTS and is_file($v6)) { $b6=@unserialize(file_get_contents($v6)); } if(is_array($b6)) { if(Log::$p3)__log('retrieve cached ctree'); $ie=$b6; } else { if(Log::$p3)__log('assemble ctree...'); $y6=m2($y2['ID']); $n6=array(); $m6=true; foreach ($y6 as $t => $f6){ if ($f6['IsVisible']) { $d6=uf( $y2, $f6, $t+1 ); if ($d6['new?'] and $m6){ $d6['first-new?']=true; $m6=false; } $n6[] = $d6; } } $ie=$n6; if(CACHE_NOTES_COMMENTS)n3($v6,serialize($ie)); } if (!@$_config['read_only'] and d2($y2)) { $s6=c2($y2); $s6['.comment-number']=count($ie)+1; } if(Log::$p3)__log('} // Comments'); } if(E2_EDITION){ if (!$te){ $noteView -> setWantPreviewHref(true); } } $a6=$noteView -> getNoteCTree(); if(E2_EDITION){ if ($te){ unset ($a6['href']); $ge=[]; } } if ($re and d2($y2,NOTE_COMMENTABLE_NOW_CONDITIONALLY)) { if ($y2['IsCommentable']) { $c6['href']=jv('e2m_note_flag', array ( '*note' => $y2, 'flag' => 'IsCommentable', 'value' => 0, )); $c6['text']=$_strings['bt--close-comments-to-post']; } else { $c6['href']=jv('e2m_note_flag', array ( '*note' => $y2, 'flag' => 'IsCommentable', 'value' => 1, )); $c6['text']=$_strings['bt--open-comments-to-post']; } } if ($re and $a6['new-comments-count'] > 0){ if(Log::$p3)__log('mark comments as not new'); e2_drop_caches_for_note_($q6,true); nn('Comments', array ('IsNew' => 0), array ('NoteID' => $y2['ID'])); } if ($re and ($y2['FormatterID']=='calliope')) { if(is_file(USER_FOLDER.'calliope/WikiFormatter.php')) { $a6['text']=w3().$a6['text']; } } $d=[ 'title' => $y2['Title'], 'notes' => ['only' => $a6], 'pages' => $ge, 'summary' => $a6['summary'], ]; if ($ie) $d['comments']['each']=$ie; if ($c6) $d['comments']['toggle']=$c6; $d['comments']['count']=$a6['comments-count']; $d['comments']['count-text']=$a6['comments-count-text']; $d['comments']['new-count']=$a6['new-comments-count']; $d['comments']['new-count-text']=$a6['new-comments-count-text']; $d['comments']['display-form?']=d2($y2); if (!empty ($s6)) { $d['form']='form-comment'; $d['form-comment']=$s6; } if (!empty ($he)) { $d['form']='form-note-publish'; $d['form-note-publish']=$he; } if(Log::$p3)__log('} // Note'); return $d; } function e2m_note_read($parameters=array ()) { global$_config; if (!$_config['count_reads']) { die ('Read counting disabled'); } if(Log::$p3)__log('Note read {'); $y2=$parameters['*note']; en( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `ReadCount` = `ReadCount` + 1 ". "WHERE `ID` = ". $y2['ID'] ); $l6=time(); $l6=$l6 - ($l6 % SECONDS_IN_AN_HOUR); yn( 'Actions', [ 'EntityID' => $y2['ID'], 'Stamp' => $l6, 'ReadCount' => 1, ], 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); if(Log::$p3)__log('}'); c(jv('e2m_note',$parameters)); } function e2m_note_withdraw($parameters=array ()) { global$_strings; $oq=$parameters['*note']; if (!$oq) return e2_error404_mode(); if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_note', array ('*note' => $oq))); } $z6=jv('e2m_note_broadcast', array ('*note' => $oq)); $oq['IsPublished']=0; $oq['IsCommentable']=0; $oq['IsVisible']=1; $oq['Stamp']=time(); $oq['IP']=k2(); if($parameters['alias']) { $oq['OriginalAlias']=$parameters['alias']; } else { $oq['OriginalAlias']=cm( 'find','n',$oq['ID'],$oq['Title'] ); } e2_drop_caches_for_note_($oq['ID'],null); if ($oq['IsFavourite']) { @unlink(CACHE_FILENAME_FAVS); } nn('Notes',$oq); xa($oq['ID']); p3($z6); cm('set','n',$oq['ID'],''); c(jv('e2m_note', ['*note' => $oq])); } function e2m_note_delete($parameters=array()) { global$_strings; $oq=$parameters['*note']; if (!$oq) return e2_error404_mode(); $ee=rm($oq); $k6=!$oq['IsPublished']; if ($k6){ $x6=e2l_get_string('gs--draft-will-be-deleted', array ( 'draft' => htmlspecialchars($oq['Title'],ENT_NOQUOTES,HSC_ENC), )); } else { $x6=e2l_get_string('gs--post-will-be-deleted', array ( 'post' => htmlspecialchars($oq['Title'],ENT_NOQUOTES,HSC_ENC), )); } $e6=$k6? $_strings['pt--draft-deletion']:$_strings['pt--post-deletion']; $r6=array ( '.note-id' => $oq['ID'], '.is-draft' => (int)$k6, 'note-title' => htmlspecialchars($oq['Title'],ENT_COMPAT,HSC_ENC), 'caution-text' => $x6, 'form-action' => jv('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int)$k6, ); if ($ee==='public'){ $r6['hide-href']=jv( 'e2m_note_flag', [ '*note' => $parameters['*note'], 'flag' => 'IsVisible', 'value' => 0 ] ); } if ($oq['IsPublished']) { $r6['withdraw-href']=jv( 'e2m_note_withdraw',$parameters ); } $d=array ( 'title' => $e6. ': '. htmlspecialchars($oq['Title'],ENT_NOQUOTES,HSC_ENC), 'heading' => $e6, 'form' => 'form-note-delete', 'form-note-delete' => $r6, ); return $d; } function e2m_note_flag_favourite($parameters){ global$_config; $parameters['flag']='IsFavourite'; s([ 'flag-name' => 'favourite', 'candy-name' => 'e2m_note_flag_favourite', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ bm($parameters); }, ]); } function e2m_note_flag($parameters){ bm($parameters); c(jv('e2m_note',$parameters)); } function bm($parameters){ $q6=$parameters['*note']['ID']; if (!is_numeric($q6)) { return e2_error404_mode(); } e2_drop_caches_for_note_($q6,$parameters['*note']['IsPublished']); if($parameters['flag']=='IsFavourite'){ @unlink(CACHE_FILENAME_FAVS); } if($parameters['flag']=='IsVisible'){ qs(); } nn('Notes', array ( 'ID' => $q6, $parameters['flag'] => (int) ($parameters['value']==1), )); try { cy(mm($q6)); } catch (AeMySQLException $e){ kv($e,'Could not broadcast note flag change'); } return true; } function e2m_note_use_formatter($parameters){ $q6=$parameters['*note']['ID']; if (!is_numeric($q6)) { return e2_error404_mode(); } e2_drop_caches_for_note_($q6,$parameters['*note']['IsPublished']); if(in_array($parameters['formatter'], array ('calliope','raw','neasden'))) { nn('Notes', array ( 'ID' => $q6, 'FormatterID' => $parameters['formatter'], )); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function ym($t6,$parameters=array ()) { global$full_blog_url,$_strings,$_config; $e6=$_strings['pt--new-post']; $j6=$_strings['pt--new-post']; $q6='new'; $h6=$_config['default_formatter']; if ($t6=='edit'){ $oq=$parameters['*note']; if (!$oq) return e2_error404_mode(); if ($oq){ $g6=(string)$oq['Summary']; if ($oq['IsPublished']) { $j6=$_strings['pt--edit-post']; $w6=''; $o7=$parameters['alias']; } else { $j6=$_strings['pt--edit-draft']; $w6=cm( 'find','n',$oq['ID'],$oq['Title'] ); if (@$oq['OriginalAlias']) { $o7=$oq['OriginalAlias']; } else { $o7=$w6; } } } $q6=$oq['ID']; $h6=$oq['FormatterID']; $e6=$oq['Title']; } $u6=sf(); $i6=array(); if ($u6!==null) foreach ($u6 as $o6){ $i6[] = $o6['tag']; } $p6=array(); if ($t6=='edit' and count($i6)) { $u6=yf($oq['ID']); foreach ($u6 as $o6){ $p6[] = htmlspecialchars($o6['Keyword'],ENT_NOQUOTES,HSC_ENC); } } $cr=array(); foreach ($i6 as $o6){ $vr['name']=$o6; $vr['selected?']=in_array($o6,$p6); $cr[] = $vr; } $br=''; $p6=implode(', ',$p6); if ($p6)$br=$p6; if ($t6=='write'){ $yr=$_strings['fb--save-and-preview']; } if ($t6=='edit'){ if(array_key_exists('draft',$parameters)) { $yr=$_strings['fb--save-and-preview']; } else { $yr=$_strings['fb--save-changes']; } } $hs=[]; if ($t6=='edit'){ $hs=g3( $oq['FormatterID'],$oq['Text'],'full' ); } $gs=@unserialize( $oq['Uploads'] ) or $gs=[]; $nr=qb( fb( sb( $hs,$gs ) ) ); if ($t6=='edit'){ k3( 'Notes', $oq, $hs ); } $y4=min($oq['Stamp'],time()); if(E2_EDITION){ $y4=$oq['Stamp']; } $sq=r3(); $aq=t3($sq); $ql=dy($oq); $ee=rm($oq); $d['title']=$e6; $d['heading']=$j6; $d['form']='form-note'; $d['uploads'] = [ 'enabled?' => $aq, 'each' => $nr, 'upload-action' => jv('e2j_file_upload'), 'remove-action' => jv('e2j_file_remove'), ]; $d['form-note'] = [ '.note-id' => $q6, '.formatter-id' => $h6, '.last-modified-stamp' => (int)$oq['LastModified'], '.published?' => (bool)$oq['IsPublished'], '.old-tags-hash' => md5($br), '.action' => $t6, 'form-action' => jv('e2s_note_process'), 'form-note-livesave-action' => jv('e2j_note_livesave'), 'create:edit?' => (bool) ($t6=='write'), 'title' => htmlspecialchars($oq['Title'],ENT_COMPAT,HSC_ENC), 'tags' => $br, 'tags-info' => $cr, 'text' => htmlspecialchars($oq['Text'],ENT_NOQUOTES,HSC_ENC), 'all-tags' => $i6, 'stamp-formatted' => ky('d.m.Y H:i:s',$y4,$ql), 'time' => $oq['IsPublished']? [(int)$y4,$ql]:false, 'draft?' => $ee==='draft', 'uploads-enabled?' => $aq, 'summary' => $g6, 'alias-autogenerated' => $w6, 'alias' => $o7, 'submit-text' => $yr, 'space-usage' => j3($sq), ]; if ($t6=='edit'){ $d['related-delete-href']=jv( 'e2m_note_delete', array ('*note' => $oq) ); } return $d; } function e2m_note_edit($parameters=array ()) { return ym('edit',$parameters); } function e2m_write(){ return ym('write'); } function e2s_note_process(){ global$_fp_error,$_strings; $q6=km(); if (!$q6){ if($_fp_error==FP_TITLE_OR_TEXT_EMPTY){ mv($_strings['er--post-must-have-title-and-text'],E2E_USER_ERROR); } elseif($_fp_error==FP_NO_ID_OR_NEW){ } else { mv($_strings['er--error-occurred']); } c(jv('e2m_write')); } try { $y2=mm($q6); c(jv('e2m_note', ['*note' => $y2])); } catch (AeMySQLException $e){ kv($e,'Could not get note by ID'); c(); } die; } function e2s_note_publish(){ global$_strings,$_config,$settings; $q6=false; if(array_key_exists('note-id',$_POST)) { $q6=$_POST['note-id']; $mr=false; $oq=mm($q6); $fr=$oq['OriginalAlias']; $dr=$oq['Stamp']; $sr=!$oq['IsExternal']; if(E2_EDITION){ if (@$_POST['submit-button']=='schedule'){ $mr=@$_POST['stamp']; } if ( (is_dir(USER_FOLDER) and !is_writable(USER_FOLDER)) or ( is_file(USER_FOLDER.'scheduled.psa') and !is_writable(USER_FOLDER.'scheduled.psa') ) ) { fv(); c(jv('e2m_note', ['*note' => $oq])); } } $oq['ID']=$q6; $oq['IsVisible']=1; $oq['IsPublished']=1; $oq['IsCommentable'] = (int)$settings['comments']['default_on']; $oq['IsFavourite']=0; if(array_key_exists('browser-offset',$_POST)) { $ql=wy(@$_POST['browser-offset']); } else { $ql=ay(); } if ($mr and $y4=zm($mr,$ql)) { $oq['Stamp']=$y4; if(E2_EDITION){ if ($y4 > time())wm($oq); } } elseif ($sr){ $oq['Stamp']=time(); } else { $oq['Stamp']=$dr; } if (ka($oq)) { $oq['IsIndexed']='1'; } if ($ql){ $oq['Offset'] = (int)$ql['offset']; $oq['IsDST'] = (int)$ql['is_dst']; } e2_drop_caches_for_note_($q6,null); nn('Notes',$oq); $o7=''; if ($fr or $fr==='0'){ $o7=cm('set','n',$q6,$fr); $oq['OriginalAlias']=$o7; } if ($o7!=$fr){ nn('Notes',$oq); } if ($ee==='public'){ cy($oq); } c(jv('e2m_note', array ('*note' => $oq))); } c(); } function nm($q6,$ar=-1){ global$_config; $qr=true; if ($ar){ $qr=false; } if ($ar === -1){ $qr=null; } e2_drop_caches_for_note_($q6,$qr); if (!$ar or $ar === -1) { @unlink(CACHE_FILENAME_FAVS); } en( "DELETE FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$q6) ."'", 'delete note by ID' ); xa($q6); en( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 'n' ". "AND `EntityID`=". ((int)$q6), 'delete aliases after deleting note' ); en( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". ((int)$q6), 'delete tag bindings after deleting note' ); } function e2s_note_delete(){ global$_strings,$_config; $q6=$_POST['note-id']; $ar=(bool)$_POST['is-draft']; $oq=mm($q6); $z6=jv('e2m_note_broadcast', array ('*note' => $oq)); nm($q6,$ar); p3($z6); if ($ar){ c(jv('e2m_drafts', ['page' => 1])); } else { c(); } die; } function e2j_note_livesave(){ die (km('ajaxresult')); } function mm($ks){ global$_config; en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $ks ."'" ); $ib=rn(); if(count($ib) > 0){ return $ib[0]; } else { return false; } } function fm($y2,$lr,$zr=1){ global$_strings,$_config; $kr=($lr=='next')?'>':'<'; $xr=($lr=='next')?'':'DESC '; try { en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". $zr ." ". "AND `Stamp` ". $kr ." '". $y2['Stamp'] ."' ". tm(r2()). "ORDER BY `Stamp` ". $xr . "LIMIT 1", 'get '. $lr .' note' ); $ib=rn(); if(count($ib) > 0) return $ib[0]; else return false; } catch (AeMySQLException $e){ kv($e,'Could not get '. $lr .' note'); return null; } } function dm($er){ global$_config; if(Log::$p3)__log('Lastmodifieds for Local Copier'); if(CACHE_LASTMODIFIEDS and is_file(CACHE_FILENAME_LASTMODIFIEDS)) { $rr=@unserialize(file_get_contents(CACHE_FILENAME_LASTMODIFIEDS)); if ($rr['ids_csv']==$er){ if(Log::$p3)__log('Returned from cache'); return $rr['lastmodifieds_json']; } } $b='`ID`='. str_replace(',',' OR `ID`=',$er); $tr=array(); en( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")", 'get lastmodifieds for Local Copier' ); if(Log::$p3)__log('Requested from DB'); $a1=rn(); foreach ($a1 as $t => $kf){ $tr[(int)$kf['ID']] = (int)$kf['LastModified']; } $jr=json_encode($tr); if ($jr=='[]')$jr='{}'; $rr=array ( 'ids_csv' => $er, 'lastmodifieds_json' => $jr, ); if(CACHE_LASTMODIFIEDS){ n3(CACHE_FILENAME_LASTMODIFIEDS,serialize($rr)); } return $jr; } function sm($hb,$jb,$tb=false){ global$_config; list ($gr,$wr)=jy($hb,$jb,$tb); en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` AND (`Stamp` BETWEEN " .$gr. " AND " .$wr. ") ". "ORDER BY Stamp", 'get all notes for the date '. $tb .'.'. $jb .'.'. $hb ); $d=[]; foreach (rn() as $ur){ if(is_numeric($tb)) { $ir=((int)$hb) .'/'. ((int)$jb) .'/'. ((int)$tb) == ky('Y/n/j',$ur['Stamp'],dy($ur)); } elseif(is_numeric($jb)) { $ir=((int)$hb) .'/'. ((int)$jb) == ky('Y/n',$ur['Stamp'],dy($ur)); } else { $ir=((int)$hb) == ky('Y',$ur['Stamp'],dy($ur)); } if ($ir)$d[] = $ur; } return $d; } function e2_published_noterec_with_parameters_($parameters=array ()) { $y2=e2_noterec_with_parameters_($parameters); if ($y2['IsPublished']) return $y2; } function e2_noterec_with_parameters_($parameters=array ()) { global$_config; $y2=false; $or_=false; if ((string) @$parameters['oalias']!=='')$or_=$parameters['oalias']; if ((string)$or_!==''){ en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias` = '". $or_ ."' ". "AND `IsPublished` = 0", 'get note record by original alias' ); $y2=rn(); if(count($y2)===1) { $y2=@$y2[0]; if ($y2) return $y2; } } $pr=false; if (@$parameters['draft']!=='') $pr=$parameters['draft']; if (@$parameters['draft2']!=='')$pr=$parameters['draft2']; if ($pr){ $y2=mm($pr); return $y2; } if ((string)$or_!==''){ $parameters['alias']=$or_; } if ((string) @$parameters['alias']!==''){ if ($ct=pn(@$parameters['alias'])) { if ($ct['type']=='n'){ $y2=mm($ct['id']); if ($y2['IsPublished']) return $y2; } } } $vt=sm($parameters['year'],$parameters['month'],$parameters['day']); if (@$vt[$parameters['day-number']-1]) { return $vt[$parameters['day-number']-1]; } } function lm($e6,$tv,$ql,$bt){ global$_config; ls(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $y2=array ( 'Title' => $e6, 'Text' => $tv, 'FormatterID' => $_config['default_formatter'], 'OriginalAlias' => cm('find','','',$e6), 'Uploads' => $bt, 'Stamp' => (int)time(), 'LastModified' => (int)time(), ); if ($ql and is_array($ql)) { $y2['Offset'] = (int)$ql['offset']; $y2['IsDST'] = (int)$ql['is_dst']; } $y2=yn('Notes',$y2); return $y2['ID']; } function zm($yt,$ql){ $nt='/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if(preg_match($nt,$yt,$jb)) { $y4=gmmktime($jb[4],$jb[5],$jb[6],$jb[2],$jb[1],$jb[3]); $y4 -= ly($ql,$y4); return $y4; } else { return false; } } function km($mt=''){ global$_fp_error,$_config,$_e2utf8__unformat_htmlentity_neasden,$_db; if(Log::$p3)__log('Process note form'); try { $_fp_error=false; $q6=$e6=$ft=$tv=$dt=''; if(array_key_exists('note-id',$_POST)) $q6=$_POST['note-id']; if(array_key_exists('title',$_POST)) $e6=trim($_POST['title']); if(array_key_exists('tags',$_POST)) $ft=$_POST['tags']; if(array_key_exists('text',$_POST)) $tv=trim($_POST['text'],"\r\n"); if(array_key_exists('summary',$_POST)) $g6=trim($_POST['summary'],"\r\n"); if(array_key_exists('old-tags-hash',$_POST)) $dt=$_POST['old-tags-hash']; if(is_array($ft))$ft=implode(', ',$ft); $ft=trim($ft); if ($q6=='new'){ $_e2utf8__unformat_htmlentity_neasden=($_config['default_formatter']=='neasden'); } else { $_e2utf8__unformat_htmlentity_neasden=($_POST['formatter-id']=='neasden'); } $st=vn('Notes'); if(stripos($st['Collation'],'utf8mb4')!==0){ $e6=nb($e6); $ft=nb($ft); $tv=nb($tv,true); } $at=$tv; $at=str_replace("\n",'\n'."\n",$at); $at=str_replace("\r",'\r'."\r",$at); $qt=n(',',$ft,'sort'); $ft=implode(', ',$qt); $lt=md5($ft); if(array_key_exists('browser-offset',$_POST)) { $ql=wy(@$_POST['browser-offset']); } else { $ql=ay(); } $zt=@$_POST['old-stamp']; $mr=@$_POST['stamp']; $o7=@$_POST['alias']; if ($q6!='new'){ $kt=mm($q6); } else { $kt=array(); } if ($q6){ if ((string)$e6!=='' and (string)$tv!==''){ if ($q6=='new'){ $bt=''; if(is_file(USER_FOLDER.'new-uploads.psa')) { $bt=@file_get_contents(USER_FOLDER.'new-uploads.psa'); } try { $q6=lm($e6,$tv,$ql,$bt); @unlink(USER_FOLDER.'new-uploads.psa'); $xt=array ( '*note' => mm($q6), ); $et=[ 'success' => true, 'data' => [ 'status' => 'created', 'id' => $q6, 'note-url' => jv('e2m_note',$xt), 'note-edit-url' => jv('e2m_note_edit',$xt) ] ]; $a1=(int)$q6; } catch (AeMySQLException $e){ kv($e,'Could not insert note'); $et=[ 'success' => false, 'error' => [ 'message' => 'Cannot create record' ] ]; $a1=false; } } else { e2_drop_caches_for_note_($q6,$kt['IsPublished']); $rt=$kt; $rt['ID']=$q6; $rt['Title']=$e6; $rt['Summary']=$g6; $rt['Text']=$tv; $rt['FormatterID']=$kt['FormatterID']; $rt['LastModified']=time(); $rt['IsIndexed']='0'; if ($rt['FormatterID']==='calliope'){ $rt['FormatterID']=$_config['default_formatter']; } if ($zt!=$mr){ if ($y4=zm($mr,$ql)) { $rt['Stamp']=min($y4,time()); if(E2_EDITION){ $rt['Stamp']=$y4; if ($y4 > time())wm($rt); } } } $i7=$o7; if ((string)$o7!==''){ $tt=$o7; } elseif (!$kt['IsPublished']) { $tt=$e6; } else { $tt=''; } if ($kt['IsPublished']) { $i7=cm( 'set','n',$q6,$tt ); $xt=array ( '*note' => $rt, 'alias' => $i7, ); } else { $jt=true; $i7=cm('find','n',$q6,$tt); $rt['OriginalAlias']=$i7; $xt=array ( '*note' => $rt, 'alias' => $i7, ); } $hs=g3( $rt['FormatterID'],$rt['Text'],'full' ); if(count($hs) > 0){ eb($hs); rb($hs); } try { nn('Notes',$rt); if ($rt['IsPublished']) { if (ka($rt)) { $rt['IsIndexed']='1'; nn('Notes',$rt); } if ($zt!=$mr){ un(true); } cy($rt); } $et=[ 'success' => true, 'data' => [ 'status' => 'saved', 'new-alias' => $i7, 'note-url' => jv('e2m_note',$xt), 'note-edit-url' => jv('e2m_note_edit',$xt) ] ]; $a1=(int)$q6; } catch (AeMySQLException $e){ kv($e,'Could not update record'); $et=[ 'success' => false, 'error' => [ 'message' => 'Cannot update record ('. mysqli_error(). ')' ] ]; $a1=false; } } if ($lt!=$dt){ nf(array ('NoteID' => $q6)); foreach ($qt as $sm){ $ht=af($sm); if (!$ht){ $ht['ID']=ff($sm); } en( "INSERT INTO `". $_config['db_table_prefix']."NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$_config['db_table_subset']) .", ". ((int)$q6) .", ". ((int)$ht['ID']). ")", 'add new tag bindings' ); } } if ( $mt!='ajaxresult' and $a1 and $_POST['instant-publish']=='yes' ){ $_POST['note-id']=$q6; e2s_note_publish(); } } else { $et=[ 'success' => false, 'error' => [ 'message' => 'Title or text is empty' ] ]; $_fp_error=FP_TITLE_OR_TEXT_EMPTY; $a1=false; } } else { $et=[ 'success' => false, 'error' => [ 'message' => 'No note id/new specified' ] ]; $_fp_error=FP_NO_ID_OR_NEW; $a1=false; } if($_config['backup_automatically']) { jn(); } } catch (AeMySQLException $e){ kv($e); $et=[ 'success' => false, 'error' => [ 'message' => 'Database error' ] ]; $a1=false; } if ($mt=='ajaxresult') return json_encode($et); else return $a1; } function xm($gt,$wt){ global$_config; if (!($gt and $wt) and !r2()) { if(Log::$p3)__log('Error: e2_notes_count_generic called for invisible items unsecurely'); return null; } if (!is_bool($gt) or !is_bool($wt)) { if(Log::$p3)__log ('Error: e2_notes_count_generic called with non-bool params'); return null; } if (!$gt and !$wt){ if(Log::$p3)__log ('Error: e2_notes_count_generic called with nonsensical parameters'); return null; } $ut=( CACHES_FOLDER . 'notes-count-p'. (int)$gt . ($gt ? ('v'. (int)$wt):'') . '.txt' ); $a1=false; if(CACHE_NOTES_COUNTS and is_file($ut)) { $a1=@file_get_contents($ut); } if(is_numeric($a1) and $a1 > 0){ return $a1; } else { $a1=null; try { en( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". (int)$gt. " ". ($gt ? ( "AND `IsVisible`=". (int)$wt ):""), 'count notes with flags p'. (int)$gt . ($gt ? ('v'. (int)$wt):'') ); $a1=rn(); $a1=$a1[0]['NotesCount']; if(CACHE_NOTES_COUNTS)n3($ut,$a1); } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not count notes'); } return $a1; } } function em($tv){ $g6=$tv; $g6=preg_match( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/mu', $g6, $y3 ); $g6=$y3[3]; if (!$g6)$g6=$tv; if(mb_strlen($g6) <= 50)$g6=$tv; $g6=str_replace(array ( '<p>','<blockquote>','<ul>','<ol>','<br />', ), "\n",$g6); $g6=trim(strip_tags($g6)); if(mb_strlen($g6) > 50){ $it=mb_strpos($g6,"\n",50); } else { $it=mb_strrpos($g6,"\n"); } if ($it!==false){ $g6=mb_substr($g6,0,$it); $g6=trim($g6,' :.()'."\n"); } if(preg_match('/^(.{100,}?)(?:[:.!?()]|'."\n".')/su',$g6,$y3)) { $g6=trim($y3[0],' :.()'."\n"); } if(preg_match('/^(.{150,}?)[:.!?(),]/su',$g6,$y3)) { $g6=trim($y3[0],' :.(),'."\n"); } if(preg_match('/^(.{200,}?)[:.!?(), ]/su',$g6,$y3)) { $g6=trim($y3[0],' :.()'."\n"); } $g6=preg_replace('/[ \n\r\t]+/su',' ',$g6); if(mb_substr($g6, -1)==='.')$g6=mb_substr($g6,0, -1); if(mb_substr($g6, -1)===':')$g6=mb_substr($g6,0, -1); if(mb_substr($g6, -1)==='!')$g6=mb_substr($g6,0, -1); if(in_array($g6[mb_strlen($g6)-1], array (',',' '))) { $g6=trim($g6,', '). '...'; } if(mb_strlen($g6) > 250){ $g6=trim(mb_substr($g6,0,250)). '...'; } return $g6; } function rm($y2){ $ot=false; if(E2_EDITION){ $ot=($y2['Stamp'] > time()); } if ($y2['IsPublished']) { if ($ot){ return 'scheduled'; } else { if ($y2['IsVisible']) { return 'public'; } else { return 'hidden'; } } } else { return 'draft'; } } function tm($re=false){ if ($re){ return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time() .') '; } } function e2_populate_read_counts_in_notes_ctree_($pt){ global$_config; $c5=array(); foreach ($pt as $t => $a6){ if (@$a6['id']) { $c5[] = "(`ID` = ". $a6['id'].")"; } } if(count($c5)) { $c5=implode(' OR ',$c5); try { en( "SELECT `ID`, `ReadCount` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $c5 .")", 'get read counts to populate notes CTree' ); $ib=rn(); foreach ($ib as $vv){ $v5[$vv['ID']] = $vv['ReadCount']; } foreach ($pt as $t => $a6){ if (empty ($pt[$t]['read-count'])) { $pt[$t]['read-count']=$v5[$a6['id']]; } } } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not populate read counts in notes ctree'); } } return $pt; } function hm($y2){ if(E2_EDITION){ return md5($y2['Text'].$y2['LastModified']); } return ''; } if(E2_EDITION){ function gm(){ $fb=USER_FOLDER.'scheduled.psa'; if (!is_file($fb)) return; if(Log::$p3)__log('Check notes schedule'); $scheduled=(array) @unserialize(file_get_contents($fb)); $b5=array(); $y5=array(); $n5=false; foreach($scheduled as $m5){ if(time() >= @$m5['stamp']) { if (!$n5)qs(); $n5=true; if ($f5[$m5['id']]) continue; $f5[$m5['id']] = true; try { vy(jv( 'e2m_note_json', array ('*note' => mm($m5['id'])) )); } catch (AeMySQLException $e){ kv($e,'Could not broadcast a note published by schedule'); } } else { $b5[] = $m5; } } foreach ($b5 as $m5){ if (!@$f5[$m5['id']]) { $y5[] = $m5; } } if ($n5){ if(count($y5)) { @n3($fb,serialize($y5)); } else { @unlink($fb); } } } function wm($oq){ $fb=USER_FOLDER.'scheduled.psa'; $scheduled=@unserialize(file_get_contents($fb)); if (!is_array($scheduled))$scheduled=array(); $scheduled[] = array ( 'id' => $oq['ID'], 'stamp' => $oq['Stamp'], ); @n3($fb,serialize($scheduled)); } function um($q6){ global$_config,$_strings,$_current_url; $re=r2(); $relatedNotesCollectionView=new AeArbitraryNotesCollectionView('related notes'); $relatedNotesCollectionView -> setCurrentURL($_current_url); if(CACHE_NOTES_RELATED){ $relatedNotesCollectionView -> setCacheFilename(CACHES_FOLDER.'note-'. $q6 .'-related.psa'); } $relatedNotesCollectionView -> setSQLRequest( "SELECT * FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". tm($re). "AND `ID` IN (". "SELECT `NoteID` FROM (". "SELECT `NoteID`, COUNT(`KeywordID`) `KeywordsCount` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID` IN (". "SELECT `KeywordID` FROM `". $_config['db_table_prefix'] ."NotesKeywords`". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID` = ". $q6 ."". ") ". "AND `NoteID` != ". $q6 ." ". "GROUP BY `NoteID` ". "ORDER BY `KeywordsCount` DESC ". ") As RelatedNotesIDs". ") ". "ORDER BY MD5(`ID`+". ($q6*2) .") DESC ". "LIMIT 7" ); $d5=$relatedNotesCollectionView -> getNotesCTree(); if(count($d5)) { $me=[ 'each' => $d5, 'seed' => $q6, 'title' => $_strings['nm--read-next'], ]; } else { $me=[]; } return $me; } } function e2m_drafts($parameters){ global$_strings,$_config; $re=r2(); $draftsView=new AePageableNotesView('e2m_drafts',$parameters); $draftsView -> setPortionSize((int)$_config['drafts_per_page']); $draftsView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $draftsView -> setWantPaging(true); $draftsView -> setUseLocalHrefs(true); if($draftsView -> isFirstPage() and CACHE_DRAFTS){ $draftsView -> setCacheFilename(CACHE_FILENAME_DRAFTS); } $draftsView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `LastModified` DESC" ); $s5=$draftsView -> getNotesCTree(); if(count($s5)) { if(Log::$p3)__log('Thumbnails {'); foreach ($s5 as $t => $kf){ $s5[$t]['thumbs']=qb(@$kf['format-info']['resources-detected']); } if(Log::$p3)__log('}'); } $d=[ 'title' => $_strings['pt--drafts'], 'heading' => $_strings['pt--drafts'], 'notes' => $s5, 'pages' => $draftsView -> getPagesCTree(), ]; if($draftsView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-drafts']; } elseif (!$draftsView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function im($a5){ global$_config; if(Log::$p3)__log('Drafts: find duplicate OriginalAliases...'); if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $q5=@unserialize(file_get_contents(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_array($q5)) { if(Log::$p3)__log('Drafts: retrieve cached'); } else { if(Log::$p3)__log('Drafts: assemle cacheable...'); $q5=array(); en( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `ID`", 'get original aliases of drafts to calculate use counts' ); $a1=rn(); $l5=array(); foreach ($a1 as $t => $y2){ @$q5[$y2['OriginalAlias']] ++; } if(CACHE_DRAFTS_ALIAS_USE_COUNTS){ n3(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS,serialize($q5)); } } return $q5[$a5]; } function om(){ global$_strings,$_user_folder_name; $z5='http://'. $_strings['e2--website-host'] .'/'; $k5='('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; return [ 'built?' => BUILT, 'installed?' => (fn_()!==null), 'version' => 'v'. E2_VERSION, 'version-description' => $_strings['e2--vname-aegea'] .' '. $k5, 'user-folder-name' => $_user_folder_name, 'cookie-prefix' => b(), 'href' => $z5, 'about' => ( '<span title="E2 '.$k5 .'">'. $_strings['e2--powered-by'] .' '. '<a href="'. $z5 .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> '. '<span class="e2-svgi">'. ca('aegea') .'</span></a></span>' ), ]; } function pm($candy,$pt,$x5,$e5,$ge){ global$full_blog_url,$content, $_config, $_candies_indexable, $_candies_indexable_conditionally, $_template, $_newsfeeds, $_current_url; $meta['base-href']=$full_blog_url. '/'; $meta['current-href']=$_current_url; $meta['stylesheets']=ba(); $meta['scripts']=ya(); $meta['newsfeeds']=$_newsfeeds; $meta['favicon-type']='image/x-icon'; $meta['favicon-href']='favicon.ico'; if ($r5=md()) { $meta['favicon-type']=v3($r5); $meta['favicon-href']=$r5; $meta['apple-touch-icon-href']=md('square'); } $meta['navigation-links'] = [[ 'rel' => 'index', 'href' => jv('e2m_frontpage', ['page' => 1]), 'id' => 'link-index', ]]; if (!empty ($ge)) { foreach (['prev','next','earlier','later'] as $t5){ if(array_key_exists($t5 .'-href',$ge)) { $kr=$t5; if ($t5=='earlier')$kr='prev'; if ($t5=='later')$kr='next'; $meta['navigation-links'][] = [ 'rel' => $kr, 'href' => $ge[$t5 .'-href'], 'id' => 'link-'. $t5, ]; } } } $j5='noindex, follow'; if (@$_config['index_follow_everything']) { $j5='index, follow'; } if(in_array($candy,$_candies_indexable)) { $meta['robots']='index, follow'; } if(in_array($candy,$_candies_indexable_conditionally)) { $meta['robots']=$j5; } $meta['viewport']=$_template['meta_viewport']; if(is_file(MEDIA_ROOT_FOLDER.'manifest.json')) { $meta['manifest-href']=$full_blog_url. '/manifest.json'; } $meta['og-images'] = []; if(is_array($pt['only']['og-images'])) { $meta['og-images']=$pt['only']['og-images']; $meta['twitter-card']='summary_large_image'; } if(is_array($x5['og-images'])) { $meta['og-images']=$x5['og-images']; $meta['twitter-card']='summary_large_image'; } if (!count($meta['og-images'])) { $meta['og-images'] = array ($e5['userpic-large-href']); $meta['twitter-card']='summary'; } return$meta; } function cf(){ global$_superconfig,$_config; $h5=[ 'new-note-href' => jv('e2m_write'), 'drafts-href' => jv('e2m_drafts', ['page' => 1]), 'drafts-count' => (int)xm(false,true), 'settings-href' => jv('e2m_settings'), 'theme-preview-href' => jv('e2m_theme_preview', array ('theme' => '')), 'password-href' => jv('e2m_password', array ('recovery-key' => '')), 'database-href' => jv('e2m_database'), 'timezone-href' => jv('e2m_timezone'), 'sessions-href' => jv('e2m_sessions'), 'sign-out-href' => jv('e2m_sign_out'), ]; if (p()) { $h5['get-backup-href']=jv('e2m_get_backup'); } if (@$_config['read_only']) { unset ($h5['new-note-href']); unset ($h5['settings-href']); unset ($h5['timezone-href']); } if (@$_superconfig['disallow_themes_preview']) { unset ($h5['theme-preview-href']); } if (@$_superconfig['disallow_db_config']) { unset ($h5['database-href']); } list ($se,$g5,$w5)=n2(); if ($se){ $h5['new-comments-count']=$se; $h5['new-comments-href']=$w5; } return $h5; } function e2m_tags(){ global$_strings; $d['title']=$_strings['pt--tags']; $d['heading']=$_strings['pt--tags']; $d['tags']=df([]); $u5=sf(true); if ($u5===null){ $d['unavailable?']=true; } else { $d['tags']['each']=$u5; if(count($u5)==0){ $d['nothing']=$_strings['gs--no-tags']; } } return $d; } function e2m_tag($parameters=[]) { global $settings, $_config, $_current_tags, $_strings, $page, $full_blog_url; if(Log::$p3)__log('Tag {'); $re=r2(); $tagNotesView=new AePageableNotesView('e2m_tag',$parameters); $tagNotesView -> setPortionSize($settings['appearance']['notes_per_page']); $tagNotesView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $tagNotesView -> setWantPaging(true); $tagNotesView -> setWantNewCommentsCount($re); $tagNotesView -> setWantReadHrefs($_config['count_reads']); $tagNotesView -> setWantControls($re and !@$_config['read_only']); if(E2_EDITION){ $tagNotesView -> setWantPreviewHrefs(true); } $i5=[]; if(array_key_exists('*tags',$parameters)) { foreach($parameters['*tags'] as $a2){ if ($re or $a2['IsVisible']) { $i5[] = $a2; } } } if (!$i5[0]) return e2_error404_mode(); $o5=count($i5); $o6=$i5[0]; $p5=$parameters['tag-alias']; $_current_tags=[]; foreach ($i5 as $o6)$_current_tags[] = $o6['Keyword']; $tagNotesView -> setHighlightedTags($_current_tags); if(CACHE_TAG and $tagNotesView -> isFirstPage() and $o5===1){ if ($re){ $tagNotesView -> setCacheFilename(e2_cache_filename_with_id_($o6['ID'],CACHE_FILENAMES_TAG_AUTHOR)); } else { $tagNotesView -> setCacheFilename(e2_cache_filename_with_id_($o6['ID'],CACHE_FILENAMES_TAG)); } } foreach ($i5 as $o6) if ($o6)$cj[] = "nk.`KeywordID`=". $o6['ID']; $vj=( "FROM `". $_config['db_table_prefix'] ."Notes` n ". "JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (". implode(" OR ",$cj).") ". "AND IsPublished=1 ". tm($re). "GROUP BY n.`ID` ". "HAVING COUNT(*)>=". $o5 ); $tagNotesView -> setSQLCountRequest( "SELECT COUNT(*) Total FROM (SELECT 1 ". $vj .") _" ); $tagNotesView -> setLimitlessSQLRequest( "SELECT n.*, COUNT(*) ". $vj ." ". "ORDER BY n.`Stamp` DESC" ); $bj=mf($o6['ID'],5); $yj=''; $x5['description']=''; $x5['summary']=''; if ($o5==1){ if ($re){ $x5['edit-href']=jv( 'e2m_tag_edit', array ('tag-alias' => $p5) ); } if ((string)$o6['Description']!==''){ $l1=i3($o6['Description'],'full'); $cn=$l1['text-final']; $x5['description']=$cn; $x5['description-format-info']=$l1['meta']; na(@$l1['meta']['links-required']); } if ((string)$o6['Summary']!==''){ $x5['summary']=h3(htmlspecialchars($o6['Summary'],ENT_NOQUOTES,HSC_ENC)); } elseif ((string)$x5['description']!==''){ $x5['summary']=em($x5['description']); }; $nj=jv('e2m_tag_rss', array ('tag-alias' => $p5)); $mj=jv('e2m_tag_json', array ('tag-alias' => $p5)); ed( 'rss', yd() .': '. $o6['Keyword'], $nj ); ed( 'json', yd() .': '. $o6['Keyword'], $mj ); $x5['og-images']=d3( sb( $x5['description-format-info']['resources-detected'], q3('tag',$o6['ID']) ) ); $x5['name']=htmlspecialchars($o6['Keyword'],ENT_COMPAT,HSC_ENC); if(E2_EDITION){ $x5['popular']=z2($o6['ID']); $x5['related']=$bj; } $yj=htmlspecialchars($o6['PageTitle'],ENT_COMPAT,HSC_ENC); } $fj=$tagNotesView -> getTotalNotes(); $x5['notes-count']=$fj; $x5['notes-count-text']=e2l_get_string('pt--n-posts', array ('number' => $fj)); $dj=$x5['notes-count-text'] .' '. $_strings['gs--tagged']; $sj=[]; foreach ($i5 as $kf){ $sj[] = htmlspecialchars($kf['Keyword'],ENT_COMPAT,HSC_ENC); } $sj=implode(', ',$sj); if ((string)$yj!==''){ $e6=$yj; $j6=$yj; } else { $e6=yd() .': '. $dj .' '. $sj; if(count($i5) > 1){ $j6=$_strings['pt--tags'] .': '. $sj; } else { $j6=$_strings['pt--tag'] .': '. $sj; } } $fe=df($parameters); $d=[ 'title' => $e6, 'heading' => htmlspecialchars_decode($j6,ENT_COMPAT), 'notes' => $tagNotesView -> getNotesCTree(), 'pages' => $tagNotesView -> getPagesCTree(), 'tags' => $fe, ]; if ( !$tagNotesView -> isExistingPage() and !$tagNotesView -> isFirstPageOfEmptyView() ) { return e2_error404_mode(); } if ( $tagNotesView -> isFirstPageOfEmptyView() and !$re ){ return e2_error404_mode(); } if($tagNotesView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } if ((string)$x5['summary']!==''){ $d['summary']=$x5['summary']; } if(count($i5)==1){ $d['tag']=$x5; if (r2()) { $d['related-edit-href']=$x5['edit-href']; $d['related-edit-title']=$_strings['tt--edit-tag']; } } if(Log::$p3)__log('} // Tag'); return $d; } function e2m_tag_edit($parameters=array()) { global$_strings; if(array_key_exists('*tag',$parameters)) { $o6=$parameters['*tag']; } if (!$o6) return e2_error404_mode(); $hs=g3( 'neasden',$o6['Description'],'full' ); $gs=@unserialize( $o6['Uploads'] ) or $gs=[]; $nr=qb( fb( sb( $hs,$gs ) ) ); k3( 'Keywords', $o6, $hs ); $sq=r3(); $aj=[ 'enabled?' => t3($sq), 'each' => $nr, 'upload-action' => jv('e2j_file_upload'), 'remove-action' => jv('e2j_file_remove'), ]; $qj=array ( '.tag-id' => $o6['ID'], '.formatter-id' => 'neasden', 'form-action' => jv('e2s_tag_edit'), 'submit-text' => $_strings['fb--save-changes'], 'tag' => htmlspecialchars($o6['Keyword'],ENT_COMPAT,HSC_ENC), 'page-title' => htmlspecialchars($o6['PageTitle'],ENT_COMPAT,HSC_ENC), 'page-title-placeholder' => htmlspecialchars($o6['Keyword'],ENT_COMPAT,HSC_ENC), 'urlname' => htmlspecialchars($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'description' => htmlspecialchars($o6['Description'],ENT_COMPAT,HSC_ENC), 'summary' => (string)$o6['Summary'], 'favourite?' => (bool)$o6['IsFavourite'], 'space-usage' => j3($sq), ); $qj['.cache-sensitive-hash']=md5( $qj['tag'] . $qj['uploads'] . $qj['urlname'] ); $d=array ( 'body-uploads-enabled?' => t3($sq), 'title' => $_strings['pt--tag-edit'] .': '. $o6['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $qj, 'uploads' => $aj, 'related-delete-href' => jv('e2m_tag_delete', array ('*tag' => $o6)), ); return $d; } function e2m_tag_flag_ajax($parameters){ s([ 'flag-name' => 'tag', 'candy-name' => 'e2m_tag_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ vf($parameters); }, ]); } function vf($parameters){ if(array_key_exists('*tag',$parameters)) { $o6=$parameters['*tag']; } if (!$o6) return e2_error404_mode(); e2_drop_caches_for_tag_($o6['ID']); nn('Keywords', array ( 'ID' => $o6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); return true; } function e2m_tag_delete($parameters=array()) { global$_strings; if(array_key_exists('*tag',$parameters)) { $o6=$parameters['*tag']; } if (!$o6) return e2_error404_mode(); $lj=array ( '.tag-id' => $o6['ID'], 'caution-text' => e2l_get_string('gs--tag-will-be-deleted-notes-remain', array ( 'tag' => htmlspecialchars($o6['Keyword'],ENT_COMPAT,HSC_ENC) )), 'tag' => htmlspecialchars($o6['Keyword'],ENT_COMPAT,HSC_ENC), 'form-action' => jv('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ); $d=array ( 'title' => $_strings['pt--tag-delete'] .': '. $o6['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $lj, ); return $d; } function e2m_untagged($parameters=[]) { global$settings,$_strings,$_config; $re=r2(); $untaggedView=new AePageableNotesView('e2m_untagged',$parameters); $untaggedView -> setPortionSize($settings['appearance']['notes_per_page']); $untaggedView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $untaggedView -> setWantPaging(true); $untaggedView -> setWantNewCommentsCount($re); $untaggedView -> setWantReadHrefs($_config['count_reads']); $untaggedView -> setWantControls($re and !@$_config['read_only']); if(E2_EDITION){ $untaggedView -> setWantPreviewHrefs(true); } $vj=( "FROM `". $_config['db_table_prefix']."Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished`=1 ". "AND nk.`SubsetID` IS NULL ". tm($re) ); $untaggedView -> setSQLCountRequest( "SELECT COUNT(*) Total ". $vj ); $untaggedView -> setLimitlessSQLRequest( "SELECT n.* ". $vj ." ORDER BY n.`Stamp` DESC" ); $d=[ 'title' => $_strings['pt--posts-without-tags'], 'heading' => $_strings['pt--posts-without-tags'], 'notes' => $untaggedView -> getNotesCTree(), 'pages' => $untaggedView -> getPagesCTree(), ]; if($untaggedView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-posts-without-tags']; } elseif (!$untaggedView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function e2s_tag_edit(){ global$_strings,$_config; $zj=$sm=$cn=$tt=''; if(array_key_exists('tag-id',$_POST)) $zj=$_POST['tag-id']; if(array_key_exists('tag',$_POST)) $sm=$_POST['tag']; if(array_key_exists('page-title',$_POST)) $yj=trim($_POST['page-title'],"\r\n"); if(array_key_exists('description',$_POST)) $cn=trim($_POST['description'],"\r\n"); if(array_key_exists('summary',$_POST)) $g6=trim($_POST['summary'],"\r\n"); if(array_key_exists('urlname',$_POST)) $tt=trim($_POST['urlname'],"\r\n"); if(array_key_exists('cache-sensitive-hash',$_POST)) { $kj=$_POST['cache-sensitive-hash']; $xj=md5($sm.$tt); } $st=vn('Notes'); if(stripos($st['Collation'],'utf8mb4')!==0){ $sm=nb($sm); $yj=nb($yj); $cn=nb($cn,true); } en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = ".((int)$zj)."", 'get tag record to update' ); $ej=rn(); if(count($ej)!=1) die; $a2=$ej[0]; en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword` = '". tn($sm) ."' ". "AND (`ID` != ".((int)$zj).")", 'make sure new tag name does not conflict with existing ones' ); $ej=rn(); if(count($ej)==0){ if ($xj!=$kj){ qs(); } e2_drop_caches_for_tag_($zj); $a2['ID'] = ((int)$zj); $a2['Keyword']=$sm; $a2['PageTitle']=$yj; $a2['Description']=$cn; $a2['Summary']=$g6; $hs=g3( 'neasden',$a2['Description'],'full' ); if(count($hs) > 0){ eb($hs); rb($hs); } nn('Keywords',$a2); $i7=cm( 'set','t',$a2['ID'],$tt ); c(jv('e2m_tag', array ('tag-alias' => $i7))); } else { mv($_strings['er--cannot-rename-tag'],E2E_USER_ERROR); v(); } die; } function e2s_tag_delete(){ global$_strings,$_config; $zj=((int)$_POST['tag-id']); qs(); e2_drop_caches_for_tag_($zj); en( "DELETE FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $zj, 'delete note by ID' ); en( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 't' ". "AND `EntityID` = ". ((int)$zj), 'delete aliases after deleting note' ); en( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID`=". $zj, 'delete tag bindings after deleting tag' ); c(jv('e2m_tags')); } function bf($rj){ global$_current_tags,$_config; $tj=null; if(CACHE_FAVTAGS and is_file(CACHE_FILENAME_FAVTAGS)) { $tj=@unserialize(file_get_contents(CACHE_FILENAME_FAVTAGS)); } if (!is_array($tj)) { try { en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsFavourite`=1 ORDER BY `Keyword`", 'get favorite tags for tags menu' ); $jj=rn(); $tj=array(); foreach ($jj as $a2){ $hj['tag']=htmlspecialchars($a2['Keyword'],ENT_NOQUOTES,HSC_ENC); $hj['href']=jv( 'e2m_tag', array ('*tag' => $a2) ); $hj['visible?'] = (bool)$a2['IsVisible']; $tj[] = $hj; } if(CACHE_FAVTAGS)n3(CACHE_FILENAME_FAVTAGS,serialize($tj)); } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Count not get tags menu from database'); } } if (!is_array($tj)) return null; if (!empty ($_current_tags)) { $gj=false; foreach ($tj as $t => $kf){ $tj[$t]['current?']=in_array($tj[$t]['tag'],$_current_tags); if ($tj[$t]['current?']) { $gj=true; $wj=$rj; $wj['flag']='IsFavourite'; $wj['value']=0; if (r2()) { $tj[$t]['pinnable?']=true; $tj[$t]['pinned?']=true; $tj[$t]['pinned-toggle-href'] = ( jv('e2m_tag_flag_ajax',$wj) ); } } } } if (r2()) { if (!$gj and array_key_exists('*tag',$rj)) { $uj=$rj; $uj['flag']='IsFavourite'; $uj['value']=1; $ij=array ( 'tag' => htmlspecialchars($rj['*tag']['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag',$rj), 'current?' => true, 'pinnable?' => true, 'pinned?' => false, 'pinned-toggle-href' => jv('e2m_tag_flag_ajax',$uj), ); $tj[] = $ij; } } return $tj; } function yf($q6){ global$_config; $d2=array(); en( "SELECT k.* ". "FROM `". $_config['db_table_prefix']."Keywords` k, ". "`". $_config['db_table_prefix']."NotesKeywords` nk ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID`=". ((int)$q6) ." ". "AND k.`ID`=nk.`KeywordID` ". "ORDER BY `Keyword`", 'get tag records for note by id' ); $d2=rn(); return $d2; } function nf($oj){ global$_config; $pj=array(); foreach (array ( 'ID', 'NoteID', 'KeywordID', ) as $hz) if(array_key_exists($hz,$oj)) { $jz[] = '`'. $hz .'`'."='". tn($oj[$hz]) ."'"; if ($hz=='ID')$ch='tagbinging-id'; if ($hz=='NoteID')$ch='tagbinging-note-id'; if ($hz=='KeywordID')$ch='tagbinging-tag-id'; $pj[$ch]=$oj[$hz]; } $vf=( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND ". implode(' AND ',$jz) ); en($vf); } function mf($zj,$vh){ global$_config; en( "SELECT `ID`, `Keyword`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] ."Keywords` k ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible`=1 ". "AND k.`ID` IN (". "SELECT `KeywordID` FROM (". "SELECT COUNT(`NoteID`) NotesCount, `KeywordID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID` IN (". "SELECT nk2.`NoteID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk2 ". "WHERE nk2.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk2.`KeywordID`=". $zj. ") ". "GROUP BY nk.`KeywordID` ". "HAVING NotesCount > 1 ". "ORDER BY NotesCount DESC ". "LIMIT 1, ". $vh. ") k_ids". ")", 'find related tags' ); $bj=[]; foreach (rn() as $a2){ if ($a2['ID']===$zj) continue; $bj[] = [ 'name' => htmlspecialchars($a2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag', array ('*tag' => $a2)), ]; } return $bj; } function ff($sm){ @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); un(true); $a2=array ( 'Keyword' => $sm, 'OriginalAlias' => cm('find','','',$sm), 'Description' => '', ); $a2=yn('Keywords',$a2); $bh=cm( 'set','t',$a2['ID'],$sm ); if ($bh!=$a2['OriginalAlias']) { $a2['OriginalAlias']=$bh; nn('Keywords',$a2); } return $a2['ID']; } function df($parameters){ if (($yh=sf()) === null) return []; $fe['each']=$yh; if(count($fe['each']) > 0){ $fe['href']=jv('e2m_tags'); } if (($nh=bf($parameters)) !== null){ $fe['menu-each']=$nh; } return $fe; } function sf($mh=false){ global$_config; $re=r2(); $ut=CACHE_FILENAME_TAGS; if ($re)$ut=CACHE_FILENAME_TAGS_AUTHOR; if ($mh){ $ut=CACHE_FILENAME_TAGS_FULL; if ($re)$ut=CACHE_FILENAME_TAGS_AUTHOR_FULL; } $fh=null; if(CACHE_TAGS and is_file($ut)) { $fh=@unserialize(file_get_contents($ut)); } if (!is_array($fh)) { try { en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY `Keyword`", 'get all tags' ); $dh=array(); foreach (rn() as $a2){ $sm['id'] = (int)$a2['ID']; $sm['tag']=htmlspecialchars($a2['Keyword'],ENT_NOQUOTES,HSC_ENC); $sm['favourite?'] = (bool)$a2['IsFavourite']; $sm['visible?'] = (bool)$a2['IsVisible']; $sm['notes-count']=0; $sm['last-used']=0; $sm['freshness']=0; $sm['weight']=0; if ($mh){ $sm['href']=jv('e2m_tag', array ('*tag' => $a2)); } $dh[$a2['ID']] = $sm; } en( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix']."NotesKeywords` nk, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". tm($re). "AND nk.`NoteID` = n.`ID` ". "GROUP BY nk.KeywordID", 'get tags ordering info' ); $sh=0; $ah=0; $qh=0; foreach (rn() as $lh){ $hj =& $dh[$lh['KeywordID']]; $hj['notes-count']=$lh['Count']; if (@$hj['last-used'] < $lh['LastUsed']) { $hj['last-used']=$lh['LastUsed']; $zh=(time()-$hj['last-used']) / SECONDS_IN_A_YEAR; $hj['freshness']=pow(1/2,$zh); } $sh=max($sh,$hj['notes-count']); $ah=max($ah,$hj['freshness']); $qh=max($qh,$hj['notes-count']*$hj['freshness']); } $fh=array(); foreach ($dh as $r => $kf){ if (!$re and $kf['notes-count']==0) continue; $kh=mb_strtolower($kf['tag']); $fh[$kh]=$kf; if ($ah!=0){ $fh[$kh]['freshness']=$kf['freshness']/$ah; } else { $fh[$kh]['freshness']=0; } if ($qh!=0){ $fh[$kh]['weight'] = ( $kf['freshness']*$kf['notes-count']/$qh ); } else { $fh[$kh]['weight']=0; } if ($fh[$kh]['favourite?'])$fh[$kh]['weight']=1; } if(CACHE_TAGS)n3($ut,serialize($fh)); } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not get tags from database'); } } return $fh; } function af($o6){ global$_config; en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". tn($o6) ."'", 'get tag by name' ); $t=rn(); if (isset ($t[0])) { return $t[0]; } else { return null; } } function qf($xh){ global$_config; en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias`='".tn($xh)."'", 'get tag by legacy urlname name' ); $ib=rn(); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function lf($ks){ global$_config; en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`='".((int)$ks)."'", 'get tag by id' ); $ib=rn(); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function e2_tagrecs_with_parameters_($parameters){ $eh=array(); if (@$parameters['tag-alias'] or $parameters['tag-alias']==='0'){ $eh=explode(',',$parameters['tag-alias']); } $d2=array(); foreach ($eh as $xh) if ($xh or $xh==='0'){ if ( $ct=pn(@$xh) and ($ct['type']=='t') and ($a2=lf($ct['id'])) ) { $d2[] = $a2; } else { if ($rh=qf($xh)) { $d2[] = $rh; } } } return $d2; } function kf(){ global$full_blog_url; static $th; $em=o2(); if (empty ($th)) { $th=md5($full_blog_url .'email'. $em); } return $th; } function xf(){ global$full_blog_url; static $jh; $em=o2(); if (empty ($jh)) { $jh=md5($full_blog_url .'nospam'. $em.date('n-Y')); } return $jh; } function ef(){ global$full_blog_url; static $hh; $em=o2(); if(empty($hh)) { $hh=md5($full_blog_url .'nospam'. $em.date('n-Y',strtotime('-1 month'))); } return $hh; } function rf($q6){ global$full_blog_url; $em=o2(); return b('comment_'. md5($full_blog_url .'nospam_cookie'. $em.$q6)); } function tf(){ global$full_blog_url; $gh=$_SERVER['HTTP_USER_AGENT']; $em=o2(); return md5($full_blog_url .'nospam_cookie'. $em.$gh); } function jf(){ if ( array_key_exists('email',$_POST) and $_POST['email']!=='' ) return true; $jh=xf(); $hh=ef(); if ( !array_key_exists($jh,$_POST) and !array_key_exists($hh,$_POST) ) return true; if ( ( array_key_exists($jh,$_POST) and $_POST[$jh]!=='' ) or ( array_key_exists($hh,$_POST) and $_POST[$hh]!=='' ) ) return true; if ( !array_key_exists('comment',$_POST) or (strlen($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($q6){ if ( !array_key_exists(rf($q6),$_COOKIE) or ($_COOKIE[rf($q6)] !== tf()) ) return true; return false; } function e2m_comment($parameters=array ()) { c(jv('e2m_note',$parameters)); } function e2m_comment_edit($parameters=array ()) { return gf('edit',$parameters); } function gf($t6,$parameters=array ()) { global$_config,$_strings,$full_blog_url; $e6=$j6=$_strings['pt--new-comment']; $wh='new'; if ($t6=='edit'){ $f6=e2_commentrec_with_parameters_($parameters); $yr=$_strings['fb--save-changes']; $y2=$f6['noterec']; $e6=$j6=$_strings['pt--edit-comment']; $uh=uf($y2,$f6,$parameters['comment-number']); $wh=$ih['ID']; if (!$f6){ return e2_error404_mode(); } $oh=array ( '.note-id' => $f6['NoteID'], '.comment-id' => $f6['ID'], '.comment-number' => $parameters['comment-number'], '.already-subscribed?' => false, '.gip' => $f6['GIP'], 'create:edit?' => false, 'form-action' => jv('e2s_comment_process'), 'submit-text' => $yr, 'show-subscribe?' => true, 'subscribe?' => (bool)$f6['IsSubscriber'], 'name' => htmlspecialchars($f6['AuthorName'],ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars($f6['AuthorEmail'],ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars($f6['Text'],ENT_COMPAT,HSC_ENC), 'email-field-name' => kf(), ); if (''!=trim($f6['IP'])) { $oh['ip']=$f6['IP']; } } $d=array ( 'title' => $e6, 'heading' => $j6, 'form' => 'form-comment', 'form-comment' => $oh, ); if (!empty ($uh)) { $d['comments'] = array ('each' => array ('only' => $uh)); } return $d; } function e2m_comment_reply($parameters=array ()) { global$_strings; $f6=e2_commentrec_with_parameters_($parameters); if (!$f6){ return e2_error404_mode(); } $y2=$f6['noterec']; $uh=uf($y2,$f6,$parameters['comment-number']); $uh['replying?'] = (bool)true; $ph=($f6['Reply']=='' or !$f6['IsReplyVisible']); $e6=$ph? $_strings['pt--reply-to-comment']:$_strings['pt--edit-reply-to-comment']; $c8=array ( '.note-id' => $y2['ID'], '.comment-id' => $f6['ID'], '.reply-action' => $ph? 'new':'edit', 'form-action' => jv('e2s_comment_edit_reply'), 'submit-text' => $ph? $_strings['fb--publish']:$_strings['fb--save-changes'], 'create:edit?' => (bool) ($ph), 'reply-text' => htmlspecialchars($f6['Reply'],ENT_COMPAT,HSC_ENC), 'emailing-possible?' => MAIL_ENABLED, 'mail-back?' => (bool) ($ph), ); return array ( 'title' => $e6, 'heading' => $e6, 'comments' => array ('each' => array ('only' => $uh)), 'form' => 'form-comment-reply', 'form-comment-reply' => $c8, ); } function e2m_comment_delete($parameters=array ()) { global$_strings,$settings,$v8,$_config; $f6=e2_commentrec_with_parameters_($parameters); $q6=$f6['NoteID']; if (!$f6){ return e2_error404_mode(); } e2_drop_caches_for_note_($q6,true); @unlink(USER_FOLDER. '/last-comment.psa'); en( "DELETE FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$f6['ID']). "'" ); v(); } function e2m_comment_reply_delete($parameters=array ()) { global$_strings,$settings,$_config; $f6=e2_commentrec_with_parameters_($parameters); if (!$f6){ return e2_error404_mode(); } en( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$f6['ID']) ); v(); } function e2m_unsubscribe($parameters){ global$_strings,$_config; $b8="ORDER BY `ID` DESC"; $y8=false; $y2=$parameters['*note']; $q6=$y2['ID']; $l3=$parameters['unsubscribe-email']; $n8=$parameters['unsubscribe-key']; $l3=str_replace(' ','+',$l3); if ($q6){ en( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $q6 ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`='". $l3 ."' ". $b8, 'get subscriber’s comments ids' ); $a1=rn(); if(count($a1) < 1) { $d['unsubscribe']['error-message']=$_strings['gs--you-are-not-subscribed']; } else { $d6=@$a1[0]; $m8=md5($d6['ID'].$d6['Stamp'] .'x'); if ($n8==$m8){ en( "UPDATE `". $_config['db_table_prefix']."Comments` ". "SET `IsSubscriber`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $q6 ." ". "AND `AuthorEmail` = '". tn($l3). "'", 'unsubscribe' ); $y8=true; $d['unsubscribe']['note-title']=h3( htmlspecialchars($y2['Title'],ENT_COMPAT,HSC_ENC) ); $d['unsubscribe']['note-href']=jv( 'e2m_note', array ('*note' => $y2) ); } if (!$y8){ $d['unsubscribe']['error-message']=$_strings['gs--unsubscription-didnt-work']; } } } else { $d['unsubscribe']['error-message']=$_strings['gs--post-not-found']; } if ($y8){ $e6=$_strings['pt--unsubscription-done']; } else { $e6=$_strings['pt--unsubscription-failed']; } $d['unsubscribe']['success?']=$y8; $d['title']=$e6; $d['heading']=$e6; return $d; } function e2m_comment_flag($parameters){ wf($parameters); c(jv('e2m_note',$parameters)); } function e2m_comment_flag_ajax($parameters){ s([ 'flag-name' => 'comment', 'candy-name' => 'e2m_comment_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ wf($parameters); }, ]); } function wf($parameters){ $f6=e2_commentrec_with_parameters_($parameters); $q6=$f6['NoteID']; if ($f6){ nn('Comments', array ( 'ID' => $f6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); e2_drop_caches_for_note_($q6,true); } } function e2s_comment_process(){ global$_strings,$_fp_error; list ($q6,$wh,$f8)=a2(); if(Log::$p3)__log('Comments: processed, noteid <'. $q6 .'>, commentid <'. $wh .'>'); if (!$wh){ $d8=''; if($_fp_error==FP_NOT_COMMENTABLE){ mv($_strings['er--post-not-commentable'],E2E_USER_ERROR); } elseif($_fp_error==FP_EMPTY_FIELD){ mv($_strings['er--name-email-text-required'],E2E_USER_ERROR); } elseif($_fp_error==FP_COMMENT_TOO_LONG){ $s8=$_strings['gs--comment-too-long']; $d8=$_strings['gs--comment-too-long-description']; } elseif($_fp_error==FP_COMMENT_DOUBLE_POST){ $s8=$_strings['gs--comment-double-post']; $d8=$_strings['gs--comment-double-post-description']; } elseif($_fp_error==FP_COMMENT_SPAM_SUSPECT){ $s8=$_strings['gs--comment-spam-suspect']; $d8=$_strings['gs--comment-spam-suspect-description']; } elseif($_fp_error==FP_NO_ID_OR_NEW){ mv($_strings['er--error-occurred'].' (FP_NO_ID_OR_NEW)'); } else { mv($_strings['er--error-occurred'].' (FP '. $_fp_error .')'); } if ($d8){ $d['title']=$s8; $d['heading']=$s8; $d['form']='form-unaccepted-comment'; $d['form-unaccepted-comment'] = array ( 'reason' => $d8, 'text' => @htmlspecialchars($f8['text'],ENT_COMPAT,HSC_ENC), ); return $d; } } if ($q6){ c(jv('e2m_note', array ('*note' => mm($q6)))); } else { c(); } die; } function e2s_comment_edit_reply(){ global$_strings,$v,$_config; $a8=@$_POST['text']; if(trim($a8)=='')$a8=''; $q6=@$_POST['note-id']; $y2=mm($q6); $wh=@$_POST['comment-id']; $f6=if_($wh); $q8=isset ($_POST['mail-back']); $l8=time(); if (@$_POST['reply-action']=='new'){ $z8=time(); } @unlink(e2_note_cache_filename_with_id_($q6 .'-comments')); @unlink(e2_note_cache_filename_with_id_($q6 .'-comments-author')); if ($f6){ en( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='". tn($a8) ."', ". ( isset ($z8)? ( "`ReplyStamp`='". $z8 ."', " ) : ( "" ) ). "`ReplyLastModified`='". $l8 ."', ". "`IsReplyVisible`='1' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$wh), 'update comment reply' ); $je=jv('e2m_note', array ('*note' => $y2)); if ($q8 and $a8!=''){ $hj['comment-time'] = array ($f6['Stamp'],ay()); $hj['commenter']=$f6['AuthorName']; $hj['commenter-email']=$f6['AuthorEmail']; $hj['comment-text']=$f6['Text']; $hj['note-title']=h3($y2['Title']); $hj['reply-time'] = array (time(),ay()); $hj['blog-author']=nd(); $hj['note-href']=$je; $hj['comment-href']=$je; $hj['reply-text']=$a8; if(1){ $k8=s1( 'comment-reply',$hj ); $x8=e2l_get_string( 'em--comment-reply', $hj ); $e8=$f6['AuthorEmail']; $r8='From: '. a1(); q1($e8,$x8,$k8,$r8); } if(1){ unset ($hj['commenter-email']); $r8='From: '. a1(); foreach (f2($y2,$f6['AuthorEmail']) as $t8){ $j8=$t8['AuthorEmail']; $h8=md5($t8['ID'].$t8['Stamp'].'x'); $hj['unsubscribe-href']=jv('e2m_unsubscribe', array ( '*note' => $y2, 'unsubscribe-email' => $j8, 'unsubscribe-key' => $h8, ) ); $e8=$j8; $k8=s1('comment-reply-to-public',$hj); $x8=e2l_get_string( 'em--comment-reply-to-public-subject', $hj ); q1($e8,$x8,$k8,$r8); } } } c($je); } else { v(); } die; } function uf($y2,$d6,$wv){ global$_config,$full_blog_url; if(Log::$p3)__log('Package comment '. $d6['ID'] .'...'); if ($y2===null){ $y2=mm($d6['NoteID']); } $hj['number']=$wv; $g8=!empty ($d6['IsGIPUsed']); $hj['gip-used?']=$g8; $hj['gip']=$hj['gip-used?']?$d6['GIP']:''; $hj['name']=htmlspecialchars($d6['AuthorName'],ENT_NOQUOTES,HSC_ENC); $hj['userpic-set?']=false; if ($g8){ $w8=AVATARS_FOLDER.$d6['GIP'] .'-'. $d6['GIPAuthorID'] .'.jpg'; if(is_file(MEDIA_ROOT_FOLDER.$w8)) { $hj['userpic-set?']=true; $hj['userpic-href']=$full_blog_url .'/'. $w8; } } $hj['name-href']=''; if ( $g8 and $u8=e2_get_user_profile_url($d6['GIP'],$d6['GIPAuthorID'],$d6['AuthorProfileLink']) ) { $hj['name-href']=$u8; } if (r2()) { $hj['email']=htmlspecialchars($d6['AuthorEmail'],ENT_NOQUOTES,HSC_ENC); if (''!=trim($d6['IP'])) { $hj['ip']=$d6['IP']; } } $hj['author-name']=nd(); $hj['important?'] = (bool)$d6['IsFavourite']; $hj['reply-visible?'] = (bool) ($d6['IsVisible'] && $d6['IsReplyVisible']); $hj['reply-important?'] = (bool)$d6['IsReplyFavourite']; $hj['spam-suspect?'] = (bool)$d6['IsSpamSuspect']; $i8=array ((int)$d6['Stamp'],dy($y2)); $hj['time']=$i8; $hj['last-modified']=$i8; if ($d6['LastModified']) $hj['last-modified'] = array ((int)$d6['LastModified'],dy($y2)); if ($d6['ReplyStamp']) $hj['reply-time'] = array ((int)$d6['ReplyStamp'],dy($y2)); if ($d6['ReplyLastModified']) $hj['reply-last-modified'] = array ((int)$d6['ReplyLastModified'],dy($y2)); if (r2()) { $hj['subscriber?'] = (bool)$d6['IsSubscriber']; $hj['new?'] = (bool)$d6['IsNew']; $hj['first-new?']=false; if (!@$_config['read_only']) { if ($d6['IsFavourite']) { $hj['important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ('*note' => $y2,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 0) ); } else { $hj['important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ('*note' => $y2,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 1) ); } if ($d6['IsReplyFavourite']) { $hj['reply-important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 0 ) ); } else { $hj['reply-important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 1 ) ); } $hj['edit-href']=jv( 'e2m_comment_edit', array ('*note' => $y2,'comment-number' => $wv) ); $hj['removed-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => !$d6['IsVisible'] ) ); $hj['removed-reply-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => !$d6['IsVisible'] ) ); $hj['removed-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 0 ) ); $hj['removed-reply-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 0 ) ); $hj['replaced-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 1 ) ); $hj['replaced-reply-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $y2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 1 ) ); $o8=jv( 'e2m_comment_reply', array ('*note' => $y2,'comment-number' => $wv) ); if ($d6['Reply']=='' or !$d6['IsReplyVisible']) { $hj['reply-href']=$o8; } else { $hj['edit-reply-href']=$o8; } } } if(mb_strlen($d6['Text']) > $_config['max_comment_length']) { $d6['Text']=mb_substr($d6['Text'],0,$_config['max_comment_length']); } $p8=$y2['FormatterID']==='raw'?'neasden':$y2['FormatterID']; $l1=u3($p8,$d6['Text'],'simple'); $hj['text']=$l1['text-final']; $hj['reply']=''; $hj['replying?'] = (bool)false; $hj['replied?'] = (bool) ( (trim($d6['Reply']) != '') && ($d6['IsReplyVisible']) ); if ((string)$d6['Reply']!==''){ $l1=u3($y2['FormatterID'],$d6['Reply'],'full'); $hj['reply']=$l1['text-final']; } if(Log::$p3)__log('Comments: done'); return $hj; } function if_($ks){ global$_config; en( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $ks ."'" ); $ib=rn(); if(count($ib) > 0){ return $ib[0]; } else { return false; } } function of($wt){ e2_comment_set_flag('IsVisible',$wt); } function pf($cg){ e2_comment_set_flag('IsReplyVisible',$cg); } function c2($oq){ global$_strings,$_config,$settings; $vg=@$_COOKIE[b('commenter_name')]; $bg=@$_COOKIE[b('commenter_email')]; $yg=@$_COOKIE[b('commenter_ph')]; $ng=false; if ($bg and $yg){ foreach (f2($oq) as $t8){ $m8=md5($t8['ID'].$t8['Stamp'] .'x'); if ( $t8['AuthorEmail']==$bg and $yg==$m8 ){ $ng=true; break; } } } $yr=$_strings['fb--submit']; $jh=xf(); $oh=array ( '.note-id' => $oq['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool)$ng, 'cookie-name' => rf($oq['ID']), 'cookie-value' => tf(), 'email-field-name' => kf(), 'nospam-field-name-part-1' => substr($jh,0,4), 'nospam-field-name-part-2' => substr($jh,4), 'create:edit?' => true, 'form-action' => jv('e2s_comment_process'), 'submit-text' => $yr, 'show-subscribe?' => (bool) !$ng, 'emailing-possible?' => MAIL_ENABLED, 'subscribe?' => (bool)$ng, 'subscription-status' => $ng? $_strings['gs--you-are-already-subscribed']:'', 'name' => htmlspecialchars($vg,ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars($bg,ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars($d6['Text'],ENT_COMPAT,HSC_ENC), 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => array (), ); $mg=false; $fg=''; foreach(e2_list_gips() as $dg){ if (!is_file(SYSTEM_FOLDER .'gips/'. $dg .'.json')) { continue; } $sg=e2_is_logged_in($dg); $oh['gips'][$dg] = ( e2_get_gip_auth_url($dg) ); if ($sg){ $mg=true; $ag=e2_get_gip_session($dg); $fg=$ag['GIP']; $oh['name']=htmlspecialchars( $ag['AuthorName'],ENT_COMPAT,HSC_ENC ); } } if (!$oh['email-comments-enabled?'] and !count($oh['gips'])) { return false; } $oh['email-comments-only?'] = (count($oh['gips']) === 0); $oh['logged-in?']=$mg; $oh['logged-in-gip']=$fg; $oh['logout-url']=$mg?jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $oh; } function v2($q6){ return y2($q6,'`IsNew` = 1'); } function b2($q6){ return y2($q6,'`IsVisible` = 1'); } function y2($q6,$b){ global$_config; if (!is_numeric($q6)) return 0; $qg=0; en( "SELECT count(*) ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $q6 ." ". "AND (". $b. ")", 'count comments' ); $a1=rn(); $a1=(int)$a1[0]['count(*)']; $qg=$a1; return (int)$qg; } function n2(){ global$_config; if(Log::$p3)__log('Count new comments'); $lg=0; $zg=''; $eq=''; try { en( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsNew`=1 ORDER BY `Stamp`", 'count new comments for author menu' ); $a1=rn(); $lg=count($a1); if ($lg){ $q6=$a1[0]['NoteID']; $eq=jv( 'e2m_note', array ('*note' => mm($q6)) ); } } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not count new comments or provide link to the latest one'); } return array ((int)$lg,$zg,$eq); } function m2($q6){ global$_config; if(Log::$p3)__log('Comments: getting comments for note '. $q6); en( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$q6." ". "ORDER BY `Stamp`", 'get comments including deleted' ); $a1=rn(); return $a1; } function f2($y2,$kg=''){ global$_config; $b8="ORDER BY `ID` DESC"; $d=$xg=[]; en( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `IsVisible`, ". "`AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$y2['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `IsVisible`=1 ". "AND `AuthorEmail`!='". tn($kg) ."' ". $b8, 'get subscribers by note' ); $a1=rn(); foreach ($a1 as $t8){ if (!in_array($t8['AuthorEmail'],$xg)) { $d[] = $t8; } $xg[] = $t8['AuthorEmail']; } return $d; } function d2($y2,$ir=NOTE_COMMENTABLE_NOW){ global$settings,$_config; $eg=true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($y2['Stamp'] < time()-$_config['comment_freshness_days']*SECONDS_IN_A_DAY) $eg=false; $rg=$y2['IsCommentable']; if ($ir==NOTE_COMMENTABLE_NOW_CONDITIONALLY){ $rg=true; } return ( rm($y2)==='public' and $eg and $rg ); } function e2_commentrec_with_parameters_($parameters=array ()) { $y2=$parameters['*note']; $n6=m2($y2['ID']); $f6=@$n6[$parameters['comment-number']-1]; if ($f6){ $f6['noterec']=$y2; return $f6; } } function a2($mt=''){ global$settings,$v8,$_config,$_fp_error; $_fp_error=false; $th=kf(); $q6=$wh=$name=$l3=$tv=''; if(array_key_exists('note-id',$_POST)) $q6=trim(@$_POST['note-id']); if(array_key_exists('comment-id',$_POST)) $wh=trim(@$_POST['comment-id']); if(array_key_exists('comment-number',$_POST)) $wv=trim(@$_POST['comment-number']); if(array_key_exists('name',$_POST)) $name=trim(@$_POST['name']); if(array_key_exists($th,$_POST)) $l3=trim(@$_POST[$th]); if(array_key_exists('text',$_POST)) $tv=trim(@$_POST['text']); $tg=vn('Comments'); if(stripos($tg['Collation'],'utf8mb4')!==0){ $name=nb($name); $tv=nb($tv); } if ($wh=='new'){ $jg=e2_get_logged_gip_name(); if ($jg){ $ag=e2_get_gip_session($jg); $name=trim($ag['AuthorName']); $l3=''; $hg=$ag['GIPAuthorID']; } } else { if(array_key_exists('gip',$_POST))$jg=trim(@$_POST['gip']); } $gg=( (array_key_exists('already-subscribed',$_POST) and $_POST['already-subscribed']) or (array_key_exists('subscribe',$_POST) and $_POST['subscribe']) ); $wg=time(); $f8['text']=$tv; if ($wh=='new' and !$jg){ y('commenter_name',$name); y('commenter_email',$l3); } $ug=($wh=='new' and ( jf() or e2_cookie_data_is_spam_suspicios_for_note_id_($q6) )); $ig=1; $a1=false; if (!is_numeric($q6)) { $_fp_error=FP_NO_ID_OR_NEW; } elseif (!is_numeric($wh) and !($wh=='new')) { $_fp_error=FP_NO_ID_OR_NEW; } else { if ( $tv=='' or ( !$jg and ($name=='' or $l3=='') ) ) { $_fp_error=FP_EMPTY_FIELD; } if ($wh=='new'){ $og=@unserialize(file_get_contents(USER_FOLDER. '/last-comment.psa')); if(md5($name.$l3.$tv)==$og['md5']) { $_fp_error=FP_COMMENT_DOUBLE_POST; } if ( isset ($_config['max_comment_length']) and strlen(@$_POST['text']) > ($_config['max_comment_length']) ){ $_fp_error=FP_COMMENT_TOO_LONG; } $y2=mm($q6); if ($wh=='new' and !d2($y2)) { $_fp_error=FP_NOT_COMMENTABLE; } if ($ug){ $_fp_error=FP_COMMENT_SPAM_SUSPECT; } } } if (!$_fp_error){ e2_drop_caches_for_note_($q6,true); if ($wh=='new'){ $f6=array ( 'NoteID' => (int)$q6, 'AuthorName' => $name, 'AuthorEmail' => $l3, 'Text' => $tv, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int)$gg, 'IsSpamSuspect' => (int)$ug, 'IsNew' => (int)$ig, 'Stamp' => (int)time(), 'LastModified' => (int)time(), 'IP' => tn(k2()), 'IsGIPUsed' => intval(!empty ($jg) && !empty ($hg)), 'GIP' => !empty ($jg)?tn($jg):'', 'GIPAuthorID' => !empty ($hg)?tn($hg):'', ); $f6=yn('Comments',$f6); $wh=$f6['ID']; $og=array ( 'id' => $wh, 'md5' => md5($name.$l3.$tv), ); @n3(USER_FOLDER. 'last-comment.psa',serialize($og)); $a1=(int)$wh; $pg=md5($f6['ID'].$f6['Stamp'].'x'); y('commenter_ph',$pg); $y2=mm($q6); $je=jv('e2m_note', array ('*note' => $y2)); $hj['comment-time'] = array ($wg,ay()); $hj['commenter']=$name; $hj['commenter-email']=$l3; $hj['comment-text']=$tv; $hj['note-title']=$y2['Title']; $hj['note-href']=$je; $hj['comment-href']=$je; $hj['comments-disable-href']=jv('e2m_note_flag', array ( '*note' => $y2, 'flag' => 'IsCommentable', 'value' => 0 )); $hj['reply-href']=jv( 'e2m_comment_reply', array ( '*note' => $y2, 'comment-number' => $wv ) ); if (isset ($settings['author_email']) and @$settings['notifications']['new_comments']) { $k8=s1( 'comment-new-to-author',$hj ); $x8=e2l_get_string( 'em--comment-new-to-author-subject', $hj ); $e8=$settings['author_email']; $r8 = 'From: '. a1() ."\r\n". 'Reply-to: '. $name .' <'. $l3 .">"; q1($e8,$x8,$k8,$r8); } if (!$ug){ unset ($hj['commenter-email']); $r8='From: '. a1(); foreach (f2($y2,$l3) as $t8){ $j8=$t8['AuthorEmail']; $h8=md5($t8['ID'].$t8['Stamp'].'x'); $hj['unsubscribe-href']=jv('e2m_unsubscribe', array ( '*note' => $y2, 'unsubscribe-email' => $j8, 'unsubscribe-key' => $h8 ) ); $e8=$j8; $k8=s1('comment-new-to-public',$hj); $x8=e2l_get_string( 'em--comment-new-to-public-subject', $hj ); q1($e8,$x8,$k8,$r8); } } } else { $cw=array ( 'ID' => $wh, 'Text' => $tv, 'IsSubscriber' => ((int)$gg), 'LastModified' => time(), ); if (!empty ($name))$cw['AuthorName']=$name; if (!empty ($l3))$cw['AuthorEmail']=$l3; nn('Comments',$cw); $a1=(int)$wh; } } if ($mt=='ajaxresult') return $et; else return array ((int)$q6,$a1,$f8); } function e2m_most_commented($parameters=[]) { global$settings,$_strings,$_config; $re=r2(); $mostCommentedView=new AePageableNotesView('e2m_most_commented',$parameters); $mostCommentedView -> setPortionSize($settings['appearance']['notes_per_page']); $mostCommentedView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $mostCommentedView -> setWantNewCommentsCount($re); $mostCommentedView -> setWantReadHrefs($_config['count_reads']); $mostCommentedView -> setWantControls($re and !@$_config['read_only']); if(E2_EDITION){ $mostCommentedView -> setWantPreviewHrefs(true); } $vw=$_config['hot_period']; $bw=time()-q2($_config['hot_period']); $mostCommentedView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm($re). "AND `ID` IN ( ". "SELECT `NoteID` FROM ( ". "SELECT `NoteID`, COUNT(*) CommentsCount ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND `Stamp` > ". $bw." ". "GROUP BY `NoteID` ". "ORDER BY CommentsCount DESC ". ") As MostCommentedNotesIDs ". ")" ); $d=[ 'title' => e2l_get_string('pt--most-commented', ['period' => $vw]), 'heading' => e2l_get_string('pt--most-commented', ['period' => $vw]), 'notes' => $mostCommentedView -> getNotesCTree(), 'pages' => $mostCommentedView -> getPagesCTree(), ]; if($mostCommentedView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$mostCommentedView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function e2m_favourites($parameters=[]) { global$settings,$_config,$_strings; $re=r2(); $favouritesView=new AePageableNotesView('e2m_favourites',$parameters); $favouritesView -> setPortionSize($settings['appearance']['notes_per_page']); $favouritesView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $favouritesView -> setWantPaging(true); $favouritesView -> setWantNewCommentsCount($re); $favouritesView -> setWantReadHrefs($_config['count_reads']); $favouritesView -> setWantControls($re and !@$_config['read_only']); if(E2_EDITION){ $favouritesView -> setWantPreviewHrefs(true); } $favouritesView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `IsFavourite`=1 ". tm($re). "ORDER BY `Stamp` DESC" ); $d=[ 'title' => $_strings['pt--favourites'], 'heading' => $_strings['pt--favourites'], 'notes' => $favouritesView -> getNotesCTree(), 'pages' => $favouritesView -> getPagesCTree(), ]; if($favouritesView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-favourites']; } elseif (!$favouritesView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function q2($vw){ if ('year'==$vw) return SECONDS_IN_A_YEAR; elseif ('month'==$vw) return SECONDS_IN_A_MONTH; elseif ('week'==$vw) return SECONDS_IN_A_DAY*7; elseif ('day'==$vw) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function e2m_popular($parameters=[]) { global$settings,$_config,$_strings; $re=r2(); $popularView=new AePageableNotesView('e2m_popular',$parameters); $popularView -> setPortionSize($settings['appearance']['notes_per_page']); $popularView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $popularView -> setWantNewCommentsCount($re); $popularView -> setWantReadHrefs($_config['count_reads']); $popularView -> setWantControls($re and !@$_config['read_only']); if(E2_EDITION){ $popularView -> setWantPreviewHrefs(true); } $vw=$_config['popular_period']; $bw=time()-q2($_config['popular_period']); $vj=( "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND a.`Stamp` > ". $bw ." ". "AND n.`IsPublished` = 1 ". tm($re). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID`" ); $popularView -> setSQLCountRequest( "SELECT COUNT(*) Total FROM (SELECT 1 ". $vj .") _" ); $popularView -> setLimitlessSQLRequest( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". $vj ." ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC" ); $d=[ 'title' => e2l_get_string('pt--most-read', ['period' => $vw]), 'heading' => e2l_get_string('pt--most-read', ['period' => $vw]), 'notes' => $popularView -> getNotesCTree(), 'pages' => $popularView -> getPagesCTree(), ]; if($popularView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$popularView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function l2($zj=false){ global$_config,$_current_url; $yw=$nw=''; if(E2_EDITION){ if ($zj!==false){ $yw="JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ON nk.`NoteID` = n.`ID` "; $nw=( "AND nk.`SubsetID` = ". $_config['db_table_subset'] ." ". "AND nk.`KeywordID` = ". $zj ." " ); } } $mostReadNotesCollectionView=new AeArbitraryNotesCollectionView('most read or most read by tag'); $mostReadNotesCollectionView -> setCurrentURL($_current_url); $bw=time()-q2($_config['popular_period']); $mostReadNotesCollectionView -> setSQLRequest( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". $yw. "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". $nw. "AND a.`Stamp` > ". $bw ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". tm(r2()). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC ". "LIMIT 10" ); if ($zj===false){ if(CACHE_POPULAR){ $mostReadNotesCollectionView -> setViewExpiration(SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename(CACHE_FILENAME_POPULAR); $mostReadNotesCollectionView -> setCacheExpiresFilename(CACHE_FILENAME_POPULAR_EXPIRES); } } else { if(CACHE_POPULAR_WITH_TAG){ $mostReadNotesCollectionView -> setViewExpiration(SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename(e2_cache_filename_with_id_($zj,CACHE_FILENAMES_POPULAR_WITH_TAG)); $mostReadNotesCollectionView -> setCacheExpiresFilename( e2_cache_filename_with_id_($zj,CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES) ); } } return$mostReadNotesCollectionView -> getNotesCTree(); } function z2($zj=false){ global$_strings; $mw=[ 'title' => $_strings['nm--most-read'], ]; $mw['each']=l2($zj); $mw['seed']=$zj; if(count($mw['each']) < 7) unset ($mw['each']); return $mw; } function e2m_password_reset(){ global$_strings,$_superconfig,$settings; if (!is_file(USER_FOLDER. 'password-reset.psa')) { $em=sha1(rand()); $dm=jv('e2m_password', array ('recovery-key' => $em)); @n3(USER_FOLDER. 'password-reset.psa',$dm); } $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; $fw=(bool) ($e8=$settings['author_email']); $d['form']='form-password-reset-email'; $d['form-password-reset-email'] = array ( 'form-action' => jv('e2s_password_reset_email'), 'show-controls?' => $fw, 'submit-text' => $_strings['fb--send-link-by-email'], ); if (!@$_superconfig['user_has_no_access_to_files']) { $d['form-password-reset-email']['reset-info']=$_strings['gs--password-reset-link-saved']; } elseif (!$fw){ mv($_strings['er--cannot-reset-password']); } return $d; } function e2s_password_reset_email(){ global$_strings,$settings; if($_SERVER['REQUEST_METHOD']!='POST')c(); if(array_key_exists('email',$_POST))$l3=trim($_POST['email']); if (!$l3){ mv($_strings['er--cannot-send-link-email-empty']); c(jv('e2m_password_reset')); } $dw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($dw)==0){ mv($_strings['er--error-occurred']); c(jv('e2m_password_reset')); } if ($e8=$settings['author_email']) { if ($l3==$e8){ $k8=s1( 'password-reset', array ('reset-href' => $dw) ); $x8=$_strings['em--password-reset-subject']; $r8='From: '. a1(); q1($e8,$x8,$k8,$r8); } mv($_strings['gs--password-reset-link-sent-maybe'],E2E_MESSAGE); c(jv('e2m_password_reset')); } die; } function e2m_password($parameters){ global$settings,$_strings; $sw=false; $em=''; if(array_key_exists('recovery-key',$parameters)) { $em=$parameters['recovery-key']; $dm=jv('e2m_password', array ('recovery-key' => $em)); $dw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($dw) > 0){ $sw=($dm==$dw); } } if (r2() or $sw){ $d['title']=$_strings['pt--password']; $d['heading']=$_strings['pt--password-for-blog']; if ($sw){ $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; } $d['form']='form-password'; $d['form-password'] = array ( 'form-action' => jv('e2s_password_save'), '.recovery-key' => $em, 'recovering?' => $sw, 'submit-text' => $_strings['fb--change'], ); return $d; } else { c(); } } function e2m_sessions(){ global$settings,$_strings; $yk=t2(); $d['title']=$_strings['pt--sessions']; $d['heading']=$_strings['pt--sessions']; $aw=array(); $em=$_COOKIE[b('key')]; foreach ($yk['sessions'] as $t => $kf){ $aw[] = array ( 'current?' => sha1($em)===$kf['key_hash'], 'opened' => array ((int)$kf['stamp'],sy()), 'ip-address' => $kf['remote_ip'], 'source' => ($kf['remote_ip']=='127.0.0.1')? $_strings['gs--locally']:$kf['remote_ip'], 'title' => w2($kf['ua']), 'user-agent' => $kf['ua']? $kf['ua']:$_strings['gs--unknown'], ); } $aw=array_reverse($aw); $d['sessions']['each']=$aw; if(count($aw) > 1){ $d['form']='form-sessions'; $d['form-sessions'] = array ( 'form-action' => jv('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $d; } function e2m_sign_in(){ if (r2()) { c(jv('e2m_frontpage', array ('page' => 1))); } else { return array (); } } function e2m_sign_out(){ global$_strings; $yk=t2(); $qw=-1; if(array_key_exists('sessions',$yk) and is_array($yk['sessions'])) { foreach ($yk['sessions'] as $t => $kf){ $em=$_COOKIE[b('key')]; if(sha1($em)===$kf['key_hash']) { $qw=$t; break; } } } if ($qw > -1) unset ($yk['sessions'][$qw]); if (!j2($yk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } y('key',''); c(); } function e2s_password_save(){ global$settings,$_strings; $sw=false; $lw=trim($_POST['old-password']); if ($em=trim($_POST['recovery-key'])) { $dm=jv('e2m_password', array ('recovery-key' => $em)); $dw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($dw) > 0){ $sw=($dm==$dw); } } if (x2($lw) or $sw){ $bk=trim($_POST['new-password']); if ($bk!=''){ if (@n3(USER_FOLDER. '/password-hash.psa',serialize(sha1($bk)))) { @unlink(USER_FOLDER. 'password-reset.psa'); mv($_strings['gs--password-changed'],E2E_MESSAGE); c(); } else { mv($_strings['er--could-not-change-password'],E2E_PERMISSIONS_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } } else { mv($_strings['er--no-password-entered'],E2E_USER_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } } else { mv($_strings['er--wrong-password'],E2E_USER_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } die; } function k2(){ $gv=$_SERVER['REMOTE_ADDR']; if(array_key_exists('HTTP_X_FORWARDED_FOR',$_SERVER)) { $gv=array_pop(explode(',',$_SERVER['HTTP_X_FORWARDED_FOR'])); } return $gv; } function e2s_sign_in(){ global$_strings; $yk=t2(); if($_SERVER['REQUEST_METHOD']=='POST'){ $cz=@$_POST['password']; $zw=@$_POST['is_public_pc']; } else { $cz=@$_GET['password']; $zw=false; } if (x2($cz)) { @unlink(USER_FOLDER. 'password-reset.psa'); $kw=array ( 'stamp' => time(), 'remote_ip' => k2(), 'key_hash' => e2_($zw), 'ua' => $_SERVER['HTTP_USER_AGENT'], ); $yk['sessions'][] = $kw; } elseif(strlen(trim($cz)) > 0){ i2(); mv($_strings['er--wrong-password'],E2E_USER_ERROR); } if (!j2($yk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); c(); } v(); } function e2s_drop_other_sessions(){ global$_strings; $yk=t2(); foreach ($yk['sessions'] as $t => $kf){ $em=$_COOKIE[b('key')]; if(sha1($em)===$kf['key_hash']) { $kw=$kf; break; } } $yk['sessions'] = array ($kw); if (!j2($yk)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } v(); die; } function x2($cz){ $xw=@unserialize(file_get_contents(USER_FOLDER. '/password-hash.psa')); return (sha1($cz)===$xw and trim($cz)!=''); } function e2_($ew=false){ global$settings; $em=u2(); $rw=sha1($em); y('key',$em, !$ew); return $rw; } function r2(){ global $yn,$settings,$_auth_sessions; if (isset ($yn)) return $yn; $yn=false; if (isset ($_COOKIE[b('key')])) { $em=$_COOKIE[b('key')]; $yk=t2(); $tw=array(); if(array_key_exists('sessions',$yk) and is_array($yk['sessions'])) { foreach ($yk['sessions'] as $kw){ $tw[] = $kw['key_hash']; } $_auth_sessions['count']=count($yk['sessions']); } if(1){ $yn=(bool)in_array(sha1($em),$tw,true); } if (!$yn){ y('key',''); } } return $yn; } function t2(){ if(is_file(USER_FOLDER.'auth.psa')) { $yk=unserialize(@file_get_contents(USER_FOLDER.'auth.psa')); if ($yk) return $yk; } return array (); } function j2($yk){ return n3(USER_FOLDER.'auth.psa',serialize($yk)); } function h2(){ if ($em=$_COOKIE[b('key')]) { return b('key') .'='. $em .""; } } function g2(){ if ($em=$_COOKIE[b('key')]) { return 'Cookie: '. b('key') .'='. $em ."\r\n"; } return "\r\n"; } function w2($xv){ global$_strings; if(strstr($xv,'iPhone')) return$_strings['gs--ua-iphone']; if(strstr($xv,'iPad')) return$_strings['gs--ua-ipad']; if(strstr($xv,'Opera'))$d=$_strings['gs--ua-opera']; if(strstr($xv,'Firefox'))$d=$_strings['gs--ua-firefox']; if(strstr($xv,'Chrome'))$d=$_strings['gs--ua-chrome']; if(strstr($xv,'Safari') and !strstr($xv,'Chrome'))$d=$_strings['gs--ua-safari']; if (!$d)$d=$_strings['gs--ua-unknown']; if(strstr($xv,'Macintosh')) { if ($d)$d.=' '. $_strings['gs--ua-for-mac']; } return $d; } function e2j_check_password(){ $xw=@unserialize(file_get_contents(USER_FOLDER. '/password-hash.psa')); $cz=''; if(array_key_exists('password',$_POST))$cz=$_POST['password']; i2(); $zv=[ 'success' => true, 'data' => [ 'password-correct' => trim($cz)!=='' and sha1($cz)===$xw ], ]; $zv=json_encode($zv); die ($zv); } function u2(){ $jw=''; $hw='0123456789abcdef'; for ($r=0; $r < 40; $r++)$jw.=$hw[mt_rand(0,15)]; $jw.=time(); $jw=sha1($jw); return $jw; } function i2(){ if(is_file(USER_FOLDER. 'password-wait.psa')) { $gw=unserialize( file_get_contents(USER_FOLDER. '/password-wait.psa') ); if ($gw['delay'] < 5){ $gw['delay'] ++; } if(time()-$gw['time'] > SECONDS_IN_A_MINUTE){ $gw['delay']=0; } $gw['time']=time(); } else { $gw=array ( 'time' => time(), 'delay' => 5, ); } n3(USER_FOLDER.'password-wait.psa',serialize($gw)); sleep($gw['delay']); } function o2(){ static $ww; if(empty($ww))$ww=md5('seсret'); return $ww; } function p2($x){ $em=o2(); $uw=strlen($em); $iw=strlen($x); $d=''; for ($r=0; $r < $iw+rand(16,64); ++ $r){ if ($r > $iw){ $ow=rand(0,127); } elseif ($r==$iw){ $ow=0; } else { $ow=ord($x[$r]); } $pw=chr(($ow+ord($em[$r%$uw])) % 256); $d.=$pw; } $d=base64_encode($d); return $d; } function cd($x){ $em=o2(); $uw=strlen($em); $x=base64_decode($x); $iw=strlen($x); $d=''; for ($r=0; $r < $iw; ++ $r){ $cu=(ord($x[$r]) + 256-ord($em[$r%$uw])) % 256; if ($cu===0) break; $d.=chr($cu); } return $d; } function vd(){ global$settings; if (r2()) { return null; } else { return [ 'form-action' => jv('e2s_sign_in'), 'form-check-password-action' => jv('e2j_check_password'), 'login-name' => @$settings['author'], 'public-pc?' => false, 'reset-href' => jv('e2m_password_reset'), ]; } } $_candies_installer=array ( 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', 'e2s_update_perform', ); $_candies_public=array ( 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_tags', 'e2m_tag', 'e2m_untagged', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_sitemap_xml', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_notify', 'e2s_dump', ); $_candies_to_disallow_in_read_only=array ( 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2m_note_flag_favourite', 'e2m_note_flag', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2m_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ); $_candies_public=array_merge($_candies_public,$_candies_installer); $_candies_indexable=array ( 'e2m_note', ); $_candies_indexable_conditionally=array ( 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ); $_candies_ajax=array ( 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_userpic_remove', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2m_note_flag_favourite', 'e2m_comment_flag_ajax', 'e2m_tag_flag_ajax', ); function bd(){ global$settings,$_lang,$_config,$_strings,$c; if(Log::$p3)__log('Blog information'); $vu['author']=htmlspecialchars(nd(),ENT_NOQUOTES,HSC_ENC); if(array_key_exists('blog_subtitle',$settings)) { $l1=i3($settings['blog_subtitle'],'full'); $d3=$l1['text-final']; $vu['subtitle']=$d3; $vu['subtitle-format-info']=$l1['meta']; na(@$l1['meta']['links-required']); } $vu['title']=htmlspecialchars(yd(),ENT_NOQUOTES,HSC_ENC); $vu['userpic-set?']=false; $vu['userpic-changeable?']=r2(); if ($vu['userpic-href']=md()) { $vu['userpic-set?']=true; $vu['userpic-large-href']=md('large'); $vu['userpic-square-href']=md('square'); $vu['userpic-changeable-href']=$vu['userpic-href']; } else { unset ($vu['userpic-href']); } if (r2()) { $vu['userpic-upload-action']=jv('e2j_userpic_upload'); $vu['userpic-remove-action']=jv('e2j_userpic_remove'); } $vu['href']=jv('e2m_frontpage', array ('page' => 1)); $vu['rss-href']=jv('e2m_rss'); $vu['jsonfeed-href']=jv('e2m_json'); $vu['language']=$_lang; $vu['show-subscribe-button?']=false; if(E2_EDITION){ $vu['show-subscribe-button?']=true; } $rb=array (time(),ay()); $bu=xy('Y',$rb[0]); $vu['now']=$rb; $yu=$bu; $nu=ms('start'); if(array_key_exists('stamp',$nu)) { $yu=xy('Y',$nu['stamp']); $vu['start-time'] = array ((int)$nu['stamp'],$nu['timezone']); } $mu=false; $fu=xm(true,true); if ($fu!==null){ if (r2()) { $du=xm(true,false); if ($du!==null){ $mu=($fu+$du==0); } } else { $mu=($fu==0); } } $vu['notes-count'] = (int)$fu; $vu['virgin?']=$mu; $su=$_config['years_range_separator']? $_config['years_range_separator']:$_strings['gs--range-separator']; $vu['years-range']=$yu . (($yu==$bu)? '':($su.$bu)); if ($c){ $vu['parent-site-href']=substr($c, (int)strpos('/',$c)); } return $vu; } function yd(){ global$settings,$_strings; if ( array_key_exists('blog_title',$settings) and trim($settings['blog_title']) != '' ){ return trim($settings['blog_title']); } else { return$_strings['e2--default-blog-title']; } } function nd(){ global$settings,$_strings; if ( array_key_exists('author',$settings) and trim($settings['author']) != '' ){ return trim($settings['author']); } else { return$_strings['e2--default-blog-author']; } } function md($size=''){ global$full_blog_url; if (!is_file($fb=USER_FOLDER .'userpic@2x.png')) { if (!is_file($fb=USER_FOLDER .'userpic@2x.jpg')) { return false; } } if($size=='large' and is_file(USER_FOLDER .'userpic-large@2x.jpg')) { $fb=USER_FOLDER .'userpic-large@2x.jpg'; } if($size=='square' and is_file(USER_FOLDER .'userpic-square@2x.jpg')) { $fb=USER_FOLDER .'userpic-square@2x.jpg'; } $ey=stat($fb); if ($ey['mtime']) { $fb.='?'. $ey['mtime']; } $au=$full_blog_url .'/'. $fb; return $au; } function fd(){ global$_config,$_stopwatch,$vz; $qu=round(w()-$_stopwatch,3); return [ 'show?' => ($_config['display_stat'] > (int) !r2()), 'generation-time' => str_replace('.',',',$qu), 'peak-memory-mb' => str_replace('.',',',round((memory_get_peak_usage()/1024/1024)*100)/100), 'db-query-count' => (int) @$vz, ]; } function e2m_info(){ global$settings,$_config,$v,$c,$_template; $hv=array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (fn_()!==null), 'server_name' => $v, 'folder_on_server' => $c, '---', 'default formatter' => $_config['default_formatter'], '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba max_image_width' => $_template['max_image_width'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr(md5(file_get_contents('system/neasden/neasden.php')), 0,4), '---', ); echo '<pre>'; foreach ($hv as $t => $kf){ if ($kf=='---'){ echo "\n"; continue; } echo str_pad($t,24); echo '\''; print_r($kf); echo '\''; echo "\n"; } echo '</pre>'; die; } function e2s_notify(){ global$_config; if($_config['holborn']) { $lu=@$_GET['src']; if ($lu==''){ if(Log::$p3)__log('Holborn: No src URL'); die; } $zu=file_get_contents($lu); $zu=qd($zu); $ku=json_decode($zu,true); if (!$ku){ if(Log::$p3)__log('Holborn: No meaningful info from '. $lu .' ('. json_last_error() .')'); if ($xu=sd($lu)) { if(Log::$p3)__log('Holborn: Delete note with ID '. $xu['ID']); nm($xu['ID']); } die; } dd($ku,$lu); } die; } function e2m_sources($parameters){ global$_config; $eu=$_GET['ord']; if (!$eu)$eu='ID'; $eu="`". tn($eu) ."`"; en( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix']."Sources` " . "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY ". $eu ); $a1=rn(); foreach ($a1 as $vm){ $ru=$vm['ID']; if ($vm['ID']!=$vm['TrueID'])$ru.='<br />'. $vm['TrueID']; $w7=array ( 'id' => $ru, 'userpic-href' => $vm['PictureURL'], 'href' => $vm['URL'], 'href-display' => str_replace('/','/<wbr>',$vm['URL']), 'href-filtered' => str_replace('/','/<wbr>',$vm['_URLX']), 'title' => $vm['Title'], 'author' => $vm['AuthorName'], 'true?' => $vm['ID']==$vm['TrueID'], 'whitelisted?' => (bool)$vm['IsWhiteListed'], 'trusted?' => (bool)$vm['IsTrusted'], ); if (!$vm['IsTrusted']) { $w7['trust-url']=jv( 'e2m_source_trust', array ('source' => $vm['ID']) ); } if ($vm['IsTrusted']) { $w7['premoderate-url']=jv( 'e2m_source_premoderate', array ('source' => $vm['ID']) ); } $w7['ban-url']=jv( 'e2m_source_ban', array ('source' => $vm['ID']) ); $w7['forget-url']=jv( 'e2m_source_forget', array ('source' => $vm['ID']) ); $tu[] = $w7; } $d=array ( 'title' => 'Sources', 'heading' => 'Sources', ); if(count($tu)) { $d['sources']=$tu; } else { $d['nothing']='No sources'; } return $d; } function e2m_source_trust($parameters){ global$_config; $ju=$parameters['source']; en( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ju, 'trust source' ); en( "UPDATE  ". $_config['db_table_prefix']."Notes ". "SET `IsPublished`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ju, 'publish all notes from the just trusted source' ); la(); qs(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function e2m_source_premoderate($parameters){ global$_config; $ju=$parameters['source']; en( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ju, 'distrust source, set to premoderation' ); qs(); c(); } function e2m_source_ban($parameters){ global$_config; $ju=$parameters['source']; en( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ju, 'ban source' ); en( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ju, 'delete all notes from the just banned source' ); qs(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function e2m_source_forget($parameters){ global$_config; $ju=$parameters['source']; en( "DELETE FROM  ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ju, 'forget source' ); en( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ju, 'delete all notes from the just forgotten source' ); qs(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function dd($hu,$lu){ global$_config; $gu=ld(array ( 'author' => $hu['author']['name'], 'title' => $hu['title'], 'href' => $hu['author']['url'], 'userpic-href' => $hu['author']['avatar'], )); if (!$gu['IsWhiteListed']) return; if(preg_match('/\+(\d\d)\:(\d\d)/',$hu['items'][0]['date_published'],$y3)) { $bl=$y3[1]*SECONDS_IN_AN_HOUR+$y3[2]*SECONDS_IN_A_MINUTE; } $wu=@$hu['items'][0]['_e2_data'] or $wu=array(); $wu=json_encode($wu); $uu=$gu['IsTrusted']; $y2=array ( 'Title' => $hu['items'][0]['title'], 'Text' => $hu['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime($hu['items'][0]['date_published']), 'Offset' => (int)$bl, 'IsDST' => 0, 'LastModified' => strtotime($hu['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $uu, 'IsExternal' => 1, 'SourceID' => $gu['ID'], 'SourceNoteID' => $hu['items'][0]['id'], 'SourceNoteURL' => $hu['items'][0]['url'], 'SourceNoteJSONURL' => $lu, 'SourceNoteData' => $wu, ); $q6=$hu['items'][0]['id']; if ( $xu=ad($gu['ID'],$q6) ) { $y2['ID']=$xu['ID']; nn('Notes',$y2); } else { $y2=yn('Notes',$y2); } if ($uu){ if (ka($y2)) { $y2['IsIndexed']='1'; nn('Notes',$y2); } } e2_drop_caches_for_note_($y2['ID'],$uu); if($_config['backup_automatically']) { jn(); } } function sd($lu){ global$_config; en( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceNoteJSONURL`='". $lu ."' ". "LIMIT 1", 'get note ID by source JSON URL' ); $a1=rn(); return $a1[0]; } function ad($ju,$iu){ global$_config; en( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`= '". $ju ."' ". "AND `SourceNoteID`= '". $iu ."' ". "LIMIT 1", 'get note ID by source ID and source note ID' ); $a1=rn(); return $a1[0]; } function qd($zu){ for ($r=0; $r <= 31; ++$r){ $zu=str_replace(chr($r),'',$zu); } $zu=str_replace(chr(127),'',$zu); if(0===strpos(bin2hex($zu),'efbbbf')) { $zu=substr($zu,3); } return $zu; } function ld($ou){ global$_config; $pu=false; en( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `URL`= '". $ou['href'] ."' ". "LIMIT 1", 'get source record by the URL from blog info' ); $a1=rn(); if(count($a1)) { $pu=$a1[0]; if ($pu['ID']!=$pu['TrueID']) { en( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`= '". $pu['TrueID'] ."' ". "LIMIT 1", 'get true source record by using the TrueID of just found record' ); $a1=rn(); if(count($a1)) { $pu=$a1[0]; } } } $gu=array ( 'Title' => $ou['title'], 'AuthorName' => $ou['author'], 'PictureURL' => $ou['userpic-href'], ); if ($pu!==false){ if ( $pu['Title']!==$ou['title'] or $pu['AuthorName']!==$ou['author'] or $pu['PictureURL']!==$ou['userpic-href'] ) { $gu['ID']=$pu['ID']; nn('Sources',$gu); } return $pu; } else { $gu['URL']=$ou['href']; $gu['IsWhiteListed']=1; $gu['IsTrusted']=0; $gu=yn('Sources',$gu); $gu['TrueID']=$gu['ID']; nn('Sources',$gu); return $gu; } } function zd($y2){ global$_config; $hj=array(); if (@$y2['IsExternal']) { if(array_key_exists('SourceID',$y2)) { en( "SELECT * FROM `". $_config['db_table_prefix']."Sources` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $y2['SourceID'] ."'", 'get source by id' ); $ib=rn(); $hj['source']=$ib[0]['Title']; $hj['source-id'] = (int)$y2['SourceID']; $hj['source-true-id'] = (int)$ib[0]['TrueID']; $hj['source-whitelisted?'] = (bool)$ib[0]['IsWhiteListed']; $hj['source-trusted?'] = (bool)$ib[0]['IsTrusted']; if (!$ib[0]['IsTrusted']) { $hj['source-trust-url']=jv( 'e2m_source_trust', array ('source' => $y2['SourceID']) ); } if ($ib[0]['IsTrusted']) { $hj['source-premoderate-url']=jv( 'e2m_source_premoderate', array ('source' => $y2['SourceID']) ); } $hj['source-ban-url']=jv( 'e2m_source_ban', array ('source' => $y2['SourceID']) ); $hj['source-forget-url']=jv( 'e2m_source_forget', array ('source' => $y2['SourceID']) ); $hj['author']=$ib[0]['AuthorName']; $hj['author-href']=$ib[0]['URL']; $hj['userpic-href']=$ib[0]['PictureURL']; } if(array_key_exists('SourceNoteURL',$y2) and @$y2['SourceNoteURL']!=''){ $hj['href-external']=$y2['SourceNoteURL']; } } return $hj; } function e2m_frontpage($parameters=[]) { global$settings,$_strings,$_config; if(Log::$p3)__log('Frontpage {'); $re=r2(); $frontpageView=new AePageableNotesView('e2m_frontpage',$parameters); $frontpageView -> setPortionSize($settings['appearance']['notes_per_page']); $frontpageView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $frontpageView -> setWantPaging(true); $frontpageView -> setWantNewCommentsCount($re); $frontpageView -> setWantReadHrefs($_config['count_reads']); $frontpageView -> setWantControls($re and !@$_config['read_only']); $frontpageView -> setWantRelatedNotes(true); if(E2_EDITION){ $frontpageView -> setWantPreviewHrefs(true); } if(CACHE_FRONTPAGE and $frontpageView -> isFirstPage()) { if ($re){ $frontpageView -> setCacheFilename(CACHE_FILENAME_FRONTPAGE_AUTHOR); } else { $frontpageView -> setCacheFilename(CACHE_FILENAME_FRONTPAGE); } } $frontpageView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm($re). "ORDER BY `Stamp` DESC" ); $d=[ 'title' => yd(), 'heading' => '', 'notes' => $frontpageView -> getNotesCTree(), 'pages' => $frontpageView -> getPagesCTree(), 'frontpage?' => $frontpageView -> isFirstPage(), ]; if ( !$frontpageView -> isExistingPage() and !$frontpageView -> isFirstPageOfEmptyView() ) { return e2_error404_mode(); } if(Log::$p3)__log('} // Frontpage'); return $d; } function e2m_json($parameters=array ()) { list ($c0,$wg)=jd(); $zu=json_encode($c0,E2_JSON_STYLE); ud($zu,$wg,'json'); } function e2m_rss($parameters=array ()) { list ($c0,$wg)=jd(); $v0=e2feeds__rss_using_jsonfeed_array_($c0); ud($v0,$wg,'rss'); } function e2m_tag_json($parameters=array ()) { if(array_key_exists('*tag',$parameters)) { $a2=$parameters['*tag']; } else { return e2_error404_mode(); } list ($c0,$wg)=hd($a2); $zu=json_encode($c0,E2_JSON_STYLE); ud($zu,$wg,'json'); } function e2m_tag_rss($parameters=array ()) { global$settings,$_config,$_strings; if(array_key_exists('*tag',$parameters)) { $a2=$parameters['*tag']; } else { return e2_error404_mode(); } list ($c0,$wg)=hd($a2); $v0=e2feeds__rss_using_jsonfeed_array_($c0); ud($v0,$wg,'rss'); } function e2m_note_json($parameters=array ()) { global$settings,$_current_url; $y2=$parameters['*note']; if ($y2==false) return e2_error404_mode(); $re=r2(); if (!( rm($y2)==='public' or ($re and $y2['IsPublished']) )) return e2_error404_mode(); $wg=$y2['Stamp']; $b0=e2_jsonfeed_item_array_from_noterec_($y2); $y0=array ($b0); $c0=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($y0); $c0['title']=yd(); $c0['_rss_description']=td(); $c0['home_page_url']=jv('e2m_frontpage', array ('page' => 1)); $c0['feed_url']=$_current_url; ud(json_encode($c0,E2_JSON_STYLE),$wg,'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($y0){ global$_lang,$_config,$settings; $d=[ 'version' => 'https://jsonfeed.org/version/1', 'title' => null, '_rss_description' => null, '_rss_language' => $_lang, '_itunes_email' => '', '_itunes_categories_xml' => '', '_itunes_image' => '', '_itunes_explicit' => '', 'home_page_url' => null, 'feed_url' => null, 'icon' => md(), 'author' => array ( 'name' => nd(), 'url' => jv('e2m_frontpage', array ('page' => 1)), 'avatar' => md(), ), 'items' => $y0, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ]; if(E2_EDITION){ $d['_itunes_email']=htmlspecialchars(@$settings['author_email'],ENT_NOQUOTES,HSC_ENC); $d['_itunes_categories_xml']=$_config['rss_itunes_categories_xml']; $d['_itunes_image']=md('square'); $d['_itunes_explicit']=$_config['rss_itunes_explicit']; } return $d; } function e2_jsonfeed_item_array_from_noterec_($y2){ global$settings; $dm=jv('e2m_note', array ('*note' => $y2)); $n0=( xy('Y-m-d\TH:i:s',$y2['Stamp']) . gy($y2['Stamp'],':') ); $m0=( xy('Y-m-d\TH:i:s',$y2['LastModified']) . gy($y2['LastModified'],':') ); $f0=( xy('D, d M Y H:i:s ',$y2['Stamp']) . gy($y2['Stamp']) ); $l1=u3($y2['FormatterID'], @$y2['Text'],'full-rss'); $ce=d3( sb( $l1['meta']['resources-detected'], q3('note',$y2['ID']) ) ); $kq=array ( 'id' => (string)$y2['ID'], 'url' => $dm, 'title' => h3($y2['Title']), 'content_html' => $l1['text-final'], 'date_published' => $n0, 'date_modified' => $m0, ); if ($y2['IsExternal']) { $s0=zd($y2); $kq['url']=$s0['href-external']; $kq['author'] = array ( 'name' => $s0['author'], 'url' => $s0['author-href'], 'avatar' => $s0['userpic-href'], ); } if(count($ce) > 0){ $kq['image']=$ce[0]; } $kq['_date_published_rfc2822']=$f0; if ($y2['Stamp'] < $settings['v3223_rss_permalinks_before_stamp']) { $kq['_rss_guid_is_permalink']='true'; $kq['_rss_guid']=$kq['url']; } else { $kq['_rss_guid_is_permalink']='false'; $kq['_rss_guid'] = (string)$y2['ID']; } if(E2_EDITION){ $kq['_rss_enclosures']=hb( $l1['meta']['resources-detected'] ); } $kq['_e2_data'] = array ( 'is_favourite' => (bool)$y2['IsFavourite'], 'links_required' => $l1['meta']['links-required'], 'og_images' => $ce, ); return $kq; } function ed($a0,$e6,$eq){ global$_newsfeeds; if (!isset ($_newsfeeds))$_newsfeeds=[]; $q0=''; if ($a0=='rss')$q0='application/rss+xml'; if ($a0=='json')$q0='application/json'; $_newsfeeds[] = [ 'type' => $q0, 'title' => htmlspecialchars($e6,ENT_NOQUOTES,HSC_ENC), 'href' => $eq ]; } function rd(){ global$_config; en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm(). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get recent public noterecs for RSS or JSONFeed' ); return rn(); } function td(){ global$settings; if (!empty ($settings['meta_description'])) { $l0=strip_tags(h3(htmlspecialchars($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } elseif (!empty ($settings['blog_subtitle'])) { $l1=i3($settings['blog_subtitle'],'full'); $l0=$l1['text-final']; $l0=em($l0); } else { $l0=yd(); } return $l0; } function jd(){ global$settings,$_current_url; $wg=0; $y0=array(); $c0=array(); $ut=CACHE_FILENAME_FRONTPAGE_FEED; if(CACHE_FRONTPAGE_FEED and is_file($ut)) { if(Log::$p3)__log('Feed array (RSS, JSON): cached'); $c0=@unserialize(file_get_contents($ut)); $wg=filemtime($ut); } else { if(Log::$p3)__log('Feed array (RSS, JSON): not cached, will need to build'); $vt=rd(); foreach ($vt as $y2){ $y0[] = e2_jsonfeed_item_array_from_noterec_($y2); $wg=max($wg,$y2['Stamp']); } $c0=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($y0); $c0['title']=yd(); $c0['_rss_description']=td(); $c0['home_page_url']=jv('e2m_frontpage', array ('page' => 1)); $c0['feed_url']=$_current_url; if(CACHE_FRONTPAGE_FEED)n3($ut,serialize($c0)); } return array ($c0,$wg); } function hd($a2){ global$settings,$_config,$_strings,$_current_url; $wg=0; $y0=array(); en( "SELECT n.* ". "FROM `". $_config['db_table_prefix']."Notes` n ". "INNER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (nk.`KeywordID` = ". $a2['ID'] .") ". "AND n.`IsPublished` = 1 ". tm(r2()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get tag noterecs for RSS or JSONFeed' ); $vt=rn(); foreach ($vt as $y2){ $y0[] = e2_jsonfeed_item_array_from_noterec_($y2); $wg=max($wg,$y2['Stamp']); } if ((string)$a2['Summary']!==''){ $l0=strip_tags(h3(htmlspecialchars($a2['Summary'],ENT_NOQUOTES,HSC_ENC))); } else if ((string)$a2['Description']!==''){ $l1=i3($a2['Description'],'full'); $l0=$l1['text-final']; $l0=em($l0); } else { $l0=td(); } $yj=htmlspecialchars($a2['PageTitle'],ENT_COMPAT,HSC_ENC); if ((string)$yj!==''){ $e6=$yj; } else { $e6=( yd() .': '. $_strings['gs--posts-tagged'] .' '. htmlspecialchars($a2['Keyword'],ENT_COMPAT,HSC_ENC) ); } $c0=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($y0); $c0['title']=$e6; $c0['_rss_description']=$l0; $c0['home_page_url']=jv('e2m_tag', array ('*tag' => $a2)); $c0['feed_url']=$_current_url; if(E2_EDITION){ $ce=d3( sb( $l1['resources-detected'], q3('tag',$a2['ID']) ) ); if(count($ce) > 0){ $c0['_itunes_image']=$ce[0]; } } return array ($c0,$wg); } function e2feeds__rss_using_jsonfeed_array_($content){ $z0=USER_FOLDER.'rss/rss.tmpl.php'; if (!is_file($z0)) { $z0=DEFAULTS_FOLDER.'rss/rss.tmpl.php'; } if(is_file($z0)) { ob_start(); include $z0; $v0=ob_get_contents(); ob_end_clean(); } return $v0; } function wd($v0){ $v0=str_replace("\x0",'',$v0); for ($r=0; $r < strlen($v0); ++$r){ if(ord($v0[$r]) < 32 and !in_array(ord($v0[$r]), array (10,13))) { $v0[$r]=''; } } return $v0; } function ud($k0,$wg,$a0){ global$_config; $x0=gmdate('r',$wg); $e0=md5($wg); if ($a0=='rss'){ if (@$_config['dev_xml_as_text']) { header('Content-Type: text/plain'); } else { header('Content-Type: application/xml; charset=utf-8'); } } elseif ($a0=='json'){ header('Content-Type: application/json'); } else { header('Content-Type: text/plain'); } header('Last-modified: '. $x0); header('Etag: '. $e0); header('Cache-Control: public'); header('Expires: '. date('r',$wg+SECONDS_IN_A_DAY)); $r0=isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $t0=isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$r0 && !$t0 or $t0 && $t0!=$e0 or $r0 && $r0!=$x0 ){ if ($a0=='rss'){ $v0=wd($v0); } ini_set('zlib.output_compression',0); echo $k0; ini_set('zlib.output_compression',1); } else { header('HTTP/1.1 304 Not Modified'); } die; } function e2m_year($parameters=array ()) { global$_strings,$_config; $j0=$parameters['year']; $h0=e2l_get_string('pt--nth-year', array ('year' => $j0)); if (!pd($j0)) { return e2_error404_mode(); } $g0=gmmktime(0,0,0,1,1,$j0-1); $w0=gmmktime(0,0,0,1,1,$j0+1); list ($u0,$i0)=e2__fruitful_neighbours_with_ymd_($j0); $o0='e2m_year'; if ($u0){ $p0['prev-href']=jv( $o0,e2__parameters_with_timestamp_($u0) ); $p0['prev-jump?'] = (bool) (gmdate('Y',$g0)!=gmdate('Y',$u0)); $p0['prev-title']=gmdate('Y',$u0); } if ($i0){ $p0['next-href']=jv( $o0,e2__parameters_with_timestamp_($i0) ); $p0['next-jump?'] = (bool) (gmdate('Y',$w0)!=gmdate('Y',$i0)); $p0['next-title']=gmdate('Y',$i0); } $p0['timeline?']=false; $p0['this']=$j0; $p0['this-title']=$j0; $c9=ms('start'); $v9=ms('end'); if ( $j0==ky('Y',$c9['stamp'],$c9['timezone']) ) { $b9=ky('m',$c9['stamp'],$c9['timezone']); } else { $b9=1; } if ( $j0==xy('Y',time()) ) { $y9=xy('m',time()); } else { $y9=12; } $n9=ys($j0); for ($m9=1; $m9 <= 12; ++ $m9){ $f9=gmmktime(0,0,0,$m9,1,$j0); $d9[$m9] = array ( 'number' => $m9, 'start-time' => array ($f9,sy()), 'href' => gmdate('Y/m/',$f9), 'real?' => $m9 >= $b9 and $m9 <= $y9, 'fruitful?' => @in_array(gmdate('n',$f9),$n9), ); } list ($gr,$wr)=jy($j0); $d=[ 'title' => $h0, 'heading' => $h0, 'pages' => $p0, 'year' => (int)$j0, 'year-months' => $d9, ]; en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm(r2()). "AND `Stamp` BETWEEN ". $gr ." ". "AND ". $wr ." ". "ORDER BY `Stamp`", 'get all notes for the year' ); $a1=rn(); $l5=bs($a1,$j0); if(count($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_month($parameters=array ()) { global$_strings,$_config; $j0= $parameters['year']; $m9=$parameters['month']; $h0=e2l_get_string( 'pt--nth-month-of-nth-year', array ('year' => $j0,'month' => $m9) ); if (!pd($j0,$m9)) { return e2_error404_mode(); } $g0=gmmktime(0,0,0,$m9-1,1,$j0); $w0=gmmktime(0,0,0,$m9+1,1,$j0); list ($u0,$i0)=e2__fruitful_neighbours_with_ymd_($j0,$m9); $o0='e2m_month'; if ($u0){ $p0['prev-href']=jv( $o0,e2__parameters_with_timestamp_($u0) ); $p0['prev-jump?'] = (bool) (gmdate('Y/m',$g0)!=gmdate('Y/m',$u0)); $p0['prev-title']=e2l_get_string( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate('Y',$u0),'month' => gmdate('n',$u0) ) ); } if ($i0){ $p0['next-href']=jv( $o0,e2__parameters_with_timestamp_($i0) ); $p0['next-jump?'] = (bool) (gmdate('Y/m',$w0)!=gmdate('Y/m',$i0)); $p0['next-title']=e2l_get_string( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate('Y',$i0),'month' => gmdate('n',$i0) ) ); } $p0['timeline?']=false; $p0['this-title']=$h0; list ($gr,$wr)=jy($j0,$m9); $d=[ 'title' => $h0, 'heading' => $h0, 'pages' => $p0, 'year' => (int)$j0, 'month' => (int)$m9, 'month-days' => e2_pack_month_days_with_ymd_($j0,$m9,false), ]; en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm(r2()). "AND `Stamp` BETWEEN ". $gr ." ". "AND ". $wr ." ". "ORDER BY `Stamp`", 'get all notes for the month' ); $a1=rn(); $l5=bs($a1,$j0,$m9); if(count($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_day($parameters=array ()) { global$_strings,$_config; $j0= (int)$parameters['year']; $m9=(int)$parameters['month']; $a9= (int)$parameters['day']; if (!(pd($j0,$m9,$a9))) { return e2_error404_mode(); } $h0=e2l_get_string( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $j0,'month' => $m9,'day' => $a9) ); $g0=gmmktime(0,0,0,$m9,$a9-1,$j0); $w0=gmmktime(0,0,0,$m9,$a9+1,$j0); list ($u0,$i0)=e2__fruitful_neighbours_with_ymd_($j0,$m9,$a9); $o0='e2m_day'; if ($u0){ $p0['prev-href']=jv( $o0,e2__parameters_with_timestamp_($u0) ); $p0['prev-jump?'] = (bool) (gmdate('Y/m/d',$g0)!=gmdate('Y/m/d',$u0)); $p0['prev-title']=e2l_get_string( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate('Y',$u0),'month' => gmdate('n',$u0),'day' => gmdate('j',$u0), ) ); } if ($i0){ $p0['next-href']=jv( $o0,e2__parameters_with_timestamp_($i0) ); $p0['next-jump?'] = (bool) (gmdate('Y/m/d',$w0)!=gmdate('Y/m/d',$i0)); $p0['next-title']=e2l_get_string( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate('Y',$i0),'month' => gmdate('n',$i0),'day' => gmdate('j',$i0), ) ); } $p0['timeline?']=false; $p0['this-title']=$h0; $d=[ 'title' => $h0, 'heading' => $h0, 'pages' => $p0, 'month-days' => e2_pack_month_days_with_ymd_($j0,$m9,$a9), ]; $a1=sm($j0,$m9,$a9); $a1=array_reverse($a1); $re=r2(); $l5=[]; foreach ($a1 as $t => $y2){ if (!( rm($y2)==='public' or ($re and $y2['IsPublished']) )) continue; $noteView=new AeNoteView($y2); $noteView -> setWantNewCommentsCount($re); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($re and !@$_config['read_only']); $noteView -> setWantCommentsLink(true); $l5[] = $noteView -> getNoteCTree(); } if(count($l5)) { $d['notes']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function id(){ global$_config; $l5=null; if(CACHE_FULLLIST and is_file(CACHE_FILENAME_FULLLIST)) { $l5=@unserialize(file_get_contents(CACHE_FILENAME_FULLLIST)); if(Log::$p3)__log('Retrieving full notes list from cache...'); } if (!is_array($l5)) { if(Log::$p3)__log('Retrieving full notes list from database...'); en( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm(). "ORDER BY `Stamp`", 'get full notes list' ); $a1=rn(); $l5=bs($a1); if(CACHE_FULLLIST)n3(CACHE_FILENAME_FULLLIST,serialize($l5)); } return $l5; } function e2m_everything($parameters=array ()) { global$_strings; $l5=id(); $q9=count($l5); $h0=e2l_get_string('pt--n-posts', array ('number' => $q9)); $d=[ 'title' => $h0, 'heading' => $h0, ]; if(count($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-notes']; } return $d; } function e2m_sitemap_xml($parameters=array ()) { global$_config; $l5=id(); if (@$_config['dev_xml_as_text']) { header('Content-Type: text/plain'); } else { header('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; if(count($l5)) { $wg=@$l5[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. jv('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo gmdate('Y-m-d\TH:i:s\Z',$wg[0]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($l5 as $q2){ echo '<url>'."\r\n"; echo '<loc>'; echo $q2['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo gmdate('Y-m-d\TH:i:s\Z',$q2['last-modified'][0]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function e2_pack_month_days_with_ymd_($j0,$m9,$a9){ $l9=ky('t',gmmktime(0,0,0,$m9,1,$j0),sy()); $c9=ms('start'); $v9=ms('end'); if ( $j0 .'/'. $m9 == ky('Y/n',$c9['stamp'],$c9['timezone']) ) { $z9=ky('d',$c9['stamp'],$c9['timezone']); } else { $z9=1; } if ( $j0 .'/'. $m9 == xy('Y/n',time()) ) { $k9=xy('d',time()); } else { $k9=$l9; } $x9=ns($j0,$m9); for ($r=1; $r <= $l9; ++ $r){ $f9=gmmktime(0,0,0,$m9,$r,$j0); $e9[$r] = array ( 'number' => $r, 'start-time' => array ($f9,sy()), 'href' => gmdate('Y/m/d/',$f9), 'this?' => (bool) ($r==$a9), 'real?' => $r >= $z9 and $r <= $k9, 'fruitful?' => @in_array(gmdate('d',$f9),$x9), ); } return $e9; } function pd($j0,$m9=false,$a9=false){ $c9=ms('start'); if ($c9===false){ return false; } $r9=ky('Y',$c9['stamp'],$c9['timezone']); $t9=xy('Y',time()); if ($m9===false){ return (bool) ( $j0 >= $r9 and $j0 <= $t9 ); } else { $j9=ky('n',$c9['stamp'],$c9['timezone']); $h9=xy('n',time()); if ($a9===false){ return (bool) ( $m9 >= 1 and $m9 <= 12 and ( ($j0 > $r9 and $j0 < $t9) or ($j0==$r9 and $m9 >= $j9) or ($j0==$t9 and $m9 <= $h9) ) ); } else { $g9=ky('j',$c9['stamp'],$c9['timezone']); $w9=xy('j',time()); if(1){ return (bool) ( checkdate($m9,$a9,$j0) and ( ($j0 > $r9 and $j0 < $t9) or ($j0==$r9 and $m9 > $j9) or ($j0==$r9 and $m9==$j9 and $a9 >= $g9) or ($j0==$t9 and $m9 < $h9) or ($j0==$t9 and $m9==$h9 and $a9 <= $w9) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($hb,$jb=false,$tb=false){ global$_db,$_config; list ($u9,$i9)=jy($hb,$jb,$tb); $o9=SECONDS_IN_A_DAY; if ($tb===false)$o9=SECONDS_IN_A_MONTH; if ($jb===false)$o9=SECONDS_IN_A_YEAR; $p9=$ci=null; en( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` < '". ($i9-$o9) ."' ". tm(r2()). "ORDER BY Stamp DESC", 'get previous fruitful neighbour with ymd' ); while ($u=mysqli_fetch_array($_db['result'],MYSQLI_ASSOC)) { list ($j0,$m9,$a9)=explode('/', ky('Y/n/j',$u['Stamp'],dy($u)) ); $vi=$hb*10000 + ($jb? ($jb*100):0) + ($tb? $tb:0); $bi=$j0*10000 + ($jb? ($m9*100):0) + ($tb? $a9:0); if ($bi < $vi){ $p9=gmmktime(0,0,0,$m9,$a9,$j0); break; } } en( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` > '". ($u9+$o9) ."' ". tm(r2()). "ORDER BY Stamp", 'get next fruitful neighbour with ymd' ); while ($u=mysqli_fetch_array($_db['result'],MYSQLI_ASSOC)) { list ($j0,$m9,$a9)=explode('/', ky('Y/n/j',$u['Stamp'],dy($u)) ); $vi=$hb*10000 + ($jb? ($jb*100):0) + ($tb? $tb:0); $bi=$j0*10000 + ($jb? ($m9*100):0) + ($tb? $a9:0); if ($bi > $vi){ $ci=gmmktime(0,0,0,$m9,$a9,$j0); break; } } return [$p9,$ci]; } function e2__parameters_with_timestamp_($y4){ list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode('/',gmdate('Y/m/d',$y4)); return$parameters; } function bs($vt,$j0=false,$m9=false){ $yi=0; $l5=array(); $j7=''; $l5=array(); $ni=array(); foreach ($vt as $t => $y2){ $q2['href'] = jv('e2m_note', array ('*note' => $y2)); $q2['time'] = array ((int)min($y2['Stamp'],time()), dy($y2)); $q2['last-modified'] = array ((int)min($y2['LastModified'],time()), dy($y2)); $q2['favourite?'] = (bool) ($y2['IsFavourite'] && $y2['IsPublished']); $ee=rm($y2); $q2['draft?'] = $ee==='draft'; $q2['scheduled?'] = $ee==='scheduled'; $q2['public?'] = $ee==='public'; $q2['hidden?'] = $ee==='hidden'; if(array_key_exists('SourceNoteURL',$y2) and @$y2['SourceNoteURL']!=''){ $q2['href']=$y2['SourceNoteURL']; $q2['href-original']=$y2['SourceNoteURL']; } if ( ($j0 and $m9 and ( ((int)$j0) .'/'. ((int)$m9) == ky('Y/n',$y2['Stamp'],dy($y2)) )) or ($j0 and !$m9 and ( (int)$j0 == ky('Y',$y2['Stamp'],dy($y2)) )) or (!$j0 and !$m9) ) { array_unshift($l5,$q2); array_unshift($ni,str_replace("\n",' ',$y2['Title'])); } } if(Log::$p3)__log('Will do typography'); $mi=implode("\n",$ni); $mi=h3(htmlspecialchars($mi,ENT_NOQUOTES,HSC_ENC)); $ni=explode("\n",$mi); foreach ($l5 as $t => $kf){ $l5[$t]['title']=$ni[$t]; } return $l5; } function ys($hb){ global$_config; list ($fi,$di)=jy($hb); en( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $fi. "' AND '". $di ."' ". tm(r2()), 'get all notes for the year '. $hb .' to list months with notes' ); $a1=rn(); $si=array(); foreach ($a1 as $ur){ if ( ((int)$hb) == ky('Y',$ur['Stamp'],dy($ur)) ) { $si[] = (int)ky('n',$ur['Stamp'],dy($ur)); } } $si=@array_unique($si); sort($si); return $si; } function ns($hb,$jb){ global$_config; list ($ai,$qi)=jy($hb,$jb); en( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $ai ."' AND '". $qi ."' ". tm(r2()), 'get all notes for the month '.$jb.' of the year '. $hb .' to list days with notes' ); $a1=rn(); $li=array(); foreach ($a1 as $ur){ if ( ((int)$hb) .'/'. ((int)$jb) == ky('Y/n',$ur['Stamp'],dy($ur)) ) { $li[] = (int)ky('j',$ur['Stamp'],dy($ur)); } } $li=@array_unique($li); sort($li); return $li; } function ms($zi){ global$_config; $ki='p1'; if (!r2()) { $ki='p1v1'; } $ut=CACHES_FOLDER.$zi .'-stamp-'. $ki .'.e2time.psa'; if(CACHE_EDGE_TIMEINFO and is_file($ut)) { $d=@unserialize(file_get_contents($ut)); } if(is_array($d)) { return $d; } else { $d=array ( 'stamp' => time(), 'timezone' => ay(), ); if ($zi=='start'){ en( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm(r2()). "ORDER BY `Stamp` LIMIT 1", 'get blog start timestamp' ); } elseif ($zi=='end'){ en( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm(r2()). "ORDER BY `Stamp` DESC LIMIT 1", 'get blog latest note timestamp' ); } $a1=rn(); if(count($a1)) { $d=array ( 'stamp' => $a1[0]['Stamp'], 'timezone' => dy($a1[0]), ); if(CACHE_EDGE_TIMEINFO)n3($ut,serialize($d)); return $d; } return $d; } } define('CACHE',true); define('CACHE_ALIASMAP',CACHE and true); define('CACHE_NOTES',CACHE and true); define('CACHE_NOTES_RELATED',CACHE and true); define('CACHE_NOTES_COMMENTS',CACHE and true); define('CACHE_POPULAR',CACHE and true); define('CACHE_POPULAR_WITH_TAG',CACHE and true); define('CACHE_TAGS',CACHE and true); define('CACHE_FAVTAGS',CACHE and true); define('CACHE_NOTES_COUNTS',CACHE and true); define('CACHE_EDGE_TIMEINFO',CACHE and true); define('CACHE_FRONTPAGE',CACHE and true); define('CACHE_FRONTPAGE_FEED',CACHE and true); define('CACHE_TAG',CACHE and true); define('CACHE_FULLLIST',CACHE and true); define('CACHE_DRAFTS',CACHE and true); define('CACHE_DRAFTS_ALIAS_USE_COUNTS',CACHE and true); define('CACHE_LASTMODIFIEDS',CACHE and true); define('CACHE_FILENAME_ALIASMAP',CACHES_FOLDER.'aliasmap.psa'); define('CACHE_FILENAMES_NOTES',CACHES_FOLDER.'note-*.psa'); define('CACHE_FILENAMES_NOTES_RELATED',CACHES_FOLDER.'note-*-related.psa'); define('CACHE_FILENAMES_NOTES_COMMENTS',CACHES_FOLDER.'note-*-comments.ctree.psa'); define('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR',CACHES_FOLDER.'note-*-comments-author.ctree.psa'); define('CACHE_FILENAMES_NOTES_COUNTS',CACHES_FOLDER.'notes-count-*.txt'); define('CACHE_FILENAMES_EDGE_TIMEINFO',CACHES_FOLDER.'*.e2time.psa'); define('CACHE_FILENAME_POPULAR',CACHES_FOLDER.'popular.ctree.psa'); define('CACHE_FILENAME_POPULAR_EXPIRES',CACHES_FOLDER.'popular-expires.txt'); define('CACHE_FILENAMES_POPULAR_WITH_TAG',CACHES_FOLDER.'popular-*.ctree.psa'); define('CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES',CACHES_FOLDER.'popular-*-expires.txt'); define('CACHE_FILENAME_TAGS',CACHES_FOLDER.'tags.ctree.psa'); define('CACHE_FILENAME_TAGS_FULL',CACHES_FOLDER.'tags-full.ctree.psa'); define('CACHE_FILENAME_TAGS_AUTHOR',CACHES_FOLDER.'tags-author.ctree.psa'); define('CACHE_FILENAME_TAGS_AUTHOR_FULL',CACHES_FOLDER.'tags-author-full.ctree.psa'); define('CACHE_FILENAME_FAVTAGS',CACHES_FOLDER.'favtags.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE',CACHES_FOLDER.'frontpage.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE_AUTHOR',CACHES_FOLDER.'frontpage-author.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE_FEED',CACHES_FOLDER.'frontpage-feed.psa'); define('CACHE_FILENAMES_TAG',CACHES_FOLDER.'tag-*.ctree.psa'); define('CACHE_FILENAMES_TAG_AUTHOR',CACHES_FOLDER.'tag-*-author.ctree.psa'); define('CACHE_FILENAME_FULLLIST',CACHES_FOLDER.'notes-list.ctree.psa'); define('CACHE_FILENAME_DRAFTS',CACHES_FOLDER.'drafts.psa'); define('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS',CACHES_FOLDER.'drafts-auc.psa'); define('CACHE_FILENAME_LASTMODIFIEDS',CACHES_FOLDER.'last-modifieds-by-id.psa'); function e2_cache_filename_with_id_($ks,$ki){ return str_replace('*',$ks,$ki); } function e2_note_cache_filename_with_id_($ks){ return e2_cache_filename_with_id_($ks,CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($q6,$qr){ if(is_numeric($q6)) { if(Log::$p3)__log('Caches: Drop caches for note id '. $q6); @unlink(e2_note_cache_filename_with_id_($q6)); @unlink(e2_note_cache_filename_with_id_($q6 .'-comments')); @unlink(e2_note_cache_filename_with_id_($q6 .'-comments-author')); } else { r(CACHE_FILENAMES_NOTES); r(CACHE_FILENAMES_NOTES_COMMENTS); r(CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } ls(); if ($qr!==false){ zs(); r(CACHE_FILENAMES_NOTES_RELATED); r(CACHE_FILENAMES_POPULAR_WITH_TAG); r(CACHE_FILENAMES_TAG); r(CACHE_FILENAMES_TAG_AUTHOR); @unlink(CACHE_FILENAME_POPULAR); @unlink(CACHE_FILENAME_FRONTPAGE); @unlink(CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink(CACHE_FILENAME_FRONTPAGE_FEED); @unlink(CACHE_FILENAME_FULLLIST); @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); } if ($qr!==true){ @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } @unlink(CACHE_FILENAME_LASTMODIFIEDS); } function e2_drop_caches_for_tag_($zj){ if(is_numeric($zj)) { @unlink(e2_cache_filename_with_id_($zj,CACHE_FILENAMES_TAG)); @unlink(e2_cache_filename_with_id_($zj,CACHE_FILENAMES_TAG_AUTHOR)); } else { r(CACHE_FILENAMES_TAG); r(CACHE_FILENAMES_TAG_AUTHOR); } @unlink(CACHE_FILENAME_FAVTAGS); @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); } function qs(){ if(Log::$p3)__log('Caches: Drop notes caches'); e2_drop_caches_for_note_(null,null); } function ls(){ if(Log::$p3)__log('Caches: Drop notes counts cache'); r(CACHE_FILENAMES_NOTES_COUNTS); } function zs(){ if(Log::$p3)__log('Caches: Drop egde time info cache'); r(CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache(){ if(Log::$p3)__log('Caches: Drop all kinds of caches'); r(CACHES_FOLDER.'*'); return true; } define('OLBA_SPECIAL_CHAR',"\x1"); define('OLBA_SPECIAL_SEQUENCE_LENGTH',6); function ks($xi=null){ global$_template,$_config,$settings; if ($xi===null)$xi=@$settings['template']; $ei=null; $ri=null; $ti=null; $ji=null; $hi=array(); $gi=$xi; if ($gi!==null){ while (1){ if(Log::$p3)__log('Prepare theme "'. $gi .'"'); $wi=TEMPLATES_FOLDER.$gi .'/'; if ( !is_dir($wi) or !is_file($wi .'/theme-info.php') ) { if(Log::$p3)__log('Theme "'. $gi .'" not found, using default theme "'. DEFAULT_TEMPLATE .'"'); $gi=DEFAULT_TEMPLATE; $wi=TEMPLATES_FOLDER.$gi .'/'; } array_push($hi,$wi); $ui=include $wi .'/theme-info.php'; $ii[$wi]=$ui; if(array_key_exists('max_image_width',$ui)) { if ($ei===null){ $ei=$ui['max_image_width']; } } if(array_key_exists('meta_viewport',$ui)) { if ($ri===null){ $ri=$ui['meta_viewport']; } } if(array_key_exists('supports_dark_mode',$ui)) { if ($ti===null){ $ti=$ui['supports_dark_mode']; } } if(array_key_exists('use_likely_light',$ui)) { if ($ji===null){ $ji=$ui['use_likely_light']; } } if(array_key_exists('based_on',$ui)) { $gi=$ui['based_on']; } else { break; } } } if ($ei===null){ $ei=$_config['max_image_width']; } if ($ri===null)$ri=''; if ($ti===null)$ti=false; if ($ji===null)$ji=false; $wi=SYSTEM_TEMPLATE_FOLDER; array_push($hi,$wi); $_template['name']=$xi; $_template['max_image_width']=$ei; $_template['meta_viewport']=$ri; $_template['supports_dark_mode']=$ti; $_template['use_likely_light']=$ji; $_template['stack']=$hi; $_template['infos']=$ii; }; function xs($oi){ global$content; if (!isset ($_olba_includes))$_olba_includes=0; ++ $_olba_includes; if(Log::$p3)__log('Eat "'. $oi .'"'); ob_start(); include $oi; return ob_get_clean(); } function es($az){ return ( OLBA_SPECIAL_CHAR. str_pad($az,OLBA_SPECIAL_SEQUENCE_LENGTH,'0',STR_PAD_LEFT). OLBA_SPECIAL_CHAR ); } function rs($name){ static $az=0; ma($name,'_olba_placeholders'); return es($az ++); } function ts($pi){ global$_olba_placeholders; foreach($_olba_placeholders as $az => $s){ $co=es($az); $vo=strpos($pi,$co); $bo=hs($s,true); if ($vo!==false){ $pi=substr_replace( $pi,$bo,$vo,strlen($co) ); } else { break; } } return $pi; } function js($yo){ if(is_dir(EXTRAS_FOLDER)) { $no=EXTRAS_FOLDER.$yo .'.tmpl.php'; if(is_file($no)) { return xs($no); } } return ''; } function hs($yo){ global$_template,$_olba_includes; $no='templates/'. $yo .'.tmpl.php'; if ($oi=e2o__usable_file_with_basename_($no)) { return xs($oi); } else { ob_end_clean(); throw new AeOlbaTemplateMissingException('Missing: '. $no); } } function gs(){ global$_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists('raw',$_GET) ) { $mo='raw'; } else { $mo='main'; } return hs($mo,true); } function ws($fo){ ma($fo .'.css','_olba_used_stylesheets'); } function us($do_){ ma($do_ .'.js','_olba_used_scripts'); } function is($so){ foreach (array (SYSTEM_LIBRARY_FOLDER,USER_LIBRARY_FOLDER) as $ao){ foreach(glob($ao.$so .'/*') as $my){ $la=pathinfo($my,PATHINFO_EXTENSION); if ($la=='js'){ ma($my,'_olba_used_scripts'); } if ($la=='css'){ ma($my,'_olba_used_stylesheets'); } } } } function os(){ global$_template,$_config,$settings; if ($qo=@opendir(TEMPLATES_FOLDER)) { while (false !== ($lo=readdir($qo))) { if(is_dir(TEMPLATES_FOLDER. $lo) and $lo!='.' and $lo!='..'){ if(is_file(TEMPLATES_FOLDER.$lo .'/theme-info.php')) { $zo[$lo]=TEMPLATES_FOLDER.$lo .'/'; } } } closedir($qo); } $wa=array(); $ko=1000; foreach ($zo as$name => $ra){ $ui=include $ra .'theme-info.php'; $n3=@$ui['display_name']; if (!$n3) continue; if(is_array($n3)) { if(array_key_exists($settings['language'],$n3)) { $n3=$n3[$settings['language']]; } else { $n3=array_shift($n3); } } $az=@$ui['index'] or $az=$ko ++; $xo=@$ui['colors']; if (!$xo)$xo=array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $eo=(bool) ($name==$_template['name']); if ($eo){ $ro=jv('e2m_theme_preview', array ('theme' => '')); } else { $ro=jv('e2m_theme_preview', array ('theme' => $name)); } $wa[$az] = array ( 'name' => $name, 'display-name' => $n3, 'colors' => $xo, 'current?' => $eo, 'preview-url' => $ro, 'supports-dark-mode?' => $ui['supports_dark_mode'], ); } ksort($wa); return $wa; } function ps($fb){ return e2o__usable_file_with_basename_('images/'. $fb); } function ca($to){ return file_get_contents(e2o__usable_file_with_basename_('images/'. $to .'.svg')); } function va($fo){ global$_template; $xa='styles/'. $fo .'.css'; $jo=array(); foreach($_template['stack'] as $wi){ if(is_file($fb=$wi.$xa)) { $jo[] = $fb; } if ( array_key_exists('reset_styles',$_template['infos'][$wi]) and in_array($fo,$_template['infos'][$wi]['reset_styles']) ) { break; } } $jo=array_reverse($jo); } function ba(){ global$_olba_used_stylesheets,$_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets=array_unique($_olba_used_stylesheets); $ho=array(); foreach($_olba_used_stylesheets as $fo){ if(is_file($fo)) { $ho[] = $fo; continue; } if(is_file($fb=USER_FOLDER .'js/'. $fo)) { $ho[] = $fb; } $xa='styles/'. $fo; $jo=array(); foreach($_template['stack'] as $wi){ if(is_file($fb=$wi.$xa)) { $jo[] = $fb; } if ( array_key_exists('reset_styles',$_template['infos'][$wi]) and in_array($fo,$_template['infos'][$wi]['reset_styles']) ) { break; } } $jo=array_reverse($jo); $ho=array_merge($ho,$jo); } if(E2_EDITION){ foreach($_template['stack'] as $wi){ if(array_key_exists('global_styles',$_template['infos'][$wi])) { $ho[] = $_template['infos'][$wi]['global_styles']; } } } foreach ($ho as $t => $kf){ $ey=stat($kf); $ho[$t].='?'. $ey['mtime']; } return $ho; } function ya(){ global$_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts=array_unique($_olba_used_scripts); $go=array(); foreach($_olba_used_scripts as $do_){ if ( substr($do_,0,7)=='http://' or substr($do_,0,8)=='https://' or substr($do_,0,2)=='//' ){ $go[] = $do_; continue; } if(is_file($do_)) { $go[] = $do_; continue; } if(is_file($wo=USER_FOLDER .'js/'. $do_)) { $go[] = $wo; } $xa='js/'. $do_; if ($wo=e2o__usable_file_with_basename_($xa)) { $go[] = $wo; } } foreach ($go as $t => $kf){ $ey=stat($kf); if ($ey['mtime']) { $go[$t].='?'. $ey['mtime']; } } return $go; } function na($uo){ if (!is_array($uo)) return; foreach ($uo as $bz){ if(substr($bz, -3)=='.js'){ us(substr($bz,0, -3)); } if(substr($bz, -4)=='.css'){ ws(substr($bz,0, -4)); } } } function ma($s,$hv){ if (!isset ($GLOBALS[$hv])) { $GLOBALS[$hv] = array ($s); } else { $GLOBALS[$hv][] = $s; } } function e2o__usable_file_with_basename_($xa){ global$_template; if (!isset ($_template))ks(); foreach($_template['stack'] as $wi){ if(is_file($fb=$wi.$xa)) { return $fb; } } return ''; } function e2m_theme_preview($parameters){ global$_lang,$_strings,$_superconfig,$_template; if (@$_superconfig['disallow_themes_preview']) { return e2_error404_mode(); } if($parameters['theme']==$_template['name']) { c(jv('e2m_theme_preview', array ('theme' => ''))); } if($parameters['theme']) { ks($parameters['theme']); } $io=$_lang; if (!is_file($my='system/preview/'. $io .'.php')) { $io=$_strings['--secondary-language']; $my='system/preview/'. $io .'.php'; } if (!is_file($my='system/preview/'. $io .'.php')) { $my='system/preview/'. DEFAULT_LANGUAGE .'.php'; } $kq=include $my; return $kq; } if(E2_EDITION){ function da($oo){ if(substr($oo, -1)=='_'){ $d['has-horizontal-rule?']=true; $oo=substr($oo,0, -1); } else { $d['has-horizontal-rule?']=false; } if(substr($oo, -1)=='|'){ $d['has-vertical-rule?']=true; $oo=substr($oo,0, -1); } else { $d['has-vertical-rule?']=false; } $d['has-image?'] = (strpos('WwFftG',$oo[0]) !== false); $d['has-large-image?'] = (strpos('WwFG',$oo[0]) !== false); $d['has-thumb?'] = ('t'==$oo[0]); $d['has-side-image?'] = (strpos('|FL|FR|fl|fr|','|'. substr($oo,0,2) .'|')!==false); $d['has-large-side-image?'] = (strpos('|FL|FR|','|'. substr($oo,0,2) .'|')!==false); $d['has-large-left-image?'] = ('FL'==substr($oo,0,2)); $d['has-large-right-image?'] = ('FR'==substr($oo,0,2)); $d['has-large-title?'] = (strpos('HWFG',$oo[0]) !== false); $d['has-jumbo-title?'] = ('J'==$oo[0]); $d['has-summary?'] = (substr($oo, -1)=='s'); return $d; } function sa($cp,$vp){ global$_config; $bp=$_config['fitter_debug']; $yp=$_config['fitter_ignore_constraints']; $np=$_config['fitter_ignore_default_constraints']; $mp=$_config['fitter_force_seed']; $fp=$_config['fitter_force_layout']; $dp=require DEFAULTS_FOLDER. 'layouts.php'; $fu=count($cp); $sp=0; foreach ($cp as $q2) if(count($q2['images'])) ++ $sp; if ($bp){ echo '<div class="e2-error" style="background: #f0f0f0; padding: .5em 2em; margin-bottom: 1em">'; echo '<p><b>'. $fu .' notes to fit</b></p>'; echo '<div style="padding-left: 2em">'; echo '<ul>'; foreach ($cp as $ap => $q2){ echo '<li>#'.$ap.' "'.$q2['title'] .'" has '. count($q2['images']) .' image(s)<br />'; foreach ($q2['images'] as $qp => $y1){ echo '#'. $qp .'. w='. $y1['width'] .' h='. $y1['height'] .' v='. $y1['verticality'] .'. '; } echo '</li>'; } echo '</ul>'; echo '</div>'; echo '<br />'; echo '<p>'. $sp. ' of '. $fu .' notes contain images</p>'; echo '<p><b>h'. $fu .'i'. $sp. '</b> has to fit</p>'; echo '<br />'; } $lp=[]; $zp=[]; $kp=[]; foreach ($dp as $xp => $ep){ $rp=0; $tp=0; $jp=[]; if ($bp) echo '<p><b>'. $xp .'</b></p>'; foreach ($ep['areas'] as $hp => $gp){ list ($wp,$up,$ip)=$gp; if (!is_array($wp))$wp=[$wp]; foreach ($wp as $op){ $rp ++; if (da($op) ['has-image?']) { $tp ++; } } $pp=da($wp[0]); if ($pp['has-large-image?'] and !$np){ if (empty ($ip['iv>']))$ip['iv>']=.34; if (empty ($ip['iv<=']))$ip['iv<=']=.67; } if ($pp['has-thumb?'] and !$np){ if (empty ($ip['iv>']))$ip['iv>']=.2; if (empty ($ip['iv<=']))$ip['iv<=']=2; } if ($yp){ $ip=null; } if(is_array(@$ip)) { if ($bp) echo '<div style="padding-left: 2em">'; if ($bp) echo '<p><b>area #'. $hp .'</b> has '. count($ip) .' constraint(s), finding a matching note...</p>'; if ($bp) echo '<div style="padding-left: 2em">'; if ($bp) echo '<ul>'; $ccv=false; foreach ($cp as $ap => $q2){ if (@$jp[$q2['id']]) { if ($bp) echo '<li>note "'. $q2['title'] .'" already used once in layout '. $xp .', skipping</li>'; continue; } elseif ($pp['has-image?'] and !count($q2['images'])) { if ($bp) echo '<li>note "'. $q2['title'] .'" has no images, but the area requires them</li>'; continue; } else { if ($bp) echo '<li>note "'. $q2['title'] .'": </li>'; } if(1){ if ($bp) echo '<li>title of "'. $q2['title'] .'" has length='. mb_strlen($q2['title']) .'<br />'; $ccv=true; foreach ($ip as $vcv => $bcv){ if ($vcv[0]!=='h') continue; if ($vcv=='hl<'){ $ccv=$ccv && (mb_strlen($q2['title']) < $bcv); } elseif ($vcv=='hl>='){ $ccv=$ccv && (mb_strlen($q2['title']) >= $bcv); } else { if ($bp) echo 'unknown text constraint '. $vcv .'<br />'; } if ($bp) echo ( 'checked '. $vcv.$bcv .', '. 'pass='. (int)$ccv .'<br />' ); if (!$ccv) break; } if ($bp) echo '</li>'; if (!$ccv) continue; if ($bp) echo '<b>title of note "'. $q2['title'] .'"</b> (#'. $ap .') may be used for area #'. $hp .' of layout '. $xp .' if everything is OK with images<br />'; $jp[$q2['id']] = true; $zp[$xp][$hp] = [$ap,0]; } if (!$pp['has-image?']) { if ($bp) echo 'area accepts no images<br />'; } else { foreach ($q2['images'] as $ycv => $ncv){ if ($bp) echo '<li>'. basename($ncv['src']) .' (#'. $ycv .') of note "'. $q2['title'] .'" has '; if ($bp) echo 'width='. $ncv['width'] .', verticality='. $ncv['verticality'] .'<br />'; $ccv=true; foreach ($ip as $vcv => $bcv){ if ($vcv[0]!=='i') continue; if ($vcv=='iw>='){ $ccv=$ccv && ($ncv['width'] >= $bcv); } elseif ($vcv=='iv<='){ $ccv=$ccv && ($ncv['verticality'] <= $bcv); } elseif ($vcv=='iv>'){ $ccv=$ccv && ($ncv['verticality'] > $bcv); } else { if ($bp) echo 'unknown image constraint '. $vcv .'<br />'; } if ($bp) echo 'checked '. $vcv.$bcv .', pass='. (int)$ccv .'<br />'; if (!$ccv) break; } if ($ccv){ if ($bp) echo '<b>' .basename($ncv['src']) .' (#'. $ycv .') of note "'. $q2['title'] .'"</b> (#'. $ap .') will be used for area #'. $hp .' of layout '. $xp .'<br />'; $jp[$q2['id']] = true; $zp[$xp][$hp] = [$ap,$ycv]; } if ($bp) echo '</li>'; if ($ccv) break; } } if ($ccv) break; } if ($bp){ if (!$ccv) echo '<b>failed</b> to find fit, the layout can’t be used<br />'; echo '</div>'; echo '</ul>'; echo '</div>'; } if (!$ccv) break; } else { $ccv=true; } } if (!$ccv) continue; if ($rp > $fu) continue; if ($tp > $sp) continue; if (!$rp) continue; $lp[$tp][] = $xp; if ($ep['rank'] >= 100){ $kp[] = $xp; } if (!isset ($ep['rank'])) { $mcv=0; } else { $mcv=$ep['rank']; } $mcv *= 1+$tp; $fcv[$xp]=$mcv; } $dcv=$sp; while (empty ($lp[$dcv]) and $dcv > 0)--$dcv; $scv=$lp[$dcv]; $scv=array_merge($scv,$kp); $zcv=0; if (isset ($mp) and is_int($mp)) { $vp=$mp; } else { } if (!empty ($scv)) { $zcv=$vp % count($scv); } if (isset ($fp) and is_string($fp)) { $xp=$fp; } else { $xp=$scv[$zcv]; } $ep=$dp[$xp]; if ($bp){ echo '<br />'; echo '<p>Good options:</p>'; echo '<ul>'; foreach ($scv as $xcv => $ecv){ if ($xp===$ecv){ echo '<li>#'. $xcv .'. <b>'. $ecv.'</b> (rank '. $fcv[$ecv] .') ← winner</li>'; } else { echo '<li>#'. $xcv .'. '. $ecv .' (rank '. $fcv[$ecv] .')</li>'; } } echo '</ul>'; echo '<br />'; if (isset ($mp) and is_int($mp)) echo '<p><b>Debugging with forced seed '. $mp .'</b></p>'; echo '<p>Using option '. $zcv. ' of 0...'. (count($scv)-1) .' (seed is '. $vp. ')</p>'; echo '<p><b>Layout '. $xp .'</b> wins, '. $dcv .' of '. $sp .' images will fit</p>'; echo '<br />'; } $rcv=[]; $tcv=[]; if (!empty ($zp[$xp])) { $rcv=$zp[$xp]; foreach ($rcv as $jcv){ list ($ap, ) = $jcv; $tcv[$ap]=true; } if ($bp){ echo '<p><b>Layout has constraints</b>, '. count($rcv) .' good fits were pre-selected</p>'; } } if ($bp){ echo '</div>'; } $hcv['debugging?'] = (bool)$bp; $hcv['grid-rows'] = @$ep['grid-rows'] or $hcv['grid-rows']=1; $hcv['areas'] = []; foreach ($ep['areas'] as $gcv => $gp){ list ($wp,$up,$ip)=$gp; if (!is_array($wp))$wp=[$wp]; $wcv=false; $ucv=false; $icv=[]; foreach ($wp as $ocv => $po){ $pcv=da($po); $pcv['index']=$ocv; $pcv['has-image?'] = ($pcv['has-image?'] and $ocv < $dcv); if ( !empty ($rcv[$gcv]) and $ocv===0 ){ list ($ap,$cvv)=$rcv[$gcv]; if (!($cvv > 0))$cvv=0; $q2=$cp[$ap]; $vvv[$ap]=true; if ($bp){ $pcv['debug-selectedness']='pre-selected: note #'. $ap; if ($cvv > 0){ $pcv['debug-selectedness'].=' image #'. $cvv; } } } else { $cvv=0; foreach ($cp as $ap => $q2){ if (empty ($vvv[$ap]) and empty ($tcv[$ap])) { $q2=$cp[$ap]; $vvv[$ap]=true; break; } } if ($bp){ $pcv['debug-selectedness']='whatever: note #'. $ap; } } $pcv['note']=$q2; $pcv['note-image-index']=$cvv; if ($bp){ $pcv['debug-descriptor']=$po; } $icv[] = $pcv; $wcv=( $wcv or $pcv['has-vertical-rule?'] ); $ucv=( $ucv or $pcv['has-horizontal-rule?'] ); } $bvv=[ 'index' => $gcv, 'grid-area' => $up, 'has-vertical-rule?' => $wcv, 'has-horizontal-rule?' => $ucv, 'items' => $icv, ]; if ($bp){ $bvv['debug-descriptors-list']=implode($wp,','); } $hcv['areas'][$gcv]=$bvv; } return $hcv; } } define('SEARCH_EXTRA_PREFIX','Rose'); define('SEARCH_LIMIT',20); define('SEARCH_SNIPPETS_LIMIT',20); define('SEARCH_USE_ROSE',1); define('SEARCH_USE_MYSQL',1); define('BSI_SELECT_PORTION',10); define('BSI_GIVE_UP_TIMEOUT',10); define('BSI_UNLOCK_TIMEOUT',10); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Storage\Database\MysqlRepository; use S2\Rose\Stemmer\PorterStemmerEnglish; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Entity\ExternalContent; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found($parameters=array ()) { global$_strings,$_config,$settings,$full_blog_url; $parameters['query']=trim($parameters['query']); $vf=$parameters['query']; if (!$vf){ return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $yvv=false; $bj=[]; try { en( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". tn($vf) ."'", 'get tags matching the search query' ); $ib=rn(); if (isset ($ib[0]['ID'])) { $yvv=[ 'href' => jv('e2m_tag', array ('*tag' => $ib[0])), 'name' => htmlspecialchars($vf,ENT_NOQUOTES,HSC_ENC), ]; $bj=mf($ib[0]['ID'],4); array_unshift($bj,$yvv); } } catch (AeMySQLException $e){ kv($e,'Could not get tags matching the search query'); } $nvv=n(' ',$parameters['query']); if(SEARCH_USE_ROSE){ $mvv=new PorterStemmerRussian(new PorterStemmerEnglish()); foreach ($nvv as $t => $kf){ $nvv[$t]=$mvv -> stemWord($nvv[$t]); } } $fvv=array(); $re=r2(); if(SEARCH_USE_ROSE){ try { $o3=ta(); $dvv=new Finder($o3,$mvv); $dvv -> setHighlightTemplate('<mark>%s</mark>'); $svv=new Query($vf); $svv -> setInstanceId($_config['db_table_subset']); $svv -> setLimit(SEARCH_LIMIT); $resultSet=$dvv -> find($svv); foreach($resultSet -> getFoundExternalIds() as $avv){ $qvv=$avv -> getId(); if ($qvv[0]=='n'){ $q6=substr($qvv,1); $y2=mm($q6); if (!empty ($_config['search_favourites_boost'])) { if ($y2['IsFavourite']) { $resultSet->setRelevanceRatio( $qvv, $_config['search_favourites_boost'] ); } } } } $snippetBuilder=new SnippetBuilder($mvv); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets( $resultSet, static function (array $zvv){ $a1=new ExternalContent(); foreach ( array_slice($zvv,0,SEARCH_SNIPPETS_LIMIT) as $avv ){ $qvv=$avv -> getId(); if ($qvv[0]=='n'){ $q6=substr($qvv,1); $y2=mm($q6); if ($y2){ $noteView=new AeNoteView($y2); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($re and !@$_config['read_only']); $a6=$noteView -> getNoteCTree(); $kvv[$y2['ID']] = $a6; $a1 -> attach($avv,$a6['text']); } } } return $a1; } ); foreach($resultSet -> getItems() as $xvv){ $evv=$xvv -> getId(); if ($evv[0]=='n'){ $q6=substr($evv,1); $y2=mm($q6); if (!( rm($y2)==='public' or ($re and $y2['IsPublished']) )) continue; $y2['_']['_srprovider']='Rose'; $y2['_']['_rose_relevance']=$xvv -> getRelevance(); $y2['_']['_rose_title']=$xvv -> getHighlightedTitle($mvv); $y2['_']['_rose_snippet']=$xvv -> getSnippet(); $fvv[] = $y2; } } if (@$_config['dev_rose_info']) { $rvv=print_r($resultSet -> getTrace(),true); } } catch (EmptyIndexException $e){ kv($e,'Rose index is empty'); } catch (AeMySQLException $e){ kv($e,'Could not do something with the database while working on Rose search results'); } } if(SEARCH_USE_MYSQL){ $tvv=tn(preg_quote($vf)); $jvv=( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 AND MATCH (`Title`, `Text`) AGAINST ('". $tvv ."') ". tm($re). "LIMIT ". SEARCH_LIMIT ); try { en( $jvv, 'search using MySQL fulltext search' ); $a1=rn(); foreach ($a1 as $t => $y2){ $y2['_']['_srprovider']='MySQL'; $fvv[] = $y2; } } catch (AeMySQLException $e){ kv($e,'Could not search using MySQL fulltext search'); } } $hvv=array(); $l5=array(); $r=0; foreach ($fvv as $y2){ if (!in_array($y2['ID'],$hvv)) { if (!empty ($kvv[$y2['ID']])) { $q2=$kvv[$y2['ID']]; } else { $noteView=new AeNoteView($y2); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($re and !@$_config['read_only']); $q2=$noteView -> getNoteCTree(); } $q2['search-result-provider']=$y2['_']['_srprovider']; if ($y2['_']['_srprovider']=='Rose'){ $q2['search-rose'] = [ 'relevance' => $y2['_']['_rose_relevance'], 'title' => $y2['_']['_rose_title'], 'snippet' => $y2['_']['_rose_snippet'], ]; } if (@$y2['_']['_rose_title']) { $q2['title']=$y2['_']['_rose_title']; } else { $q2['title']=ja($q2['title'],$nvv); } $q2['title']=h3($q2['title']); if (!empty ($y2['_']['_rose_snippet'])) { $q2['snippet-text']=$y2['_']['_rose_snippet']; } else { $tv=$q2['text']; $tv=preg_replace('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i','',$tv); $tv=preg_replace('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i','',$tv); $tv=str_replace( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $tv ); $tv=strip_tags($tv); $gvv=array(); $wvv=preg_split('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis',$tv); $uvv=0; $ivv=''; foreach ($wvv as $ovv){ $ovv=trim($ovv); if (!$ovv) continue; if (!$ivv)$ivv=$ovv; $pvv=$ovv; $pvv=ja($pvv,$nvv); if ($pvv!=$ovv){ $gvv[] = ha($pvv); $uvv ++; if ($uvv > 3) break; } } if(count($gvv)) { $q2['snippet-text']=implode(' · ',$gvv); } else { $q2['snippet-text']=$ivv; } } $q2['has-highlighed-thumbs?']=false; if ($hs=@$q2['format-info']['resources-detected']) { $cbv=qb( db($hs) ); foreach ($cbv as $t => $kf){ $cbv[$t]['highlighted?'] = ( strstr($kf['original-filename'],$vf)!==false ); if ($cbv[$t]['highlighted?']) { $q2['has-highlighted-thumbs?']=true; } } $q2['thumbs']=$cbv; } $l5[] = $q2; $hvv[] = $y2['ID']; $r ++; if ($r >= SEARCH_LIMIT) break; } } $fj=count($l5); if ($fj){ $vbv=e2l_get_string( 'pt--n-posts', array ('number' => $fj) ); } else { $vbv=$_strings['pt--no-posts']; $d['nothing']=$_strings['gs--nothing-found']; } if ($r >= SEARCH_LIMIT){ $vbv=$_strings['gs--many-posts']; } if ($bj){ $d['search-related-tags']=$bj; } $d['notes']=$l5; $d['pages'] = array (); $d['title']=$vbv .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars($vf,ENT_NOQUOTES,HSC_ENC); $d['heading']=$vf; if (@$rvv){ $d['rose-debug-info']=$rvv; } return $d; } function aa($parameters){ if(Log::$p3)__log('Search form'); $vf=trim((string) @$parameters['query']); return [ 'form-action' => jv('e2s_search'), 'query' => htmlspecialchars($vf,ENT_COMPAT,HSC_ENC), ]; } function e2s_search(){ $vf=@$_POST['query']; $vf=str_replace('?',urlencode('?'),$vf); $vf=str_replace('/',' ',$vf); $vf=trim($vf); $vf=str_replace(' ','+',$vf); c(jv('e2m_found', array ('query' => $vf))); } function qa(){ global$_config; $bbv=@unserialize(file_get_contents(USER_FOLDER.'indexing.psa')); if (!is_array($bbv))$bbv=array ('spent' => '?'); $ybv=$nbv=$dv='?'; try { en( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ", 'count total published notes' ); $dy=rn(); $ybv=$dy[0]['c']; en( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=1 AND `IsPublished`=1 ", 'count indexed published notes' ); $dy=rn(); $nbv=$dy[0]['c']; } catch (AeMySQLException $e){ kv($e,'Could not count some notes'); return false; } return [ 'indexed_count' => $nbv, 'total_count' => $ybv, 'time_spent' => $bbv['spent']? $bbv['spent']:false, ]; } function e2s_bsi_step(){ global$_db,$_config,$_strings; echo '<pre>'; if($_config['log_bsi']) { Log::$p3=true; if(Log::$p3)bv('bsi'); } if(Log::$p3)__log('BSI step'); if (!za()) { if(Log::$p3)__log('Not indexing'); die ('Not indexing</pre>'); } $bbv=@unserialize(file_get_contents(USER_FOLDER.'indexing.psa')); if (!is_array($bbv))$bbv=array ('spent' => '?'); if ( !isset ($bbv['lock']) or $bbv['lock'] < time() - (BSI_GIVE_UP_TIMEOUT+BSI_UNLOCK_TIMEOUT) ) { if (isset ($bbv['lock'])) { if(Log::$p3)__log('Indexer: old lock is '. $bbv['lock']); echo 'Old lock is '. $bbv['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $bbv['lock']=time(); if (!@n3(USER_FOLDER.'indexing.psa',serialize($bbv))) { if(Log::$p3)__log('Indexer: can’t get a new lock'); die ('Can’t get a new lock<br />'); } if(Log::$p3)__log('Indexer: new lock is '. $bbv['lock']); echo 'New lock is '. $bbv['lock'] .'<br /><br />'; try { $r=0; $mbv=0; $fbv=w(); $dbv=false; $dn=false; while ($mbv < BSI_GIVE_UP_TIMEOUT){ en( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION, 'get portion of unindexed notes for indexing' ); $dy=rn(); if(count($dy)) { ++ $r; if(Log::$p3)__log('Indexer: portion '. $r); echo 'Portion '. $r .'<br />'; foreach ($dy as $oq){ if(Log::$p3)__log('Indexer: indexing "'. $oq['Title'].'"'); echo 'Indexing: '. $oq['Title'] .'<br />'; if (ka($oq)) { $oq['IsIndexed']='1'; nn('Notes',$oq); } else { $dn=true; break 2; } if($_config['broadcast_on_indexing']) { by($oq); } } $mbv=round(w()-$fbv,3); if(Log::$p3)__log('Indexer: step done '. count($dy) .', spent '. $mbv .' ms so far'); echo 'Step done '. count($dy) .', spent '. $mbv .' ms so far<br /><br />'; if(Log::$p3)__log($pi); } else { $dbv=true; break; } } if ($dbv){ if(Log::$p3)__log('Indexer: indexing complete'); echo 'Indexing complete<br /><br />'; @unlink(USER_FOLDER.'indexing.psa'); } elseif ($dn){ if(Log::$p3)__log('Indexer: indexing failed'); echo 'Indexing failed<br /><br />'; } else { echo 'Time out<br />'; unset ($bbv['lock']); $bbv['done']=count($dy); if ($bbv['spent']!='?')$bbv['spent']+=$mbv; @n3(USER_FOLDER.'indexing.psa',serialize($bbv)); } } catch (AeMySQLException $e){ kv($e,'Could not index notes'); if(Log::$p3)__log('Indexer: DB unaccessible'); echo 'DB unaccessible<br />'; } } else { if(Log::$p3)__log('Indexer: locked'); echo 'Locked<br />'; } die ('</pre>'); } function e2s_bsi_drop(){ global$_db,$_config; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } try { ga(); mv('Notes marked for reindexing',E2E_MESSAGE); $o3=ta(); try { $o3 -> erase(); mv('Indexes erased',E2E_MESSAGE); } catch (\S2\Rose\Exception\RuntimeException $e){ kv($e,'Rose threw RuntimeException'); } la(); } catch (AeMySQLException $e){ kv($e,'Could not make all notes for reindexing'); } c(jv('e2m_underhood')); } function la(){ $bbv=array(); @n3(USER_FOLDER.'indexing.psa',serialize($bbv)); } function za(){ return (is_file(USER_FOLDER.'indexing.psa')); } function ka($y2){ global$_config; if(Log::$p3)__log('Indexer: index noterec'); static $sbv=null; try { if ($sbv===null){ $mvv=new PorterStemmerRussian(new PorterStemmerEnglish()); $sbv=new Indexer(ta(),$mvv); } $l1=u3($y2['FormatterID'], @$y2['Text'],'full-rss'); f3( 'note',$y2, $l1['meta']['resources-detected'] ); $tv=strip_tags($l1['text-final']); $abv=new Indexable( 'n'. $y2['ID'], $y2['Title'], $tv, $_config['db_table_subset'] ); $sbv -> index($abv); return true; } catch (\Exception $e){ kv($e,'Could not index note'); return false; } } function xa($ks){ global$_config; static $sbv=null; try { if ($sbv===null){ $mvv=new PorterStemmerRussian(new PorterStemmerEnglish()); $sbv=new Indexer(ta(),$mvv); } return $sbv -> removeById('n'. $ks,$_config['db_table_subset']); } catch (\Exception $e){ kv($e,'Could not index note'); return false; } } function ea($qbv){ $fz='S2\\Rose\\'; $lbv=__DIR__.'/library/rose/'; $x2=strlen($fz); if(strncmp($fz,$qbv,$x2)!==0) return; $zbv=substr($qbv,$x2); $my=$lbv.str_replace('\\','/',$zbv).'.php'; if(file_exists($my)) require $my; } function ra(){ return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function ta(){ global$_config,$settings; static $kbv=null; if ($kbv===null and SEARCH_USE_ROSE){ $xbv=new \PDO( 'mysql:'. 'host='. $settings['db']['server'] .';'. 'dbname='. $settings['db']['name'], $settings['db']['user_name'], cd($settings['db']['passw']) ); $pz=$xbv -> getAttribute(\PDO::ATTR_SERVER_VERSION); $ebv=version_compare($pz,'5.5.3','>=')?'utf8mb4':'utf8'; $xbv -> exec('SET NAMES '.$ebv); $xbv -> setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); $rbv=ra(); $kbv=new PdoStorage( $xbv, $_config['db_table_prefix'].SEARCH_EXTRA_PREFIX, array ( MysqlRepository::TOC => $rbv['TOC'], MysqlRepository::WORD => $rbv['WORD'], MysqlRepository::FULLTEXT_INDEX => $rbv['FULLTEXT_INDEX'], MysqlRepository::KEYWORD_INDEX => $rbv['KEYWORD_INDEX'], MysqlRepository::KEYWORD_MULTIPLE_INDEX => $rbv['KEYWORD_MULTIPLE_INDEX'], ) ); } return $kbv; } function ja($tv,$nvv){ foreach ($nvv as $pl){ if ($pl=='-') continue; $pl=preg_quote($pl,'/'); $pl=str_replace('е','[её]',$pl); $pl=str_replace('Е','[ЕЁ]',$pl); $tv=preg_replace('/(?<=^|\W)('.$pl.'[\w\p{M}]*)/iu','<mark>$1</mark>',$tv); } $tv=str_replace('</mark> <mark>',' ',$tv); $tv=str_replace('</mark> <mark>',' ',$tv); return $tv; } function ha($i2){ $tbv=mb_strtoupper(mb_substr($i2,0,1)); return $tbv.mb_substr($i2,1); } function ga(){ global$_config; en( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `IsIndexed`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'mark all notes for reindexing' ); } function e2_check_timeout(){ static $jbv; if(is_null($jbv)) { $hbv=ini_get('max_execution_time'); if ($hbv){ $jbv=time()+$hbv-5; } else { $jbv=0; } } return ($jbv==0)?true:$jbv >= time(); } function e2_write_dump_header($my){ $iq=( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($my,$iq); return true; } function e2_write_dump_footer($my){ $gbv='COMMIT;' .PHP_EOL; $gbv .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" .PHP_EOL ."/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" .PHP_EOL ."/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" .PHP_EOL ."/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;".PHP_EOL ."/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" .PHP_EOL ."/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" .PHP_EOL; fwrite($my,$gbv); return true; } function e2_get_table_definition($wbv,$mz){ $ubv=null; $a1=mysqli_query($wbv,"SHOW CREATE TABLE `{$mz}`"); if ($a1){ $ibv=mysqli_fetch_array($a1); $ubv=$ibv['Create Table']; } return $ubv; } function e2_write_table_definition($my,$wbv,$mz){ $obv=e2_get_table_definition($wbv,$mz); if(e2_check_timeout() && $obv){ fwrite($my,$obv); fwrite($my,';'); fwrite($my,PHP_EOL.PHP_EOL); return true; } return false; } function e2_get_table_data($wbv,$mz,$bl,$limit){ $vf="SELECT * FROM `{$mz}` LIMIT {$bl}, {$limit}"; $a1=mysqli_query($wbv,$vf); if (!$a1){ return false; } $pbv=''; $c3v="INSERT INTO `{$mz}` VALUES"; while ($g4=mysqli_fetch_row($a1)) { $icv=array(); foreach($g4 as $s){ $icv[] = is_null($s)?"NULL":"'".mysqli_real_escape_string($wbv,$s)."'"; } $pbv.=$c3v.'('.join(', ',$icv).');'.PHP_EOL; } return $pbv; } function e2_table_disable_keys($mz){ return "ALTER TABLE `{$mz}` DISABLE KEYS;".PHP_EOL; } function e2_table_enable_keys($mz){ return "ALTER TABLE `{$mz}` ENABLE KEYS;".PHP_EOL; } function e2_get_total_records($wbv,$mz){ $t=mysqli_fetch_row(mysqli_query($wbv,"SELECT COUNT(*) FROM `{$mz}`")); return $t[0]; } function e2_backup_select_chuck_size_for_table_($mz){ $limit=5000; if(substr($mz, -7)==='Actions')$limit=50000; if(substr($mz, -7)==='Aliases')$limit=20000; if(substr($mz, -7)==='NotesKeywords')$limit=50000; if(Log::$p3)__log('Backup: chunk size '. (int)$limit); return$limit; } function e2_write_table_data($my,$wbv,$mz){ $fj=e2_get_total_records($wbv,$mz); $bl=0; $limit=e2_backup_select_chuck_size_for_table_($mz); $a1=true; $v3v=20000; $b3v=30; if ($fj){ $y3v=e2_table_disable_keys($mz); fwrite($my,$y3v); } $pbv="INSERT INTO `{$mz}` VALUES"; $n3v=$fj; while ($n3v > 0){ $vf="SELECT * FROM `{$mz}` ORDER BY `ID` LIMIT {$bl}, {$limit}"; $a1=mysqli_query($wbv,$vf); $m3v=mysqli_num_rows($a1); if (!$a1 || !e2_check_timeout()) { $a1=false; break; } $f3v=array(); $d3v=0; $s3v=0; while ($g4=mysqli_fetch_row($a1)) { if (!e2_check_timeout()) { $a1=false; break; } $m3v--; $dz=array(); foreach($g4 as $s){ $dz[] = is_null($s)?"NULL":"'".mysqli_real_escape_string($wbv,$s)."'"; } $lv='('.join(', ',$dz).')'; $d3v+=strlen($lv); $f3v[] = $lv; $s3v++; if ( ($d3v >= $v3v) || ($s3v >= $b3v) || ($m3v==0)) { $vf=$pbv.join(', ',$f3v).';'; fwrite($my,$vf); fwrite($my,PHP_EOL); $d3v=0; $s3v=0; $f3v=array(); } } $bl+=$limit; $n3v -= $limit; } if ($fj){ $a3v=e2_table_enable_keys($mz); fwrite($my,$a3v); } return $a1; } function e2_backup($wbv,$x7,$q3v,$cb=array()) { $l3v=tmpfile(); e2_write_dump_header($l3v); if(Log::$p3)__log('Backup: wrote header'); $z3v=true; foreach($x7 as $mz){ if(Log::$p3)__log('Backup: table '. $mz); $k3v=e2_write_table_definition($l3v,$wbv,$mz); if(Log::$p3)__log('Backup: wrote table definition with result '. (int)$k3v); $x3v=e2_write_table_data($l3v,$wbv,$mz); if(Log::$p3)__log('Backup: wrote table data with result '. (int)$x3v); $z3v=$k3v && $x3v; if ($z3v===false){ break; } } if(Log::$p3)__log('Backup: wrote data with running == '. (int)$z3v); if ($z3v){ e2_write_dump_footer($l3v); fseek($l3v,0); $my=fopen($q3v,'w+'); while ($z3v && ($lv=fread($l3v,1024))) { if(e2_check_timeout()) { fwrite($my,$lv); } else { $z3v=false; } } fclose($my); } fclose($l3v); return $z3v; } function s1($e3v,$content){ $r3v=MTMPL_FOLDER.$e3v .'.mtmpl.php'; if(is_file($r3v)) { ob_start(); include $r3v; $k8=ob_get_contents(); ob_end_clean(); return trim($k8); } } function a1(){ global$_config,$_superconfig; $t3v=$_config['mail_from']; if (@$_superconfig['mail_from']) { $t3v=$_superconfig['mail_from']; } if ($t3v[strlen($t3v)-1]=='@'){ $t3v.=$_SERVER['HTTP_HOST']; } return $t3v; } function q1($w,$subject,$kn,$j3v=''){ global$_superconfig; if (@$_superconfig['mail_debug']) { $ra='mail-debug'; $fn_=basename(tempnam($ra,'m-')); $tv=( 'To:       '.$w ."\n". 'Subject:  '.$subject ."\n". $j3v ."\n". "--------------------------------------------------\n". $kn ); n3($ra .'/'. $fn_,$tv); chmod($ra .'/'. $fn_,E2_NEW_FILES_RIGHTS); rename($ra .'/'. $fn_,$ra .'/'. $fn_.'.txt'); } $subject='=?UTF-8?B?'. base64_encode($subject) .'?='; $j3v.="\r\nContent-Type: text/plain; charset=utf-8"; if(MAIL_ENABLED){ mail($w,$subject,$kn,trim($j3v)); } } function _A($tv){ global$_candy,$_protocol,$v,$c,$_current_url; if ( preg_match('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si',$tv,$y3) and ( $y3[1]==='' or $y3[1]===$_current_url or $_protocol .'://'. $v.$y3[1]===$_current_url or $_protocol .'://'. $v.$c .'/'. $y3[1]===$_current_url or $_candy=='e2m_install' ) ) { return $y3[2]; } else { return $tv; } } function _AT($eq){ global$_candy,$v,$c,$_current_url; return ( $eq==='' or $eq===$_current_url or $_protocol .'://'. $v.$eq===$_current_url or $_protocol .'://'. $v.$c .'/'. $eq===$_current_url ); } function _IMGSRC($fb){ return ps($fb); } function _SVG($fb){ return ca($fb); } function _COLOR($ax,$qx,$h3v,$g3v=1){ if(strlen($ax)!=3 and strlen($ax)!=6) return 'f0f'; if(strlen($qx)!=3 and strlen($qx)!=6) return 'f0f'; if(strlen($ax)==3)$ax=$ax[0].$ax[0].$ax[1].$ax[1].$ax[2].$ax[2]; if(strlen($qx)==3)$qx=$qx[0].$qx[0].$qx[1].$qx[1].$qx[2].$qx[2]; $ez=array ( $ax[0].$ax[1],$ax[2].$ax[3],$ax[4].$ax[5], $qx[0].$qx[1],$qx[2].$qx[3],$qx[4].$qx[5], ); foreach ($ez as $t => $kf){ $ez[$t]=hexdec($kf); } $ry=array ( $ez[0]+pow($h3v,$g3v) * ($ez[3]-$ez[0]), $ez[1]+pow($h3v,$g3v) * ($ez[4]-$ez[1]), $ez[2]+pow($h3v,$g3v) * ($ez[5]-$ez[2]), ); $w3v=''; foreach ($ry as $t => $kf){ $w3v.=str_pad(dechex($kf),2,'0',STR_PAD_LEFT); } return $w3v; } function _DT($tl,$u3v){ if (!$u3v) return ''; list ($y4,$ql)=$u3v; $d=$tl; $m9=ky('m',$y4,$ql); $d=str_replace('{zone}',e2__escape_all(my($ql['offset'])), $d); $d=str_replace('{month}',e2__escape_all(e2l_get_string('um--month', array ('month' => $m9))), $d); $d=str_replace('{month-short}',e2__escape_all(e2l_get_string('um--month-short', array ('month' => $m9))), $d); $d=str_replace('{month-g}',e2__escape_all(e2l_get_string('um--month-g', array ('month' => $m9))), $d); $d=ky($d,$y4,$ql); return $d; } function _AGO($u3v){ return oy($u3v[0], array ('offset' => $u3v[1]['offset'],'is_dst' => $u3v[1]['is_dst']) ); } function _NUM($tv){ return e2_decline_for_number($tv); } function _CSS($i3v){ return ws($i3v); } function _CSS_HREF($i3v){ return va($i3v); } function _JS($o3v){ return us($o3v); } function _LIB($so){ return is($so); } function _T($yo){ echo hs($yo); } function _T_DEFER($name){ echo rs($name); } function _X($yo){ echo js($yo); } function _T_FOR($yo,$p3v=null){ global$content; if ($p3v===null)$p3v=$yo; if(array_key_exists($p3v,$content)) { echo hs($yo); } else { echo ''; } } function _FIT($cp,$vp){ if(E2_EDITION){ return sa($cp,$vp);; } } function _GUIDES($cyv=false){ global$_olba_guides; if(is_array($cyv))$_olba_guides=$cyv; if (!is_array($_olba_guides)) return; $vyv='<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $byv=0; $yyv=$_olba_guides; $yyv[] = 100; foreach ($yyv as $r => $hk){ if ($hk==100) break; $byv+=$hk; $vyv.='<div style="position: fixed; left: '. $hk .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $nyv='position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($yyv[$r+1]-$yyv[$r] < 4){ $vyv.='<div style="'. $nyv.'; right: '. (100-$hk) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $hk .'%</div>'; } else { $vyv.='<div style="'. $nyv.'; left: '. $hk .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $hk .'%</div>'; } } $vyv.='</div>'; $_olba_current_col=0; return $vyv; } function _S($x){ global$_strings; return$_strings[$x]; } function _SHORTCUT($name){ return a($name); } function e2__escape_all($x){ $d=''; for ($r=0; $r < mb_strlen($x); ++ $r){ $d.='\\'. mb_substr($x,$r,1); } return $d; } abstract class E2GIP { protected $gip_cookie_name='gip'; protected $gip_token_cookie_name='gip_access_token'; protected $gip_token=null; abstract public function get_auth_url(); abstract public static function get_profile_url($ks,$bz); abstract public function callback(); const PHP_VERSION_VK_FEATURE=70100; public static function set_session_data($em,$s){ if(session_status()==PHP_SESSION_NONE){ session_start(); } $_SESSION[$em]=$s; } public static function get_session_data($em,$myv=false){ if(session_status()==PHP_SESSION_NONE){ session_start(); } if(!isset($_SESSION[$em])) { return null; } $s=$_SESSION[$em]; if($myv){ unset($_SESSION[$em]); } return $s; } public static function get_gips_order(){ return [ 'twitter' => 0, 'facebook' => 1, 'vk' => 2, 'telegram' => 3 ]; } public function get_config($em){ $fyv='gips/'. $this->type .'.json'; if(is_file(USER_FOLDER.$fyv)) { $zu=@file_get_contents(USER_FOLDER.$fyv); } else { $zu=@file_get_contents(SYSTEM_FOLDER.$fyv); } if ($zu!==false){ $d=json_decode($zu,true,512,JSON_BIGINT_AS_STRING)[$em]; if ($d) return $d; } return null; } public function get_callback_url(){ return jv('e2m_gip_sign_in_callback', array('provider' => $this->type)); } protected function get_proxy_param(){ global$settings; $io=DEFAULT_LANGUAGE; if(array_key_exists('language',$settings))$io=$settings['language']; return '?language='.$io.'&type='.$this->type.'&callback_url='.urlencode($this->get_callback_url()); } public function get_gip_session_data(){ global$_config; $dyv=$this->gip_token?$this->gip_token:$_COOKIE[b($this->gip_token_cookie_name)]; en( "SELECT * FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '". $this->type ."' ". "AND `SessionToken` = '".tn($dyv)."' ". "ORDER BY `ID` DESC LIMIT 1", 'get GIP session data' ); $a1=rn(); return $a1?$a1[0] : array(); } public function is_logged_in(){ if(empty($_COOKIE[b($this->gip_cookie_name)]) || !in_array($_COOKIE[b($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[b($this->gip_cookie_name)] != $this->type || empty($_COOKIE[b($this->gip_token_cookie_name)])) { return false; } $lv=$this->get_gip_session_data(); return (bool)$lv; } protected function save_session($ks,$name,$accessToken,$syv='',$userEmail='',$userLink=''){ $y4=time(); yn( 'GIPsSessions', array ( 'GIP' => $this->type, 'GIPAuthorID' => $ks, 'AuthorName' => $name, 'AuthorEmail' => $userEmail, 'AuthorProfileLink' => $userLink, 'SessionToken' => $accessToken, 'Stamp' => $y4, ), 'INSERT', 'ON DUPLICATE KEY UPDATE '. '`SessionToken` = "'.tn($accessToken).'", '. '`AuthorName` = "'.tn($name).'", '. '`Stamp` = "'.$y4.'"' ); y($this->gip_cookie_name,$this->type); y($this->gip_token_cookie_name,$accessToken); if(isset($userEmail) && !empty($userEmail))y('commenter_email',$userEmail); $this->gip_token=$accessToken; } public static function get_logout_key(){ if ($ayv=self::get_session_data('logout_key')) { return $ayv; } $ayv=md5(microtime()); self::set_session_data('logout_key',$ayv); return $ayv; } public static function is_valid_logout_key($em){ $qyv=self::get_session_data('logout_key',true); if (empty($qyv) || empty($em) || $qyv!=$em){ return false; } return true; } public function logout(){ global$_config; y($this->gip_cookie_name); y($this->gip_token_cookie_name); en( "DELETE FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '".$this->type."' ". "AND `SessionToken` = '" . tn($_COOKIE[b($this->gip_token_cookie_name)]) . "'", 'logout' ); } public function get_avatar_width(){ return USERPIC_WIDTH; } public function get_avatar_height(){ return USERPIC_HEIGHT; } public function save_avatar($ks,$lyv){ global$_config; @j(MEDIA_ROOT_FOLDER.AVATARS_FOLDER); @chmod(MEDIA_ROOT_FOLDER.AVATARS_FOLDER,$_config['uploaded_files_mode']); $fb=MEDIA_ROOT_FOLDER.AVATARS_FOLDER.$this->type .'-'. $ks .'.jpg'; if ($zyv=file_get_contents($lyv)) { file_put_contents($fb,$zyv); } return $fb; } } function e2m_gip_sign_in($lv){ global$_config,$settings; $type=$lv['provider']; $oz=e2_get_gip_instance($type); if (!$oz)v(); header('Location: '.$oz->get_auth_url()); die; } function e2m_gip_sign_in_callback($lv){ global$_config; $type=$lv['provider']; $oz=e2_get_gip_instance($type); if (!$oz){ die($type.' is not defined'); } $kyv=$oz->callback(); echo '<script>'; if ($kyv===true){ $ag=$oz->get_gip_session_data(); $xyv=[ 'name' => $ag['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized('.json_encode($xyv).');'; } else { echo 'alert (\''. $kyv. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($lv){ global$_config; $ayv=$lv['provider']; if (!E2GIP::is_valid_logout_key($ayv)) { die('invalid logout key'); } $oz=e2_get_logged_gip(); if($oz){ $oz->logout(); } v(); } function e2_list_gips(){ static $eyv=null; if(!is_null($eyv)) { return $eyv; } $ryv=SYSTEM_FOLDER. 'gips/'; $tyv=opendir($ryv); $eyv=[]; $jyv=E2GIP::get_gips_order(); $hyv=count($jyv); while (($my=readdir($tyv)) !== false){ if(pathinfo($my,PATHINFO_EXTENSION)!='php') continue; $gyv=pathinfo($my,PATHINFO_FILENAME); if ($gyv=='vk'){ if(PHP_VERSION_ID < E2GIP::PHP_VERSION_VK_FEATURE) continue; } $em=isset($jyv[$gyv]) ? $jyv[$gyv] : ++$hyv; $eyv[$em]=$gyv; } closedir($tyv); ksort($eyv); return $eyv; } function e2_get_gip_class_name($type){ return "E2GIP".ucfirst($type); } function e2_get_gip_instance($type){ if (!in_array($type,e2_list_gips())) { return false; } $wyv=e2_get_gip_class_name($type); $oz=new $wyv; return $oz; } function e2_get_gip_auth_url($type){ return jv('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type=''){ $uyv=!$type?e2_list_gips() : array($type); foreach($uyv as$type){ $oz=e2_get_gip_instance($type); if ($oz && $oz->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip(){ foreach(e2_list_gips() as$type){ $oz=e2_get_gip_instance($type); if ($oz && $oz->is_logged_in()) { return $oz; } } return false; } function e2_get_logged_gip_name(){ foreach(e2_list_gips() as$type){ $oz=e2_get_gip_instance($type); if ($oz && $oz->is_logged_in()) { return$type; } } return false; } function e2_get_user_profile_url($type,$ks,$bz){ $wyv=e2_get_gip_class_name($type); return $wyv::get_profile_url($ks,$bz); } function e2_get_gip_session($type){ $oz=e2_get_gip_instance($type); if (!$oz || !$oz->is_logged_in()) { return false; } return $oz->get_gip_session_data(); } foreach(e2_list_gips() as $dg){ require_once 'system/gips/'.$dg.'.php'; } define('__DEV', (@$_config['dev_verbose'] > (int) !r2())); $_stopwatch=w($_stopwatch); spl_autoload_register('ea'); vv(); o(); $_strings=cv(); if(!BUILT) @include 'builder.php'; function e2(){ global$settings,$content, $_candy, $_lang, $_config, $_strings, $_candies_installer, $_candies_public, $_candies_ajax, $_candies_to_disallow_in_read_only, $_template, $_diagnose; k(); set_error_handler('dv'); set_exception_handler('ev'); header('X-Powered-By: E2 Aegea v'. E2_VERSION); header('Content-type: text/html; charset=UTF-8'); list ($candy,$parameters)=hv(); try { $content=[]; $_candy=$candy; if ( @$_config['dev_slow_ajax'] and ( in_array($candy,$_candies_ajax) ) ) { sleep(1+2 * (rand()/getrandmax())); } if (!in_array($candy,$_candies_installer)) { an(); } if (@$_config['read_only'] and in_array($candy,$_candies_to_disallow_in_read_only)) { $candy='e2m_error404'; } $iyv=(bool)r2(); $oyv=!in_array($candy,$_candies_public); if(Log::$p3)__log('User signed in? '. ($iyv? 'Yes':'No')); $_newsfeeds=[]; ed('rss',yd(),jv('e2m_rss')); ed('json',yd(),jv('e2m_json')); if(E2_EDITION){ gm(); } if(substr($candy,0,4)=='e2m_'){ ks(); } if(is_callable($candy)) { if ($oyv && !$iyv){ if(substr($candy,0,4)=='e2s_'){ c(jv('e2m_sign_in')); } else { $content['title']=$_strings['pt--sign-in']; } } else { if(Log::$p3)__log('Candy call {'); $content=call_user_func($candy,$parameters); if(Log::$p3)__log('}'); } } else { $oyv=false; $content=e2_error404_mode(); } } catch (AeMySQLException $e){ if(substr($candy,0,4)=='e2s_'){ xv($e); } else { kv($e); $parameters=array(); $content['unavailable?']=true; } } if (!is_array($content))$content=array(); $content['template']['respond-to-dark-mode?'] = ( $_template['supports_dark_mode'] and (bool) @$settings['appearance']['respond_to_dark_mode'] ); $content['template']['use-likely-light?']=$_template['use_likely_light']; if (!array_key_exists('class',$content)) { $content['class']=str_replace('_','-',str_replace('e2m_','',$candy)); } if (!array_key_exists('notes',$content))$content['notes'] = array (); if (!array_key_exists('drafts',$content))$content['drafts'] = array (); if (!array_key_exists('comments',$content))$content['comments'] = array (); if (!array_key_exists('notes-list',$content))$content['notes-list'] = array (); if (fn_()!==null){ if(Log::$p3)__log('Stuff for installed engine {'); $content['sign-in'] = [ 'done?' => $iyv, 'required?' => $oyv, 'necessary?' => $oyv && !$iyv, 'href' => jv('e2m_sign_in'), 'prompt' => $_strings['gs--need-password'], ]; $content['hrefs'] = array ( 'everything' => jv('e2m_everything'), ); if (!array_key_exists('tags',$content)) $content['tags']=df($parameters); $content['blog']=bd(); $content['form-search']=aa($parameters); $content['engine']=om(); $content['form-login']=vd(); if($content['form-login']===null) unset($content['form-login']); if (!array_key_exists('summary',$content)) { if (!empty ($settings['meta_description'])) { $content['summary']=strip_tags(h3(htmlspecialchars($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } else { $content['summary']=trim(strip_tags($content['blog']['subtitle'])); } } if (r2()) { $content['admin']=cf(); $content['last-modifieds-by-id']='{}'; if (@$_COOKIE[b('local_copies')]) { $content['last-modifieds-by-id'] = ( dm($_COOKIE[b('local_copies')]) ); } } if(Log::$p3)__log('}'); } $content['title']=strip_tags(h3(htmlspecialchars($content['title'],ENT_NOQUOTES,HSC_ENC))); if (@$content['heading']) { $content['heading']=strip_tags(h3(htmlspecialchars($content['heading'],ENT_NOQUOTES,HSC_ENC))); } $content['language']=$_lang; if (!@isset ($_diagnose['ok?'])) { if (@$_COOKIE[b('diagnose')] or @$_diagnose['need?']) { fv(); } } if (fn_()!==null){ if ( $settings['appearance']['show_view_counts'] and is_array($content['notes']) and count($content['notes']) > 0 ){ $content['notes']=e2_populate_read_counts_in_notes_ctree_($content['notes']); } foreach($content['notes'] as $q2){ na($q2['format-info']['links-required']); } if(E2_EDITION){ if (!r2()) { $content['embed']['pre-head-end']=$settings['embed']['google-analytics']; $content['embed']['pre-body-end']=$settings['embed']['yandex-metrika']; } } } $content['message']=av(); $pi=gs(); $content['meta']=pm( $candy, $content['notes'], $content['tag'], $content['blog'], $content['pages'] ); $content['stat']=fd(); $pi=ts($pi); if (fn_()!==null){ $pyv=false; if (fn_()!==null and za()) { if(is_writable(USER_FOLDER.'indexing.psa')) { $pyv=true; } else { $_diagnose['need?']=true; y('diagnose','1'); } } } echo $pi; if (fn_()!==null){ if ($pyv){ if(Log::$p3)__log('Spawn BSI step'); p3(jv('e2s_bsi_step', array ())); } if(E2_EDITION){ i(); } } if (@$_config['dev_dump_ctree'])yv($content); } ?>