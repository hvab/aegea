<?php $_stopwatch = microtime (); define ('E2_VERSION',3873); define ('E2_RELEASE','2.10'); define ('E2_UA_STRING','E2 (v'. E2_VERSION .'; Aegea)'); define ('E2_MINIMUM_PHP','5.6'); define ('E2_MINIMUM_MYSQL',4.1); define ('BUILDER_OBFUSCATE',1); define ('BUILDER_FLATTEN',1); define ('E2_NEW_FILES_RIGHTS',0777); define ('E2_JSON_STYLE',JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); define ('E2_RUN_ID',chr (rand (65,90))); define ('HSC_ENC','UTF-8'); define ('SECONDS_IN_A_MINUTE',60); define ('SECONDS_IN_AN_HOUR',3600); define ('SECONDS_IN_A_DAY',86400); define ('SECONDS_IN_A_WEEK',604800); define ('SECONDS_IN_A_MONTH',2592000); define ('SECONDS_IN_A_YEAR',31536000); if(version_compare (PHP_VERSION,E2_MINIMUM_PHP)<0){ die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } if (!function_exists ('getimagesize')) { die ('Function getimagesize is not defined, php_gd not installed?'); } if (!function_exists ('mb_internal_encoding')) { die ('Function mb_internal_encoding is not defined, php_mbstring not installed?'); } if (!class_exists ('PDO')) { die ('Class PDO is not defined installed, PDO not installed?'); } if (!in_array ('mysql',PDO::getAvailableDrivers ())) { die ('Required PDO driver "mysql" not installed'); } error_reporting (E_ALL); setlocale (LC_CTYPE,'ru_RU.UTF'); mb_internal_encoding ('UTF-8'); date_default_timezone_set ('GMT'); if(version_compare (PHP_VERSION,'7.0')<0){ error_reporting (E_ALL & ~E_STRICT); } if(is_file ('superconfig.php')) { include 'superconfig.php'; } $_protocol = ( !empty ($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off' or $_SERVER['SERVER_PORT']==443 or isset ($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO']=='https' or isset ($_SERVER['HTTP_X_HTTPS']) && ($_SERVER['HTTP_X_HTTPS']) ) ? 'https' : 'http'; if(is_file ('force-https')) { $_protocol = 'https'; } $c = substr ( $_SERVER['PHP_SELF'],0,strpos ($_SERVER['PHP_SELF'],'/index.php') ); list ($v, ) = explode (':',$_SERVER['HTTP_HOST']); $full_blog_url = $_protocol. '://'. $v . $c; $_user_folder_name = str_replace ('/','--',$v . $c); if(substr ($_user_folder_name,0,4)=='www.'){ $_user_folder_name = substr ($_user_folder_name,4); } if(is_file ('multiuser')) { if ( !empty ($_superconfig) and array_key_exists ('rewrites',$_superconfig) and array_key_exists ($_user_folder_name,$_superconfig['rewrites']) ) { $_user_folder_name = $_superconfig['rewrites'][$_user_folder_name]; } define ('USER_FOLDER','users/'. $_user_folder_name .'/'); define ('USER_FOLDER_URLPATH','user/'); } else { define ('USER_FOLDER','user/'); define ('USER_FOLDER_URLPATH','user/'); } if ( !empty ($_superconfig) and array_key_exists ('store_files_by_users',$_superconfig) and $_superconfig['store_files_by_users'] ) { define ('MEDIA_ROOT_FOLDER',USER_FOLDER .'files/'); } else { define ('MEDIA_ROOT_FOLDER',''); } if(in_array ('mail',explode (',',ini_get ('disable_functions')))) { define ('MAIL_ENABLED',false); } else { define ('MAIL_ENABLED',true); } define ('EXTRAS_FOLDER',USER_FOLDER . 'extras/'); define ('BACKUP_FOLDER',USER_FOLDER . 'backup/'); define ('CACHES_FOLDER',USER_FOLDER . 'caches/'); define ('USER_LIBRARY_FOLDER',USER_FOLDER . 'library/'); define ('LOG_FOLDER',USER_FOLDER . 'logs/'); define ('LICENSE_FILE',USER_FOLDER . 'license.psa'); define ('PICTURES_FOLDER','pictures/'); define ('THUMBNAILS_FOLDER','pictures/thumbs/'); define ('AVATARS_FOLDER','pictures/avatars/'); define ('VIDEO_FOLDER','video/'); define ('AUDIO_FOLDER','audio/'); define ('TEMPLATES_FOLDER','themes/'); define ('SYSTEM_FOLDER','system/'); define ('SCRIPTS_FOLDER','system/js/'); define ('SYSTEM_LIBRARY_FOLDER','system/library/'); define ('SYSTEM_TEMPLATE_FOLDER','system/theme/'); define ('VIDEO_ICON_IMAGE','system/theme/images/video.svg'); define ('VIDEO_ICON_WIDTH',180); define ('VIDEO_ICON_HEIGHT',120); define ('AUDIO_ICON_IMAGE','system/theme/images/audio.svg'); define ('AUDIO_ICON_WIDTH',120); define ('AUDIO_ICON_HEIGHT',120); define ('LANGUAGES_FOLDER','system/languages/'); define ('DEFAULTS_FOLDER','system/default/'); define ('MTMPL_FOLDER','system/default/mail/'); define ('DEFAULT_TEMPLATE','acute'); if (!is_file (DEFAULTS_FOLDER. 'config.php')) die ('System config missing'); include DEFAULTS_FOLDER . 'config.php'; $_default_config = $_config; if(is_file (USER_FOLDER. 'config.php')) { include USER_FOLDER . 'config.php'; $_config = array_merge ($_default_config,$_config); } define ('E2E_STRANGE_ERROR',10); define ('E2E_USER_ERROR',20); define ('E2E_PERMISSIONS_ERROR',30); define ('E2E_MESSAGE',100); define ('E2E_DIAGNOSTICS_MESSAGE',110); define ('DEFAULT_ITEMS_PER_PAGE',10); define ('MAX_ITEMS_PER_PAGE',100); define ('FP_NO_ID_OR_NEW', -1); define ('FP_INSERT_ERROR', -10); define ('FP_UPDATE_ERROR', -11); define ('FP_EMPTY_FIELD', -20); define ('FP_TITLE_OR_TEXT_EMPTY', -21); define ('FP_NOT_COMMENTABLE', -30); define ('FP_COMMENT_DOUBLE_POST', -101); define ('FP_COMMENT_TOO_LONG', -102); define ('FP_COMMENT_SPAM_SUSPECT', -103); define ('NOTE_COMMENTABLE_NOW', -1); define ('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define ('THUMB_WIDTH',180); define ('THUMB_HEIGHT',120); define ('THUMB_JPG_QUALITY',50); define ('SCALED_IMAGE_JPG_QUALITY',80); define ('USERPIC_WIDTH',80); define ('USERPIC_HEIGHT',80); define ('USERPIC_JPG_QUALITY',80); $_fp_error = false; if(strstr (__FILE__,'all.php')) { define ('BUILT',0); } else { define ('BUILT',1); } function c ($b = ''){ global$_protocol,$errors,$v,$c; @session_start (); $_SESSION['errors']=$errors; if(substr ($b,0,strlen ($_protocol)+3)!=$_protocol .'://'){ header ('Location: '. $_protocol .'://'. $v . $c .'/'. $b); } else { header ('Location: '. $b); } flush (); die; } function v () { $y = (string) @$_SERVER['HTTP_REFERER']; c ($y); } function b ($n = ''){ global $c; $m = str_replace ('/','--',trim ($c,'/')); if ($m !== '')$m .= '-'; $f = substr_count ($_SERVER['HTTP_HOST'],'.'); $d = $m . @str_repeat ('_',$f).$n; return $d; } function y ($n,$s = '',$a = true){ $q = $a? (time () + 3600 * 24 * 365) : (0); $l = $_SERVER['HTTP_HOST']; $z = substr_count ($l,'.'); if ($z < 3)$l = str_repeat ('.',3 - $z).$l; setcookie (b ($n),$s,$q,'/'); } function n ($k,$x,$e_ = ''){ if(trim ($x)!=''){ $x = explode ($k,$x); foreach ($x as $r => $t)$x[$r]=trim ($t); foreach ($x as $r => $t) if ($t == '') unset ($x[$r]); $j = array_unique ($x); if ('sort' == $e_)sort ($j); return $j; } else return array (); } function m ($x){ $h = array (); if(is_file (DEFAULTS_FOLDER . 'romanize.txt')) { $h = file (DEFAULTS_FOLDER . 'romanize.txt'); } $g = $w = ''; foreach ($h as $r => $u){ if (!($r%2))$g .= rtrim ($u) .' '; else $w .= rtrim ($u) .' '; if ($r%2){ while (mb_strlen ($w)<mb_strlen ($g))$w .= ' '; while (mb_strlen ($w)>mb_strlen ($g))$g .= ' '; } } $i = ''; $o = -1; for ($r = 0; $r < mb_strlen ($g); ++ $r){ $p = mb_substr ($g,$r,1); if ($p != ' '){ $i .= $p; if ($o == -1)$o = $r; } elseif ($i){ $cv = trim (mb_substr ($w,$o,mb_strpos ($w,' ',$o + 1)-$o)); $vv = array ($i,$cv); $bv[mb_strlen ($i)][] = $vv; $i = ''; $o = -1; } } $yv = array (); for ($r = count ($bv); $r > 0; -- $r){ foreach ($bv[$r] as $vv)$yv[$vv[0]] = $vv[1]; } return strtr ($x,$yv); } function f ($nv,$mv,$fv = 0){ if ($mv == 0) return 0; $dv = round ($nv / $mv * 100,$fv); $sv = pow (10, -$fv); if ($nv > 0 and $dv == 0)$dv = $sv; if ($nv < $mv and $dv == 100)$dv = 100 - $sv; return $dv; } function d ($av,$action,$qv){ if (!is_array ($av))$av = array (); if($action == 'add'){ $av = array_unique (array_merge ($av,$qv)); } if($action == 'remove'){ unset ($av[array_search ($qv,$av)]); } if (!is_array ($av))$av = array (); return $av; } function s ($lv){ $parameters = $lv['parameters']; $zv = [ 'success' => false ]; try { $lv['flipping-function'] ($parameters); $kv = $parameters; $kv['value'] = !$parameters['value']; $zv = [ 'success' => true, 'data' => [ 'flag-now-on' => ($parameters['value']==1), 'new-href' => jv ($lv['candy-name'],$kv), ] ]; } catch (AeMySQLException $e){ kv ($e,'Could not set '. $lv['flag-name'] .' flag'); } if(array_key_exists ('result',$_POST) and ($_POST['result']=='ajaxresult')) { $zv = json_encode ($zv); die ($zv); } else { c (jv ('e2m_tag',$parameters)); } } function a ($x){ $xv = @$_SERVER['HTTP_USER_AGENT'] or $xv = ''; $ev = strstr ($xv,'iPhone') || strstr ($xv,'iPad'); $rv = strstr ($xv,'Macintosh'); if ($ev) return ''; if ($x == 'submit'){ if ($rv){ return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($x == 'livesave'){ if ($rv){ return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($x == 'navigation'){ if ($rv){ return '&#x2325;'; } else { return 'Ctrl'; } } if ($x == 'navigation-later'){ if ($rv){ return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($x == 'navigation-earlier'){ if ($rv){ return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function q ($tv){ $tv = str_replace ('<','&lt;',$tv); $tv = str_replace ('>','&gt;',$tv); return $tv; } function l ($tv){ $tv = str_replace ('"','&quot;',$tv); return $tv; } function z ($s,$jv){ return str_replace ('.',',',round ($s,$jv)); } function e2_stripslashes_array ($hv){ return is_array ($hv)?array_map ('e2_stripslashes_array',$hv):stripslashes ($hv); } function k () { if(version_compare (PHP_VERSION,'7.4') >= 0) return; if(get_magic_quotes_runtime ()) { set_magic_quotes_runtime (0); } if(get_magic_quotes_gpc ()) { $_GET = e2_stripslashes_array ($_GET); $_POST = e2_stripslashes_array ($_POST); $_COOKIE = e2_stripslashes_array ($_COOKIE); $_REQUEST = e2_stripslashes_array ($_REQUEST); } } function x ($gv){ return sprintf ('%u',ip2long ($gv)); } function e_ ($wv){ return long2ip (sprintf ('%d',$wv)); } function e2_decline_for_number ($tv,$wv = null){ $uv = $tv; if ($wv === null){ $wv = substr ($tv,0,strpos ($tv,' ')); $uv = substr ($tv,strpos ($tv,' ')+1); } $iv = strpos ($uv,'('); $ov = strpos ($uv,')'); if ($ov > $iv)$pv = substr ($uv,$iv,$ov - $iv + 1); $cb = explode (',',trim (@$pv,'()')); if(count ($cb)==2)array_unshift ($cb,''); $vb = array (2,0,1,1,1,2,2,2,2,2); if ($wv%100 > 10 and $wv%100 < 20)$bb = 2; else $bb = $vb[$wv%10]; $yb = $cb[$bb]; $tv = str_replace ($pv,$yb,$tv); if(strstr ($tv,'(') and strstr ($tv,')')) { return e2_decline_for_number ($tv,$wv); } else { return $tv; } } function r ($nb){ $mb = glob ($nb,GLOB_NOSORT); if(is_array ($mb)) { foreach ($mb as $fb){ @unlink ($fb); } } } function t ($db){ $mb = glob ($db .'*',GLOB_NOSORT); if(is_array ($mb)) { foreach ($mb as $fb){ if(basename ($fb)!='.' and basename ($fb)!='..'){ if(is_dir ($fb)) { if (t ($fb .'/')) { if (!@rmdir ($fb)) { return false; } } else { return false; } } else { @unlink ($fb); } } } return true; } else { return false; } } function j ($sb){ $sb = trim ($sb,'/'); $sb = explode ('/',$sb); $db = ''; foreach ($sb as $ab){ $db = $db.$ab; if (!is_dir ($db)) { if (@mkdir ($db)) { @chmod ($db,E2_NEW_FILES_RIGHTS); } else { return false; } } $db = $db.'/'; } return true; } function h ($sb){ return preg_replace ('/\/([^\/]+?)\/\.\./','',$sb); } function g ($x){ $qb = get_html_translation_table (HTML_ENTITIES); $qb = array_flip ($qb); return strtr ($x,$qb); } function w ($lb = NULL){ if(NULL == $lb)$lb = microtime (); list ($zb,$kb)=explode (' ',$lb); return ((float)$zb + (float)$kb); } function o () { global$settings; if (!isset ($settings))$settings = array (); $ib = array (); if(is_file (USER_FOLDER . 'settings.json')) { $ib = json_decode (file_get_contents (USER_FOLDER . 'settings.json'),true); $ob = 13; } elseif(is_file (USER_FOLDER . 'settings.psa')) { $ib = unserialize (file_get_contents (USER_FOLDER . 'settings.psa')); } if (!is_array ($ib))$ib = array (); $settings = array_merge ($settings,$ib); if ( !array_key_exists ('appearance',$settings) or !array_key_exists ('notes_per_page',$settings['appearance']) or !is_numeric ($settings['appearance']['notes_per_page']) or $settings['appearance']['notes_per_page']<1 ) { $settings['appearance']['notes_per_page']=DEFAULT_ITEMS_PER_PAGE; } if($settings['appearance']['notes_per_page']>MAX_ITEMS_PER_PAGE){ $settings['appearance']['notes_per_page']=MAX_ITEMS_PER_PAGE; } if ( !array_key_exists ('comments',$settings) or !array_key_exists ('default_on', @$settings['comments']) ) { $settings['comments']['default_on']=false; } if (!array_key_exists ('respond_to_dark_mode',$settings['appearance'])) { $settings['appearance']['respond_to_dark_mode']=true; } return true; } function e2m_settings () { global$settings,$_template,$_strings,$_config; $pb = array (); $c3 = DEFAULT_LANGUAGE; if(array_key_exists ('language',$settings)) { $c3 = $settings['language']; } foreach(glob (LANGUAGES_FOLDER. '*.php') as $fb){ $v3 = substr (basename ($fb),0,2); $b3 = file_get_contents ($fb); if(preg_match ( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu',$b3,$y3 )) { $n3 = $y3[1]; } else { $n3 = $v3; } $pb[$v3] = array ( 'selected?' => (bool) ($c3 == $v3), 'display-name' => $n3, ); } $eb = $m3 = false; $f3 = (string) @$eb['pay-href']; if ((string)$f3 === ''){ $f3 = 'https://'. $_strings['e2--website-host'] .'/get/'; } $d['title']=$_strings['pt--settings']; $d['heading']=$_strings['pt--settings']; $d['form']='form-preferences'; $d['form-preferences'] = array ( '.token' => q2 (), 'blog-title-default' => htmlspecialchars ($_strings['e2--default-blog-title'],ENT_COMPAT,HSC_ENC), 'blog-title' => htmlspecialchars (yd (), ENT_COMPAT,HSC_ENC), 'blog-subtitle' => htmlspecialchars (@$settings['blog_subtitle'],ENT_COMPAT,HSC_ENC), 'blog-meta-description' => htmlspecialchars (@$settings['meta_description'],ENT_COMPAT,HSC_ENC), 'blog-author-default' => htmlspecialchars ($_strings['e2--default-blog-author'],ENT_COMPAT,HSC_ENC), 'blog-author' => htmlspecialchars (@$settings['author'],ENT_COMPAT,HSC_ENC), 'languages' => $pb, 'language' => $c3, 'form-action' => jv ('e2s_settings_save'), 'userpic-href' => md ('square'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'emailing-possible?' => MAIL_ENABLED, 'email-notify?' => (bool) @$settings['notifications']['new_comments'], 'email' => htmlspecialchars (@$settings['author_email'],ENT_COMPAT,HSC_ENC), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-view-counts?' => (bool) @$settings['appearance']['show_view_counts'], 'show-sharing-buttons?' => (bool) @$settings['appearance']['show_sharing_buttons'], 'includes-google-analytics?' => false, 'includes-yandex-metrika?' => false, 'template-name' => $_template['name'], 'templates' => os (), 'respond-to-dark-mode?' => (bool) @$settings['appearance']['respond_to_dark_mode'], 'submit-text' => $_strings['fb--save-changes'], 'show-payment-info?' => $m3 and ($eb !== false), 'paid-period' => @$eb['licensed?'] ? (time () <= $eb['until-stamp']) : false, 'paid-period-ended' => @$eb['licensed?'] ? (time () > $eb['until-stamp']) : false, 'paid-until' => @$eb['licensed?'] ? ([$eb['until-stamp'],ay ()]) : false, 'pay-href' => $f3, 'space-usage' => j3 (r3 (), true), ); return $d; } function e2s_settings_save () { global$settings,$_strings; if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_settings')); } z2 (); $d3 = $s3 = ''; if(array_key_exists ('blog-title',$_POST)) { $d3 = trim ($_POST['blog-title']); } if(array_key_exists ('blog-subtitle',$_POST)) { $s3 = trim ($_POST['blog-subtitle']); } if(array_key_exists ('blog-meta-description',$_POST)) { $a3 = trim ($_POST['blog-meta-description']); } if(array_key_exists ('blog-author',$_POST)) { $q3 = trim ($_POST['blog-author']); } if(array_key_exists ('language',$_POST)) $l3 = $_POST['language']; if(array_key_exists ('email',$_POST)) $z3 = trim ($_POST['email']); $k3 = (int)$_POST['notes-per-page']; $settings['blog_title']=$d3; $settings['blog_title']=yd (); $settings['author']=$q3; $settings['author_email']=$z3; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if(array_key_exists ('template',$_POST)) { $settings['template']=trim ($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); $settings['appearance']['show_view_counts'] = isset ($_POST['show-view-counts']); if ( !array_key_exists ('language',$settings) or $settings['language']!=$l3 ) { e2_drop_all_kinds_of_cache (); $settings['language']=$l3; } if ( $settings['blog_subtitle']!=$s3 or $settings['meta_description']!=$a3 or $settings['appearance']['notes_per_page']!=$k3 or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['appearance']['respond_to_dark_mode'] != isset ($_POST['respond-to-dark-mode']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink (CACHE_FILENAME_FRONTPAGE); @unlink (CACHE_FILENAME_FRONTPAGE_FEED); @unlink (CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['blog_subtitle']=$s3; $settings['meta_description']=$a3; $settings['appearance']['notes_per_page']=$k3; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['appearance']['respond_to_dark_mode'] = isset ($_POST['respond-to-dark-mode']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } r (CACHE_FILENAMES_NOTES_COMMENTS); if (!@m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_settings')); } c (jv ('e2m_frontpage', array ('page' => 1))); } function e2m_underhood () { global$_db; $d['title']='Underhood'; $d['heading']='Underhood'; kn ('check version'); $x3 = $e3 = 0; foreach(glob (CACHES_FOLDER .'/*') as $fb){ $x3 ++; $e3 += stat ($fb)['size']; } $r3 = $t3 = 0; foreach(glob (LOG_FOLDER .'*') as $fb){ $r3 ++; $t3 += stat ($fb)['size']; } $j3 = qa (); $h3 = f ($j3['indexed_count'],$j3['total_count']); $g3 = false; if ($j3['time_spent']) { if(is_numeric (($j3['time_spent']))) { $g3 = floor ($j3['time_spent']); } if ($g3 >= 60){ $g3 = ( floor ($g3 / 60) .'min '. str_pad ($g3 % 60,2,'0',STR_PAD_LEFT). 's' ); } elseif ($g3 > 0){ $g3 .= 's'; } else { $g3 = false; } } $w3 = array_keys (jn ()); $d['form']='form-underhood'; $d['form-underhood'] = [ '.token' => q2 (), 'mysql-version' => $_db['version'], 'form-action-engine-rebuild' => BUILT? false : jv ('e2s_post_service', ['service' => 'build']), 'cache-files-count' => $x3, 'cache-files-size' => $e3, 'form-action-cache-invalidate' => jv ('e2s_post_service', ['service' => 'sync']), 'search-index-items-count' => $j3['indexed_count'], 'search-index-total-items-count' => $j3['total_count'], 'search-index-time-spent' => $g3, 'search-index-percentage' => $h3, 'form-action-search-index-continue' => ka ()? jv ('e2s_bsi_step'):false, 'form-action-search-index-rebuild' => jv ('e2s_bsi_drop'), 'log-files-count' => $r3, 'log-files-size' => $t3, 'form-action-logs-enable' => jv ('e2s_post_service', ['service' => 'log']), 'backup-last' => count ($w3)? xy ('D, M d, Y \a\t H:i:s',$w3[0]) : false, 'form-action-backup' => jv ('e2s_dump'), 'form-action-database-migrate' => jv ( 'e2s_post_service', ['service' => 'migrate'] ), 'form-action-license-verify' => jv ( 'e2s_post_service', ['service' => 'verify'] ), ]; return $d; } function e2m_database () { global$settings,$_strings,$_superconfig; if (@$_superconfig['disallow_db_config']) { return e2_error404_mode (); } $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['form']='form-database'; $d['form-database'] = array ( '.token' => q2 (), 'form-action' => jv ('e2s_database_save'), 'db-server' => htmlspecialchars (@$settings['db']['server']? $settings['db']['server']:'localhost'), 'db-user' => htmlspecialchars (@$settings['db']['user_name']? $settings['db']['user_name']:'root'), 'db-password' => htmlspecialchars (cd (@$settings['db']['passw'])), 'db-database' => htmlspecialchars (@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $d; } function e2s_database_save () { global$settings,$_db,$_superconfig,$_strings,$_config; z2 (); if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_database')); } if (@$_superconfig['disallow_db_config']) { return e2_error404_mode (); } $u3['server'] = @$_POST['db-server']; $u3['user_name'] = @$_POST['db-user']; $u3['passw'] = p2 (@$_POST['db-password']); $u3['name'] = @$_POST['db-database']; $i3 = false; try { kn ('check database from HTTP post',$u3); $o3 = e2_model_data_check ($u3['name']); if (!$o3['occupied'] or !$o3['migrateable']) { mv ($_strings['er--db-data-incomplete']); c (jv ('e2m_database')); } qn (); $i3 = true; } catch (AeMySQLCannotConnectException $e){ mv ( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error () .' ('. mysqli_connect_errno () .')' ); } catch (AeMySQLTooOldException $e){ mv (e2l_get_string ('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv ($_strings['er--cannot-find-db'] .' '. $u3['name']); } if (!$i3){ c (jv ('e2m_database')); } $settings['db']=$u3; if (!@m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_database')); } e2_drop_all_kinds_of_cache (); if (!$_config['retain_search_indexes_on_db_switch']) { $p3 = ja (); try { $p3 -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$cy)__log ('Rose not available'); } za (); } p3 (jv ('e2s_bsi_step')); c (jv ('e2m_settings')); } function p () { return class_exists ('ZipArchive'); } function e2m_get_backup () { if (p ()) { $vy = new ZipArchive (); $by = BACKUP_FOLDER .'backup.zip'; if ($vy -> open ($by,ZIPARCHIVE::CREATE)) { @ $vy -> addEmptyDir ('backup'); @ $vy -> addFile (USER_FOLDER . 'userpic@2x.jpg','backup/files/userpic@2x.jpg'); @ $vy -> addFile (USER_FOLDER . 'userpic@2x.png','backup/files/userpic@2x.png'); $yy = BACKUP_FOLDER .'backup-tail.sql'; $ny = ''; $my = -1; foreach(glob (BACKUP_FOLDER .'backup-*.sql') as $fy){ if ($fy === $yy) continue; $dy = stat ($fy); if ($dy['ctime']>$my)$ny = $fy; $my = $dy['ctime']; } if ($ny === ''){ $ny = gn (); } $vy -> addFile ($ny,'backup/'. basename ($ny)); if(is_file ($yy)) { @file_put_contents ($yy,"COMMIT;\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod ($yy,E2_NEW_FILES_RIGHTS); } $vy -> addFile ($yy,'backup/backup-tail.sql'); $vy -> close(); } if(is_file ($by)) { header ('Content-Type: application/zip'); header ('Content-Disposition: attachment; filename="backup.zip"'); readfile ($by); unlink ($by); } else { die ('Cannot get backup'); } die; } else { die ('Cannot get backup'); } } if(substr (@$_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2)=='ru'){ define ('DEFAULT_LANGUAGE','ru'); } else { define ('DEFAULT_LANGUAGE','en'); } function e2l_get_string ($ay,$lv){ global$_strings; $name = $_strings[$ay]; if(preg_match_all ('/\$\[(.+?)\]/u',$name,$y3,PREG_SET_ORDER)) { foreach ($y3 as $qy){ $n = $qy[1]; $ly = ''; if(strstr ($n,'.')) list ($n,$ly)=explode ('.',$n,2); if(array_key_exists ($n,$lv)) { if ($ly){ $name = str_replace ($qy[0],e2l__format_value ($ly,$lv[$n],$ay),$name); } else { $name = str_replace ($qy[0],$lv[$n],$name); } } } } return$name; } function e2l__format_value ($ly,$s,$ay){ @list ($ly,$zy)=explode ('.',$ly,2); $ky = 'e2lstr_'. $ly; if(function_exists ($ky)) { return call_user_func ($ky,$s,$zy,$ay); } else { return $s; } return $s; } function cv () { global$_lang,$settings; if ( array_key_exists ('language',$settings) and is_file ($xy = LANGUAGES_FOLDER . $settings['language'] .'.php') ) { $_lang = $settings['language']; include $xy; } elseif(is_file ($xy = LANGUAGES_FOLDER . DEFAULT_LANGUAGE .'.php')) { $_lang = DEFAULT_LANGUAGE; include $xy; } else { die ('Language file missing: '. $xy); } return e2l_load_strings (); } define ('LOG_FILE',LOG_FOLDER . 'main.log'); define ('LOG_DEBUG_FILE',LOG_FOLDER . 'debug.log'); class Log { public static $cy = false; public static $ey = false; } function vv () { global$_config; if ( $_config['write_log'] and ($_config['write_log_create'] or is_file (LOG_FILE)) ) { Log::$cy = true; Log::$ey = true; } else { Log::$cy = false; Log::$ey = false; } if (!Log::$cy) return; @j (LOG_FOLDER); if($_config['write_log_reset']) { @file_put_contents (LOG_FILE,''); @chmod (LOG_FILE,E2_NEW_FILES_RIGHTS); } if (@$_config['write_log_limit'] and is_file (LOG_FILE)) { $ry = @stat (LOG_FILE); $ry = $ry['size']; if ($ry > $_config['write_log_limit']) { @rename (LOG_FILE,LOG_FILE .'.bak'); @chmod (LOG_FILE .'.bak',E2_NEW_FILES_RIGHTS); @file_put_contents (LOG_FILE,''); } } __log ('────────────────────────────────────────────────────────────────────────────────'); } function bv ($ty = false) { static $jy = false; if ($ty === false) return $jy; if ($ty === '') return $jy = false; $fb = str_replace ( '$',gmdate ('Y-m-d-\a\t-H-i-s'),$ty ); return $jy = $fb; } function __log ($tv){ static $gy; global$_stopwatch; $wy = bv (); $uy = ''; $iy = str_pad (round (w () - $_stopwatch,5),10,' ',STR_PAD_RIGHT); if ($tv[0]=='}'){ -- $gy; if ($gy < 0)$gy = 0; } $oy = ( E2_RUN_ID .' '. $uy .''. $iy .' '. str_repeat (' ',$gy * 2). $tv . "\n" ); if ($tv[strlen ($tv)-1]=='{'){ ++ $gy; } $py = FILE_APPEND; if(Log::$ey){ @file_put_contents (LOG_FILE,$oy,$py); @chmod (LOG_FILE,E2_NEW_FILES_RIGHTS); } if ($wy !== false){ $fb = LOG_FOLDER . $wy .'.log'; @j (LOG_FOLDER); @file_put_contents ($fb,$oy,$py); @chmod ($wy,E2_NEW_FILES_RIGHTS); } if ($tv[0]=='#'){ @j (dirname (LOG_DEBUG_FILE). '/'); @file_put_contents (LOG_DEBUG_FILE,$oy,$py); @chmod (LOG_DEBUG_FILE,E2_NEW_FILES_RIGHTS); } } function yv ($cn){ @m3 ( USER_FOLDER .'ctree.php', "<?php\r\n\r\n". var_export ($cn,true). "\r\n\r\n?>php" ); } function nv () { @j (LOG_FOLDER); @file_put_contents (LOG_FILE,''); @chmod (LOG_FILE,E2_NEW_FILES_RIGHTS); } function mv ($vn,$type = E2E_STRANGE_ERROR){ global$errors,$settings, $_config, $_strings, $_diagnose; if (!isset ($errors))$errors = []; $bn = (!r2 ()+1 <= (int)$_config['show_call_stack']); if ($vn){ if ($vn[0]!='<')$vn = '<p>' . $vn .'</p>'; $yn = array ( 'description' => $vn, 'type' => $type, ); if($type == E2E_STRANGE_ERROR and $bn){ $yn['backtrace']=debug_backtrace (); } $errors[] = $yn; } if($type == E2E_PERMISSIONS_ERROR){ $_diagnose['need?']=true; y ('diagnose','1'); } return true; } function fv () { global$errors,$nn,$_strings,$_diagnose; $mn = n3 (); if(count ($mn)==0){ y ('diagnose',''); unset($_COOKIE['diagnose']); $_diagnose['need?']=false; $_diagnose['ok?']=true; return true; } else { $fn_ = ''; $fn_ .= '<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $fn_ .= '<ul>'; foreach ($mn as $dn){ if ($dn == '.')$dn = ''; $fn_ .= '<li><tt>./'. $dn .'</tt></li>'; if(Log::$cy)__log ('Diagnostics: cannot write <'. $dn .'>'); } $fn_ .= '</ul>'; $yn = array ( 'title' => $_strings['et--fix-permissions-on-server'], 'description' => $fn_, 'type' => E2E_DIAGNOSTICS_MESSAGE, 'class' => 'serious', ); $errors[] = $yn; $_diagnose['ok?']=false; return false; } } function dv ($an,$vn,$qn = false,$ln = false,$zn = []) { global$errors; if (!(error_reporting () & $an) or ($an & 8)) return; $qn = str_replace (__DIR__,'',$qn); mv ($qn .', line '. $ln .'<br />Error '. $an .': '. $vn); $errors[count ($errors)-1]['phpcode']=$an; } function sv ($kn,$xn,$fy,$u){ if (!(error_reporting () & $kn)) return; throw new ErrorException($xn,0,$kn,$fy,$u); } function av () { global$errors,$settings,$_config; if (!isset ($errors))$errors = []; @session_start (); if(is_array (@$_SESSION['errors'])) { $e = array_merge (@$_SESSION['errors'],$errors); } else { $e = $errors; } $bn = (!r2 ()+1 <= (int)$_config['show_call_stack']); if (@$_config['store_backtrace'] and $bn and $e != NULL){ @m3 ('backtrace.psa',serialize ($e)); } else { @unlink ('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset($_SESSION['errors']); $d = array (); $en = false; if(count ($e)>0){ foreach($e as $r => $rn){ if ($rn['type']==E2E_STRANGE_ERROR){ $rn['class']='serious'; $en = true; if ($bn){ $rn['backtrace']=lv ($rn['backtrace']); } } if ($rn['type']==E2E_MESSAGE){ $rn['class']='info'; } $e[$r]=$rn; } $d['each']=$e; if ( $en and @$_config['store_backtrace'] and $bn and is_file ('debug.php') ) { $d['debug-link']='debug.php'; } } return $d; } function qv () { $errors = av (); foreach($errors['each'] as $tn){ echo '<p>'. $tn['description'] .'</p>'; } die; } function lv ($jn){ global $c; if (!is_array ($jn)) return 'No backtrace info'; $jn = array_reverse ($jn); $jn = array_splice ($jn,0,count ($jn)-1); $e = '<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($jn as $r => $h){ $hn = @$h['args'] or $hn = array (); $gn = array (); foreach ($hn as $wn){ $gn[] = var_export ($wn,true); } $fy = @$h['file']; $fy = str_replace ($_SERVER['DOCUMENT_ROOT'],'',$fy); $u = (@$h['line']? (' #'. $h['line']) : '?'); $e .= '<div style="margin: .25em 0 .5em '. $r*3 .'em">'; $e .= '<span style="float: right; color: #666"> '. $fy . $u .'</span>'; $e .= '<tt><b>'. @$h['function'] .' (</b>'; if(count ($gn)) { $un = str_replace ("array (\n)",'array ()',$gn); $un = implode (', ',$un); if(0){ $un = highlight_string ('<?'. $un .'?'.'>',true); $un = substr ($un,77, -28); } $un = str_replace ('&nbsp;',' ',$un); $un = nl2br ($un); $e .= '<div style="margin: 0 0 0 1.12em">'. $un .'</div>'; } $e .= '<b>)</b> &rarr;</tt></div>'; } $e .= '</p>'; return$e; } class AeException extends \Exception {} class AeMySQLException extends AeException {} class AeMySQLNotFoundException extends AeMySQLException {} class AeMySQLTooOldException extends AeMySQLException {} class AeMySQLCannotConnectException extends AeMySQLException {} class AeMySQLAccessDeniedException extends AeMySQLCannotConnectException {} class AeMySQLQueryException extends AeMySQLException {} class AeMySQLCorruptedUpdateRecordCallException extends AeMySQLException {} class AeInstallException extends AeException {} class AeInstallAlreadyInstalledException extends AeInstallException {} class AeInstallDatabaseOccupiedException extends AeInstallException {} class AeNotSavedException extends AeException {} class AePasswordHashNotSavedException extends AeNotSavedException {} class AeSettingsNotSavedException extends AeNotSavedException {} class AeTokenException extends AeException {} class AeModelUnknownTableException extends AeException {} class AeOlbaException extends AeException {} class AeOlbaTemplateMissingException extends AeOlbaException {} class AeNotAndCannotBeInstalledException extends AeException {} class AeUpdateAlreadyInProcess extends AeException {} class AeUpdateCannotLock extends AeException {} function zv ($in,$on = false){ $pn = substr (__DIR__,0,strrpos (__DIR__,'/')); $cm = ''; $vm = []; foreach(array_reverse ($in -> getTrace ()) as $bm){ $ym['where']=str_replace ( $pn .'/','',$bm['file'] ) .':'. $bm['line']; $nm = []; foreach ($bm['args'] as $mm){ $nm[] = htmlspecialchars ( str_replace ("\n","\n  ",var_export ($mm,true)), ENT_NOQUOTES,HSC_ENC ); } $fm = ''; if(count ($nm)) { $fm = ("\n". '  '. implode (",\n  ",$nm). "\n" ); } $ym['call']=$bm['function'] .' ('. $fm .')'; $vm[] = $ym; } do { if ((string)$in -> getMessage () !== ''){ $cm .= $in -> getMessage () ."\n"; } $cm .= "\n";; $cm .= ( get_class ($in) .' in '. str_replace ( $pn .'/','',$in -> getFile () ) .':'. $in -> getLine (). "\n" ); if ($in -> getCode ()) { $cm .= 'Code: '. $in -> getCode () ."\n"; } $dm = ''; $r = 1; foreach ($vm as $u){ $dm .= $r++ .'. '. $u['where'] .' '. $u['call']. "\n"; if (!$on)$dm .= "\n";; } $cm .= "\n";; } while ($in = $in -> getPrevious ()); if ($on){ $dm = preg_replace ('/^.*?$/smu','│            $0',$dm); $cm .= '┌─'. "\n"; $cm .= $dm; $cm .= '└─'; } else { $cm .= $dm; } return $cm; } function kv ($in,$xn = ''){ global$_config; if(__DEV)mv ('<pre>'. zv ($in) .'</pre>'); if($_config['log_errors']) { Log::$cy = true; if(Log::$cy)bv ('error-$'); } if(Log::$cy)__log ('Exception caught: '. zv ($in,true)); if(Log::$cy)bv (''); if ((string)$xn !== ''){ if(Log::$cy)__log ($xn); } } function xv ($in){ global$_config,$content,$c; $content['title']=':-('; $content['exception-message']=$in -> getMessage (); if(__DEV)$content['exception-string']=zv ($in); if($_config['log_errors']) { Log::$cy = true; if(Log::$cy)bv ('error-$'); } if(Log::$cy)__log ('Panic: '. zv ($in,true)); $d = hs ('panic',true); if(Log::$cy)__log (':-('); echo $d; die; } function ev ($in){ xv ($in); } $_url_map = array ( '@log' => 'e2://e2s_log', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note?is_published=1&preview-key=0', ':note/:preview' => 'e2://e2m_note?is_published=1', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts?page=1', 'drafts-:page' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_note?is_published=0&preview-key=0', 'drafts/:draft/:preview' => 'e2://e2m_note?is_published=0', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=0', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'hot' => 'e2://e2m_most_commented', 'popular' => 'e2://e2m_popular', 'untagged' => 'e2://e2m_untagged?page=1', 'untagged/:page' => 'e2://e2m_untagged', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'install' => 'e2://e2m_install', 'settings' => 'e2://e2m_settings', 'settings/underhood' => 'e2://e2m_underhood', 'settings/underhood/build' => 'e2://e2s_post_service?service=build', 'settings/underhood/sync' => 'e2://e2s_post_service?service=sync', 'settings/underhood/log' => 'e2://e2s_post_service?service=log', 'settings/underhood/migrate' => 'e2://e2s_post_service?service=migrate', 'settings/underhood/verify' => 'e2://e2s_post_service?service=verify', 'settings/underhood/backup' => 'e2://e2s_dump', 'settings/underhood/index' => 'e2://e2s_bsi_step', 'settings/underhood/reindex' => 'e2://e2s_bsi_drop', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/calliope' => 'e2://e2m_calliope', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', ); $_url_chunks = array ( '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => array ( 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ), '\:draft' => array ( '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ), '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9,]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9\=\/\\\+\-\_\,]+)', ); $_url_autoredirects = array ( '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ); function rv ($sm){ global$_url_autoredirects,$c; $sm = preg_replace (array_keys ($_url_autoredirects),array_values ($_url_autoredirects),$sm); if(preg_match ('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/',$sm,$y3)) { if(2 == strlen ($y3[3]))$y3[3]='20'.$y3[3]; return ($y3[3].'/'.$y3[2].'/'.$y3[1].$y3[4]); } if(preg_match ('/^tags\-rss\/(.*?)\/?$/',$sm,$y3)) { $am = substr ($y3[1],strrpos ($y3[1],'/')+1); return ('tags/'. $am . '/rss/'); } return $sm; } function tv () { static $qm = false; global$__synthetic_urls,$_config,$_superconfig; if ($qm) return; $lm = $_config['url_composition']; if (!empty ($_superconfig) and array_key_exists ('url_composition',$_superconfig)) { $lm = $_superconfig['url_composition']; } $__synthetic_urls = false; if ($lm == 'synthetic'){ $__synthetic_urls = true; } if ($lm == 'auto'){ if(function_exists ('apache_get_modules')) { if(in_array ('mod_rewrite',apache_get_modules ())) { $__synthetic_urls = true; } } } $qm = true; } function jv ($candy,$parameters = array ()) { global$_url_map,$_url_chunks,$_config,$__synthetic_urls,$_protocol,$v,$c; $zm = array_flip ($_url_map); if ( @$_config['preferred_domain_name'] and $_SERVER['HTTP_HOST']!=$_config['preferred_domain_name'] ) { $v = $_config['preferred_domain_name']; } $sm = $_protocol .'://'. $v . $c .'/'; $km = 'e2://'. $candy; if(array_key_exists ('page',$parameters)) { $page = $parameters['page']; } else { $page = 1; } if($parameters){ $km .= '?'; $xm = array (); $em = array (); foreach($parameters as $rm => $s){ if ($rm == '*note'){ $em[] = $rm; $xm[] = wv ($s); } if ($rm == '*tags'){ $em[] = $rm; $xm[] = uv ($s); } if ($rm == '*tag'){ $em[] = $rm; $xm[] = uv ([$s]); } } foreach ($em as $rm) unset($parameters[$rm]); foreach ($xm as $tm){ $parameters = array_merge ($parameters,$tm); } foreach($parameters as $rm => $s){ if (@$rm[0]!='_'){ $km .= $rm .'='. urlencode ($s) .'&'; } } $km = substr ($km,0, -1); } if(array_key_exists ($km,$zm)) { if ($zm[$km]!=='')$sm .= $zm[$km] .'/'; return $sm; } else { $gm = false; foreach ($zm as $wm => $um){ $im = $wm; $im = preg_quote ($im,'/'); $om = parse_url ($wm); $pm = $om['host']; $cf = parse_url ($km); if(strstr ($wm,'::')) { $vf = $cf['scheme'] .'://'. $cf['host']; $im = str_replace ('\:\:','(.*)',$im); $im = '/^'. $im .'$/s'; if(preg_match ($im,$vf,$y3)) { $sb = str_replace ('::',$y3[1],$um); $sb = str_replace ('_','-',$sb); $bf = false; if(array_key_exists ('query',$cf)) { $bf = $cf['query']; } if($__synthetic_urls and $bf){ $sm .= $sb .'/?'. $bf; } elseif($__synthetic_urls){ $sm .= $sb .'/'; } elseif ($bf){ $sm .= '?go='. $sb .'/?'. $bf; } else { $sm .= '?go='. $sb .'/'; } return $sm; } } $yf = false; if($candy === $pm){ $gm = true; if ((string) @$om['query']!==''){ $nf = explode ('&',$om['query']); foreach ($nf as $mf){ list ($rm,$s)=explode ('=',$mf); $s = urldecode ($s); $rm = str_replace ('_','-',$rm); if ( array_key_exists ($rm,$parameters) and $parameters[$rm]!=$s ) { $yf = true; break; } } } if (!$yf){ if(preg_match_all ('/\:[\-a-z]+/i',$um,$y3)) { foreach ($y3[0] as $ff){ $df = $_url_chunks['\\'. $ff]; if (!is_array ($df)) { $df = array ($df); } $sf = $df[0]; foreach ($df as $sf){ $af = '/\(\?P\<(.*?)\>.*?\)/'; $qf = true; if (@preg_match_all ($af,$sf,$y3)) { $y3 = $y3[1]; $qf = true; for ($r = 0; $r < count ($y3); ++ $r){ if ( !array_key_exists (str_replace ("_","-",$y3[$r]), $parameters) or $parameters[str_replace ("_","-",$y3[$r])] === '' ) { $qf = false; break; } } } if (!$qf) continue; $lf = @preg_replace_callback ( $af, function ($y3) use ($parameters){ return$parameters[str_replace ("_","-",$y3[1])]; }, $sf ); $lf = stripslashes ($lf); $zf = str_replace ($ff,$lf,$um); break; } $um = @$zf; } } $kf = array (); if ($um){ if($__synthetic_urls){ $sm .= $um .'/'; } else { $kf[] = 'go='. $um .'/'; } } foreach($_GET as $t => $xf) if(in_array ($t, array ('result','themeless'))) { $kf[] = $t . ($xf? ('='. urlencode ($xf)) : ''); } if(count ($kf)) { $sm .= '?'. implode ('&',$kf); } return $sm; } } } if ($gm){ return $sm; } else { die ('Cannot compose url for candy '. $candy); } } } function hv ($sm = null){ global$_url_map,$_url_chunks,$_config,$_current_url,$__synthetic_urls,$_protocol,$v,$c; if ($sm === null) $sm = urldecode ($_GET['go']); if(Log::$cy)__log ('Resolve "'. $sm .'" {'); tv (); $ef = $sm; $sm = trim ($sm,'/'); $sm = rv ($sm); $parameters = array (); $km = ''; foreach($_url_map as $rf => $wm){ $tf = $rf; $tf = preg_quote ($tf,'/'); if(strstr ($rf,'::')) { $tf = str_replace ('\:\:','(.*)',$tf); $tf = '/^'. $tf .'$/s'; if(preg_match ($tf,$sm,$y3)) { $jf = str_replace ('-','_',$y3[1]); $km = str_replace ('::',$jf,$wm); } } elseif(strstr ($rf,':')) { $hf = array (); foreach($_url_chunks as $t => $xf){ if(is_array ($xf)) { $hf[$t]='(?:(?:'. implode (')|(?:',$xf) .'))'; } else { $hf[$t]=$xf; } } $tf = str_replace ( array_keys ($hf), array_values ($hf), $tf ); $tf = '/^'. $tf .'$/s'; if(preg_match ($tf,$sm,$y3)) { $km = $wm; foreach ($y3 as $rm => $s) if (!is_numeric ($rm)) { $rm = str_replace ('_','-',$rm); $parameters[$rm]=$s; } } } else { if ($rf == $sm){ $km = $wm; break; } } } if ($km){ $gf = true; } else { $gf = false; $km = 'e2://e2m_error404'; } if (!$km)$km = 'e2://e2_error404_mode'; $cf = parse_url ($km); $candy = $cf['host']; if ((string) @$cf['query']!==''){ $nf = explode ('&',$cf['query']); foreach ($nf as $mf){ list ($rm,$s)=explode ('=',$mf); $s = urldecode ($s); $rm = str_replace ('_','-',$rm); $parameters[$rm]=$s; } } $d = false; $parameters = iv ($parameters); if ($gf){ if($_config['force_canonical_urls']) { foreach (['draft2','oalias2'] as $wf){ if(array_key_exists ($wf,$parameters)) { unset($parameters[$wf]); } } $uf = jv ($candy,$parameters); @list ($if_,$of)=explode ('?',$_SERVER['REQUEST_URI'],2); $pf = $_protocol .'://'. $_SERVER['HTTP_HOST'].$if_; $c2 = $_protocol .'://'. $_SERVER['HTTP_HOST'].urldecode ($if_); $of = explode ('&', (string)$of); foreach ($of as $v2){ list ($b2, ) = explode ('=',$v2); if ($b2 == 'go'){ $pf .= '?'. $v2; $c2 .= '?'. urldecode ($v2); } } $_current_url = $pf; if ( $pf != $uf and $c2 != $uf and $pf != $_protocol .'://'. $_SERVER['HTTP_HOST'].$c . '/@notify' ) { if(Log::$cy)__log ('Used URL "'. $pf .'" or "'. $c2 .'"'); if(Log::$cy)__log ('Redirecting to canonical URL "'. $uf .'"'); if(Log::$cy)__log ('}'); c ($uf); } } if(is_callable ($candy)) { $d = array ($candy,$parameters); } else { $d = array (null, array ()); } } else { $d = array (null, array ()); } if(0){ foreach($_GET as $rm => $s){ if ($rm !== 'go')$d[1][$rm]=$s; } } if(Log::$cy){ $y2 = ''; if(count ($d[1]) > 0){ $y2 = print_r ($d[1],true); $y2 = substr ($y2,8, -2); $y2 = '    '. trim ($y2); $y2 = preg_replace ('/^.*?$/smu','         $0',$y2); $y2 = ' with parameters:'."\r\n". $y2; } __log ( 'Resolved to candy "'. $d[0] .'"'. $y2 ); } if(Log::$cy)__log ('}'); return $d; } function wv ($n2){ global $c,$_config; if (!isset ($n2['IsPublished'])) { return []; } if (!$n2['IsPublished']) { $parameters['is-published']=0; if ($n2['OriginalAlias']===''){ $parameters['draft']=$n2['ID']; } elseif (um ($n2['OriginalAlias']) == 1){ $parameters['oalias']=$n2['OriginalAlias']; } else { $parameters['draft2']=$n2['ID']; $parameters['oalias2']=$n2['OriginalAlias']; } return$parameters; } $parameters['is-published']=1; $m2 = un (); $f2 = 'n'. $n2['ID']; $d2 = $m2[$f2]; if (isset ($n2['__force_ymdn']) and ((string)$n2['OriginalAlias']==='')) { $f2 = 'n'. $n2['ID'] .'-ymdn'; if(array_key_exists ($f2,$m2)) { $d2 = $m2[$f2]; } } if(preg_match ( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $d2,$y3 )) { $parameters['year']=$y3['year']; $parameters['month']=$y3['month']; $parameters['day']=$y3['day']; $parameters['day-number']=$y3['day_number']; } else { $parameters['alias']=$d2; } return$parameters; } function uv ($s2){ $a2 = $parameters = []; foreach ($s2 as $q2){ $a2[] = un () ['t'. $q2['ID']]; } if(count ($a2)) { $parameters['tag-alias']=implode (',',$a2); } return$parameters; } function iv ($parameters){ if ( (string) @$parameters['alias']!=='' or ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' and (string) @$parameters['day-number']!=='' ) ) { if ($l2 = e2_published_noterec_with_parameters_($parameters)) { $parameters['*note']=$l2; } } if ( (string) @$parameters['oalias']!=='' or (string) @$parameters['draft']!=='' or (string) @$parameters['oalias2']!=='' or (string) @$parameters['draft2']!=='' ) { if ($l2 = e2_noterec_with_parameters_($parameters)) { $parameters['*note']=$l2; } } if ( (string) @$parameters['tag-alias']!=='' ) { $parameters['*tags']=e2_tagrecs_with_parameters_($parameters); if(count ($parameters['*tags']) == 1){ $parameters['*tag']=$parameters['*tags'][0]; } } return$parameters; } function ov ($f){ global$_e2utf8__unformat_htmlentity_neasden; if($_e2utf8__unformat_htmlentity_neasden){ return $f; } else { return '((html '. $f .'))'; } } function pv ($z2,$k2 = false){ $x2 = ''; $e2_ = strlen ($z2); for ($r = 0; $r < 256; ++ $r){ $r2[$r]=0; $t2 = $r; while ($t2 & 0x00000080){ $t2 <<= 1; ++ $r2[$r]; } } for ($r = 0xd090; $r <= 0xd0bf; $r++)$j2[$r]=chr (($r & 0x000000ff)+48); for ($r = 0xd180; $r <= 0xd18f; $r++)$j2[$r]=chr (($r & 0x000000ff)+112); $j2[0xd081]="\xa8"; $j2[0xd191]="\xb8"; $j2[0xc299]="\x99"; $j2[0xc2a9]="\xa9"; $j2[0xc2ae]="\xae"; $j2[0xc2ab]="\xab"; $j2[0xc2bb]="\xbb"; $j2[0xc2a0]="\xa0"; $r = 0; while ($r < $e2_){ $h2 = $z2[$r]; $g2 = ord ($h2); if ($r2[$g2]==0){ $x2 .= $h2; ++ $r; } elseif ($r2[$g2]==2){ $w2 = $j2[($g2 << 8) | ord ($z2[$r+1])]; $x2 .= ($w2 != null)? $w2 : ( $k2? (ov ( cb (substr ($z2,$r,2)) )) : '?' ); $r += 2; } else { $u2 = substr ($z2,$r,$r2[$g2]); if ($u2 == "\xe2\x84\x96")$x2 .= "\xb9"; elseif ($u2 == "\xe2\x80\x93")$x2 .= "\x96"; elseif ($u2 == "\xe2\x80\x94")$x2 .= "\x97"; elseif ($u2 == "\xe2\x80\x98")$x2 .= "\x91"; elseif ($u2 == "\xe2\x80\x99")$x2 .= "\x92"; elseif ($u2 == "\xe2\x80\x9a")$x2 .= "\x82"; elseif ($u2 == "\xe2\x80\x9c")$x2 .= "\x93"; elseif ($u2 == "\xe2\x80\x9d")$x2 .= "\x94"; elseif ($u2 == "\xe2\x80\x9e")$x2 .= "\x84"; elseif ($u2 == "\xe2\x80\xa6")$x2 .= "\x85"; elseif ($u2 == "\xe2\x80\xb9")$x2 .= "\x8b"; elseif ($u2 == "\xe2\x80\xba")$x2 .= "\x9b"; elseif ($u2 == "\xe2\x82\xac")$x2 .= "\x88"; elseif ($u2 == "\xe2\x84\xa2")$x2 .= "\x99"; else $x2 .= $k2? (ov ( cb ($u2) )) : '?'; $r += $r2[$g2]; } } return $x2; } function cb ($p){ $i2 = ''; $e2_ = strlen ($p); for ($r = 0; $r < $e2_; ++ $r){ $i2 .= preg_replace ('/^1*0/','',decbin (ord ($p[$r]))); } return '&#'. bindec ($i2) .';'; } function vb ($o2) { $d = $o2; $d = preg_replace_callback ('/([\x80-\xFF])/','e2_utf_from_windows_1251_char',$d); return $d; } function e2_utf_from_windows_1251_char ($p){ list (, $p)=$p; if ($p == "\xa8") return "\xd0\x81"; if ($p == "\xb8") return "\xd1\x91"; if ($p >= "\xc0" && $p <= "\xef") return "\xd0" . chr (ord ($p)-48); if ($p >= "\xf0") return "\xd1" . chr (ord ($p)-112); if ($p == "\x85") return "\xe2\x80\xa6"; if ($p == "\x96") return "\xe2\x80\x93"; if ($p == "\x97") return "\xe2\x80\x94"; if ($p == "\xab") return "\xc2\xab"; if ($p == "\xbb") return "\xc2\xbb"; if ($p == "\x91") return "\xe2\x80\x98"; if ($p == "\x92") return "\xe2\x80\x99"; if ($p == "\x93") return "\xe2\x80\x9c"; if ($p == "\x94") return "\xe2\x80\x9d"; if ($p == "\x84") return "\xe2\x80\x9e"; if ($p == "\x99") return "\xe2\x84\xa2"; if ($p == "\xb9") return "\xe2\x84\x96"; if ($p == "\xa0") return "\xc2\xa0"; return '?'; }; function e2_utf8_version_of_array_($hv){ foreach ($hv as $t => $xf){ if (!array_key_exists ($t.'.u?',$hv)) { if(is_string ($hv[$t])) { $hv[$t]=vb ($hv[$t]); } elseif(is_array ($hv[$t])) { $hv[$t]=e2_utf8_version_of_array_($hv[$t]); } } } return $hv; } function yb ($jb){ return mb_convert_encoding ($jb[0],'HTML-ENTITIES','UTF-8'); } function nb ($o2,$p2 = false){ if ($p2){ return preg_replace_callback ( '/[\x{10000}-\x{fffff}]/u','e2_question_long_utf8_chars_helper',$o2 ); } else { return preg_replace ('/[\x{10000}-\x{fffff}]/u','?',$o2); } } function e2img_filename_by_processing ( $cd,$vd, $bd,$yd,$nd ) { global$_config; if(Log::$cy)__log ('Process image: "'. $cd .'" -> "'. $vd .'"'); if (!is_file ($cd)) return false; $md = stat ($cd)['size']; if (!ub ($cd)) { if(Log::$cy)__log ('Process image: SVG, no processing'); return $cd; } if(is_file ($vd) and !y3 ($cd,$vd)) { if(Log::$cy)__log ('Process image: Already exists'); return $vd; } if (!extension_loaded ('gd')) return false; $fd = pathinfo ($vd); if (!@j ($fd['dirname'])) { if(Log::$cy)__log ( 'Process image: Can’t create directory <'. $fd['dirname'] .'>' ); return false; } if(Log::$cy)__log ('Process image: Detecting image type'); $type = e2img__type_of_file ($cd); if (!$type) return false; $dd = 'imagecreatefrom'. $type; if (!function_exists ($dd)) return false; if(Log::$cy)__log ('Process image: Opening original image ('. $dd .')'); $sd = call_user_func ($dd,$cd); if (!$sd) return false; if ($ad = e2img__orientation_of_file ($cd)) { if(Log::$cy)__log ('Process image: Needs orientation fix'); $sd = e2img__res_rotate ($sd, -$ad); } $qd = [imagesx ($sd),imagesy ($sd)]; $ld = $qd; $zd = [0,0,0,0]; if ($yd == CROP_SQUARE){ if(Log::$cy)__log ('Process image: Needs crop'); list ($ld,$zd) = ( e2img__crop_metrics_to_square ($ld) ); } $ld = e2_fit_metrics_to_constraints ( $ld,$bd ); if ( $ad === 0 and $ld === $qd ) { if(Log::$cy)__log ('Process image: No changes necessary, leaving original'); return $cd; } if(Log::$cy)__log (var_export ($ld,true)); if(Log::$cy)__log (var_export ($zd,true)); $kd = e2img__create_copy_resampled ( $sd, $ld, $zd, $type ); imagejpeg ($kd,$vd,$nd); if (!is_file ($vd)) { if(Log::$cy)__log ('Process image: File not created by imagejpeg'); return false; } if ($vd !== $cd){ if ($ad === 0){ $xd = stat ($vd)['size']; if ($xd >= $md){ if(Log::$cy)__log ('Process image: Conversion to JPEG made file bigger, back up'); unlink ($vd); $vd = $cd; } } } @chmod ($vd,$_config['uploaded_files_mode']); if(Log::$cy)__log ('Process image: Done'); return $vd; } function e2img__create_copy_resampled ( $sd,$ld,$zd,$type ) { list ($ed,$rd)=$ld; list ($td,$jd,$hd,$gd)=$zd; $kd = imagecreatetruecolor ($ed,$rd); if($type === 'png'){ imagefill ($kd,0,0,imagecolorallocate ($kd,255,255,255)); imagealphablending ($kd,true); } $wd = imagesx ($sd); $ud = imagesy ($sd); imagecopyresampled ( $kd, $sd, 0,0, 0 + $td,0 + $jd, $ed,$rd, $wd - $hd,$ud - $gd ); imageinterlace ($kd,1); return $kd; } function e2img__type_of_file ($fb){ $id = @getimagesize ($fb); if (!$id or $id[2]>3) return false; if ($id[2]==IMAGETYPE_GIF) return 'gif'; if ($id[2]==IMAGETYPE_JPEG) return 'jpeg'; if ($id[2]==IMAGETYPE_PNG) return 'png'; return false; } function e2img__orientation_of_file ($fb){ if (!function_exists ('exif_read_data')) return 0; if (($od = @exif_read_data ($fb)) === false) return 0; if (@$od['Orientation']==3) return -180; if (@$od['Orientation']==6) return -270; if (@$od['Orientation']==8) return -90; return 0; } function e2img__res_rotate ($sy,$ad){ $pd = imagerotate ($sy,$ad,0); if ($pd !== false){ imagedestroy ($sy); $sy = $pd; } return $sy; } function e2_fit_metrics_to_constraints ( $cs,$bd ) { if ($bd === false)$bd = [0,0]; list ($vs,$bs)=$cs; list ($ys,$ns)=$bd; $ms = [1]; if ($ys)$ms[] = $ys / $vs; if ($ns)$ms[] = $ns / $bs; $fs = min ($ms); if ($fs < 1){ $vs = (int)round ($vs * $fs); $bs = (int)round ($bs * $fs); } return [$vs,$bs]; } function e2_getimagesize_jpeg ($fb){ $ds = @fopen ($fb,'r'); if ($ds === false){ throw new \RuntimeException (error_get_last ()['message']); } try { if (!flock ($ds,LOCK_SH)) { throw new \RuntimeException ('Cannot lock the file: '. $fb); } $ss = fread ($ds,2); if ($ss !== "\xFF\xD8"){ throw new \RuntimeException ('Unknown format: '. $fb); } for (;;) { $as_ = @unpack ('H4segment/nlen',fread ($ds,4)); if ($as_ === false){ throw new \RuntimeException ('Unknown format: '. $fb); } $e2_ = $as_['len']; $qs = $as_['segment']; if(strpos ($qs,'ffc')===0){ $ls = @unpack ('Cbits/nheight/nwidth',fread ($ds,$e2_ - 2)); if ($ls === false){ throw new \RuntimeException ('Unknown format: '. $fb); } return [$ls['width'],$ls['height']]; } if(fseek($ds,$e2_ - 2,SEEK_CUR)!==0){ throw new \RuntimeException ('Cannot find start of frame: '. $fb); } } } finally { fclose ($ds); } } function e2_getimagesize ($fb){ $vs = $bs = 0; if (gb ($fb)) { try { list ($vs,$bs)=e2_getimagesize_jpeg ($fb); } catch (\Exception $e){ list ($vs,$bs)=getimagesize ($fb); } } elseif (ub ($fb)) { list ($vs,$bs)=getimagesize ($fb); } elseif (ob ($fb)) { try { require_once SYSTEM_LIBRARY_FOLDER .'getid3/getid3.php'; $id = new getid3 (); $id = $id->analyze ($fb); $vs = $id['video']['resolution_x']; $bs = $id['video']['resolution_y']; } catch (\Exception $e){} } elseif (ib ($fb)) { if(function_exists ('simplexml_load_string')) { $zs = simplexml_load_string (file_get_contents ($fb)); if ($zs){ $ks = $zs->attributes (); list ($vs,$bs) = [(string)$ks -> width, (string)$ks -> height]; } } } if(substr ($fb,strrpos ($fb,'.')-3,3)=='@2x'){ $vs = (int)floor ($vs / 2); $bs = (int)floor ($bs / 2); } $xs = round (($bs > 0) ? ($vs / $bs):1,2); $es = round (($vs > 0) ? ($bs / $vs):1,2); return [$vs,$bs,$xs,$es]; } function e2img__crop_metrics_to_square ($cs){ $rs = $ts = $js = $hs = 0; list ($vs,$bs)=$cs; if ($vs > $bs){ $js = $vs - $bs; $rs = floor ($js / 2); $bs = $vs; } elseif ($vs < $bs){ $hs = $bs - $vs; $ts = floor ($js / 2); $vs = $bs; } $zd = [$rs,$ts,$js,$hs]; $gs = [$vs,$bs]; return [$gs,$zd]; } define ('PROVIDE_MEDIA_ASYNC',10); define ('PROVIDE_MEDIA_NOW',20); function mb ($ws){ global$full_blog_url; $us = parse_url ($ws); if (isset ($us['host'])) { $sm = $ws; if ($us['host']=='www.youtube.com'){ $is = basename ($us['path']); $os = 'remote/youtube-'. $is .'-cover.jpg'; return [ 'url' => $sm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'youtube', 'video-id' => $is, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER . $os, 'local-relative-filename' => $os, 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $os, 'local-full-failname' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $os . '.failed', ]; } elseif ($us['host']=='player.vimeo.com'){ $is = basename ($us['path']); $os = 'remote/vimeo-'. $is .'-cover.jpg'; return [ 'url' => $sm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'vimeo', 'video-id' => $is, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER . $os, 'local-relative-filename' => $os, 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $os, 'local-full-failname' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $os . '.failed', ]; } elseif (wb ($us['path'])) { return [ 'url' => $sm, 'type' => 'remote-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => false, 'mime-type' => b3 ($us['path']), 'length' => '', ]; } else { return [ 'url' => $sm, 'type' => 'remote-non-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => b3 ($us['path']), 'length' => '', ]; } } else { if (wb ($us['path'])) { $sm = $full_blog_url .'/'. PICTURES_FOLDER . $us['path']; $ps = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $us['path']; return [ 'url' => $sm, 'type' => 'local-image', 'is-local?' => true, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => ub ($us['path']), 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'mime-type' => b3 ($us['path']), 'length' => @stat ($ps)['size'], 'local-href' => $sm, 'local-cover-href' => $sm, 'local-relative-filename' => $us['path'], 'local-full-filename' => $ps, 'thumb-full-filename' => $ps, ]; } elseif (ob ($us['path'])) { $sm = $full_blog_url .'/'. VIDEO_FOLDER . $us['path']; $ps = MEDIA_ROOT_FOLDER . VIDEO_FOLDER . $us['path']; return [ 'url' => $sm, 'type' => 'local-video', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => b3 ($us['path']), 'length' => @stat ($ps)['size'], 'local-href' => $sm, 'local-relative-filename' => $us['path'], 'local-full-filename' => $ps, 'thumb-full-filename' => VIDEO_ICON_IMAGE, ]; } else { $sm = $full_blog_url .'/'. AUDIO_FOLDER . $us['path']; $ps = MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $us['path']; return [ 'url' => $sm, 'type' => 'local-non-image', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => b3 ($us['path']), 'length' => @stat ($ps)['size'], 'local-href' => $sm, 'local-full-filename' => $ps, 'thumb-full-filename' => AUDIO_ICON_IMAGE, ]; } } } function fb ($ca){ $va = []; foreach ($ca as $ws){ $ba = mb ($ws); if ($ba['is-local?'])$va[] = $ws; } return $va; } function db ($ca){ $va = []; foreach ($ca as $ws){ $ba = mb ($ws); if ($ba['is-snippetable?'])$va[] = $ws; } return $va; } function sb ( $ya,$na ){ if (!is_array ($ya))$ya = []; if (!is_array ($na))$na = []; $ca = array_merge ($na,$ya); $ca = array_reverse ($ca); $ca = array_unique ($ca); $ca = array_reverse ($ca); return $ca; } function ab ($ca){ global$full_blog_url; if (!is_array ($ca) or !count ($ca)) return []; rb ($ca); $ma = []; foreach ($ca as $ws){ if (!empty ($fa[$ws])) continue; $ba = mb ($ws); if (!$ba['is-usable-as-cover?']) continue; if (!is_file ($ba['local-full-filename'])) continue; $size = e2_getimagesize ($ba['local-full-filename']); list ($vs,$bs,$xs,$es)=$size; $ma[] = [ 'src' => $ba['local-cover-href'], 'width' => $vs, 'height' => $bs, 'horizontality' => $xs, 'verticality' => $es, ]; $fa[$ws]=true; } return $ma; } function qb ($ca){ global$full_blog_url,$_strings; if (!is_array ($ca) or !count ($ca)) return []; rb ($ca); $da = []; foreach ($ca as $ws){ if (!empty ($fa[$ws])) continue; $ba = mb ($ws); if (!$ba['is-using-thumbnails?']) continue; if (!is_file ($ba['local-full-filename'])) continue; $sa = [ 'is-available?' => true, 'src' => '', 'width' => '', 'height' => '', 'original-filename' => '', 'original-filesize' => '', ]; if (!$ba['is-local?'] or is_file ($ba['local-full-filename'])) { if ($ba['is-generating-thumbnail?']) { $aa = tb ( $ba ); } else { $aa = $ba['thumb-full-filename']; } } if (empty ($aa)) { $sa['is-available?']=false; $aa = jb ( $ba['local-relative-filename'] ); } $sa['src']=x3 ($aa); if ($sa['is-available?']) { $size = e2_getimagesize ($aa); list ($vs,$bs)=$size; } else { $vs = $bs = ''; } if (!$vs)$vs = THUMB_WIDTH/2; if (!$bs)$bs = THUMB_HEIGHT/2; list ($vs,$bs)=e2_fit_metrics_to_constraints ( [$vs,$bs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $sa['width']=$vs; $sa['height']=$bs; if ($ba['is-local?']) { $sa['original-filename']=$ws; if(is_file ($ba['local-full-filename'])) { $qa = stat ($ba['local-full-filename'])[7]; $qa = round ($qa / 1024) .' '. $_strings['gs--kb']; $sa['original-filesize']=$qa; } } $da[] = $sa; $fa[$ws]=true; } return $da; } function lb ($la){ foreach ( ['maxresdefault','hqdefault','mqdefault','sddefault','default'] as $fb ) { $sm = 'http://img.youtube.com/vi/'. $la .'/'. $fb .'.jpg'; if(Log::$cy)__log ('Trying '. $sm .'...'); $za = @file_get_contents ($sm); if ($za !== false) return $za; } return false; } function zb ($ka){ $xa = @unserialize ( file_get_contents ('http://vimeo.com/api/v2/video/'. $ka .'.php') ); if (!empty ($xa[0]['thumbnail_large'])) { return @file_get_contents ($xa[0]['thumbnail_large']); } return false; } function kb ($ba,$ea){ if(is_file ($ba['local-full-filename'])) { if(Log::$cy)__log ('Already exists: '. $ba['local-full-filename']); } elseif(is_file ($ba['local-full-failname'])) { if(Log::$cy)__log ('Already tried and failed: '. $ba['local-full-filename']); } else { if(Log::$cy)__log ('Resource '. $ba['url'].' is missing a cover, retrieving'); if ($ea == PROVIDE_MEDIA_ASYNC){ p3 (jv ('e2s_retrieve', [ 'url' => strtr (base64_encode ($ba['url']), '+/','-_'), ])); } if ($ea == PROVIDE_MEDIA_NOW){ if(Log::$cy)__log ('Downloading "'. $ba['video-service'] .'" cover as '. $ba['local-full-filename'] .'...'); if ($ba['video-service']=='youtube'){ $za = lb ($ba['video-id']); } if ($ba['video-service']=='vimeo') { $za = zb ($ba['video-id']); } if ($za !== false){ m3 ($ba['local-full-filename'],$za); } else { m3 ($ba['local-full-failname'],''); } } } } function xb ($ws,$ea){ $ba = mb ($ws); if(Log::$cy)__log ('Resource '. $ws .' is of type '. $ba['type']); if ($ba['type']=='local-image'){ tb ($ba); } if ($ba['type']=='online-video'){ kb ($ba,$ea); if ($ea == PROVIDE_MEDIA_NOW and is_file ($ba['local-full-filename'])) { tb ($ba); } } if ($ba['type']=='remote-image'){ } } function eb ($ca){ foreach ($ca as $ws){ $ba = mb ($ws); if (empty ($ba['local-full-failname'])) continue; if(is_file ($ba['local-full-failname'])) { if(Log::$cy)__log ('Deleting '. $ba['local-full-failname'] .' to try again'); unlink ($ba['local-full-failname']); } } } function rb ($ca){ if (!is_array ($ca)) return; if(Log::$cy)__log ('Asynchronously provide data for resnames {'); foreach ($ca as $ws){ xb ($ws,PROVIDE_MEDIA_ASYNC); } if(Log::$cy)__log ('}'); } function tb ($ba){ if (!$ba['is-generating-thumbnail?']) return false; return e2img_filename_by_processing ( $ba['local-full-filename'], jb ($ba['local-relative-filename']), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); } function jb ($ra){ return c3 ( MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $ra, 'thumb@2x' ); } function gb ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; return (in_array (strtolower ($ha), ['jpg','jpeg'])); } function wb ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; return (in_array (strtolower ($ha), ['jpg','jpeg','gif','png','svg'])); } function ub ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; return (in_array (strtolower ($ha), ['jpg','jpeg','gif','png'])); } function ib ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; return (in_array (strtolower ($ha), ['svg'])); } function ob ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; return (in_array (strtolower ($ha), ['mp4','mov'])); } function pb ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; return (in_array (strtolower ($ha), ['mp3'])); } function c3 ($ws,$ga){ if (!empty ($ga)) { $wa = explode ('/',$ws); $ua = array_pop ($wa); $ia = explode ('.',$ua); if(count ($ia)<2)$ia[] = ''; $ha = array_pop ($ia); $ia[] = $ga; if ($ha)$ia[] = $ha; $ua = implode ('.',$ia); $wa[] = $ua; $ws = implode ('/',$wa); } return $ws; } function v3 ($oa,$ua){ if (!is_file ($oa . $ua)) return $ua; $pa = strrpos ($ua,'.'); $c1 = substr ($ua,0,$pa); $ha = substr ($ua,$pa); $r = 0; while (is_file ($oa . $c1 .'-'. (++ $r).$ha)); $ua = $c1 .'-'. $r . $ha; return $ua; } function b3 ($ws){ $ja = pathinfo ($ws); $ha = @$ja['extension']; if ($ha == 'png') return 'image/png'; if ($ha == 'gif') return 'image/gif'; if ($ha == 'jpg' or $ha == 'jpeg') return 'image/jpeg'; if ($ha == 'mp3') return 'audio/mpeg'; if ($ha == 'svg') return 'image/svg+xml'; if ($ha == 'mp4') return 'video/mp4'; if ($ha == 'mov') return 'video/quicktime'; } function y3 ($v1,$b1){ return strcasecmp ($v1,$b1)===0; } $_folders_written = [ '.', USER_FOLDER, CACHES_FOLDER, BACKUP_FOLDER, LOG_FOLDER, MEDIA_ROOT_FOLDER . PICTURES_FOLDER, MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER, MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'remote/', MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER .'remote/', MEDIA_ROOT_FOLDER . VIDEO_FOLDER, MEDIA_ROOT_FOLDER . AUDIO_FOLDER, MEDIA_ROOT_FOLDER . AVATARS_FOLDER, ]; $_files_written = [ USER_FOLDER . 'password-hash.psa', USER_FOLDER . 'password-wait.psa', USER_FOLDER . 'last-comment.psa', USER_FOLDER . 'new-uploads.psa', USER_FOLDER . 'settings.json', USER_FOLDER . 'indexing.psa', USER_FOLDER . 'auth.psa', USER_FOLDER . 'scheduled.psa', ]; define ('CROP_NONE',0); define ('CROP_SQUARE',1); function n3 () { global$_folders_written,$_files_written; clearstatcache (); $y1 = []; foreach($_folders_written as $dn){ if(is_dir ($dn) and !is_writable ($dn)) { $y1[] = $dn; } } foreach($_files_written as $dn){ if(is_file ($dn) and !is_writable ($dn)) { $y1[] = $dn; } } return $y1; } function m3 ($fy,$x){ @j (dirname ($fy)); if (!@file_put_contents ($fy,$x,LOCK_EX)) { return false; } @chmod ($fy,E2_NEW_FILES_RIGHTS); return true; } function e2s_retrieve ($parameters){ $sm = base64_decode (strtr ($parameters['url'],'-_','+/')); if(Log::$cy)__log ('Retrieve: '. $sm); xb ($sm,PROVIDE_MEDIA_NOW); die; } function f3 ( $n1,$m1,$ya ){ $f1 = []; if(is_array ($ya)) { $f1 = fb ($ya); } $d1 = @unserialize ( $m1['Uploads'] ) or $d1 = []; $s1 = array_diff ($f1,$d1); if(count ($s1)>0){ z3 ($n1,$m1['ID'],'add',$s1); } return $s1; } function d3 ($ca){ $y1 = []; foreach (ab ($ca) as $a1){ $y1[] = $a1['src']; } return $y1; } function s3 ($name,$q1){ $name = m ($name); if(preg_match('//u',$name))$name = pv ($name,false); if ($q1 == 'image'){ $oa = MEDIA_ROOT_FOLDER . PICTURES_FOLDER; } elseif ($q1 == 'video'){ $oa = MEDIA_ROOT_FOLDER . VIDEO_FOLDER; } elseif ($q1 == 'audio'){ $oa = MEDIA_ROOT_FOLDER . AUDIO_FOLDER; } else { return false; } $l1 = ''; for ($r = 0; $r < strlen ($name); $r++) { if($name[$r]=='?'){ $l1 .= ''; } elseif($name[$r]==' '){ $l1 .= '-'; } elseif(ord ($name[$r]) <= 127){ $l1 .= $name[$r]; } } if ($l1 == '')$l1 = $q1; if ($l1[0]=='.')$l1 = $q1 . $l1; return $l1; } function a3 ($z1){ global$_config; if(Log::$cy)__log ('Count references for upload <'. $z1 .'>'); if(is_file (USER_FOLDER . 'new-uploads.psa')) { $k1 = @unserialize (file_get_contents (USER_FOLDER . 'new-uploads.psa')); } $x1 = '%'. str_replace ('%','#%',$z1) .'%'; xn ( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Text` LIKE '". $x1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $x1 ."' ESCAPE '#')", 'get notes where uploads may be referenced' ); $e1 = en (); $r1 = @unserialize ($e1[0]['Uploads']); if (!is_array ($r1)) { foreach ($e1 as $n2){ $t1 = u3 ( $n2['FormatterID'], @$n2['Text'],'full-rss' ); $r1 = f3 ( 'note',$n2, $t1['meta']['resources-detected'] ); } } xn ( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Description` LIKE '". $x1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $x1 ."' ESCAPE '#')", 'get tags where uploads may be referenced' ); $e1 = en (); $j1 = @unserialize ($e1[0]['Uploads']); if (!is_array ($j1)) { foreach ($e1 as $q2){ $t1 = i3 ( @$q2['Description'],'full-rss' ); $j1 = f3 ( 'tag',$q2, $t1['meta']['resources-detected'] ); } } if (!is_array ($k1))$k1 = []; if (!is_array ($r1))$r1 = []; if (!is_array ($j1))$j1 = []; $h1 = array_merge ($k1,$r1,$j1); if(Log::$cy)__log ('References found in relevant entries: '. var_export ($h1,true)); if(in_array ($z1,$h1)) { if(Log::$cy)__log ('Still referenced, do not delete file'); return true; } return false; } function q3 ($g1,$is){ global$_config; if ($g1 == 'note' and $is == 'new'){ if(is_file (USER_FOLDER . 'new-uploads.psa')) { $h1 = @unserialize (file_get_contents (USER_FOLDER . 'new-uploads.psa')); } } elseif ($g1 == 'note'){ xn ( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $is ); $e1 = en (); $h1 = @unserialize ($e1[0]['Uploads']); } elseif ($g1 == 'tag'){ xn ( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $is ); $e1 = en (); $h1 = @unserialize ($e1[0]['Uploads']); } if (!is_array ($h1))$h1 = array (); return $h1; } function l3 ($g1,$is,$h1){ global$_config; if ($g1 == 'note' and $is == 'new'){ if (!@m3 (USER_FOLDER . 'new-uploads.psa',serialize ($h1))) { mv ('ERROR',E2E_PERMISSIONS_ERROR); } } elseif ($g1 == 'note'){ xn ( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `Uploads`='". serialize ($h1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $is ); } elseif ($g1 == 'tag'){ xn ( "UPDATE `". $_config['db_table_prefix']."Keywords` ". "SET `Uploads`='". serialize ($h1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $is ); } else { return false; } if (!is_array ($h1))$h1 = array (); return $h1; } function z3 ($g1,$is,$action,$qv){ global$_config; $h1 = array (); if(Log::$cy)__log ('Register upload: <'. $g1.', '. $is.', '. $action.', '. $qv .'>'); $h1 = q3 ($g1,$is); $h1 = d ($h1,$action,$qv); l3 ($g1,$is,$h1); } function k3 ($w1,$u1,$ya){ $d1 = @unserialize ($u1['Uploads']) or $d1 = array (); $i1 = fb ($ya); $h1 = d ($d1,'add',$i1); $h1 = serialize ($h1); if ($h1 != $u1['Uploads']) { $u1['Uploads']=$h1; nn ($w1,$u1); } } function e2j_file_upload ($parameters = array ()) { global$_config,$full_blog_url,$_strings; @j (MEDIA_ROOT_FOLDER . PICTURES_FOLDER); @chmod (MEDIA_ROOT_FOLDER . PICTURES_FOLDER,$_config['uploaded_files_mode']); @j (MEDIA_ROOT_FOLDER . VIDEO_FOLDER); @chmod (MEDIA_ROOT_FOLDER . VIDEO_FOLDER,$_config['uploaded_files_mode']); @j (MEDIA_ROOT_FOLDER . AUDIO_FOLDER); @chmod (MEDIA_ROOT_FOLDER . AUDIO_FOLDER,$_config['uploaded_files_mode']); $zv = [ 'success' => false ]; if(count ($_FILES)>0){ foreach($_FILES as $fy){ if (!$fy['error']) { if(Log::$cy)__log ('Ajax file upload: <'. $fy['name'].'>'); $zv['data']['file-kind']='image'; $oa = MEDIA_ROOT_FOLDER . PICTURES_FOLDER; if (ob ($fy['name'])) { $zv['data']['file-kind']='video'; $oa = MEDIA_ROOT_FOLDER . VIDEO_FOLDER; } elseif (pb ($fy['name'])) { $zv['data']['file-kind']='audio'; $oa = MEDIA_ROOT_FOLDER . AUDIO_FOLDER; } $o1 = ( array_key_exists ('overwrite',$_GET) and is_file ($oa . $fy['name']) ); $p1 = false; $zv['data']['overwrite'] = (int)$o1; if(Log::$cy)__log ('Ajax file upload: Overwrite is resolved to <'. (int)$o1.'>'); $l1 = s3 ($fy['name'],$zv['data']['file-kind']); if(Log::$cy)__log ('Ajax file upload: Safe name is <'. $l1.'>'); if(is_file ($oa . $l1)) { if(file_get_contents ($oa . $l1)==file_get_contents ($fy['tmp_name'])) { if(Log::$cy)__log ('Ajax file upload: Existing file is the same'); $p1 = true; } elseif (!$o1){ $l1 = v3 ($oa,$l1); } } if (!$p1){ move_uploaded_file ($fy['tmp_name'],$oa . $l1); @chmod ($oa . $l1,$_config['uploaded_files_mode']); } if(Log::$cy)__log ('Ajax file upload: File kind is <'. $zv['data']['file-kind'].'>'); if ($zv['data']['file-kind']=='image'){ $ha = pathinfo ($l1,PATHINFO_EXTENSION); if (y3 ($ha,'jpg')) { $cq = $l1; } else { $cq = $l1 .'.jpg'; $cq = v3 ( MEDIA_ROOT_FOLDER . PICTURES_FOLDER,$cq ); } $vq = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $l1; $bq = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $cq; if(Log::$cy)__log ('Ajax file upload: Process uploaded image <'. $vq.'>'. ' to possibly <'. $bq.'>'); $bq = e2img_filename_by_processing ( $vq, $bq, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); $qa = $fy['size']; if (!y3 ($bq,$vq)) { @unlink ($vq); $l1 = $cq; $qa = stat ($bq)['size']; } if ($o1){ @unlink (jb ($l1)); } if ($yq = e2img_filename_by_processing ( $vq, jb ($l1), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY )) { if(Log::$cy)__log ('Ajax file upload: thumbnail, done as '. $yq); list ($vs,$bs)=e2_getimagesize ($yq); if(Log::$cy)__log ('Ajax file upload: image size '. $vs .'×'. $bs); if (!$vs)$vs = THUMB_WIDTH/2; if (!$bs)$bs = THUMB_HEIGHT/2; list ($vs,$bs)=e2_fit_metrics_to_constraints ( [$vs,$bs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $zv['success']=true; $zv['data']['new-name']=$l1; $zv['data']['filesize']=round ($qa / 1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=x3 ($yq); $zv['data']['width']=$vs; $zv['data']['height']=$bs; z3 ($parameters['entity'],$parameters['entity-id'],'add', array ($l1)); } else { if(Log::$cy)__log ('Ajax file upload: couldn’t create thumbnail'); @unlink ($oa . $l1); $zv['error']['message']=_S ('er--cannot-create-thumbnail'); } } if ($zv['data']['file-kind']=='video'){ if(Log::$cy)__log ('Ajax file upload: video, done'); $zv['success']=true; $zv['data']['new-name']=$l1; $zv['data']['filesize']=round ($fy['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=VIDEO_ICON_IMAGE; $zv['data']['width']=VIDEO_ICON_WIDTH/2; $zv['data']['height']=VIDEO_ICON_HEIGHT/2; z3 ($parameters['entity'],$parameters['entity-id'],'add', array ($l1)); } if ($zv['data']['file-kind']=='audio'){ if(Log::$cy)__log ('Ajax file upload: audio, done'); $zv['success']=true; $zv['data']['new-name']=$l1; $zv['data']['filesize']=round ($fy['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=AUDIO_ICON_IMAGE; $zv['data']['width']=AUDIO_ICON_WIDTH/2; $zv['data']['height']=AUDIO_ICON_HEIGHT/2; z3 ($parameters['entity'],$parameters['entity-id'],'add', array ($l1)); } } elseif(4 != $fy['error']) { if ($fy['error']==1){ $zv['error']['message']='too-big'; } elseif ($fy['error']==2){ $zv['error']['message']='too-big'; } elseif ($fy['error']==3){ $zv['error']['message']='partial'; } else { $zv['error']=$fy['error']; } } } } else { if(Log::$cy)__log ('Ajax file upload error: no files'); $zv['error']['message']='no-files'; } $zv = json_encode ($zv); die ($zv); } function x3 ($nq){ global$full_blog_url; $e2_ = strlen (MEDIA_ROOT_FOLDER); if ($e2_ and substr ($nq,0,$e2_)==MEDIA_ROOT_FOLDER){ return substr ($nq,$e2_); } else { return$full_blog_url .'/'. $nq; } } function e3 () { @unlink (USER_FOLDER . 'userpic@2x.png'); @unlink (USER_FOLDER . 'userpic@2x.jpg'); @unlink (USER_FOLDER . 'userpic-large@2x.jpg'); @unlink (USER_FOLDER . 'userpic-square@2x.jpg'); } function e2j_userpic_remove () { if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_settings')); } e3 (); $zv = json_encode ([ 'success' => true ]); die ($zv); } function e2j_userpic_upload () { global$_config; $zv = [ 'success' => false ]; if(count ($_FILES)!=1){ if(Log::$cy)__log ('Ajax userpic upload error: no or too many files'); $zv['error']['message']='No or too many files'; $zv = json_encode ($zv); die ($zv); } $fy = array_pop ($_FILES); if (!$fy['error']) { if(Log::$cy)__log ('Ajax userpic upload: <'. $fy['name'].'>'); $mq = pathinfo ($fy['name']); $ha = strtolower ($mq['extension']); if ($ha != 'png')$ha = 'jpg'; $fb = 'userpic.original.'. $ha; move_uploaded_file ($fy['tmp_name'],USER_FOLDER . $fb); @chmod (USER_FOLDER . $fb,$_config['uploaded_files_mode']); e3 (); copy ( USER_FOLDER . $fb, USER_FOLDER .'userpic-large@2x.jpg' ); $fq = e2img_filename_by_processing ( USER_FOLDER .'userpic-large@2x.jpg', USER_FOLDER .'userpic-large@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_NONE, USERPIC_JPG_QUALITY ); copy ( USER_FOLDER . $fb, USER_FOLDER .'userpic-square@2x.jpg' ); $dq = e2img_filename_by_processing ( USER_FOLDER .'userpic-square@2x.jpg', USER_FOLDER .'userpic-square@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_SQUARE, USERPIC_JPG_QUALITY ); $sq = e2img_filename_by_processing ( USER_FOLDER . $fb, USER_FOLDER .'userpic@2x.jpg', [USERPIC_WIDTH,USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); if ($dq){ $aq = str_replace (USER_FOLDER,USER_FOLDER_URLPATH,$dq); $zv = [ 'success' => true, 'data' => [ 'new-image-src' => $aq, ] ]; } else { $zv['error']['message']=_S ('er--supported-only-png-jpg-gif'); } } elseif(4 != $fy['error']) { if ($fy['error']==1){ $zv['error']['message']='File too big'; } elseif ($fy['error']==2){ $zv['error']['message']='File too big'; } elseif ($fy['error']==3){ $zv['error']['message']='File upload is partial'; } else { $zv['error']['message']='File upload error '. $fy['error']; } } $zv = json_encode ($zv); die ($zv); } function e2j_file_remove ($parameters){ if (!array_key_exists ('file',$_POST)) { $zv = [ 'success' => false ]; $zv = json_encode ($zv); die ($zv); } $fy = $_POST['file']; $zv = [ 'success' => true ]; $zv = json_encode ($zv); z3 ($parameters['entity'],$parameters['entity-id'],'remove',$fy); if (!a3 ($fy)) { if (pb ($fy)) { if(Log::$cy)__log ('Not referenced, deleting '. MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $fy); @unlink (MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $fy); } elseif (ob ($fy)) { if(Log::$cy)__log ('Not referenced, deleting '. MEDIA_ROOT_FOLDER . VIDEO_FOLDER . $fy); @unlink (MEDIA_ROOT_FOLDER . VIDEO_FOLDER . $fy); } else { $sq = c3 ($fy,'thumb@2x'); $qq = @unlink (MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $fy); $lq = @unlink (MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $sq); } } die ($zv); } function r3 () { global$_config; if (!$_config['files_total_size_limit']) return false; $zq = 0; foreach(glob (MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'/*') as $fy){ $f = stat ($fy); $zq += $f['size']; } foreach(glob (MEDIA_ROOT_FOLDER . VIDEO_FOLDER .'/*') as $fy){ $f = stat ($fy); $zq += $f['size']; } foreach(glob (MEDIA_ROOT_FOLDER . AUDIO_FOLDER .'/*') as $fy){ $f = stat ($fy); $zq += $f['size']; } $kq = $_config['files_total_size_limit']; $xq = f ($zq,$kq); return array ($zq,$kq,$xq); } function t3 ($eq){ $rq = true; if (list ($zq,$kq,$xq)=$eq){ $rq = ($kq - $zq)>0; } return $rq; } function j3 ($eq,$tq = false){ $jq = ''; if (list ($zq,$kq,$xq)=$eq){ $eq = array ( 'used' => round ($zq / 1024 / 1024), 'total' => round ($kq / 1024 / 1024), 'percent' => $xq ); if ($tq or ($kq - $zq)<1024 * 1024 * 10){ if ($zq < $kq){ $jq = e2l_get_string ('gs--used',$eq); } else { $jq = e2l_get_string ('gs--used-all',$eq); } } } return $jq; } function e2_error404_mode () { global$_config,$_strings; if($_config['try_redirect_to_all']) { $hq = 'all/'. urldecode ($_GET['go']); hv ($hq); } header ('HTTP/1.1 404 Not found'); $gq['class']='404'; $gq['heading']=$_strings['pt--page-not-found']; $gq['title']=$_strings['pt--page-not-found']; return $gq; } function e2s_post_service ($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_underhood')); } if($parameters['service']==='build'){ z2 (); e2_build (); mv ('Engine core built',E2E_MESSAGE); } if($parameters['service']==='sync'){ z2 (); e2_drop_all_kinds_of_cache (); mv ('Caches invalidated',E2E_MESSAGE); } if($parameters['service']==='log'){ z2 (); nv (); mv ('Logs enabled',E2E_MESSAGE); } if($parameters['service']==='backup'){ } if($parameters['service']==='migrate'){ z2 (); qn (); mv ('Database structure up to date',E2E_MESSAGE); } c (jv ('e2m_underhood')); } function h3 ($tv){ include_once 'neasden/neasden.php'; $Nn = new Neasden; $Nn->profile_name = 'kavychki'; return$Nn->format ($tv); } function g3 ($ly,$tv,$wq){ include_once 'neasden/neasden.php'; if ($tv === '') return array (); if ($ly == 'calliope'){ preg_match_all ('/\(\(([^ ]*)( |\)\))/',$tv,$y3); return $y3[1]; } elseif ($ly == 'neasden'){ $Nn = new Neasden; $Nn->profile_name = $wq; $Nn->format ($tv); return$Nn->resources_detected; } else { return array (); } } function w3 () { return '<div class="foot" style="color: var(--errorColor); font-style: italic">This text was created with a very old version of Aegea that used a formatter called Calliope. It is no longer included with Aegea&nbsp;2.10.</div><div class="foot" style="color: var(--errorColor); font-style: italic">Edit this note to switch it and its comments to the current formatter, Neasden. If anything breaks, edit again to fix.</div><div class="foot" style="color: var(--errorColor); font-style: italic">To temporarily install Calliope, get the directory <tt>/system/calliope/</tt> from Aegea&nbsp;2.9 and copy it to your <tt>/user/calliope/</tt>. This will not work with Aegea&nbsp;2.11. See release notes for Aegea&nbsp;2.10 for details.</div>'; } function u3 ($ly,$tv,$wq){ include_once 'neasden/neasden.php'; if(Log::$cy)__log ('Format: format with formatter "'. $ly .'" in context "'. $wq.'"'); if ($ly == 'calliope'){ $tv = pv ($tv); $tv = o3 ($tv,$wq); $meta = array (); $tv = vb ($tv); $tv = '<div class="e2-text-calliope-formatted">'. h3 ($tv) .'</div>'; } elseif ($ly == 'neasden'){ $Nn = new Neasden; $Nn->profile_name = $wq; $tv = $Nn->format ($tv); $meta = array ( 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ); } return array ( 'text-final' => $tv, 'meta' => $meta, ); } function i3 ($tv,$wq){ global$_config; return u3 ($_config['default_formatter'],$tv,$wq); } function o3 ($tv,$wq){ global$_config,$settings,$full_blog_url,$_template; @ (list ($wq,$uq)=explode ('|',$wq)); if (!is_file (USER_FOLDER . 'calliope/WikiFormatter.php')) { return w3 (); } require_once USER_FOLDER . 'calliope/WikiFormatter.php'; if ('full' == $wq)$iq = WF_FULL_MODE; elseif ('full-rss' == $wq)$iq = WF_FULL_MODE; elseif ('simple' == $wq)$iq = WF_SIMPLE_MODE; elseif ('simple-rss' == $wq)$iq = WF_SIMPLE_MODE; else return $tv; $oq = new WikiFormatter (); $oq -> replace = array ( '/' => 'i', '+' => 'small', '-' => 's', '*' => 'b', '^' => 'sup', 'v' => 'sub', '#' => 'tt', '!' => 'blockquote', ); $oq -> settings = array ( 'hrefSize' => 100, 'localImgDir' => $full_blog_url .'/'. PICTURES_FOLDER, 'maxImgWidth' => $_template['max_image_width'], 'mode' => $iq, 'enableShrinkLongHref' => 1, 'enableHr' => 0, 'enableBr' => 1, 'enableHeaders' => 1, 'headersStartWith' => 1, 'enableTables' => 1, 'simpleTableCSSClass' => 'e2-text-table', 'enableAutoAcronymEngine' => 0, 'enableAcronym' => 0, 'acronymBase' => '', 'enableList' => 1, 'mailSafe' => "<a href=\"\" onmouseover=\"this.href='mailto:'+{email}\">{icon}<script language=\"JavaScript\">document.write({name});</script></a>", 'ljUserTag' => '<a href="http://livejournal.com/users/{name}/">{name}</a>', 'fullVersionURL' => $uq, 'enableTagIcons' => 0, 'outerUrlInNewWindow' => 0, 'lineBreak' => "\n", 'extLinkHrefPrefix' => '', ); $tv = $oq -> Wiki2HTML ($tv); return $tv; } function p3 ($sm,$pq = false){ if(Log::$cy)__log ('Spawn: Curl '. $sm .' using '. ($pq? 'post' : 'get') .'...'); if(function_exists ('curl_init')) { $cl = curl_init (); $vl = !ini_get ('open_basedir'); $vl = ($vl and !$pq); curl_setopt_array ($cl, array ( CURLOPT_URL => $sm, CURLOPT_POST => $pq, CURLOPT_POSTREDIR => false, CURLOPT_POSTFIELDS => '', CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => h2 (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $vl, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($cl); $bl = curl_errno ($cl); $yl = curl_error ($cl); $ss = curl_getinfo ($cl); curl_close ($cl); if(Log::$cy)__log ('Spawn: Curl returns: ['. print_r ($ss,true) .'] ['. $content .'], (errno='. $bl .', errstr='. $yl .')...'); } else { if(Log::$cy)__log ('Spawn: Curl functions are not available'); } } function cy ($nl){ global$_config; if (@$_config['broadcast_url'] and !$nl['IsExternal']) { if($_config['log_broadcast']) { Log::$cy = true; if(Log::$cy)bv ('broadcast'); } if(Log::$cy)__log ('Broadcast-async note: '. $nl['Title']); $sm = jv ('e2m_note_broadcast', array ('*note' => $nl)); if(Log::$cy)__log ('Broadcast will spawn url: '. $sm); p3 ($sm); } } function vy ($ml){ global$_config; if (!$ml) return false; $sm = $_config['broadcast_url']; $sm .= '?src='. urlencode ($ml); if($_config['log_broadcast']) { Log::$cy = true; if(Log::$cy)bv ('broadcast'); } if(Log::$cy)__log ('Broadcast: Curl '. $sm .'...'); if(function_exists ('curl_init')) { $cl = curl_init (); $vl = !ini_get ('open_basedir'); curl_setopt_array ($cl, array ( CURLOPT_URL => $sm, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => h2 (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $vl, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($cl); $bl = curl_errno ($cl); $yl = curl_error ($cl); $ss = curl_getinfo ($cl); curl_close ($cl); if(Log::$cy)__log ('Broadcast: Curl returns: ['. print_r ($ss,true) .'] ['. $content .'], (errno='. $bl .', errstr='. $yl .')...'); if ($bl === 0) return true; } else { if(Log::$cy)__log ('Spawn: Curl functions are not available'); } return false; } function by ($nl){ if (!$nl) return false; $ml = jv ('e2m_note_json', array ('*note' => $nl)); return vy ($ml); } function e2m_note_broadcast ($parameters = array ()) { global$_config; if (@$_config['broadcast_url']) { if(array_key_exists ('*note',$parameters)) { $ml = jv ('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif(array_key_exists ('alias',$parameters)) { $ml = jv ('e2m_note_json', array ('alias' => $parameters['alias'])); } if (vy ($ml)) { die ('Broadcasted.'); } else { die ('Could not broadcast.'); } } else { return e2_error404_mode (); } } function e2m_timezone () { global$_strings,$settings; $fl = array ( '.token' => q2 (), 'form-action' => jv ('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => fy ($settings['timezone']['offset'],1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $fl, ); } function yy () { global$_strings; $dl = array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $dl; } function ny ($sl){ $dl = yy (); return @$dl[(int)$sl/SECONDS_IN_A_MINUTE]; } function my ($sl){ $al = '+'; if ($sl < 0)$al = '&ndash;'; $ql = str_pad ((int) (abs ($sl)/3600),2,'0',STR_PAD_LEFT); $ll = str_pad (abs ($sl)/60 % 60,2,'0',STR_PAD_LEFT); return 'GMT'. $al . $ql .':'. $ll; } function fy ($zl,$kl = ''){ global$_strings; $dl = yy (); $d = ''; if (!$kl)$kl = count ($dl); $d .= '<select class="e2-select" name="offset" size="'. $kl .'">'; foreach ($dl as $sl => $xl){ $el = ''; if ($sl * SECONDS_IN_A_MINUTE == $zl)$el = ' selected="selected"'; $d .= '<option'. $el .' value="'.$sl.'">'; $al = ''; if ($sl < 0)$al = '−'; if ($sl > 0)$al = '+'; $ql = (int) (abs ($sl * SECONDS_IN_A_MINUTE)/3600); $ll = (int) (abs ($sl * SECONDS_IN_A_MINUTE)/60 % 60); if ($ql){ $d .= ( $al .' '. $ql .' '. $_strings['gs--timezone-offset-hours'] .' '. ($ll? ($ll .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($xl){ $d .= ' ('. $xl. ')'; } } else { $d .= $xl; } $d .= '</option>'; } $d .= '</select>'; return $d; } function e2s_select_timezone () { global$settings,$_strings; z2 (); if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780){ $settings['timezone']['offset'] = @$_POST['offset']*SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_timezone')); } c (jv ('e2m_settings')); } function dy ($l2){ return array ( 'offset' => (int)$l2['Offset'], 'is_dst' => (bool)$l2['IsDST'], ); } function sy () { return array ( 'offset' => 0, 'is_dst' => false, ); } function ay () { global$settings; if(array_key_exists ('timezone',$settings)) { return$settings['timezone']; } else { return sy (); } } function qy ($rl,$tl){ if (@$rl['is_dst']) { $jl = (int)date ('I',$tl); $hl = date ('Z',$tl)-$jl * SECONDS_IN_AN_HOUR; $gl = $rl['offset']; $wl = $gl - $hl; $ul = date ('I',$tl + $wl); return $ul; } else { return 0; } } function ly ($rl,$tl){ global$settings; if ($rl and is_array ($rl)) { return ( $rl['offset'] + qy ($rl,$tl)*SECONDS_IN_AN_HOUR ); } } function zy ($tl){ return ly (ay (), $tl); } function ky ($il,$qv,$rl){ return gmdate ($il,$qv + ly ($rl,$qv)); } function xy ($il,$qv){ return ky ($il,$qv,ay ()); } function ey ($hb,$jb = false,$tb = false){ if(is_numeric ($tb)) { $ol = gmmktime (0,0,0,$jb,$tb,$hb); $pl = gmmktime (0,0,0,$jb,$tb + 1,$hb)-1; } elseif(is_numeric ($jb)) { $ol = gmmktime (0,0,0,$jb,1,$hb); $pl = gmmktime (0,0,0,$jb + 1,1,$hb)-1; } else { $ol = gmmktime (0,0,0,1,1,$hb); $pl = gmmktime (0,0,0,1,1,$hb + 1)-1; } return array ($ol,$pl); } function ry ($rl,$hb,$jb = false,$tb = false){ list ($ol,$pl)=ey ($hb,$jb,$tb); $ol -= ly ($rl,$ol); $pl -= ly ($rl,$pl); return array ($ol,$pl); } function ty ($hb,$jb = false,$tb = false){ return ry (ay (), $hb,$jb,$tb); } function jy ($hb,$jb = false,$tb = false){ $c4 = 13; $v4 = -12; $c4 += 1; $v4 -= 1; list ($ol,$pl)=ey ($hb,$jb,$tb); $ol -= $c4 * 3600; $pl -= $v4 * 3600; return array ($ol,$pl); } function hy ($sl){ if ((int) @$sl > 0) return (string)'+'.abs (@$sl); elseif ((int) @$sl < 0) return (string)'-'.abs (@$sl); else return ''; } function gy ($tl,$b4 = ''){ $y4 = zy ($tl); $al = ($y4 >= 0)?'+':'-'; $y4 = abs ($y4); $n4 = $y4 % 60; $y4 -= $n4; $jb = $y4 % 3600 / 60; $y4 -= $jb * 60; $m4 = $y4 / 3600; if ($m4 < 10)$m4 = '0'.$m4; if ($jb < 10)$jb = '0'.$jb; return $al.$m4.$b4.$jb; } function wy ($f4){ global$settings; if(is_numeric ($f4)) { $e1['offset']=SECONDS_IN_A_MINUTE * $f4; $e1['is_dst']=false; $d4 = SECONDS_IN_A_MINUTE * $f4 - SECONDS_IN_AN_HOUR; $s4 = array ('offset' => $d4,'is_dst' => true); $s4 = (int)ly ($s4,time ()); if ($e1['offset']==$s4){ $e1['offset']=$d4; $e1['is_dst']=true; } } else { if(array_key_exists ('timezone',$settings)) { $e1 = $settings['timezone']; } else { $e1['offset']=0; $e1['is_dst']=false; } } return $e1; } function uy ($a4){ $m4 = xy ('H',$a4); if ($m4 <= 4) return 4; elseif ($m4 <= 10) return 1; elseif ($m4 <= 16) return 2; elseif ($m4 <= 22) return 3; else return 4; } function iy ($q4,$l4 = null){ global$_strings; if ($l4 === null)$l4 = ay (); $z4 = ky ('d.m.Y',$rb,$l4); $k4 = ky ('d.m.Y',$q4,$l4); $x4 = SECONDS_IN_A_MINUTE; $e4 = SECONDS_IN_AN_HOUR; $rb = time (); $r4 = uy ($rb); $t4 = uy ($q4); $kb = $rb - $q4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb >= 0 and $kb < 54) return$_strings['tt--just-now']; if ($kb >= 54 and $kb < 108) return$_strings['tt--one-minute-ago']; $j4 = $kb + 12; $h4 = floor ($j4 / $x4); if ($kb >= 108 and $kb < 54*$x4) return e2l_get_string ( 'tt--minutes-ago', array ('minutes' => $h4) ); if ($kb >= 54*$x4 and $kb < 108*$x4) return$_strings['tt--one-hour-ago']; $j4 = $kb + 12*$x4; $g4 = floor ($j4 / $e4); if ($kb >= 108*$x4 and $kb < 4*$e4) return e2l_get_string ( 'tt--hours-ago', array ('hours' => $g4) ); $w4 = ky ('G:i',$q4,$l4); if ($kb >= 4*$e4 and $r4 > $t4 and $z4 == $k4){ return$_strings['tt--today']; } if ((($rb - $q4) <= 7884000)) { return e2l_get_string ( 'tt--date', array ( 'day' => ky ('j',$q4,$l4), 'month' => ky ('m',$q4,$l4), ) ); } return ky ('Y',$q4,$l4); } function oy ($q4,$l4 = null){ global$_strings; $kb = time () - $q4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb == 0) return$_strings['tt--now']; $u4 = array ( array (1,'tt--seconds-short'), array (SECONDS_IN_A_MINUTE,'tt--minutes-short'), array (SECONDS_IN_AN_HOUR,'tt--hours-short'), array (SECONDS_IN_A_DAY,'tt--days-short'), array (SECONDS_IN_A_MONTH,'tt--months-short'), array (SECONDS_IN_A_YEAR,'tt--years-short'), array (SECONDS_IN_A_YEAR + SECONDS_IN_A_MONTH,''), ); for ($r = 0; $r < count ($u4); ++ $r){ if ($kb >= $u4[$r][0] and $kb < $u4[$r + 1][0]) { return e2l_get_string ( $u4[$r][1], array ('value' => floor ($kb / $u4[$r][0])) ); } } if ($l4 === null)$l4 = ay (); return ky ('Y',$q4,$l4); } $_model_contractions = [ 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'pkey1' => "INT UNSIGNED DEFAULT '1' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v39' => "VARCHAR(39) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". $_config['default_formatter'] ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ]; $_model = [ 'Actions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityID', 'pkey'], ['Stamp', 'time'], ['ReadCount', 'int'], ], 'Aliases' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityType', 'v1'], ['EntityID', 'pkey'], ['Alias', 'v64'], ['Stamp', 'time'], ], 'Comments' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['Text', 'text'], ['Reply', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ['IsReplyVisible', '0'], ['IsReplyFavourite', '0'], ['IsAnswerAware', '1'], ['IsSubscriber', '0'], ['IsSpamSuspect', '0'], ['IsNew', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['ReplyStamp', 'time'], ['ReplyLastModified', 'time'], ['IP', 'v39'], ['IsGIPUsed', '0'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ], 'GIPsSessions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['AuthorProfileLink', 'v255'], ['SessionToken', 'v255'], ['Stamp', 'time'], ], 'Keywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Keyword', 'v255'], ['OriginalAlias', 'v64'], ['PageTitle', 'v255'], ['Description', 'text'], ['Summary', 'text'], ['Uploads', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ], 'Notes' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Title', 'v255'], ['Text', 'text'], ['Summary', 'text'], ['FormatterID', 'fid'], ['OriginalAlias', 'v64'], ['Uploads', 'text'], ['IsPublished', '0'], ['IsCommentable', '0'], ['IsVisible', '1'], ['IsFavourite', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['Offset', 'int'], ['IsDST', '0'], ['IsIndexed', '0'], ['IsExternal', '0'], ['ReadCount', 'uint'], ['SourceID', 'pkey'], ['SourceNoteID', 'pkey'], ['SourceNoteURL', 'v255'], ['SourceNoteJSONURL', 'v255'], ['SourceNoteData', 'text'], ], 'NotesKeywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['KeywordID', 'pkey'], ], 'Sources' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['TrueID', 'pkey'], ['Title', 'v255'], ['AuthorName', 'v255'], ['URL', 'v255'], ['PictureURL', 'v255'], ['IsWhiteListed', '0'], ['IsTrusted', '0'], ], ]; $_model_indexes_create_sql = [ 'index' => 'INDEX', 'unique' => 'UNIQUE INDEX', 'fulltext' => 'FULLTEXT', ]; $_model_indexes_check_sql = [ 'index' => 'KEY', 'unique' => 'UNIQUE KEY', 'fulltext' => 'FULLTEXT KEY', ]; $_model_indexes = [ 'Actions' => [ ['unique', ['EntityID','Stamp']], ['index', ['SubsetID']], ], 'Aliases' => [ ['index', ['SubsetID']], ['index', ['Alias']], ['index', ['EntityID']], ], 'Comments' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'GIPsSessions' => [ ['unique', ['SubsetID','GIP','GIPAuthorID']], ['index', ['SubsetID']], ], 'Keywords' => [ ['index', ['SubsetID']], ], 'Notes' => [ ['fulltext', ['Title','Text']], ['index', ['SubsetID']], ['index', ['Stamp']], ['index', ['SourceID']], ['index', ['SourceNoteID']], ], 'NotesKeywords' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'Sources' => [ ['index', ['SubsetID']], ], ]; $_model_minimal_table_list = [ 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ]; function e2_model_data_check ($i4){ global$_db,$_model,$_model_minimal_table_list,$_config; $o4 = false; $p4 = array (); $sql = 'SHOW TABLES FROM `'. mysqli_real_escape_string ($_db['link'],$i4). '`'; $e1 = mysqli_query ($_db['link'],$sql); if ($e1){ while ($cz = mysqli_fetch_row ($e1)) { foreach(array_keys ($_model) as $vz){ if(strcasecmp ($cz[0],$_config['db_table_prefix'].$vz)===0){ $o4 = true; $p4[] = $vz; } } } } $bz = true; foreach(array_keys ($_model) as $vz){ if (!in_array ($vz,$p4)) { $bz = false; } } $yz = true; foreach($_model_minimal_table_list as $vz){ if (!in_array ($vz,$p4)) { $yz = false; } } return array ( 'occupied' => $o4, 'complete' => $bz, 'migrateable' => $yz, ); } function py ($u3){ global $nz; list ($mz,$fz)=wn ($u3['server']); if ((string)$fz === '')$fz = null; $dz = mysqli_init (); $dz -> options (MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); $sz = @mysqli_real_connect ( $dz, 'p:'. $mz, $u3['user_name'], $u3['passw'], '', $fz ); if (!$sz) return []; $az = []; $qz = [ 'information_schema', 'performance_schema', 'sys', 'mysql' ]; @$nz ++; $bf = 'SHOW DATABASES'; if(Log::$cy)__log ('DB ['. $nz .']: '. $bf); $e1 = mysqli_query ($dz,$bf); while ($cz = mysqli_fetch_row ($e1)) { if(mysqli_select_db ($dz,$cz[0]) and !in_array ($cz[0],$qz)) { $az[] = $cz[0]; } } return $az; } function cn ($lz){ global$_config; xn ( "SHOW TABLES LIKE '". $_config['db_table_prefix'].$lz . "'" ); $sy = en (); return count ($sy)>0; } function vn ($lz,$zz = null){ global$_config; if ($zz === null){ $zz = $_config['db_table_prefix']; } xn ( "SHOW TABLE STATUS LIKE '". $zz . $lz . "'" ); $e1 = en (); return $e1 ? $e1[0] : []; } function bn ($lz){ global $_model, $_model_contractions, $_model_indexes, $_model_indexes_create_sql, $_config, $_db; if (!array_key_exists ($lz,$_model)) throw new AeModelUnknownTableException (); if (cn ($lz)) return; $zz = $_config['db_table_prefix']; $kz = []; foreach($_model[$lz] as $xz){ list ($name,$type)=$xz; $kz[] = "`". $name ."` ". $_model_contractions[$type]; } if(is_array (@$_model_indexes[$lz])) { foreach($_model_indexes[$lz] as $ez){ list ($type,$rz)=$ez; $tz = implode ('',$rz); $jz = $_model_indexes_create_sql[$type].' `'. $tz .'` (`'. implode ('`, `',$rz) .'`)'; $kz[] = $jz; } } $sql = ( "CREATE TABLE `". $zz . $lz ."` ". "(". implode (", ",$kz) .") ". "ENGINE=InnoDB DEFAULT CHARSET=". $_db['charset'] ); xn ($sql); } function yn ($lz,$u1,$hz = 'INSERT',$gz = ''){ global$_config,$_db; $wz['SubsetID']=$_config['db_table_subset']; foreach ($u1 as $t => $xf){ $wz[$t]="'". rn ($xf) ."'"; } $uz = "`". implode ("`, `",array_keys ($wz)). "`"; $iz = implode (", ",array_values ($wz)); xn ( $hz ." INTO `". $_config['db_table_prefix'].$lz ."` ". "(" . $uz .") VALUES (". $iz .")". ($gz? (' '. $gz):'') ); $u1['ID']=mysqli_insert_id ($_db['link']); return $u1; } function nn ($lz,$u1,$oz = false,$pz = false){ global$_config; if(Log::$cy)__log ('Model: update record in table '. $lz .' {'); $ck = array (); foreach(e2model__soft_fields_for_table_($lz) as $vk){ if(array_key_exists ($vk,$u1)) { $ck[] = '`'. $vk .'`'."='". rn ($u1[$vk]) ."'"; } } $bk = array (); if(is_array ($oz)) { foreach(e2model__soft_fields_for_table_($lz) as $vk){ if(array_key_exists ($vk,$oz)) { $bk[] = '`'. $vk .'`'."='". rn ($oz[$vk]) ."'"; } } } if(count ($bk)) { $b = implode (" AND ",$bk); } else { if (!array_key_exists ('ID',$u1) or !is_numeric ($u1['ID'])) { if(Log::$cy)__log ('Error: e2_update_record must be called with an ID field in $record when updating single row'); return false; } $b = "`ID`=". $u1['ID']; } if(count ($ck)>0){ $yk = $pz? 'LOW_PRIORITY ' : ''; xn ( "UPDATE ". $yk ."`". $_config['db_table_prefix'].$lz ."` ". "SET ". implode (', ',$ck) ." ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")" ); } if(Log::$cy)__log ('}'); return true; } function e2model__soft_fields_for_table_($lz){ global$_model; $d = array (); if(array_key_exists ($lz,$_model)) { foreach($_model[$lz] as $vk){ if (!in_array ($vk[1], array ('key'))) { $d[] = $vk[0]; } } } return $d; } function e2m_install () { global$_strings,$_superconfig,$_files_written,$_diagnose; if (fn_ () !== null)c (); ks (DEFAULT_TEMPLATE); $d = array (); if($_superconfig['disallow_installer']) { die ('Installer disabled by superconfig'); } if(Log::$cy)__log ('Installer: not installed, present user with form'); $nk = true; $mk['server'] = @$_COOKIE[b ('install_db_server')]; $mk['user_name'] = @$_COOKIE[b ('install_db_user_name')]; $mk['passw']=cd (@$_COOKIE[b ('install_db_passw')]); $mk['name'] = @$_COOKIE[b ('install_db_name')]; if (!@isset ($_diagnose['ok?']))fv (); if (!$_diagnose['ok?']) { if(Log::$cy)__log ('Installer: problems, tell user'); $nk = false; } $d = [ 'title' => $_strings['pt--install'], 'heading' => $_strings['pt--install'], 'form-install' => [ 'form-action' => jv ('e2s_install'), 'form-check-db-config-action' => jv ('e2j_check_db_config'), 'form-list-databases-action' => jv ('e2j_list_databases'), 'installation-possible?' => $nk, 'submit-text' => $_strings['fb--begin'], 'retry-href' => jv ('e2m_install'), 'retry-text' => $_strings['fb--retry'], 'db-server' => htmlspecialchars (@$mk['server']? $mk['server']:'localhost'), 'db-user' => htmlspecialchars (@$mk['user_name']? $mk['user_name']:'root'), 'db-password' => '', 'db-database' => htmlspecialchars (@$mk['name']), ] ]; return $d; } function fn_ () { static $fk = null; if ($fk === null){ $fk = @unserialize ( @file_get_contents (USER_FOLDER . 'instance.psa') ) or $fk = null; } return $fk; } function dn ($dk){ static $fk = null; $fk = fn_ (); $fk['version']=$dk; if (m3 (USER_FOLDER. '/instance.psa',serialize ($fk))) { return $fk; } else { die ('Cannot instantiate v'. $dk .': probably permission denied'); } } function e2s_instantiate ($parameters){ global$_strings; if (fn_ () !== null){ die ('Remove the file "'. USER_FOLDER .'instance.psa" first'); } else { if(is_numeric ($parameters['version'])) { if (dn ($parameters['version'])) { mv ($_strings['gs--instantiated-version'] .' v'. $parameters['version'],E2E_MESSAGE); c (jv ('e2m_frontpage', array ('page' => 1))); } } } die ('Could not create instance of engine'); } function e2_install ($lv){ global$_folders_written,$_model,$_strings,$_config,$settings; if (fn_ () !== null){ throw new AeInstallAlreadyInstalledException ('Instance already created'); } if($_config['log_installs']) { Log::$cy = true; if(Log::$cy)bv ('install-$'); } if(Log::$cy)__log ('Installer: force directories'); foreach($_folders_written as $sk){ @j ($sk); } if(Log::$cy)__log ('Installer: write password hash'); if (!@m3 (USER_FOLDER . 'password-hash.psa',serialize (sha1 ($lv['password'])))) { throw new AePasswordHashNotSavedException; } if(array_key_exists ('plain_password',$lv['db_params'])) { $lv['db_params']['passw']=p2 ($lv['db_params']['plain_password']); unset ($lv['db_params']['plain_password']); } $settings['db']=$lv['db_params']; $settings['template']=DEFAULT_TEMPLATE; $settings['language']=DEFAULT_LANGUAGE; kn ('check database during installation',$lv['db_params']); $o3 = e2_model_data_check ($lv['db_params']['name']); $ak = false; if ($o3['occupied']) { if ($o3['migrateable'] and $lv['allow_migration']) { $ak = true; if(Log::$cy)__log ('Installer: data exists and migrateable'); } else { if(Log::$cy)__log ('Installer: incomplete data in the database'); throw new AeInstallDatabaseOccupiedException ('Database already has some data'); } } if ($ak){ if(Log::$cy)__log ('Installer: no need to create tables, will migrate'); try { qn (); } catch (AeMySQLException $e){ kv ($e,'Could not migrate'); mv ($_strings['er--double-check-db-params']); } } else { if(Log::$cy)__log ('Installer: create tables'); foreach(array_keys ($_model) as $lz){ bn ($lz); } } if(Log::$cy)__log ('Installer: write settings'); if (!@m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { throw new AeSettingsNotSavedException; } e2_drop_all_kinds_of_cache (); if(Log::$cy)__log ('Installer: search index'); $p3 = ja (); try { $p3 -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$cy)__log ('Installer: Rose not available'); } za (); gn (); if(Log::$cy)__log ('Installer: instantiate'); dn (E2_VERSION); if(Log::$cy)__log ('Installer: complete'); } function sn () { $u3['server']=$u3['user_name'] = $u3['passw']=$u3['name']=''; if(array_key_exists ('db-server',$_POST)) $u3['server']=$_POST['db-server']; if(array_key_exists ('db-user',$_POST)) $u3['user_name']=$_POST['db-user']; if(array_key_exists ('db-password',$_POST))$u3['passw']=$_POST['db-password']; if(array_key_exists ('db-database',$_POST))$u3['name']=$_POST['db-database']; return $u3; } function e2s_install () { global$_strings,$_config,$_db; if (fn_ () !== null)c (); $u3 = sn (); foreach ($u3 as $t => $xf){ y ('install_db_'. $t,$xf); } if (!array_key_exists ('password',$_POST) or trim ($_POST['password']) == ''){ mv ($_strings['er--no-password-entered'],E2E_USER_ERROR); c (jv ('e2m_install')); } $qk = trim ($_POST['password']); @session_start (); $i3 = false; try { e2_install ([ 'allow_migration' => true, 'password' => $qk, 'db_params' => $u3, ]); $i3 = true; } catch (AeMySQLCannotConnectException $e){ mv ( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error () .' ('. mysqli_connect_errno () .')' ); } catch (AeMySQLTooOldException $e){ mv (e2l_get_string ('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv ($_strings['er--cannot-find-db'] .' '. $u3['name']); } catch (AeInstallDatabaseOccupiedException $e){ mv ($_strings['er--db-data-incomplete-install']); } catch (AeNotSavedException $e){ mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); } catch (AeInstallException $e){ } if (!$i3)c (jv ('e2m_install')); $lk['sessions'] = [[ 'stamp' => time (), 'remote_ip' => k2 (), 'key_hash' => e2_ (true), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]]; if (!j2 ($lk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } p3 (jv ('e2s_bsi_step', array ())); c (); } function an () { global $v,$c,$_superconfig,$_config; $fk = fn_ (); if (fn_ () !== null){ if(E2_VERSION < $fk ['version']) { if (@$_config['dev_ignore_version_mismatch']) return; if(Log::$cy)__log ('Installer: cannot downdate'); header ('HTTP/1.1 503 Service Unavailable'); die ('E2 does not support automatic downgrade.'); } elseif(E2_VERSION > $fk ['version']) { if(Log::$cy)__log ('Installer: need to update'); header ('Location: http://'. $v . $c .'/perform_update/'); header ('Location: '. jv ('e2s_update_perform')); die; } else { return; } } if(Log::$cy)__log ('Installer: not installed {'); if ((strpos ($_SERVER['SERVER_SOFTWARE'],'Apache')===0)) { if(Log::$cy)__log ('Installer: running on Apache'); $zk = DEFAULTS_FOLDER . 'default.htaccess'; $kk = false; if (!is_file ($zk)) { echo 'File not found: '.$zk. '. Please use the full E2 installation package.'; die; } if(is_file ('.htaccess')) { if(Log::$cy)__log ('Installer: there is a .htaccess file in the installation directory'); $xk = file_get_contents ($zk); $ek = file_get_contents ('.htaccess'); if ($ek != $xk){ $kk = true; $rk = $tk = '.htaccess.old'; $jk = 1; while (is_file ($tk)) { $tk = $rk .'.'. $jk ++; } if(Log::$cy)__log ('Installer: existing .htaccess wrong, backing up as <'. $tk .'>'); if (!@rename ('.htaccess',$tk)) { if(Log::$cy)__log ('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $kk = true; } if ($kk){ if(Log::$cy)__log ('Installer: writing a correct .htaccess file'); if (!@copy ($zk,'.htaccess')) { if(Log::$cy)__log ('Installer: fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } @chmod ('.htaccess',E2_NEW_FILES_RIGHTS); } } if($_superconfig['disallow_installer']) { if(Log::$cy)__log ('Installer: disallowed in superconfig'); xv (new AeNotAndCannotBeInstalledException); } else { $hk = jv ('e2m_install'); if(Log::$cy)__log ('Installer: will need to install, going to '. $hk); if(Log::$cy)__log ('}'); c ($hk); } } function e2j_check_db_config () { global$_db,$_strings; $u3 = sn (); $zv = [ 'success' => true, 'data' => [ 'message' => '', 'db-responding' => false, 'db-connected' => false, 'db-found' => false, 'db-compatible' => false, 'db-occupied' => false, 'db-migrateable' => false, ] ]; try { $u3['passw']=p2 ($u3['passw']); kn ('connect to check DB config (try 1)',$u3); } catch (AeMySQLAccessDeniedException $e){ $zv['data']['db-responding']=true; $zv = json_encode ($zv); die ($zv); } catch (AeMySQLCannotConnectException $e){ $zv['data']['message']='no-connect'; $zv = json_encode ($zv); die ($zv); } catch (AeMySQLTooOldException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['message']=e2l_get_string ('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ]); $zv = json_encode ($zv); die ($zv); } catch (AeMySQLNotFoundException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; if ($u3['name']) { $zv = json_encode ($zv); die ($zv); } else { $az = py ($u3); if(count ($az)>0){ $zv['data']['db-found']=true; $u3['name']=$az[0]; } else { $zv = json_encode ($zv); die ($zv); } } } $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['db-found']=true; $zv['data']['db-compatible']=true; try { kn ('connect to check DB config (try 2)',$u3); } catch (AeMySQLException $e){ $zv = json_encode ($zv); die ($zv); } $zv['data']['db-good']=true; $o3 = e2_model_data_check ($u3['name']); if ($o3['occupied']) { if ($o3['migrateable']) { $zv['data']['message']=$_strings['gs--data-exists']; } else { $zv['data']['db-good']=false; $zv['data']['message']=$_strings['er--db-data-incomplete-install']; } } $zv = json_encode ($zv); die ($zv); } function e2j_list_databases () { $u3 = sn (); $az = py ($u3); $zv = [ 'success' => true, 'data' => [ 'databases-list' => $az, ] ]; $zv = json_encode ($zv); die ($zv); } function qn () { global $_db, $_config, $_model, $_model_indexes, $_model_indexes_create_sql, $_model_indexes_check_sql; $zz = $_config['db_table_prefix']; xn ('SET sql_quote_show_create=1'); ln ( $zz, ($_db['charset']==='utf8mb4')?'utf8mb4' : 'utf8' ); if(Log::$cy)__log ('Get existing table information {'); $gk = false; foreach(array_keys ($_model) as $lz){ bn ($lz); try { xn ("SHOW CREATE TABLE `". $zz . $lz ."`"); $wk[$lz]=en (); $wk[$lz]=$wk[$lz][0]['Create Table']; } catch (AeMySQLException $e){ kv ($e); die ('Database table "'. $prefix . $lz .'" not accessible during migration. Check your database availability'); } xn ("SHOW INDEX FROM `". $zz . $lz ."`"); $uk = en (); $ik = []; $ok = []; foreach ($uk as $ez){ $ez = $ez['Key_name']; if ( preg_match ('/\_[0-9]+$/',$ez) or ($lz === 'Actions' and $ez === 'EntityID') or ($lz === 'GIPsSessions' and $ez === 'GIP') or ($lz === 'GIPsSessions' and $ez === 'SubsetID') or ($lz === 'Notes' and $ez === 'Title') ) { $ik[] = $ez; $ok[] = 'DROP INDEX `'. $ez. '`'; } if ($lz === 'Actions' and $ez === 'EntityID'){ $gk = true; } if ($lz === 'Actions' and $ez === 'EntityIDStamp'){ $gk = true; } } if(count ($ok)) { $ok = implode (', ',array_unique ($ok)); $ik = implode (', ',array_unique ($ik)); if(Log::$cy)__log ( 'Drop erroneous index "'. $ik .'" on "'. $zz . $lz .'"' ); xn ( "ALTER TABLE `". $zz . $lz ."` ". $ok ); } if (!strstr ($wk[$lz],'InnoDB')) { xn ( "ALTER TABLE `". $zz . $lz ."` ". "ENGINE = InnoDB" ); } if (!strstr ($wk[$lz],'`SubsetID`')) { xn ( "ALTER TABLE `". $zz . $lz . "` ". "ADD `SubsetID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); } if ( $lz === 'Actions' and strstr ($wk['Actions'],'`ReadCount`') and !$gk ) { zn ($zz); } if($_config['db_table_subset']>0){ xn ( "UPDATE `". $zz . $lz ."` ". "SET `SubsetID` = ". $_config['db_table_subset'] ." ". "WHERE `SubsetID` = 0" ); } else { die ('db_table_subset must be greater than 0'); } } if(Log::$cy)__log ('}'); if (!strstr ($wk['Actions'],'`ReadCount`')) { xn ( "ALTER TABLE `". $zz . "Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if(strstr ($wk['Actions'],'`HitCount`')) { xn ( "ALTER TABLE `". $zz . "Actions` ". "DROP `HitCount`" ); xn ( "DELETE FROM `". $zz . "Actions` ". "WHERE `ReadCount` = 0" ); } if (!strstr ($wk['Aliases'],'`EntityType`')) { xn ( "ALTER TABLE `". $zz . "Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } xn ( "UPDATE `". $zz . "Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); xn ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `ID` IN (". "SELECT `ID` FROM (". "SELECT a.`ID` FROM `". $_config['db_table_prefix']."Aliases` a ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."Keywords` e ". "ON a.`EntityID` = e.`ID` ". "WHERE a.`EntityType` = 't' ". "AND e.`ID` IS NULL". ") AS temp". ")", 'clean up “leaked” tag aliases' ); if (!stristr ($wk['Comments'],'`Text` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!stristr ($wk['Comments'],'`Reply` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); } if (!stristr ($wk['Comments'],'`IP` VARCHAR(39)')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "CHANGE `IP` `IP` VARCHAR(39)  DEFAULT '' NOT NULL" ); } if (!strstr ($wk['Comments'],'`IsGIPUsed`')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr ($wk['Comments'],'`GIP`')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr ($wk['Comments'],'`GIPAuthorID`')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if(strstr ($wk['Comments'],'`SocialType`')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "DROP `SocialType`" ); } if(strstr ($wk['Comments'],'`SocialID`')) { xn ( "ALTER TABLE `". $zz . "Comments` ". "DROP `SocialID`" ); } if (!strstr ($wk['GIPsSessions'],'`AuthorEmail`')) { xn ( "ALTER TABLE `". $zz . "GIPsSessions` ". "ADD `AuthorEmail` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorName`" ); } if (!strstr ($wk['GIPsSessions'],'`AuthorProfileLink`')) { xn ( "ALTER TABLE `". $zz . "GIPsSessions` ". "ADD `AuthorProfileLink` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorEmail`" ); } if(strstr ($wk['Keywords'],'`ParentKeywordID`')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr ($wk['Keywords'],'`OriginalAlias`')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } if (!strstr ($wk['Keywords'],'`PageTitle`')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "ADD `PageTitle` VARCHAR(255) DEFAULT '' NOT NULL AFTER `OriginalAlias`" ); } if (!stristr ($wk['Keywords'],'`Description` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); } if (!strstr ($wk['Keywords'],'`Summary`')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "ADD `Summary` MEDIUMTEXT AFTER `Description`" ); } if (!strstr ($wk['Keywords'],'`Uploads`')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Summary`" ); } if (!stristr ($wk['Keywords'],'`Uploads` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr ($wk['Keywords'],'`IsVisible`')) { xn ( "ALTER TABLE `". $zz . "Keywords` ". "ADD `IsVisible` TINYINT(1) DEFAULT '1' NOT NULL AFTER `Uploads`" ); } xn ( "UPDATE `". $zz . "Keywords` SET `Summary` = '' WHERE `Summary` IS NULL" ); xn ( "UPDATE `". $zz . "Keywords` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); if (!strstr ($wk['Notes'],'`FormatterID`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL AFTER `Text`" ); } if (!strstr ($wk['Notes'],"DEFAULT 'calliope'")) { xn ( "ALTER TABLE `". $zz . "Notes` ". "CHANGE `FormatterID` `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL" ); } if (!strstr ($wk['Notes'],'`OriginalAlias`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if(strstr ($wk['Notes'],'`IP`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "DROP `IP`" ); } if (!stristr ($wk['Notes'],'`Text` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!strstr ($wk['Notes'],'`Summary`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `Summary` MEDIUMTEXT AFTER `Text`" ); } if (!strstr ($wk['Notes'],'`IsIndexed`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr ($wk['Notes'],'`Uploads`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } if (!stristr ($wk['Notes'],'`Uploads` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr ($wk['Notes'],'`IsExternal`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr ($wk['Notes'],'`SourceID`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr ($wk['Notes'],'`SourceNoteID`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr ($wk['Notes'],'`SourceNoteURL`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr ($wk['Notes'],'`SourceNoteData`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr ($wk['Notes'],'`SourceNoteJSONURL`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if(strstr ($wk['Notes'],'`SourceMainImageURL`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "DROP `SourceMainImageURL`" ); } if(strstr ($wk['Notes'],'`IsIssue`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "DROP `IsIssue`" ); } if (!strstr ($wk['Notes'],'`ReadCount`')) { xn ( "ALTER TABLE `". $zz . "Notes` ". "ADD `ReadCount` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); xn ( "UPDATE `". $zz . "Notes` n JOIN (". "SELECT `EntityID`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM  `". $zz . "Actions` ". "GROUP BY `EntityID`". ") a ON n.`ID` = a.`EntityID` ". "SET `ReadCount` = `AggregateReadCount`" ); } xn ( "UPDATE `". $zz . "Notes` SET `Summary` = '' WHERE `Summary` IS NULL" ); xn ( "UPDATE `". $zz . "Notes` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); xn ( "UPDATE `". $zz . "Notes` SET `SourceNoteData` = '' WHERE `SourceNoteData` IS NULL" ); if (!strstr ($wk['Sources'],'`TrueID`')) { xn ( "ALTER TABLE `". $zz . "Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); xn ( "UPDATE `". $zz . "Sources` ". "SET `TrueID` = `ID`" ); } if(Log::$cy)__log ('Ensure indexes {'); if(strstr ($wk['Notes'],'`Title` (`Title`(191))')) { if(Log::$cy)__log ('Drop erroneous index on "'. $zz .'Notes.Title"'); xn ( "ALTER TABLE `". $zz ."Notes` ". "DROP INDEX `Title`" ); } foreach(array_keys ($_model) as $lz){ foreach($_model_indexes[$lz] as $ez){ list ($type,$rz)=$ez; $tz = implode ('',$rz); $pk = $_model_indexes_check_sql[$type].' `'. $tz .'` (`'. implode ('`,`',$rz) .'`)'; $jz = $_model_indexes_create_sql[$type].' `'. $tz .'` (`'. implode ('`, `',$rz) .'`)'; if (!strstr ($wk[$lz],$pk)) { if(Log::$cy)__log ( 'Table "'. $zz . $lz .'" is missing "'. $_model_indexes_check_sql[$type] .'" on columns "'. implode ('", "',$rz) .'"' ); if($type !== 'fulltext' or $_db['innodb-fulltext?']) { xn ( "ALTER TABLE `". $zz . $lz ."` ". "ADD ". $jz ); } else { if(Log::$cy)__log ( 'MySQL version does not support fulltext search, skipping creation of this index' ); } } } } if(Log::$cy)__log ('}'); return true; } function ln ($zz,$c7){ global$_model,$_db; if (!in_array ($c7, ['utf8','utf8mb4'])) return; if(Log::$cy)__log ('Ensure encoding '. $c7 .' on all tables {'); $v7 = ta (); foreach ($v7 as $t => $xf){ $v7[$t]=SEARCH_EXTRA_PREFIX. $xf; } $b7 = array_merge ( array_keys ($_model), array_values ($v7) ); foreach ($b7 as $vz){ if(Log::$cy)__log ('Migrate: Check table '. $vz); $y7 = vn ($vz,$zz); if (!$y7) continue; $n7 = $y7['Collation']; if ($c7 === 'utf8' and ($n7 == 'utf8_general_ci')) continue; if ($c7 === 'utf8mb4' and stripos ($n7,'utf8mb4')===0) continue; if(Log::$cy)__log ('Migrate: Drop indexes of table '. $vz); xn ( "SHOW INDEX FROM `". $zz . $vz ."` ". "WHERE `Key_name` <> 'PRIMARY' ". "AND `Seq_in_index` = 1", 'show indexes from table '. $vz ); $uk = en (); foreach ($uk as $ez){ xn ( "ALTER TABLE `". $zz . $vz ."` ". "DROP INDEX `". $ez['Key_name'] ."`", 'drop index '. $ez['Key_name'] ); } if(Log::$cy)__log ('Migrate: Convert table '. $vz. ' to '. $c7); xn ( "ALTER TABLE `". $zz . $vz ."` ". "CONVERT TO CHARACTER SET ". $c7. (($c7 === 'utf8')? " COLLATE utf8_general_ci" : ""), 'convert table to character set '. $c7 ); } if(Log::$cy)__log ('}'); } function zn ($zz){ if(Log::$cy)__log ( 'Table "'. $zz .'Actions" is missing necessary UNIQUE index, must rearrange {' ); xn ( "DROP TABLE IF EXISTS `". $zz ."Actions_Fixed`", 'remove temporary Actions_Fixed table if exists' ); xn ( "CREATE TABLE `". $zz ."Actions_Fixed` ". "LIKE `". $zz ."Actions`", 'create new temporary Actions_Fixed table' ); xn ( "ALTER TABLE `". $zz ."Actions_Fixed` ". "ADD UNIQUE INDEX(`EntityID`, `Stamp`)", 'add UNIQUE index to the temporary Actions_Fixed table' ); xn ( "INSERT INTO `". $zz ."Actions_Fixed` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) ". "SELECT `SubsetID`, `EntityID`, `Stamp`, `AggregateReadCount` FROM (". "SELECT `SubsetID`, `EntityID`, `Stamp`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM `". $zz ."Actions` ". "GROUP BY `EntityID`, `Stamp`". ") `". $zz ."Actions_Fixed_AliasRequiredForNoReason`", 'rearrange Actions records from existing problematic Actions table to the new temporary Actions_Fixed table' ); xn ( "RENAME TABLE `". $zz ."Actions` TO `". $zz ."Actions_Corrupt`", 'rename Actions to Actions_Corrupt' ); xn ( "RENAME TABLE `". $zz ."Actions_Fixed` TO `". $zz ."Actions`", 'rename Actions_Fixed to Actions' ); xn ( "DROP TABLE `". $zz ."Actions_Corrupt`", 'remove Actions_Corrupt table' ); if(Log::$cy)__log ('}'); } function e2s_update_perform () { global$settings,$_config,$_diagnose,$_strings; if(1){ $m7 = ini_get ('max_execution_time')+5; $f7 = @unserialize (file_get_contents (USER_FOLDER . 'updating.psa')); if (!is_array ($f7))$f7 = []; if ( isset ($f7['lock']) and $f7['lock'] >= time () - $m7 ) { throw new AeUpdateAlreadyInProcess ('Update already in process'); } $f7['lock']=time (); if (!@m3 (USER_FOLDER . 'updating.psa',serialize ($f7))) { throw new AeUpdateCannotLock ('Update can’t get a new lock'); } } $fk = fn_ (); $g = max ((int) ($fk['version']), 2285); if ($fk['version']==E2_VERSION)v (); if($_config['log_updates']) { Log::$cy = true; if(Log::$cy)bv ('update-$'); } if($_config['backup_before_update']) { if(Log::$cy)__log ('Backup before update {'); if (!gn ()) { @unlink (USER_FOLDER . 'updating.psa'); die ('Could not make backup before update. Try again?'); } if(Log::$cy)__log ('}'); } if(Log::$cy)__log ('Update from v'. $g .' to v'. E2_VERSION.' {'); if ($g < 2587){ r ('caches/*'); @rmdir ('caches'); } if ($g < 2691){ $settings = e2_utf8_version_of_array_($settings); if (!@m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { @unlink (USER_FOLDER . 'updating.psa'); mv ($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); qv (); } } if ($g < 2921){ $settings['template']='plain'; } if ($g < 3354){ @rename ('pictures/userpics/',AVATARS_FOLDER); @unlink (USER_FOLDER. 'password-reset.txt'); } if ($g < 3496){ $settings['appearance']['respond_to_dark_mode']=true; } @unlink (USER_FOLDER. 'last-update.psa'); @unlink (CACHES_FOLDER . 'index.xml'); @j (CACHES_FOLDER); @j (BACKUP_FOLDER); @j (MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'remote/'); @j (MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER .'remote/'); @j (MEDIA_ROOT_FOLDER . VIDEO_FOLDER); if (@$settings['template']=='')$settings['template']=DEFAULT_TEMPLATE; if (isset ($settings['appearance']['hot_frontpage'])) { unset($settings['appearance']['hot_frontpage']); } if (!isset ($settings['blog_subtitle'])) { if (isset ($settings['description'])) { $settings['blog_subtitle']=$settings['description']; unset($settings['description']); } } if (!isset ($settings['blog_title'])) { if (isset ($settings['site_title'])) { $settings['blog_title']=$settings['site_title']; unset($settings['site_title']); } } if (!isset ($settings['author_email'])) { if (isset ($settings['user']['email'])) { $settings['author_email']=$settings['user']['email']; unset($settings['user']); } } if (isset ($settings['db']['table_prefix'])) { if($settings['db']['table_prefix'] != @$_config['db_table_prefix']) { @unlink (USER_FOLDER . 'updating.psa'); die ('You’ve been using a database with a table prefix “'. $settings['db']['table_prefix'] .'”. Now this should be set in the configuration. Please add the following line to the file user/config.php:<br /><br />$_config[\'db_table_prefix\'] = \''. $settings['db']['table_prefix'] .'\';<br /><br />Then refresh this page.'); } else { unset($settings['db']['table_prefix']); } } if (isset ($settings['comments']['on'])) { if (!$settings['comments']['on']) { try { xn ( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `IsCommentable`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } catch (AeMySQLException $e){} } $settings['comments']['default_on'] = (bool)$settings['comments']['on']; unset($settings['comments']['on']); } if (isset ($settings['v3223_rss_permalinks_before_stamp'])) { unset($settings['v3223_rss_permalinks_before_stamp']); } if ( is_file (USER_FOLDER . 'settings.json') and is_file (USER_FOLDER . 'settings.psa') ) { @unlink (USER_FOLDER . 'settings.psa'); } if (!@m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); } e2_drop_all_kinds_of_cache (); qn (); if ($g < 3601){ wa (); $p3 = ja (); try { $p3 -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$cy)__log ('Rose not available'); } za (); } $_diagnose['need?']=true; y ('diagnose','1'); $fk = dn (E2_VERSION); if(Log::$cy)__log ('}'); @unlink (USER_FOLDER . 'updating.psa'); if (r2 ()) { mv (e2l_get_string ('gs--updated-successfully', array ( 'from' => 'v'. $g, 'to' => 'v'. $fk['version'], )), E2E_MESSAGE); } c (); } define ('E2_MYSQL_CONNECT_TIMEOUT',5); function kn ($d7 = '',$u3 = null){ static $s7 = false; global$settings,$_db,$nz,$_config; if ($s7) return; if(getenv ('E2_DB_SERVER'))$u3['server']=getenv ('E2_DB_SERVER'); if(getenv ('E2_DB_USER_NAME'))$u3['user_name']=getenv ('E2_DB_USER_NAME'); if(getenv ('E2_DB_PASSW'))$u3['passw']=p2 (getenv ('E2_DB_PASSW')); if(getenv ('E2_DB_NAME'))$u3['name']=getenv ('E2_DB_NAME'); if ($u3 === null)$u3 = $settings['db']; if($_config['dev_chaos'] and !rand (0, (1 / $_config['dev_chaos']) - 1)) { throw new AeMySQLCannotConnectException ('Could not '. $d7 ."\n\nChaos in e2_mysql_ensure"); } list ($mz,$fz)=wn ($u3['server']); if ((string)$fz === '')$fz = null; $dz = mysqli_init (); $dz -> options (MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); $sz = @mysqli_real_connect ( $dz, 'p:'. $mz, $u3['user_name'], cd ($u3['passw']), '', $fz ); if (!$sz){ $bl = mysqli_connect_errno (); if ($bl == 1045){ $sz = @mysqli_real_connect ( $dz, 'p:'. $mz, $u3['user_name'], $u3['passw'], '', $fz ); if ($sz){ $u3['passw']=p2 ($u3['passw']); $settings['db']=$u3; if(Log::$cy)__log ('Storing encrypted password'); @m3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE)); } else { throw new AeMySQLAccessDeniedException ('Could not '. $d7); } } else { throw new AeMySQLCannotConnectException ('Could not '. $d7); } } $_db['version']=mysqli_get_server_info ($dz); if(version_compare ($_db['version'],E2_MINIMUM_MYSQL,'<')) { throw new AeMySQLTooOldException ('Could not '. $d7); } if (!@mysqli_select_db ($dz,$u3['name'])) { throw new AeMySQLNotFoundException ('Could not '. $d7); } $_db['link']=$dz; $_db['charset']=version_compare ($_db['version'],'5.5.3','>=')?'utf8mb4' : 'utf8'; $_db['innodb-fulltext?'] = (bool)version_compare ($_db['version'],'5.6','>='); $bf = 'SET NAMES '. $_db['charset']; mysqli_query ($dz,$bf); @$nz ++; if(Log::$cy)__log ('DB ['. $nz .']: '. $bf); $s7 = true; } function xn ($bf,$d7 = 'run some query'){ global $nz,$_db,$_strings,$_config; kn ($d7); if($_config['dev_chaos'] and !rand (0, (1 / $_config['dev_chaos']) - 1)) { throw new AeMySQLQueryException ('Could not '. $d7 ."\n\nChaos in e2_mysql_query"); } @$nz ++; if(Log::$cy) if ($d7)__log ('Will '. $d7); if(Log::$cy)__log ('DB ['. $nz .']: '. $bf); $_db['result'] = @mysqli_query ($_db['link'],$bf); if($_db['result']) { if($_config['backup_tail']) { if ( stripos ($bf,"SELECT")!==0 and stripos ($bf,"SHOW")!==0 ) { $fb = BACKUP_FOLDER .'backup-tail.sql'; @file_put_contents ($fb,$bf .";\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod ($fb,E2_NEW_FILES_RIGHTS); } } } else { throw new AeMySQLQueryException ('Could not '. $d7 ."\n\nMySQL says:\n". mysqli_error ($_db['link'])); } } function en ($type = MYSQLI_ASSOC){ global$_db; $d = array (); while ($nv = @mysqli_fetch_array ($_db['result'],$type)) { foreach ($nv as $r => $a7){ if(is_string ($a7)) { $nv[$r]=$a7; } } $d[] = $nv; } return $d; } function rn ($x){ global$_db; kn ('escape string'); return mysqli_real_escape_string ($_db['link'],$x); } function tn () { global$_config; $y1 = array_keys (jn ()); if(Log::$cy)__log ('Backup: Found '. count ($y1) .' backups'); if(count ($y1)) { $q7 = time () - $y1[0]; $l7 = ($q7 >= $_config['backup_rebase_interval']); if(Log::$cy)__log ('Backup: '. $q7 .' seconds since last backup'); } else { $l7 = true; } if ($l7){ if(Log::$cy)__log ('Backup: Will rebuild backup'); p3 (jv ('e2s_dump', []), true); } } function jn () { $y1 = []; foreach(glob (BACKUP_FOLDER. '*.sql') as $fy){ if(preg_match ('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is',basename ($fy),$y3)) { list (, $hb,$jb,$tb,$m4,$r,$n4)=$y3; $a4 = gmmktime ($m4,$r,$n4,$jb,$tb,$hb); $y1[$a4]=$fy; } } krsort ($y1); return $y1; } function hn () { $y1 = jn (); if(count ($y1)>3){ $k7 = -1; $x7 = array (SECONDS_IN_A_MINUTE,SECONDS_IN_AN_HOUR,SECONDS_IN_A_DAY, -1); $r = 0; foreach ($y1 as $a4 => $fy){ if ($k7 == -1){ $k7 = $a4; } elseif ($x7[$r] == -1){ @unlink ($fy); } else { if ($k7 - $a4 < $x7[$r]) { @unlink ($fy); } else { $r ++; $k7 = $a4; } } } } else { } return; } function gn () { global$_model,$_db,$_config; try { kn ('make backup'); if($_db['link']) { $e7 = []; foreach(array_keys ($_model) as $lz){ $e7[] = $_config['db_table_prefix'].$lz; } $w4 = time (); $fb = BACKUP_FOLDER .'backup-'.gmdate ('Y-m-d-\a\t-H-i-s',$w4).'.sql'; e2_backup ($_db['link'],$e7,$fb); @unlink (BACKUP_FOLDER .'backup-tail.sql'); hn (); return $fb; } } catch (AeMySQLException $e){ kv ($e,'Could not do backup'); return false; } } function wn ($r7){ $t7 = parse_url ($r7); $mz = @$t7['host']; $fz = @$t7['port']; if ((string)$mz === ''){ $mz = $r7; $fz = ''; } return [$mz,$fz]; } function e2s_dump () { if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_underhood')); } if (gn ())mv ('Backed up',E2E_MESSAGE); c (jv ('e2m_underhood')); } define ('ALIAS_MAX_LENGTH',64); function un ($j7 = false){ global$_config; static $m2 = null; if ($j7){ if(Log::$cy)__log ('Reset aliasmap'); @unlink (CACHE_FILENAME_ALIASMAP); $m2 = null; return; } if(is_array ($m2)) return $m2; if(CACHE_ALIASMAP and is_file (CACHE_FILENAME_ALIASMAP)) { $m2 = @unserialize (file_get_contents (CACHE_FILENAME_ALIASMAP)); } if(is_array ($m2)) return $m2; if(Log::$cy)__log ('Build aliasmap {'); $m2 = []; xn ( "SELECT `EntityType`, `EntityID`, `Alias` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Stamp` IN (". "SELECT MAX(`Stamp`) `MaxStamp` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "GROUP BY `EntityType`, `EntityID`". ")", 'get all active aliases' ); foreach (en () as $h7){ $f2 = $h7['EntityType'].$h7['EntityID']; $m2[$f2]=$h7['Alias']; } xn ( "SELECT `ID`, `Stamp`, `Offset`, `IsDST`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". "ORDER BY `Stamp`", 'get all notes to cache y/d/m/n urls' ); $g7 = 0; $w7 = false; foreach (en () as $n2){ $f2 = 'n'. $n2['ID']; $u7 = ky ( 'Y/m/d',$n2['Stamp'],dy ($n2) ); if ($u7 !== $w7)$g7 = 0; $g7 ++; $i7 = $u7 .'/'. $g7; if (empty ($m2[$f2])) { $m2[$f2]=$i7; } else { if ((string)$n2['OriginalAlias']===''){ $m2[$f2 . '-ymdn']=$i7; } } $w7 = $u7; } xn ( "SELECT `ID`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'get original active aliases for tags' ); foreach (en () as $q2){ $f2 = 't'. $q2['ID']; if (empty ($m2[$f2])) { $m2[$f2]=$q2['OriginalAlias']; } } if(CACHE_ALIASMAP)m3 (CACHE_FILENAME_ALIASMAP,serialize ($m2)); if(Log::$cy)__log ('}'); return $m2; } function e2ali__alias_from_title_($o7){ global$_config; $p7 = $o7; if(array_key_exists ('autoreplace_for_aliases',$_config)) { $p7 = strtr ( $p7, $_config['autoreplace_for_aliases'] ); } $p7 = m ($p7); $p7 = str_replace ('\'','',$p7); $p7 = str_replace ('’','',$p7); $p7 = str_replace (chr (146),'',$p7); $cx = ''; for ($r = 0; $r < strlen ($p7); ++ $r){ if ( (ord ($p7[$r]) >= 48 and ord ($p7[$r]) <= 57) or (ord ($p7[$r]) >= 65 and ord ($p7[$r]) <= 90) or (ord ($p7[$r]) >= 97 and ord ($p7[$r]) <= 122) or 0 ) { $cx .= $p7[$r]; } else { $cx .= '-'; } } $cx = preg_replace ('/\-+/','-',$cx); $cx = trim ($cx,'-'); $cx = strtolower ($cx); if ($cx == '-')$cx = ''; $cx = substr ($cx,0,ALIAS_MAX_LENGTH); return $cx; } function on ($vx){ global$_config; if ((string)$vx === '') return false; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Alias` = '". $vx ."' ". "ORDER BY `Stamp` LIMIT 1", 'get alias record for alias "'. $vx .'"' ); $e1 = en (); if(count ($e1)==1){ return $e1[0]; } else { return false; } } function pn ($vx){ if ((string)$vx === '') return false; if(Log::$cy)__log ('Get entity type and id from alias "'. $vx .'"'); $bx = @array_flip (un ()); $f2 = (string) @$bx[$vx]; if ( strlen ($f2)>0 and ($f2[0]=='n' or $f2[0]=='t') ) { $vv = [ 'type' => $f2[0], 'id' => (int)substr ($f2,1) ]; return $vv; } $h7 = on ($vx); if (!$h7) return false; $vv = [ 'type' => $h7['EntityType'], 'id' => (int)$h7['EntityID'], ]; if(Log::$cy)__log ('Got entity type "'. $vv['type'] .'" and id "'. $vv['id'] .'"'); return $vv; } function cm ($py,$n1,$yx,$o7,$nx = 1){ if(Log::$cy)__log ('Aliases: "'. $py .'" available alias for source "'. $o7. '"'); if ($py == 'set' and (!$n1 or !$yx)) return false; $cx = e2ali__alias_from_title_($o7); if ($o7 !== '' and $cx === ''){ $cx = (string)$nx; } elseif ($nx > 1){ $mx = '-'. $nx; $cx = substr ($cx,0,ALIAS_MAX_LENGTH - strlen ($mx)) . $mx; } if ($h7 = on ($cx)) { $fx = $h7['EntityType']; $dx = $h7['EntityID']; if ( (($yx and $dx == $yx) and ($n1 and $fx == $n1)) or $cx != un () [$fx . $dx] ) { if ($py == 'find'){ return $cx; } if ($py == 'set'){ if(Log::$cy)__log ('Aliases: update alias timestamp'); nn ('Aliases', array ( 'ID' => $h7['ID'], 'EntityType' => $n1, 'EntityID' => $yx, 'Alias' => $cx, 'Stamp' => time (), )); un (true); return $cx; } } else { return cm ($py,$n1,$yx,$o7,$nx + 1); } } else { if ($n1 and $yx and $cx == ''){ if(preg_match ( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', un () [$n1 . $yx] )) { if(Log::$cy)__log ('Aliases: d/m/y/n was already used for this entity'); return ''; } } if(Log::$cy)__log ('Aliases: it’s an empty alias, and it was not being used for this entity'); if ( $n1 == 't' and $sx = af ($cx) ) { if ($sx['ID']!=$yx){ return cm ($py,$n1,$yx,$o7,$nx + 1); } } if ($py == 'find'){ return $cx; } if ($py == 'set'){ yn ('Aliases', array ( 'EntityType' => $n1, 'EntityID' => $yx, 'Alias' => $cx, 'Stamp' => time (), )); un (true); return $cx; } } return ''; } class AeLayoutDiversityManager { private static $layoutsUseIndexes = []; private static $layoutsUseIndex = 1; private static $layoutsUseMaxIndex = 1; public static function addLayoutsUsed ($ax){ self::$layoutsUseIndexes[$ax]=self::$layoutsUseIndex; self::$layoutsUseIndex ++; self::$layoutsUseMaxIndex ++; } public static function hasLayoutBeenUsed ($ax){ if (isset (self::$layoutsUseIndexes[$ax])) return true; } public static function getLayoutsUseRecency ($ax){ if (isset (self::$layoutsUseIndexes[$ax])) { return self::$layoutsUseIndexes[$ax]-self::$layoutsUseMaxIndex; } } } class AeNoteReadCountsProvider { private static $dataByNoteID = []; private static $hasRun = false; private static $sql = null; public static function setSQLRequestTemplateToMapIDsToReadCounts ($sql){ self::$sql = $sql; } public static function requestDeferredReadCountForNoteID ($noteID){ self::$dataByNoteID[$noteID]=true; } public static function getReadCountForNoteID ($noteID){ if(self::$sql === null) return false; if (!self::$hasRun)self :: run (); if (empty (self::$dataByNoteID[$noteID])) return false; return self::$dataByNoteID[$noteID]; } private static function run () { self::$hasRun = true; $qx = []; foreach(self::$dataByNoteID as $lx => $lv){ $qx[] = "(`ID` = ". $lx . ")"; } if (!count ($qx)) return; $qx = implode (' OR ',$qx); try { xn ( self::$sql ." AND (". $qx .")", 'get all requested read counts for notes' ); $ib = en (); foreach ($ib as $vv){ self::$dataByNoteID[$vv['ID']] = $vv['ReadCount']; } } catch (AeMySQLException $e){ kv ($e); if(Log::$cy)__log ('Could not get requested read counts for notes'); } } } class AePageableNotesView { private $candy; private $parameters; private $pageExists = false; private $isCached = false; private $hasRun = false; private $sql = null; private $sql_count = null; private $highlightedTags = null; private $cacheFilename = null; private $prevPageTitle = null; private $nextPageTitle = null; private $totalNotes = null; private $totalPages = null; private $notesCTree = null; private $pagesCTree = null; private $wantPaging = false; private $wantNewCommentsCount = false; private $wantReadHrefs = false; private $wantPreviewHrefs = false; private $wantControls = false; private $wantHiddenTags = false; private $wantRelatedNotes = false; private $useLocalHrefs = false; private $page = 1; private $limit = 10; public function __construct ($candy,$parameters){ $this->candy = $candy; $this->parameters = $parameters; if (empty ($parameters['page'])) { $this->page = 1; } else { $this->page = (int)$parameters['page']; } } public function setSQLCountRequest ($sql_count){ if(strpos ($sql_count,"SELECT COUNT(*) Total FROM ")!==0){ die ('AePageableNotesView: Count request must start with "SELECT COUNT(*) Total FROM "'); } $this->sql_count = $sql_count; } public function setLimitlessSQLRequest ($sql){ if(strstr ($sql,"LIMIT")) { die ('AePageableNotesView: Request must not contain "LIMIT"'); } $this->sql = $sql; if($this->sql_count === null){ if(strpos ($sql,"SELECT * ")===0){ $this->sql_count = "SELECT COUNT(*) Total ". substr ($sql,9); } else { die ('AePageableNotesView: setSQLCountRequest () must be used'); } } } public function setPortionSize ($limit){ $this->limit = abs ((int)$limit); } public function setNextPrevPageTitles ($nextPageTitle,$prevPageTitle){ $this->nextPageTitle = $nextPageTitle; $this->prevPageTitle = $prevPageTitle; } public function setHighlightedTags ($highlightedTags){ $this->highlightedTags = $highlightedTags; } public function setCacheFilename ($cacheFilename){ $this->isCached = true; $this->cacheFilename = $cacheFilename; } public function setWantPaging ($wantPaging){ $this->wantPaging = $wantPaging; } public function setWantNewCommentsCount ($wantNewCommentsCount){ $this->wantNewCommentsCount = $wantNewCommentsCount; } public function setWantReadHrefs ($wantReadHrefs){ $this->wantReadHrefs = $wantReadHrefs; } public function setWantPreviewHrefs ($wantPreviewHrefs){ $this->wantPreviewHrefs = $wantPreviewHrefs; } public function setWantControls ($wantControls){ $this->wantControls = $wantControls; } public function setWantHiddenTags ($wantHiddenTags){ $this->wantHiddenTags = $wantHiddenTags; } public function setWantRelatedNotes ($wantRelatedNotes){ $this->wantRelatedNotes = $wantRelatedNotes; } public function setUseLocalHrefs ($useLocalHrefs){ $this->useLocalHrefs = $useLocalHrefs; } public function isExistingPage () { if (!$this->hasRun)$this -> run (); return$this->pageExists; } public function isFirstPage () { return$this->page === 1; } public function isFirstPageOfEmptyView () { if (!$this->hasRun)$this -> run (); return$this->page === 1 and $this->totalPages === 0; } public function getTotalNotes () { if (!$this->hasRun)$this -> run (); return$this->totalNotes; } public function getTotalPages () { if (!$this->hasRun)$this -> run (); return$this->totalPages; } public function getNotesCTree () { if (!$this->hasRun)$this -> run (); return$this->notesCTree; } public function getPagesCTree () { if (!$this->hasRun)$this -> run (); return$this->pagesCTree; } private function prepareCacheableData () { $this->totalNotes = 0; if($this->limit){ $sl = ($this->page - 1)*$this->limit; $this->sql .= ' LIMIT '. $sl .', '. $this->limit; } xn ($this->sql_count,'count total notes of "'. $this->candy .'" list'); $zx = en (); $this->totalNotes = $zx ? (int)$zx[0]['Total']:0; xn ($this->sql,'get limited full notes "'. $this->candy .'" list'); $e1 = en (); $kx = []; foreach ($e1 as $t => $nl){ $kx[] = $nl['ID']; } $this->notesCTree = []; foreach ($e1 as $t => $nl){ $noteView = new AeNoteView ($nl); $noteView -> setWantNewCommentsCount ($this->wantNewCommentsCount); $noteView -> setWantReadHref ($this->wantReadHrefs); $noteView -> setWantPreviewHref ($this->wantPreviewHrefs); $noteView -> setWantControls ($this->wantControls); $noteView -> setWantHiddenTags ($this->wantHiddenTags); $noteView -> setWantCommentsLink (true); $noteView -> setWantRelatedNotes ($this->wantRelatedNotes); $noteView -> setFilterOutRelatedNoteIDs ($kx); $noteView -> setHighlightedTags ($this->highlightedTags); $noteView -> setUseLocalHref ($this->useLocalHrefs); $this->notesCTree[] = $noteView -> getNoteCTree (); } $this->pagesCTree = []; if ( $this->limit and $this->totalPages = (int)ceil ($this->totalNotes / $this->limit) ) { $this->pagesCTree['timeline?']=true; $this->pagesCTree['count'] = (int)$this->totalPages; $this->pagesCTree['this'] = (int)$this->page; if($this->wantPaging){ $this->pagesCTree['earlier-title']=$this->nextPageTitle; $this->pagesCTree['later-title']=$this->prevPageTitle; $xx = $this->parameters; if($this->page < $this->totalPages){ $xx['page']=$this->page + 1; $this->pagesCTree['earlier-href']=jv ($this->candy,$xx); } if($this->page > 1){ $xx['page']=$this->page - 1; $this->pagesCTree['later-href']=jv ($this->candy,$xx); } } } } private function run () { $this->hasRun = true; if($this->isCached and is_file ($this->cacheFilename)) { $ex = @unserialize (file_get_contents ($this->cacheFilename)); $this->totalNotes = @$ex['notes_total']; $this->notesCTree = @$ex['notes_ctree']; $this->pagesCTree = @$ex['pages_ctree']; $this->totalPages = @$this->pagesCTree['count']; } if ( is_int ($this->totalNotes) and is_array ($this->notesCTree) and is_array ($this->pagesCTree) and is_int ($this->totalPages) ) { if(Log::$cy)__log ('Retrieved cached CTree'); } else { $this -> prepareCacheableData (); if($this->isCached){ m3 ($this->cacheFilename,serialize ([ 'notes_total' => $this->totalNotes, 'notes_ctree' => $this->notesCTree, 'pages_ctree' => $this->pagesCTree, ])); } } foreach($this->notesCTree as $rx){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($rx['id']); if (empty ($rx['related']['each'])) continue; foreach ($rx['related']['each'] as $tx){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($tx['id']); } } $this->pageExists = ( $this->totalPages > 0 and $this->page >= 1 and $this->page <= $this->totalPages ); } } class AeArbitraryNotesCollectionView { private $name = ''; private $isCached = false; private $hasRun = false; private $sql = null; private $currentURL = null; private $cacheFilename = null; private $cacheExpiresFilename = null; private $cacheable = []; private $viewExpiration = null; private $notesCTree = null; private $filterOutIDs = []; public function __construct ($name){ $this->name = $name; } public function setSQLRequest ($sql){ $this->sql = $sql; } public function setCurrentURL ($currentURL){ $this->currentURL = $currentURL; } public function setCacheFilename ($cacheFilename){ $this->isCached = true; $this->cacheFilename = $cacheFilename; } public function setCacheExpiresFilename ($cacheExpiresFilename){ $this->cacheExpiresFilename = $cacheExpiresFilename; } public function setViewExpiration ($viewExpiration){ $this->viewExpiration = $viewExpiration; } public function setFilterOutIDs ($filterOutIDs){ $this->filterOutIDs = $filterOutIDs; } public function orderNotesCTreeByVerticality () { if (!$this->hasRun)$this -> run (); usort ($this->notesCTree, function ($jx,$hx){ if (empty ($jx['images'][0]['verticality']))$gx = 0; else $gx = $jx['images'][0]['verticality']; if (empty ($hx['images'][0]['verticality']))$wx = 0; else $wx = $hx['images'][0]['verticality']; return (int)round (($wx - $gx)*10000); }); } public function getNotesCTree () { if (!$this->hasRun)$this -> run (); return$this->notesCTree; } private function prepareCacheableData () { $ux = [ 'notes-records' => function () { $ix = []; try { xn ($this->sql,'get "'. $this->name .'" list'); foreach (en () as $nl){ if (rm ($nl)==='public'){ $ix[] = $nl; } } } catch (AeMySQLException $e){ kv ($e); if(Log::$cy)__log ('Could not get list from database'); } return $ix; }, ]; if($this->isCached and is_file ($this->cacheFilename)) { $this->cacheable = @unserialize (file_get_contents ($this->cacheFilename)) or $this->cacheable = []; } $ox = true; if (!empty ($this->cacheExpiresFilename)) { if($this->isCached and is_file ($this->cacheExpiresFilename)) { $w4 = time (); $px = (int) @file_get_contents ($this->cacheExpiresFilename); if(Log::$cy)__log ('List expires '. date ('r',$px) .', now '. date ('r',$w4)); $ox = ($w4 < $px); } } $ce = false; foreach ($ux as $vk => $ve){ if (!array_key_exists ($vk,$this->cacheable) or !$ox){ if(Log::$cy)__log ('Build cache: "'. $vk .'"'); $this->cacheable[$vk]=$ve (); $ce = true; } else { if(Log::$cy)__log ('Retrieved from cache: "'. $vk .'"'); } } if($this->isCached and $ce){ m3 ($this->cacheFilename,serialize ($this->cacheable)); if($this->cacheExpiresFilename){ @m3 ($this->cacheExpiresFilename,time () + $this->viewExpiration); } } } private function run () { $this->hasRun = true; if(Log::$cy)__log ('AeArbitraryNotesCollectionView "'. $this->name .'" run {'); if(Log::$cy)__log ('Cacheable data {'); $this -> prepareCacheableData (); if(Log::$cy)__log ('}'); if(Log::$cy)__log ('Uncacheable data {'); $this->notesCTree = []; foreach($this->cacheable['notes-records'] as $nl){ if(in_array ($nl['ID'],$this->filterOutIDs)) continue; $noteView = new AeNoteView ($nl); $l2 = $noteView -> getNoteCTree (); $l2['current?'] = ($l2['href']==$this->currentURL); $this->notesCTree[] = $l2; AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($nl['ID']); } if(Log::$cy)__log ('}'); if(Log::$cy)__log ('}'); } } class AeNoteView { private $noteRecord = []; private $isCached = false; private $hasRun = false; private $cacheFilename = null; private $noteCTree = null; private $highlightedTags = null; private $cacheable = []; private $OGImages = []; private $wantRichText = false; private $wantCommentsLink = false; private $wantNewCommentsCount = false; private $wantReadHref = false; private $wantPreviewHref = false; private $wantControls = false; private $wantHiddenTags = false; private $wantSharingButtons = false; private $wantRelatedNotes = false; private $filterOutRelatedNoteIDs = []; private $useLocalHref = false; public function __construct ($noteRecord){ $this->noteRecord = $noteRecord; if(CACHE_NOTES){ $this->isCached = true; $this->cacheFilename = e2_note_cache_filename_with_id_($noteRecord['ID']); } } public function setHighlightedTags ($highlightedTags){ $this->highlightedTags = $highlightedTags; } public function setWantRichText ($wantRichText){ $this->wantRichText = $wantRichText; } public function setWantCommentsLink ($wantCommentsLink){ $this->wantCommentsLink = $wantCommentsLink; } public function setWantNewCommentsCount ($wantNewCommentsCount){ $this->wantNewCommentsCount = $wantNewCommentsCount; } public function setWantReadHref ($wantReadHref){ $this->wantReadHref = $wantReadHref; } public function setWantPreviewHref ($wantPreviewHref){ $this->wantPreviewHref = $wantPreviewHref; } public function setWantControls ($wantControls){ $this->wantControls = $wantControls; } public function setWantHiddenTags ($wantHiddenTags){ $this->wantHiddenTags = $wantHiddenTags; } public function setWantSharingButtons ($wantSharingButtons){ $this->wantSharingButtons = $wantSharingButtons; } public function setWantRelatedNotes ($wantRelatedNotes){ $this->wantRelatedNotes = $wantRelatedNotes; } public function setFilterOutRelatedNoteIDs ($filterOutRelatedNoteIDs){ $this->filterOutRelatedNoteIDs = $filterOutRelatedNoteIDs; } public function setUseLocalHref ($useLocalHref){ $this->useLocalHref = $useLocalHref; } public function getNoteCTree () { if (!$this->hasRun)$this -> run (); return$this->noteCTree; } private function prepareCacheableData () { $ux = [ 'title' => function () { return h3 ( htmlspecialchars ($this->noteRecord['Title'],ENT_NOQUOTES,HSC_ENC) ); }, 'text-format-info' => function () { return u3 ( $this->noteRecord['FormatterID'], $this->noteRecord['Text'], 'full' ); }, 'summary' => function () { if ((string)$this->noteRecord['Summary']!==''){ return h3 (htmlspecialchars ($this->noteRecord['Summary'],ENT_NOQUOTES,HSC_ENC)); } else { return em ($this->cacheable['text-format-info']['text-final']); } }, 'comments-count' => function () { if (!$this->noteRecord['IsPublished']) { return false; } else { return pf ($this->noteRecord['ID']); } }, 'tags-data' => function () { $s2 = bf ($this->noteRecord['ID']); $be['ctree'] = []; $be['all-resnames-uploads'] = []; foreach ($s2 as $r => $q2){ $be['ctree'][] = [ 'visible?' => (bool)$q2['IsVisible'], 'name' => htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv ('e2m_tag', array ('*tag' => $q2)), ]; $be['all-resnames-uploads']=array_merge ( $be['all-resnames-uploads'], q3 ('tag',$q2['ID']) ); } $be['all-resnames-uploads']=array_unique ( $be['all-resnames-uploads'] ); return $be; }, ]; if($this->isCached and is_file ($this->cacheFilename)) { $this->cacheable = @unserialize (file_get_contents ($this->cacheFilename)) or $this->cacheable = []; } $ce = false; foreach ($ux as $vk => $ve){ if (!array_key_exists ($vk,$this->cacheable)) { if(Log::$cy)__log ('Build cache: "'. $vk .'"'); $this->cacheable[$vk]=$ve (); $ce = true; } else { if(Log::$cy)__log ('Retrieved from cache: "'. $vk .'"'); } } if($this->isCached and $ce){ m3 ($this->cacheFilename,serialize ($this->cacheable)); } } private function run () { $this->hasRun = true; if(Log::$cy)__log ('AeNoteView run {'); if(Log::$cy)__log ('Cacheable data {'); $this -> prepareCacheableData (); if(Log::$cy)__log ('}'); if(Log::$cy)__log ('Uncacheable data {'); $ye = false; if($this->noteRecord['IsPublished']) { if ((string)$this->noteRecord['OriginalAlias']!==''){ $ye = jv ('e2m_note', ['alias' => $this->noteRecord['OriginalAlias']]); } else { $ne = $this->noteRecord; $ne['__force_ymdn']=true; $ye = jv ('e2m_note', ['*note' => $ne]); } } $rl = dy ($this->noteRecord); $me = [(int)$this->noteRecord['LastModified'],$rl]; $w4 = ( $this->noteRecord['IsPublished'] ? [(int)$this->noteRecord['Stamp'],$rl]:$me ); $fe = rm ($this->noteRecord); $ya = @$this->cacheable['text-format-info']['meta']['resources-detected']; if (!is_array ($ya))$ya = []; if(count ($ya)) { rb ($ya); } $de = db ($ya); $na = @unserialize ($this->noteRecord['Uploads']) or $na = []; $se = array_merge ( sb ( $ya,$na ), $this->cacheable['tags-data']['all-resnames-uploads'] ); $ae = d3 ($se); $qe = db ($se); $le = $this->noteRecord['SourceNoteData']; $le = @json_decode ($le,true); $ze = @$le['og_images'][0] or $ze = ''; if($this->noteRecord['IsExternal']) { $ke = zd ($this->noteRecord); } else { $ke = []; } $xe = false; $ee = $this->cacheable['tags-data']['ctree']; foreach ($ee as $t => $xf){ if($this->highlightedTags !== null){ $ee[$t]['current?']=in_array ($ee[$t]['name'],$this->highlightedTags); } if (!$this->wantHiddenTags and !$ee[$t]['visible?']) { unset ($ee[$t]); } } if($this->wantSharingButtons and $fe === 'public'){ $re = vm ($ae); } else { $re = false; } if($this->wantNewCommentsCount){ $te = of ($this->noteRecord['ID']); } else { $te = false; } $this->noteCTree = [ 'id' => (int)$this->noteRecord['ID'], 'title' => (string)$this->cacheable['title'], 'href' => jv ('e2m_note', ['*note' => $this->noteRecord]), 'href-original' => $ye, 'time' => $w4, 'last-modified' => $me, 'text' => (string)$this->cacheable['text-format-info']['text-final'], 'format-info' => $this->cacheable['text-format-info']['meta'], 'summary' => (string)$this->cacheable['summary'], 'snippet-text' => (string)$this->cacheable['summary'], 'draft?' => $fe === 'draft', 'scheduled?' => $fe === 'scheduled', 'public?' => $fe === 'public', 'hidden?' => $fe === 'hidden', 'current?' => false, 'favourite?' => (bool) ($this->noteRecord['IsFavourite'] and $fe !== 'draft'), 'images' => ab ($de), 'thumbs' => qb ($de), 'source-main-image-url' => (string)$ze, 'og-images' => $ae, 'og-images-thumbs' => qb ($qe), 'tags' => $ee, 'sharing-buttons' => $re, 'related' => $xe, 'read-href' => ($this->wantReadHref and $this->noteRecord['IsPublished'])? jv ('e2m_note_read', ['*note' => $this->noteRecord]) : false, 'preview-href' => ($this->wantPreviewHref and ($fe !== 'public'))? jv ('e2m_note', [ '*note' => $this->noteRecord, 'preview-key' => jm ($this->noteRecord) ]) : false, 'comments-count' => $this->cacheable['comments-count'], 'comments-count-text' => is_int ($this->cacheable['comments-count'])? e2l_get_string ('gs--n-comments', [ 'number' => $this->cacheable['comments-count'] ]) : '', 'new-comments-count' => $te, 'new-comments-count-text' => is_int ($te)? e2l_get_string ('gs--comments-n-new', [ 'number' => $te ]) : '', 'comments-link?' => (bool) ( $this->wantCommentsLink and $this->noteRecord['IsPublished'] and ( n2 ($this->noteRecord) or ($this->cacheable['comments-count']>0) ) ), ]; if($this->noteRecord['IsExternal']) { $this->noteCTree = array_merge ($this->noteCTree,$ke); $this->noteCTree['href-original']=$this->noteCTree['href-external']; if (!$this->useLocalHref){ $this->noteCTree['href']=$this->noteCTree['href-external']; } } if($this->wantControls){ $this->noteCTree['edit-href']=jv ( 'e2m_note_edit', array ('*note' => $this->noteRecord) ); if($this->noteRecord['IsPublished'] and !$this->noteRecord['IsVisible']) { $this->noteCTree['show-href']=jv ('e2m_note_flag', [ '*note' => $this->noteRecord, 'flag' => 'IsVisible', 'value' => 1 ]); } if($this->noteRecord['IsPublished']) { $this->noteCTree['favourite-toggle-href']=jv ( 'e2m_note_flag_favourite', [ '*note' => $this->noteRecord, 'value' => !$this->noteRecord['IsFavourite'] ] ); } } $this->noteCTree['href-comments']=$this->noteCTree['href'] .'#comments'; if(Log::$cy)__log ('}'); AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($this->noteRecord['ID']); if(Log::$cy)__log ('}'); } } function vm ($ae){ global$_config; $je = $_config['share_to']; $he = '|twitter|facebook|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $lv['twitter']['via']=$_config['share_to_twitter_via']; } if(count ($ae)>0){ $ge = $ae[0]; $he .= 'pinterest|'; $lv['pinterest']['media']=$ge; } $we = []; foreach(explode (',',$je) as $ue){ $ue = trim ($ue); if(strstr ($he,'|'. $ue. '|')) { $we[$ue]['share?']=true; if(is_array (@$lv[$ue]) and count ($lv[$ue])) { $we[$ue]['data']=$lv[$ue]; } } } return $we; } function e2m_note ($parameters = []) { global$settings,$_config,$_strings; if(Log::$cy)__log ('Note {'); $n2 = $parameters['*note']; if ($n2 == false) return e2_error404_mode (); $ie = jm ($n2); $oe = rm ($n2); $pe = r2 (); $c6 = ($parameters['preview-key']==$ie); if (!empty ($parameters['preview-key']) and !$c6) return e2_error404_mode (); if (!$pe and !$c6 and $oe !== 'public') return e2_error404_mode (); if (!empty ($parameters['preview-key']) and $oe === 'public'){ unset($parameters['preview-key']); $v6 = jv ('e2m_note',$parameters); c ($v6); } $v6 = jv ('e2m_note',$parameters); $noteView = new AeNoteView ($n2); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($pe and !@$_config['read_only']); $noteView -> setWantHiddenTags ($pe); if ($oe === 'draft' or $oe === 'scheduled'){ if (!$c6){ $b6 = [ '.note-id' => $n2['ID'], '.token' => q2 (), 'form-action' => jv ('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-note'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], ]; } } $y6 = ''; $n6 = []; $m6 = []; if ($oe === 'public'){ $noteView -> setWantNewCommentsCount ($pe); $noteView -> setWantSharingButtons ($settings['appearance']['show_sharing_buttons']); $noteView -> setWantRelatedNotes (true); } if ($oe === 'public' or $oe === 'hidden'){ if(Log::$cy)__log ('Navigation {'); $f6 = fm ($n2,'prev'); $d6 = fm ($n2,'next'); if ($f6){ $m6['prev-href']=jv ('e2m_note', array ('*note' => $f6)); $m6['prev-title']=h3 (htmlspecialchars ($f6['Title'],ENT_NOQUOTES,HSC_ENC)); } if ($d6){ $m6['next-href']=jv ('e2m_note', array ('*note' => $d6)); $m6['next-title']=h3 (htmlspecialchars ($d6['Title'],ENT_NOQUOTES,HSC_ENC)); } $m6['title']=$_strings['nm--posts']; $m6['timeline?']=false; $m6['this-title']=h3 (htmlspecialchars ($n2['Title'],ENT_NOQUOTES,HSC_ENC)); if(Log::$cy)__log ('}'); if(Log::$cy)__log ('Comments {'); if ($pe){ $s6 = e2_note_cache_filename_with_id_($n2['ID'] .'-comments-author'); } else { $s6 = e2_note_cache_filename_with_id_($n2['ID'] .'-comments'); } $a6 = null; if(CACHE_NOTES_COMMENTS and is_file ($s6)) { $a6 = @unserialize (file_get_contents ($s6)); } if(is_array ($a6)) { if(Log::$cy)__log ('retrieve cached ctree'); $y6 = $a6; } else { if(Log::$cy)__log ('assemble ctree...'); $q6 = b2 ($n2['ID']); $l6 = array (); $z6 = true; foreach ($q6 as $t => $k6){ if ($k6['IsVisible']) { $x6 = wf ( $n2, $k6, $t + 1 ); if ($x6['new?'] and $z6){ $x6['first-new?']=true; $z6 = false; } $l6[] = $x6; } } $y6 = $l6; if(CACHE_NOTES_COMMENTS)m3 ($s6,serialize ($y6)); } if (!@$_config['read_only'] and n2 ($n2)) { $e6 = if_ ($n2); $e6['.comment-number']=count ($y6)+1; } if(Log::$cy)__log ('} // Comments'); } $rx = $noteView -> getNoteCTree (); if ($pe and n2 ($n2,NOTE_COMMENTABLE_NOW_CONDITIONALLY)) { if ($n2['IsCommentable']) { $n6['href']=jv ('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 0, )); $n6['text']=$_strings['bt--close-comments-to-post']; } else { $n6['href']=jv ('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 1, )); $n6['text']=$_strings['bt--open-comments-to-post']; } } if ($pe and $rx['new-comments-count']>0){ if(Log::$cy)__log ('mark comments as not new'); e2_drop_caches_for_note_($n2['ID'],true); nn ('Comments', array ('IsNew' => 0), array ('NoteID' => $n2['ID'])); } if ($pe and ($n2['FormatterID']=='calliope')) { if(is_file (USER_FOLDER . 'calliope/WikiFormatter.php')) { $rx['text']=w3 () . $rx['text']; } } $d = [ 'title' => $n2['Title'], 'notes' => ['only' => $rx], 'pages' => $m6, 'summary' => $rx['summary'], ]; if ($y6) $d['comments']['each']=$y6; if ($n6) $d['comments']['toggle']=$n6; $d['comments']['count']=$rx['comments-count']; $d['comments']['count-text']=$rx['comments-count-text']; $d['comments']['new-count']=$rx['new-comments-count']; $d['comments']['new-count-text']=$rx['new-comments-count-text']; $d['comments']['display-form?']=n2 ($n2); if (!empty ($e6)) { $d['form']='form-comment'; $d['form-comment']=$e6; } if (!empty ($b6)) { $d['form']='form-note-publish'; $d['form-note-publish']=$b6; } if(Log::$cy)__log ('} // Note'); return $d; } function e2m_note_read ($parameters = array ()) { global$_config; if (!$_config['count_reads']) { die ('Read counting disabled'); } $n2 = $parameters['*note']; if ($n2 == false) return e2_error404_mode (); if(Log::$cy)__log ('Note read {'); xn ( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `ReadCount` = `ReadCount` + 1 ". "WHERE `ID` = ". $n2['ID'] ); $r6 = time (); $r6 = $r6 - ($r6 % SECONDS_IN_AN_HOUR); yn ( 'Actions', [ 'EntityID' => $n2['ID'], 'Stamp' => $r6, 'ReadCount' => 1, ], 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); xn ( "DELETE LOW_PRIORITY FROM `". $_config['db_table_prefix']."Actions` ". "WHERE (`Stamp` < ". (time () - (SECONDS_IN_A_MONTH)) .")" ); if(Log::$cy)__log ('}'); c (jv ('e2m_note',$parameters)); } function e2m_note_withdraw ($parameters = array ()) { global$_strings; $nl = $parameters['*note']; if (!$nl) return e2_error404_mode (); if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_note', array ('*note' => $nl))); } z2 (); $t6 = jv ('e2m_note_broadcast', array ('*note' => $nl)); $nl['IsPublished']=0; $nl['IsCommentable']=0; $nl['IsVisible']=1; $nl['Stamp']=time (); $nl['IP']=k2 (); if($parameters['alias']) { $nl['OriginalAlias']=$parameters['alias']; } else { $nl['OriginalAlias']=cm ( 'find','n',$nl['ID'],$nl['Title'] ); } e2_drop_caches_for_note_($nl['ID'],null); nn ('Notes',$nl); ea ($nl['ID']); p3 ($t6); cm ('set','n',$nl['ID'],''); c (jv ('e2m_note', ['*note' => $nl])); } function e2m_note_delete ($parameters = array()) { global$_strings; $nl = $parameters['*note']; if (!$nl) return e2_error404_mode (); $oe = rm ($nl); $j6 = !$nl['IsPublished']; if ($j6){ $h6 = e2l_get_string ('gs--draft-will-be-deleted', array ( 'draft' => htmlspecialchars ($nl['Title'],ENT_NOQUOTES,HSC_ENC), )); } else { $h6 = e2l_get_string ('gs--post-will-be-deleted', array ( 'post' => htmlspecialchars ($nl['Title'],ENT_NOQUOTES,HSC_ENC), )); } $g6 = $j6? $_strings['pt--draft-deletion']:$_strings['pt--post-deletion']; $w6 = array ( '.note-id' => $nl['ID'], '.is-draft' => (int)$j6, '.token' => q2 (), 'note-title' => htmlspecialchars ($nl['Title'],ENT_COMPAT,HSC_ENC), 'caution-text' => $h6, 'form-action' => jv ('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int)$j6, ); if ($oe === 'public'){ $w6['hide-href']=jv ( 'e2m_note_flag', [ '*note' => $parameters['*note'], 'flag' => 'IsVisible', 'value' => 0 ] ); } if ($nl['IsPublished']) { $w6['withdraw-href']=jv ( 'e2m_note_withdraw',$parameters ); } $d = array ( 'title' => $g6. ': '. htmlspecialchars ($nl['Title'],ENT_NOQUOTES,HSC_ENC), 'heading' => $g6, 'form' => 'form-note-delete', 'form-note-delete' => $w6, ); return $d; } function e2m_note_flag_favourite ($parameters){ global$_config; $parameters['flag']='IsFavourite'; s ([ 'flag-name' => 'favourite', 'candy-name' => 'e2m_note_flag_favourite', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ bm ($parameters); }, ]); } function e2m_note_flag ($parameters){ bm ($parameters); c (jv ('e2m_note',$parameters)); } function bm ($parameters){ $lx = $parameters['*note']['ID']; if (!is_numeric ($lx)) { return e2_error404_mode (); } e2_drop_caches_for_note_($lx,$parameters['*note']['IsPublished']); if($parameters['flag']=='IsVisible'){ qs (); } nn ('Notes', array ( 'ID' => $lx, $parameters['flag'] => (int) ($parameters['value']==1), )); try { cy (mm ($lx)); } catch (AeMySQLException $e){ kv ($e,'Could not broadcast note flag change'); } return true; } function e2m_note_use_formatter ($parameters){ $lx = $parameters['*note']['ID']; if (!is_numeric ($lx)) { return e2_error404_mode (); } e2_drop_caches_for_note_($lx,$parameters['*note']['IsPublished']); if(in_array ($parameters['formatter'], array ('calliope','raw','neasden'))) { nn ('Notes', array ( 'ID' => $lx, 'FormatterID' => $parameters['formatter'], )); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function ym ($u6,$parameters = array ()) { global$full_blog_url,$_strings,$_config; $g6 = $_strings['pt--new-post']; $i6 = $_strings['pt--new-post']; $lx = 'new'; $o6 = $_config['default_formatter']; if ($u6 == 'write'){ $a4 = time (); $p6 = time (); $rl = ay (); $oe = 'draft'; $vx = $cr = ''; } if ($u6 == 'edit'){ $nl = $parameters['*note']; if (!$nl) return e2_error404_mode (); $a4 = min ($nl['Stamp'],time ()); $p6 = (int)$nl['LastModified']; $rl = dy ($nl); $oe = rm ($nl); if ($nl['IsPublished']) { $i6 = $_strings['pt--edit-post']; $cr = ''; $vx = $parameters['alias']; } else { $i6 = $_strings['pt--edit-draft']; $cr = cm ( 'find','n',$nl['ID'],$nl['Title'] ); if (@$nl['OriginalAlias']) { $vx = $nl['OriginalAlias']; } else { $vx = $cr; } } $lx = $nl['ID']; $o6 = $nl['FormatterID']; $g6 = $nl['Title']; } $vr = df (); $br = array (); if ($vr !== null) foreach ($vr as $yr){ $br[] = $yr['tag']; } $nr = array (); if ($u6 == 'edit' and count ($br)) { $vr = bf ($nl['ID']); foreach ($vr as $yr){ $nr[] = htmlspecialchars ($yr['Keyword'],ENT_NOQUOTES,HSC_ENC); } } $mr = array (); foreach ($br as $yr){ $fr['name']=$yr; $fr['selected?']=in_array ($yr,$nr); $mr[] = $fr; } $dr = ''; $nr = implode (', ',$nr); if ($nr)$dr = $nr; if ($u6 == 'write'){ $sr = $_strings['fb--save-and-preview']; } if ($u6 == 'edit'){ if(array_key_exists ('draft',$parameters)) { $sr = $_strings['fb--save-and-preview']; } else { $sr = $_strings['fb--save-changes']; } } $ya = []; if ($u6 == 'edit'){ $ya = g3 ( $nl['FormatterID'],$nl['Text'],'full' ); } $na = @unserialize ( $nl['Uploads'] ) or $na = []; $ar = qb ( fb ( sb ( $ya,$na ) ) ); if ($u6 == 'edit'){ k3 ( 'Notes', $nl, $ya ); } $eq = r3 (); $rq = t3 ($eq); $d['title']=$g6; $d['heading']=$i6; $d['form']='form-note'; $d['uploads'] = [ 'enabled?' => $rq, 'each' => $ar, 'default-name' => htmlspecialchars ($vx,ENT_COMPAT,HSC_ENC), 'upload-action' => jv ('e2j_file_upload'), 'remove-action' => jv ('e2j_file_remove'), ]; $d['form-note'] = [ '.note-id' => $lx, '.formatter-id' => $o6, '.last-modified-stamp' => $p6, '.published?' => (bool) @$nl['IsPublished'], '.old-tags-hash' => md5 ($dr), '.action' => $u6, '.token' => q2 (), 'form-action' => jv ('e2s_note_process'), 'form-note-livesave-action' => jv ('e2j_note_livesave'), 'create:edit?' => (bool) ($u6 == 'write'), 'title' => htmlspecialchars (@$nl['Title'],ENT_COMPAT,HSC_ENC), 'tags' => $dr, 'tags-info' => $mr, 'text' => htmlspecialchars (@$nl['Text'],ENT_NOQUOTES,HSC_ENC), 'all-tags' => $br, 'stamp-formatted' => ky ('d.m.Y H:i:s',$a4,$rl), 'time' => @$nl['IsPublished']? [(int)$a4,$rl]:false, 'draft?' => $oe === 'draft', 'uploads-enabled?' => $rq, 'summary' => (string) @$nl['Summary'], 'alias-autogenerated' => htmlspecialchars ($cr,ENT_COMPAT,HSC_ENC), 'alias' => htmlspecialchars ($vx,ENT_COMPAT,HSC_ENC), 'submit-text' => $sr, 'space-usage' => j3 ($eq), ]; if ($u6 == 'edit'){ $d['related-delete-href']=jv ( 'e2m_note_delete', array ('*note' => $nl) ); } return $d; } function e2m_note_edit ($parameters = array ()) { return ym ('edit',$parameters); } function e2m_write () { return ym ('write'); } function e2s_note_process () { global$_fp_error,$_strings; $lx = km (); if (!$lx){ if($_fp_error == FP_TITLE_OR_TEXT_EMPTY){ mv ($_strings['er--post-must-have-title-and-text'],E2E_USER_ERROR); } elseif($_fp_error == FP_NO_ID_OR_NEW){ } else { mv ($_strings['er--error-occurred']); } c (jv ('e2m_write')); } try { $n2 = mm ($lx); c (jv ('e2m_note', ['*note' => $n2])); } catch (AeMySQLException $e){ kv ($e,'Could not get note by ID'); c (); } die; } function e2s_note_publish () { global$_strings,$_config,$settings; z2 (); $lx = false; if(array_key_exists ('note-id',$_POST)) { $lx = $_POST['note-id']; $qr = false; $nl = mm ($lx); $lr = $nl['OriginalAlias']; $zr = $nl['Stamp']; $kr = !$nl['IsExternal']; $nl['ID']=$lx; $nl['IsVisible']=1; $nl['IsPublished']=1; $nl['IsCommentable'] = (int)$settings['comments']['default_on']; $nl['IsFavourite']=0; if(array_key_exists ('browser-offset',$_POST)) { $rl = wy (@$_POST['browser-offset']); } else { $rl = ay (); } if ($qr and $a4 = zm ($qr,$rl)) { $nl['Stamp']=$a4; } elseif ($kr){ $nl['Stamp']=time (); } else { $nl['Stamp']=$zr; } if (xa ($nl)) { $nl['IsIndexed']='1'; } if ($rl){ $nl['Offset'] = (int)$rl['offset']; $nl['IsDST'] = (int)$rl['is_dst']; } e2_drop_caches_for_note_($lx,null); nn ('Notes',$nl); $vx = ''; if ($lr or $lr === '0'){ $vx = cm ('set','n',$lx,$lr); $nl['OriginalAlias']=$vx; } if ($vx != $lr){ nn ('Notes',$nl); } $oe = rm ($nl); if ($oe === 'public'){ cy ($nl); } c (jv ('e2m_note', array ('*note' => $nl))); } c (); } function nm ($lx,$xr = -1){ global$_config; $er = true; if ($xr){ $er = false; } if ($xr === -1){ $er = null; } e2_drop_caches_for_note_($lx,$er); xn ( "DELETE FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$lx) ."'", 'delete note by ID' ); ea ($lx); xn ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 'n' ". "AND `EntityID`=". ((int)$lx), 'delete aliases after deleting note' ); xn ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". ((int)$lx), 'delete tag bindings after deleting note' ); } function e2s_note_delete () { z2 (); $lx = $_POST['note-id']; $xr = (bool)$_POST['is-draft']; $nl = mm ($lx); $t6 = jv ('e2m_note_broadcast', array ('*note' => $nl)); nm ($lx,$xr); p3 ($t6); if ($xr){ c (jv ('e2m_drafts', ['page' => 1])); } else { c (); } die; } function e2j_note_livesave () { die (km ('ajaxresult')); } function mm ($is){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $is ."'" ); $ib = en (); if(count ($ib)>0){ return $ib[0]; } else { return false; } } function fm ($n2,$rr,$tr = 1){ global$_strings,$_config; $jr = ($rr == 'next')?'>':'<'; $hr = ($rr == 'next')?'':'DESC '; try { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". $tr ." ". "AND (". "`Stamp` ". $jr ." '". $n2['Stamp'] ."' ". "OR (`Stamp` = '". $n2['Stamp'] ."' AND `ID` ". $jr . $n2['ID'] .")". ") ". tm (r2 ()). "ORDER BY `Stamp` ". $hr . ", `ID` ". $hr . "LIMIT 1", 'get '. $rr .' note' ); $ib = en (); if(count ($ib)>0) return $ib[0]; else return false; } catch (AeMySQLException $e){ kv ($e,'Could not get '. $rr .' note'); return null; } } function dm ($gr){ global$_config; if(Log::$cy)__log ('Lastmodifieds for Local Copier'); $gr = (string)$gr; $gr = preg_replace ('[^0-9,]','',$gr); $gr = trim ($gr,','); if(CACHE_LASTMODIFIEDS and is_file (CACHE_FILENAME_LASTMODIFIEDS)) { $wr = @unserialize (file_get_contents (CACHE_FILENAME_LASTMODIFIEDS)); if ($wr['ids_csv']==$gr){ if(Log::$cy)__log ('Returned from cache'); return $wr['lastmodifieds_json']; } } $b = '`ID`='. str_replace (',',' OR `ID`=',$gr); $ur = array (); xn ( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")", 'get lastmodifieds for Local Copier' ); if(Log::$cy)__log ('Requested from DB'); $e1 = en (); foreach ($e1 as $t => $xf){ $ur[(int)$xf['ID']] = (int)$xf['LastModified']; } $ir = json_encode ($ur); if ($ir == '[]')$ir = '{}'; $wr = array ( 'ids_csv' => $gr, 'lastmodifieds_json' => $ir, ); if(CACHE_LASTMODIFIEDS){ m3 (CACHE_FILENAME_LASTMODIFIEDS,serialize ($wr)); } return $ir; } function sm ($hb,$jb,$tb = false){ global$_config; list ($pr,$ct)=jy ($hb,$jb,$tb); xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` AND (`Stamp` BETWEEN " .$pr. " AND " .$ct. ") ". "ORDER BY Stamp", 'get all notes for the date '. $tb .'.'. $jb .'.'. $hb ); $d = []; foreach (en () as $vt){ if(is_numeric ($tb)) { $bt = ((int)$hb) .'/'. ((int)$jb) .'/'. ((int)$tb) == ky ('Y/n/j',$vt['Stamp'],dy ($vt)); } elseif(is_numeric ($jb)) { $bt = ((int)$hb) .'/'. ((int)$jb) == ky ('Y/n',$vt['Stamp'],dy ($vt)); } else { $bt = ((int)$hb) == ky ('Y',$vt['Stamp'],dy ($vt)); } if ($bt)$d[] = $vt; } return $d; } function e2_published_noterec_with_parameters_($parameters = array ()) { $n2 = e2_noterec_with_parameters_($parameters); if ($n2['IsPublished']) return $n2; } function e2_noterec_with_parameters_($parameters = array ()) { global$_config; $n2 = false; $yt = false; if ((string) @$parameters['oalias']!=='')$yt = $parameters['oalias']; if ((string)$yt !== ''){ xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias` = '". $yt ."' ". "AND `IsPublished` = 0", 'get note record by original alias' ); $n2 = en (); if(count ($n2)===1) { $n2 = @$n2[0]; if ($n2) return $n2; } } $nt = false; if (@$parameters['draft']!=='') $nt = @$parameters['draft']; if (@$parameters['draft2']!=='')$nt = @$parameters['draft2']; if ($nt){ $n2 = mm ($nt); return $n2; } if ((string)$yt !== ''){ $parameters['alias']=$yt; } if ((string) @$parameters['alias']!==''){ if ($mt = pn (@$parameters['alias'])) { if ($mt['type']=='n'){ $n2 = mm ($mt['id']); if ($n2['IsPublished']) return $n2; } } } $ft = sm ($parameters['year'],$parameters['month'],$parameters['day']); if (@$ft[$parameters['day-number']-1]) { return $ft[$parameters['day-number']-1]; } } function lm ($g6,$tv,$rl,$dt){ global$_config; ls (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $n2 = array ( 'Title' => $g6, 'Text' => $tv, 'FormatterID' => $_config['default_formatter'], 'OriginalAlias' => cm ('find','','',$g6), 'Uploads' => $dt, 'Stamp' => (int)time (), 'LastModified' => (int)time (), ); if ($rl and is_array ($rl)) { $n2['Offset'] = (int)$rl['offset']; $n2['IsDST'] = (int)$rl['is_dst']; } $n2 = yn ('Notes',$n2); return $n2['ID']; } function zm ($st,$rl){ $at = '/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if(preg_match ($at,$st,$jb)) { $a4 = gmmktime ($jb[4],$jb[5],$jb[6],$jb[2],$jb[1],$jb[3]); $a4 -= ly ($rl,$a4); return $a4; } else { return false; } } function km ($qt = ''){ global$_fp_error,$_config,$_e2utf8__unformat_htmlentity_neasden,$_db; if(Log::$cy)__log ('Process note form'); z2 (); try { $_fp_error = false; $lx = $g6 = $lt = $tv = $zt = ''; if(array_key_exists ('note-id',$_POST)) $lx = $_POST['note-id']; if(array_key_exists ('title',$_POST)) $g6 = trim ($_POST['title']); if(array_key_exists ('tags',$_POST)) $lt = $_POST['tags']; if(array_key_exists ('text',$_POST)) $tv = trim ($_POST['text'],"\r\n"); if(array_key_exists ('summary',$_POST)) $kt = trim ($_POST['summary'],"\r\n"); if(array_key_exists ('old-tags-hash',$_POST)) $zt = $_POST['old-tags-hash']; if(is_array ($lt))$lt = implode (', ',$lt); $lt = trim ($lt); if ($lx == 'new'){ $_e2utf8__unformat_htmlentity_neasden = ($_config['default_formatter']=='neasden'); } else { $_e2utf8__unformat_htmlentity_neasden = ($_POST['formatter-id']=='neasden'); } $xt = vn ('Notes'); if(stripos($xt['Collation'],'utf8mb4')!==0){ $g6 = nb ($g6); $lt = nb ($lt); $tv = nb ($tv,true); } $et = $tv; $et = str_replace ("\n",'\n'."\n",$et); $et = str_replace ("\r",'\r'."\r",$et); $rt = n (',',$lt,'sort'); $lt = implode (', ',$rt); $tt = md5 ($lt); if(array_key_exists ('browser-offset',$_POST)) { $rl = wy (@$_POST['browser-offset']); } else { $rl = ay (); } $jt = @$_POST['old-stamp']; $qr = @$_POST['stamp']; $vx = @$_POST['alias']; if ($lx != 'new'){ $ht = mm ($lx); } else { $ht = array (); } if ($lx){ if ((string)$g6 !== '' and (string)$tv !== ''){ if ($lx == 'new'){ $dt = ''; if(is_file (USER_FOLDER . 'new-uploads.psa')) { $dt = @file_get_contents (USER_FOLDER . 'new-uploads.psa'); } try { $lx = lm ($g6,$tv,$rl,$dt); @unlink (USER_FOLDER . 'new-uploads.psa'); $gt = array ( '*note' => mm ($lx), ); $wt = [ 'success' => true, 'data' => [ 'status' => 'created', 'id' => $lx, 'note-url' => jv ('e2m_note',$gt), 'note-edit-url' => jv ('e2m_note_edit',$gt) ] ]; $e1 = (int)$lx; } catch (AeMySQLException $e){ kv ($e,'Could not insert note'); $wt = [ 'success' => false, 'error' => [ 'message' => 'Cannot create record' ] ]; $e1 = false; } } else { e2_drop_caches_for_note_($lx,$ht['IsPublished']); $ut = $ht; $ut['ID']=$lx; $ut['Title']=$g6; $ut['Summary']=$kt; $ut['Text']=$tv; $ut['FormatterID']=$ht['FormatterID']; $ut['LastModified']=time (); $ut['IsIndexed']='0'; if ($ut['FormatterID']==='calliope'){ $ut['FormatterID']=$_config['default_formatter']; } if ($jt != $qr){ if ($a4 = zm ($qr,$rl)) { $ut['Stamp']=min ($a4,time ()); } } $cx = $vx; if ((string)$vx !== ''){ $it = $vx; } elseif (!$ht['IsPublished']) { $it = $g6; } else { $it = ''; } if ($ht['IsPublished']) { $cx = cm ( 'set','n',$lx,$it ); $gt = array ( '*note' => $ut, 'alias' => $cx, ); } else { $ot = true; $cx = cm ('find','n',$lx,$it); $ut['OriginalAlias']=$cx; $gt = array ( '*note' => $ut, 'alias' => $cx, ); } $ya = g3 ( $ut['FormatterID'],$ut['Text'],'full' ); if(count ($ya)>0){ eb ($ya); rb ($ya); } try { nn ('Notes',$ut); if ($ut['IsPublished']) { if (xa ($ut)) { $ut['IsIndexed']='1'; nn ('Notes',$ut); } if ($jt != $qr){ un (true); } cy ($ut); } $wt = [ 'success' => true, 'data' => [ 'status' => 'saved', 'new-alias' => $cx, 'note-url' => jv ('e2m_note',$gt), 'note-edit-url' => jv ('e2m_note_edit',$gt) ] ]; $e1 = (int)$lx; } catch (AeMySQLException $e){ kv ($e,'Could not update record'); $wt = [ 'success' => false, 'error' => [ 'message' => 'Cannot update record ('. mysqli_error ($_db['link']). ')' ] ]; $e1 = false; } } if ($tt != $zt){ yf (array ('NoteID' => $lx)); foreach ($rt as $am){ $pt = sf ($am); if (!$pt){ $pt['ID']=mf ($am); } xn ( "INSERT INTO `". $_config['db_table_prefix']."NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$_config['db_table_subset']) .", ". ((int)$lx) .", ". ((int)$pt['ID']). ")", 'add new tag bindings' ); } } if ( $qt != 'ajaxresult' and $e1 and $_POST['instant-publish']=='yes' ) { $_POST['note-id']=$lx; e2s_note_publish (); } } else { $wt = [ 'success' => false, 'error' => [ 'message' => 'Title or text is empty' ] ]; $_fp_error = FP_TITLE_OR_TEXT_EMPTY; $e1 = false; } } else { $wt = [ 'success' => false, 'error' => [ 'message' => 'No note id/new specified' ] ]; $_fp_error = FP_NO_ID_OR_NEW; $e1 = false; } if($_config['backup_automatically']) { tn (); } } catch (AeMySQLException $e){ kv ($e); $wt = [ 'success' => false, 'error' => [ 'message' => 'Database error' ] ]; $e1 = false; } if ($qt == 'ajaxresult') return json_encode ($wt); else return $e1; } function xm ($c5,$v5){ global$_config; if (!($c5 and $v5) and !r2 ()) { if(Log::$cy)__log ('Error: e2_notes_count_generic called for invisible items unsecurely'); return null; } if (!is_bool ($c5) or !is_bool ($v5)) { if(Log::$cy)__log ('Error: e2_notes_count_generic called with non-bool params'); return null; } if (!$c5 and !$v5){ if(Log::$cy)__log ('Error: e2_notes_count_generic called with nonsensical parameters'); return null; } $b5 = ( CACHES_FOLDER . 'notes-count-p'. (int)$c5 . ($c5 ? ('v'. (int)$v5):'') . '.txt' ); $e1 = false; if(CACHE_NOTES_COUNTS and is_file ($b5)) { $e1 = @file_get_contents ($b5); } if(is_numeric ($e1) and $e1 > 0){ return $e1; } else { $e1 = null; try { xn ( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". (int)$c5. " ". ($c5 ? ( "AND `IsVisible`=". (int)$v5 ) : ""), 'count notes with flags p'. (int)$c5 . ($c5 ? ('v'. (int)$v5):'') ); $e1 = en (); $e1 = $e1[0]['NotesCount']; if(CACHE_NOTES_COUNTS)m3 ($b5,$e1); } catch (AeMySQLException $e){ kv ($e); if(Log::$cy)__log ('Could not count notes'); } return $e1; } } function em ($tv){ $kt = $tv; $kt = preg_match ( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/mu', $kt, $y3 ); $kt = @$y3[3]; if (!$kt)$kt = $tv; if(mb_strlen ($kt) <= 50)$kt = $tv; $kt = str_replace (array ( '<p>','<blockquote>','<ul>','<ol>','<br />', ), "\n",$kt); $kt = trim (strip_tags ($kt)); if(mb_strlen ($kt)>50){ $y5 = mb_strpos ($kt,"\n",50); } else { $y5 = mb_strrpos ($kt,"\n"); } if ($y5 !== false){ $kt = mb_substr ($kt,0,$y5); $kt = trim ($kt,' :.()'."\n"); } if(preg_match ('/^(.{100,}?)(?:[:.!?()]|'."\n".')/su',$kt,$y3)) { $kt = trim ($y3[0],' :.()'."\n"); } if(preg_match ('/^(.{150,}?)[:.!?(),]/su',$kt,$y3)) { $kt = trim ($y3[0],' :.(),'."\n"); } if(preg_match ('/^(.{200,}?)[:.!?(), ]/su',$kt,$y3)) { $kt = trim ($y3[0],' :.()'."\n"); } $kt = preg_replace ('/[ \n\r\t]+/su',' ',$kt); if(mb_substr ($kt, -1)==='.')$kt = mb_substr ($kt,0, -1); if(mb_substr ($kt, -1)===':')$kt = mb_substr ($kt,0, -1); if(mb_substr ($kt, -1)==='!')$kt = mb_substr ($kt,0, -1); if (@in_array ($kt[mb_strlen ($kt)-1], array (',',' '))) { $kt = trim ($kt,', '). '...'; } if(mb_strlen ($kt)>250){ $kt = trim (mb_substr ($kt,0,250)). '...'; } return $kt; } function rm ($n2){ $n5 = false; if ($n2['IsPublished']) { if ($n5){ return 'scheduled'; } else { if ($n2['IsVisible']) { return 'public'; } else { return 'hidden'; } } } else { return 'draft'; } } function tm ($pe = false){ if ($pe){ return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time () .') '; } } function jm ($n2){ return ''; } function e2m_drafts ($parameters){ global$_strings,$_config; $pe = r2 (); $draftsView = new AePageableNotesView ('e2m_drafts',$parameters); $draftsView -> setPortionSize ((int)$_config['drafts_per_page']); $draftsView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $draftsView -> setWantPaging (true); $draftsView -> setUseLocalHrefs (true); if($draftsView -> isFirstPage () and CACHE_DRAFTS){ $draftsView -> setCacheFilename (CACHE_FILENAME_DRAFTS); } $draftsView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `LastModified` DESC" ); $z5 = $draftsView -> getNotesCTree (); if(count ($z5)) { if(Log::$cy)__log ('Thumbnails {'); foreach ($z5 as $t => $xf){ $z5[$t]['thumbs']=qb (@$xf['format-info']['resources-detected']); } if(Log::$cy)__log ('}'); } $g6 = $_strings['pt--drafts']; if($parameters['page']>1){ $g6 .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $d = [ 'title' => $g6, 'heading' => $_strings['pt--drafts'], 'notes' => $z5, 'pages' => $draftsView -> getPagesCTree (), ]; if($draftsView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-drafts']; } elseif (!$draftsView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function um ($k5){ global$_config; if(Log::$cy)__log ('Drafts: find duplicate OriginalAliases...'); if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $x5 = @unserialize (file_get_contents (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if(CACHE_DRAFTS_ALIAS_USE_COUNTS and @is_array ($x5)) { if(Log::$cy)__log ('Drafts: retrieve cached'); } else { if(Log::$cy)__log ('Drafts: assemle cacheable...'); $x5 = array (); xn ( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `ID`", 'get original aliases of drafts to calculate use counts' ); $e1 = en (); $e5 = array (); foreach ($e1 as $t => $n2){ @$x5[$n2['OriginalAlias']] ++; } if(CACHE_DRAFTS_ALIAS_USE_COUNTS){ m3 (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS,serialize ($x5)); } } return $x5[$k5]; } function im () { global$_strings,$_user_folder_name; $r5 = 'https://'. $_strings['e2--website-host'] .'/'; $t5 = '('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; return [ 'built?' => BUILT, 'installed?' => (fn_ () !== null), 'version' => 'v'. E2_VERSION, 'version-description' => $_strings['e2--vname-aegea'] .' '. $t5, 'user-folder-name' => $_user_folder_name, 'cookie-prefix' => b (), 'href' => $r5, 'about' => ( '<span title="E2 '.$t5 .'">'. $_strings['e2--powered-by'] .' '. '<a href="'. $r5 .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> '. '<span class="e2-svgi">'. ca ('aegea') .'</span></a></span>' ), ]; } function om ($candy,$j5,$h5,$g5,$m6){ global$full_blog_url, $_config, $_candies_indexable_conditionally, $_template, $_newsfeeds, $_current_url; $meta['base-href']=$full_blog_url. '/'; $meta['current-href']=$_current_url; $meta['stylesheets']=ba (); $meta['scripts']=ya (); $meta['newsfeeds']=$_newsfeeds; $meta['favicon-type']='image/x-icon'; $meta['favicon-href']='favicon.ico'; if ($w5 = md ()) { $meta['favicon-type']=b3 ($w5); $meta['favicon-href']=$w5; $meta['apple-touch-icon-href']=md ('square'); } $meta['navigation-links'] = [[ 'rel' => 'index', 'href' => jv ('e2m_frontpage', ['page' => 1]), 'id' => 'link-index', ]]; if (!empty ($m6)) { foreach (['prev','next','earlier','later'] as $u5){ if(array_key_exists ($u5 .'-href',$m6)) { $jr = $u5; if ($u5 == 'earlier')$jr = 'prev'; if ($u5 == 'later')$jr = 'next'; $uq = $m6[$u5 .'-href']; if ($uq === 'javascript:;') continue; $meta['navigation-links'][] = [ 'rel' => $jr, 'href' => $uq, 'id' => 'link-'. $u5, ]; } } } $meta['robots']='noindex, follow'; if($candy === 'e2m_note' and @$j5['only']['public?']) { $meta['robots']='index, follow'; } if ( @$_config['index_follow_everything'] and in_array ($candy,$_candies_indexable_conditionally) ) { $meta['robots']='index, follow'; } $meta['viewport']=$_template['meta_viewport']; if(is_file (MEDIA_ROOT_FOLDER . 'manifest.json')) { $meta['manifest-href']=$full_blog_url. '/manifest.json'; } $meta['og-images'] = []; if(is_array ($j5['only']['og-images'])) { $meta['og-images']=$j5['only']['og-images']; $meta['twitter-card']='summary_large_image'; } if(is_array (@$h5['og-images'])) { $meta['og-images']=$h5['og-images']; $meta['twitter-card']='summary_large_image'; } if (!count ($meta['og-images'])) { $meta['og-images'] = array ($g5['userpic-large-href']); $meta['twitter-card']='summary'; } return$meta; } function pm () { global$_superconfig,$_config; $i5 = [ 'new-note-href' => jv ('e2m_write'), 'drafts-href' => jv ('e2m_drafts', ['page' => 1]), 'drafts-count' => (int)xm (false,true), 'settings-href' => jv ('e2m_settings'), 'theme-preview-href' => jv ('e2m_theme_preview', array ('theme' => '')), 'password-href' => jv ('e2m_password', array ('recovery-key' => '')), 'database-href' => jv ('e2m_database'), 'timezone-href' => jv ('e2m_timezone'), 'sessions-href' => jv ('e2m_sessions'), 'sign-out-href' => jv ('e2m_sign_out'), ]; if (p ()) { $i5['get-backup-href']=jv ('e2m_get_backup'); } if (@$_config['read_only']) { unset ($i5['new-note-href']); unset ($i5['settings-href']); unset ($i5['timezone-href']); } if (@$_superconfig['disallow_themes_preview']) { unset ($i5['theme-preview-href']); } if (@$_superconfig['disallow_db_config']) { unset ($i5['database-href']); } list ($te,$o5,$p5)=v2 (); if ($te){ $i5['new-comments-count']=$te; $i5['new-comments-href']=$p5; } return $i5; } function e2m_tags () { global$_strings; $d['title']=$_strings['pt--tags']; $d['heading']=$_strings['pt--tags']; $d['tags']=ff ([]); $cj = df (true); if ($cj === null){ $d['unavailable?']=true; } else { $d['tags']['each']=$cj; if(count ($cj)==0){ $d['nothing']=$_strings['gs--no-tags']; } } return $d; } function e2m_tag ($parameters = []) { global $settings, $_config, $_current_tags, $_strings; if(Log::$cy)__log ('Tag {'); $pe = r2 (); $tagNotesView = new AePageableNotesView ('e2m_tag',$parameters); $tagNotesView -> setPortionSize ($settings['appearance']['notes_per_page']); $tagNotesView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $tagNotesView -> setWantPaging (true); $tagNotesView -> setWantNewCommentsCount ($pe); $tagNotesView -> setWantReadHrefs ($_config['count_reads']); $tagNotesView -> setWantControls ($pe and !@$_config['read_only']); $tagNotesView -> setWantHiddenTags ($pe); $vj = []; if(array_key_exists ('*tags',$parameters)) { foreach($parameters['*tags'] as $q2){ if ($pe or $q2['IsVisible']) { $vj[] = $q2; } } } if (!@$vj[0]) return e2_error404_mode (); $bj = count ($vj); $yr = $vj[0]; $yj = $parameters['tag-alias']; $_current_tags = []; foreach ($vj as $yr)$_current_tags[] = $yr['Keyword']; $tagNotesView -> setHighlightedTags ($_current_tags); if(CACHE_TAG and $tagNotesView -> isFirstPage () and $bj === 1){ if ($pe){ $tagNotesView -> setCacheFilename (e2_cache_filename_with_id_($yr['ID'],CACHE_FILENAMES_TAG_AUTHOR)); } else { $tagNotesView -> setCacheFilename (e2_cache_filename_with_id_($yr['ID'],CACHE_FILENAMES_TAG)); } } foreach ($vj as $yr) if ($yr)$nj[] = "nk.`KeywordID`=". $yr['ID']; $mj = ( "FROM `". $_config['db_table_prefix'] ."Notes` n ". "JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (". implode (" OR ",$nj).") ". "AND IsPublished=1 ". tm ($pe). "GROUP BY n.`ID` ". "HAVING COUNT(*)>=". $bj ); $tagNotesView -> setSQLCountRequest ( "SELECT COUNT(*) Total FROM (SELECT 1 ". $mj .") _" ); $tagNotesView -> setLimitlessSQLRequest ( "SELECT n.*, COUNT(*) ". $mj ." ". "ORDER BY n.`Stamp` DESC" ); $fj = nf ($yr['ID'],5); $dj = ''; $h5['description']=''; $h5['summary']=''; $h5['visible?'] = (bool)$yr['IsVisible']; if ($bj == 1){ if ($pe){ $h5['edit-href']=jv ( 'e2m_tag_edit', array ('tag-alias' => $yj) ); } if ((string)$yr['Description']!==''){ $t1 = i3 ($yr['Description'],'full'); $vn = $t1['text-final']; $h5['description']=$vn; $h5['description-format-info']=$t1['meta']; na (@$t1['meta']['links-required']); } if ((string)$yr['Summary']!==''){ $h5['summary']=h3 (htmlspecialchars ($yr['Summary'],ENT_NOQUOTES,HSC_ENC)); } elseif ((string)$h5['description']!==''){ $h5['summary']=em ($h5['description']); }; $sj = jv ('e2m_tag_rss', array ('tag-alias' => $yj)); $aj = jv ('e2m_tag_json', array ('tag-alias' => $yj)); ed ( 'rss', yd () .': '. $yr['Keyword'], $sj ); ed ( 'json', yd () .': '. $yr['Keyword'], $aj ); $h5['og-images']=d3 ( sb ( @$h5['description-format-info']['resources-detected'], q3 ('tag',$yr['ID']) ) ); $h5['name']=htmlspecialchars ($yr['Keyword'],ENT_COMPAT,HSC_ENC); $h5['related']=$fj; $dj = htmlspecialchars ($yr['PageTitle'],ENT_COMPAT,HSC_ENC); } $qj = $tagNotesView -> getTotalNotes(); $h5['notes-count']=$qj; $h5['notes-count-text']=e2l_get_string ('pt--n-posts', array ('number' => $qj)); $lj = $h5['notes-count-text'] .' '. $_strings['gs--tagged']; $zj = []; foreach ($vj as $xf){ $zj[] = htmlspecialchars ($xf['Keyword'],ENT_COMPAT,HSC_ENC); } $zj = implode (', ',$zj); if ((string)$dj !== ''){ $g6 = $dj; $i6 = $dj; } else { $g6 = yd () .': '. $lj .' '. $zj; if(count ($vj)>1){ $i6 = $_strings['pt--tags'] .': '. $zj; } else { $i6 = $_strings['pt--tag'] .': '. $zj; } } if($parameters['page']>1){ $g6 .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $ee = ff ($parameters); $d = [ 'title' => $g6, 'heading' => htmlspecialchars_decode ($i6,ENT_COMPAT), 'notes' => $tagNotesView -> getNotesCTree (), 'pages' => $tagNotesView -> getPagesCTree (), 'tags' => $ee, ]; if ( !$tagNotesView -> isExistingPage () and !$tagNotesView -> isFirstPageOfEmptyView () ) { return e2_error404_mode (); } if ( $tagNotesView -> isFirstPageOfEmptyView () and !$pe ) { return e2_error404_mode (); } if($tagNotesView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-such-notes']; } if ((string)$h5['summary']!==''){ $d['summary']=$h5['summary']; } if(count ($vj)==1){ $d['tag']=$h5; if (r2 ()) { $d['related-edit-href']=$h5['edit-href']; $d['related-edit-title']=$_strings['tt--edit-tag']; } } if(Log::$cy)__log ('} // Tag'); return $d; } function e2m_tag_edit ($parameters = array()) { global$_strings; if(array_key_exists ('*tag',$parameters)) { $yr = $parameters['*tag']; } if (!$yr) return e2_error404_mode (); $ya = g3 ( 'neasden',$yr['Description'],'full' ); $na = @unserialize ( $yr['Uploads'] ) or $na = []; $ar = qb ( fb ( sb ( $ya,$na ) ) ); k3 ( 'Keywords', $yr, $ya ); $eq = r3 (); $kj = [ 'enabled?' => t3 ($eq), 'each' => $ar, 'default-name' => htmlspecialchars ($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'upload-action' => jv ('e2j_file_upload'), 'remove-action' => jv ('e2j_file_remove'), ]; $xj = [ '.tag-id' => $yr['ID'], '.formatter-id' => 'neasden', '.token' => q2 (), 'form-action' => jv ('e2s_tag_edit'), 'submit-text' => $_strings['fb--save-changes'], 'tag' => htmlspecialchars ($yr['Keyword'],ENT_COMPAT,HSC_ENC), 'page-title' => htmlspecialchars ($yr['PageTitle'],ENT_COMPAT,HSC_ENC), 'page-title-placeholder' => htmlspecialchars ($yr['Keyword'],ENT_COMPAT,HSC_ENC), 'alias' => htmlspecialchars ($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'description' => htmlspecialchars ($yr['Description'],ENT_COMPAT,HSC_ENC), 'summary' => (string)$yr['Summary'], 'favourite?' => (bool)$yr['IsFavourite'], 'space-usage' => j3 ($eq), ]; $xj['.cache-sensitive-hash']=md5 ( $xj['tag'] . serialize ($kj) . $xj['alias'] ); $d = array ( 'body-uploads-enabled?' => t3 ($eq), 'title' => $_strings['pt--tag-edit'] .': '. $yr['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $xj, 'uploads' => $kj, 'related-delete-href' => jv ('e2m_tag_delete', array ('*tag' => $yr)), ); return $d; } function e2m_tag_flag_ajax ($parameters){ s ([ 'flag-name' => 'tag', 'candy-name' => 'e2m_tag_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ cf ($parameters); }, ]); } function cf ($parameters){ if(array_key_exists ('*tag',$parameters)) { $yr = $parameters['*tag']; } if (!$yr) return e2_error404_mode (); e2_drop_caches_for_tag_($yr['ID']); nn ('Keywords', array ( 'ID' => $yr['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); return true; } function e2m_tag_delete ($parameters = array()) { global$_strings; if(array_key_exists ('*tag',$parameters)) { $yr = $parameters['*tag']; } if (!$yr) return e2_error404_mode (); $ej = array ( '.tag-id' => $yr['ID'], '.token' => q2 (), 'caution-text' => e2l_get_string ('gs--tag-will-be-deleted-notes-remain', array ( 'tag' => htmlspecialchars ($yr['Keyword'],ENT_COMPAT,HSC_ENC) )), 'tag' => htmlspecialchars ($yr['Keyword'],ENT_COMPAT,HSC_ENC), 'form-action' => jv ('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ); $d = array ( 'title' => $_strings['pt--tag-delete'] .': '. $yr['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $ej, ); return $d; } function e2m_untagged ($parameters = []) { global$settings,$_strings,$_config; $pe = r2 (); $untaggedView = new AePageableNotesView ('e2m_untagged',$parameters); $untaggedView -> setPortionSize ($settings['appearance']['notes_per_page']); $untaggedView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $untaggedView -> setWantPaging (true); $untaggedView -> setWantNewCommentsCount ($pe); $untaggedView -> setWantReadHrefs ($_config['count_reads']); $untaggedView -> setWantControls ($pe and !@$_config['read_only']); $untaggedView -> setWantHiddenTags ($pe); $mj = ( "FROM `". $_config['db_table_prefix']."Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished`=1 ". "AND nk.`SubsetID` IS NULL ". tm ($pe) ); $untaggedView -> setSQLCountRequest ( "SELECT COUNT(*) Total ". $mj ); $untaggedView -> setLimitlessSQLRequest ( "SELECT n.* ". $mj ." ORDER BY n.`Stamp` DESC" ); $g6 = $_strings['pt--posts-without-tags']; if($parameters['page']>1){ $g6 .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $d = [ 'title' => $g6, 'heading' => $_strings['pt--posts-without-tags'], 'notes' => $untaggedView -> getNotesCTree (), 'pages' => $untaggedView -> getPagesCTree (), ]; if($untaggedView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-posts-without-tags']; } elseif (!$untaggedView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function e2s_tag_edit () { global$_strings,$_config; z2 (); $rj = $am = $vn = $it = ''; if(array_key_exists ('tag-id',$_POST)) $rj = $_POST['tag-id']; if(array_key_exists ('tag',$_POST)) $am = $_POST['tag']; if(array_key_exists ('page-title',$_POST)) $dj = trim ($_POST['page-title'],"\r\n"); if(array_key_exists ('description',$_POST)) $vn = trim ($_POST['description'],"\r\n"); if(array_key_exists ('summary',$_POST)) $kt = trim ($_POST['summary'],"\r\n"); if(array_key_exists ('urlname',$_POST)) $it = trim ($_POST['urlname'],"\r\n"); if(array_key_exists ('cache-sensitive-hash',$_POST)) { $tj = $_POST['cache-sensitive-hash']; $jj = md5 ($am . $it); } $xt = vn ('Notes'); if(stripos($xt['Collation'],'utf8mb4')!==0){ $am = nb ($am); $dj = nb ($dj); $vn = nb ($vn,true); } xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = ".((int)$rj)."", 'get tag record to update' ); $hj = en (); if(count ($hj)!=1) die; $q2 = $hj[0]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword` = '". rn ($am) ."' ". "AND (`ID` != ".((int)$rj).")", 'make sure new tag name does not conflict with existing ones' ); $hj = en (); if(count ($hj)==0){ if ($jj != $tj){ qs (); } e2_drop_caches_for_tag_($rj); $q2['ID'] = ((int)$rj); $q2['Keyword']=$am; $q2['PageTitle']=$dj; $q2['Description']=$vn; $q2['Summary']=$kt; $ya = g3 ( 'neasden',$q2['Description'],'full' ); if(count ($ya)>0){ eb ($ya); rb ($ya); } nn ('Keywords',$q2); $cx = cm ( 'set','t',$q2['ID'],$it ); c (jv ('e2m_tag', array ('tag-alias' => $cx))); } else { mv ($_strings['er--cannot-rename-tag'],E2E_USER_ERROR); v (); } die; } function e2s_tag_delete () { global$_config; z2 (); $rj = ((int)$_POST['tag-id']); qs (); e2_drop_caches_for_tag_($rj); xn ( "DELETE FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $rj, 'delete note by ID' ); xn ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 't' ". "AND `EntityID` = ". ((int)$rj), 'delete aliases after deleting note' ); xn ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID`=". $rj, 'delete tag bindings after deleting tag' ); c (jv ('e2m_tags')); } function vf ($gj){ global$_current_tags,$_config; $wj = null; if(CACHE_FAVTAGS and is_file (CACHE_FILENAME_FAVTAGS)) { $wj = @unserialize (file_get_contents (CACHE_FILENAME_FAVTAGS)); } if (!is_array ($wj)) { try { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsFavourite`=1 ORDER BY `Keyword`", 'get favorite tags for tags menu' ); $uj = en (); $wj = array (); foreach ($uj as $q2){ $ij['tag']=htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC); $ij['href']=jv ( 'e2m_tag', array ('*tag' => $q2) ); $ij['visible?'] = (bool)$q2['IsVisible']; $wj[] = $ij; } if(CACHE_FAVTAGS)m3 (CACHE_FILENAME_FAVTAGS,serialize ($wj)); } catch (AeMySQLException $e){ kv ($e); if(Log::$cy)__log ('Count not get tags menu from database'); } } if (!is_array ($wj)) return null; $oj = false; if (!empty ($_current_tags)) { foreach ($wj as $t => $xf){ $wj[$t]['current?']=in_array ($wj[$t]['tag'],$_current_tags); if ($wj[$t]['current?']) { $oj = true; $pj = $gj; $pj['flag']='IsFavourite'; $pj['value']=0; if (r2 ()) { $wj[$t]['pinnable?']=true; $wj[$t]['pinned?']=true; $wj[$t]['pinned-toggle-href'] = ( jv ('e2m_tag_flag_ajax',$pj) ); } } } } if (r2 ()) { if (!$oj and array_key_exists ('*tag',$gj)) { $ch = $gj; $ch['flag']='IsFavourite'; $ch['value']=1; $vh = [ 'tag' => htmlspecialchars ($gj['*tag']['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv ('e2m_tag',$gj), 'visible?' => (bool)$gj['*tag']['IsVisible'], 'current?' => true, 'pinnable?' => true, 'pinned?' => false, 'pinned-toggle-href' => jv ('e2m_tag_flag_ajax',$ch), ]; $wj[] = $vh; } } return $wj; } function bf ($lx){ global$_config; $s2 = array (); xn ( "SELECT k.* ". "FROM `". $_config['db_table_prefix']."Keywords` k, ". "`". $_config['db_table_prefix']."NotesKeywords` nk ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID`=". ((int)$lx) ." ". "AND k.`ID`=nk.`KeywordID` ". "ORDER BY `Keyword`", 'get tag records for note by id' ); $s2 = en (); return $s2; } function yf ($bh){ global$_config; $yh = array (); foreach (array ( 'ID', 'NoteID', 'KeywordID', ) as $vk) if(array_key_exists ($vk,$bh)) { $ck[] = '`'. $vk .'`'."='". rn ($bh[$vk]) ."'"; if ($vk == 'ID')$nh = 'tagbinging-id'; if ($vk == 'NoteID')$nh = 'tagbinging-note-id'; if ($vk == 'KeywordID')$nh = 'tagbinging-tag-id'; $yh[$nh]=$bh[$vk]; } $bf = ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND ". implode (' AND ',$ck) ); xn ($bf); } function nf ($rj,$mh){ global$_config; xn ( "SELECT `ID`, `Keyword`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] ."Keywords` k ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND k.`ID` IN (". "SELECT `KeywordID` FROM (". "SELECT COUNT(`NoteID`) NotesCount, `KeywordID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID` IN (". "SELECT nk2.`NoteID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk2 ". "WHERE nk2.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk2.`KeywordID`=". $rj. ") ". "GROUP BY nk.`KeywordID` ". "HAVING NotesCount > 1 ". "ORDER BY NotesCount DESC ". "LIMIT 1, ". $mh. ") k_ids". ")", 'find related tags' ); $fj = []; foreach (en () as $q2){ if ($q2['ID']===$rj) continue; $fj[] = [ 'name' => htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv ('e2m_tag', array ('*tag' => $q2)), 'visible?' => true, ]; } return $fj; } function mf ($am){ @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_FULL); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_TAGS_AUTHOR_FULL); un (true); $q2 = array ( 'Keyword' => $am, 'OriginalAlias' => cm ('find','','',$am), 'Description' => '', ); $q2 = yn ('Keywords',$q2); $fh = cm ( 'set','t',$q2['ID'],$am ); if ($fh != $q2['OriginalAlias']) { $q2['OriginalAlias']=$fh; nn ('Keywords',$q2); } return $q2['ID']; } function ff ($parameters){ if (($dh = df ()) === null) return []; $ee['each']=$dh; if(count ($ee['each']) > 0){ $ee['href']=jv ('e2m_tags'); } if (($sh = vf ($parameters)) !== null){ $ee['menu-each']=$sh; } return $ee; } function df ($ah = false){ global$_config; $pe = r2 (); $b5 = CACHE_FILENAME_TAGS; if ($pe)$b5 = CACHE_FILENAME_TAGS_AUTHOR; if ($ah){ $b5 = CACHE_FILENAME_TAGS_FULL; if ($pe)$b5 = CACHE_FILENAME_TAGS_AUTHOR_FULL; } $qh = null; if(CACHE_TAGS and is_file ($b5)) { $qh = @unserialize (file_get_contents ($b5)); } if (!is_array ($qh)) { try { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY `Keyword`", 'get all tags' ); $lh = array (); foreach (en () as $q2){ $am['id'] = (int)$q2['ID']; $am['tag']=htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC); $am['favourite?'] = (bool)$q2['IsFavourite']; $am['visible?'] = (bool)$q2['IsVisible']; $am['notes-count']=0; $am['last-used']=0; $am['freshness']=0; $am['weight']=0; if ($ah){ $am['href']=jv ('e2m_tag', array ('*tag' => $q2)); } $lh[$q2['ID']] = $am; } xn ( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix']."NotesKeywords` nk, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". tm ($pe). "AND nk.`NoteID` = n.`ID` ". "GROUP BY nk.KeywordID", 'get tags ordering info' ); $zh = 0; $kh = 0; $xh = 0; foreach (en () as $eh){ $ij =& $lh[$eh['KeywordID']]; $ij['notes-count']=$eh['Count']; if (@$ij['last-used']<$eh['LastUsed']) { $ij['last-used']=$eh['LastUsed']; $rh = (time () - $ij['last-used']) / SECONDS_IN_A_YEAR; $ij['freshness']=pow (1/2,$rh); } $zh = max ($zh,$ij['notes-count']); $kh = max ($kh,$ij['freshness']); $xh = max ($xh,$ij['notes-count']*$ij['freshness']); } $qh = array (); foreach ($lh as $r => $xf){ if (!$pe and $xf['notes-count']==0) continue; $th = mb_strtolower ($xf['tag']); $qh[$th]=$xf; if ($kh != 0){ $qh[$th]['freshness']=$xf['freshness']/$kh; } else { $qh[$th]['freshness']=0; } if ($xh != 0){ $qh[$th]['weight'] = ( $xf['freshness']*$xf['notes-count']/$xh ); } else { $qh[$th]['weight']=0; } if ($qh[$th]['favourite?'])$qh[$th]['weight']=1; } if(CACHE_TAGS)m3 ($b5,serialize ($qh)); } catch (AeMySQLException $e){ kv ($e); if(Log::$cy)__log ('Could not get tags from database'); } } return $qh; } function sf ($yr){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". rn ($yr) ."'", 'get tag by name' ); $t = en (); if (isset ($t[0])) { return $t[0]; } else { return null; } } function af ($jh){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias`='".rn ($jh)."'", 'get tag by legacy urlname name' ); $ib = en (); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function qf ($is){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`='".((int)$is)."'", 'get tag by id' ); $ib = en (); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function e2_tagrecs_with_parameters_($parameters){ $hh = array (); if (@$parameters['tag-alias'] or $parameters['tag-alias']==='0'){ $hh = explode (',',$parameters['tag-alias']); } $s2 = array (); foreach ($hh as $jh) if ($jh or $jh === '0'){ if ( $mt = pn (@$jh) and ($mt['type']=='t') and ($q2 = qf ($mt['id'])) ) { $s2[] = $q2; } else { if ($gh = af ($jh)) { $s2[] = $gh; } } } return $s2; } function zf () { global$full_blog_url; static $wh; $rm = o2 (); if (empty ($wh)) { $wh = md5 ($full_blog_url .'email'. $rm); } return $wh; } function kf () { global$full_blog_url; static $uh; $rm = o2 (); if (empty ($uh)) { $uh = md5 ($full_blog_url .'nospam'. $rm . date ('n-Y')); } return $uh; } function xf () { global$full_blog_url; static $ih; $rm = o2 (); if(empty($ih)) { $ih = md5 ($full_blog_url .'nospam'. $rm . date ('n-Y',strtotime('-1 month'))); } return $ih; } function ef ($lx){ global$full_blog_url; $rm = o2 (); return b ('comment_'. md5 ($full_blog_url .'nospam_cookie'. $rm . $lx)); } function rf () { global$full_blog_url; $oh = $_SERVER['HTTP_USER_AGENT']; $rm = o2 (); return md5 ($full_blog_url .'nospam_cookie'. $rm . $oh); } function tf () { if ( array_key_exists ('email',$_POST) and $_POST['email']!=='' ) return true; $uh = kf (); $ih = xf (); if ( !array_key_exists ($uh,$_POST) and !array_key_exists ($ih,$_POST) ) return true; if ( ( array_key_exists ($uh,$_POST) and $_POST[$uh]!=='' ) or ( array_key_exists ($ih,$_POST) and $_POST[$ih]!=='' ) ) return true; if ( !array_key_exists ('comment',$_POST) or (strlen ($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($lx){ if ( !array_key_exists (ef ($lx),$_COOKIE) or ($_COOKIE[ef ($lx)] !== rf ()) ) return true; return false; } function e2m_comment ($parameters = array ()) { c (jv ('e2m_note',$parameters)); } function e2m_comment_edit ($parameters = array ()) { return hf ('edit',$parameters); } function hf ($u6,$parameters = array ()) { global$_config,$_strings,$full_blog_url; $g6 = $i6 = $_strings['pt--new-comment']; $ph = 'new'; if ($u6 == 'edit'){ $k6 = e2_commentrec_with_parameters_($parameters); $sr = $_strings['fb--save-changes']; $n2 = $k6['noterec']; $g6 = $i6 = $_strings['pt--edit-comment']; $c8 = wf ($n2,$k6,$parameters['comment-number']); if (!$k6){ return e2_error404_mode (); } $v8 = array ( '.note-id' => $k6['NoteID'], '.comment-id' => $k6['ID'], '.comment-number' => $parameters['comment-number'], '.already-subscribed?' => false, '.gip' => $k6['GIP'], '.token' => q2 (), 'create:edit?' => false, 'form-action' => jv ('e2s_comment_process'), 'submit-text' => $sr, 'show-subscribe?' => true, 'subscribe?' => (bool)$k6['IsSubscriber'], 'name' => htmlspecialchars ($k6['AuthorName'],ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars ($k6['AuthorEmail'],ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars ($k6['Text'],ENT_COMPAT,HSC_ENC), 'email-field-name' => zf (), ); if ('' != trim ($k6['IP'])) { $v8['ip']=$k6['IP']; } } $d = array ( 'title' => $g6, 'heading' => $i6, 'form' => 'form-comment', 'form-comment' => $v8, ); if (!empty ($c8)) { $d['comments'] = array ('each' => array ('only' => $c8)); } return $d; } function e2m_comment_reply ($parameters = array ()) { global$_strings; $k6 = e2_commentrec_with_parameters_($parameters); if (!$k6){ return e2_error404_mode (); } $n2 = $k6['noterec']; $c8 = wf ($n2,$k6,$parameters['comment-number']); $c8['replying?'] = (bool)true; $b8 = ($k6['Reply']=='' or !$k6['IsReplyVisible']); $g6 = $b8? $_strings['pt--reply-to-comment']:$_strings['pt--edit-reply-to-comment']; $y8 = array ( '.note-id' => $n2['ID'], '.comment-id' => $k6['ID'], '.reply-action' => $b8? 'new' : 'edit', '.token' => q2 (), 'form-action' => jv ('e2s_comment_edit_reply'), 'submit-text' => $b8? $_strings['fb--publish']:$_strings['fb--save-changes'], 'create:edit?' => (bool) ($b8), 'reply-text' => htmlspecialchars ($k6['Reply'],ENT_COMPAT,HSC_ENC), 'emailing-possible?' => MAIL_ENABLED, 'mail-back?' => (bool) ($b8), ); return array ( 'title' => $g6, 'heading' => $g6, 'comments' => array ('each' => array ('only' => $c8)), 'form' => 'form-comment-reply', 'form-comment-reply' => $y8, ); } function e2m_comment_delete ($parameters = array ()) { global$_config; $k6 = e2_commentrec_with_parameters_($parameters); $lx = $k6['NoteID']; if (!$k6){ return e2_error404_mode (); } e2_drop_caches_for_note_($lx,true); @unlink (USER_FOLDER. '/last-comment.psa'); xn ( "DELETE FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$k6['ID']). "'" ); v (); } function e2m_comment_reply_delete ($parameters = array ()) { global$_strings,$settings,$_config; $k6 = e2_commentrec_with_parameters_($parameters); if (!$k6){ return e2_error404_mode (); } xn ( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$k6['ID']) ); v (); } function e2m_unsubscribe ($parameters){ global$_strings,$_config; $n8 = "ORDER BY `ID` DESC"; $m8 = false; $n2 = $parameters['*note']; $lx = $n2['ID']; $z3 = $parameters['unsubscribe-email']; $f8 = $parameters['unsubscribe-key']; $z3 = str_replace (' ','+',$z3); if ($lx){ xn ( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $lx ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`='". rn ($z3) ."' ". $n8, 'get subscriber’s comments ids' ); $e1 = en (); if(count ($e1)<1) { $d['unsubscribe']['error-message']=$_strings['gs--you-are-not-subscribed']; } else { $x6 = @$e1[0]; $d8 = md5 ($x6['ID'].$x6['Stamp'] .'x'); if ($f8 == $d8){ xn ( "UPDATE `". $_config['db_table_prefix']."Comments` ". "SET `IsSubscriber`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $lx ." ". "AND `AuthorEmail` = '". rn ($z3). "'", 'unsubscribe' ); $m8 = true; $d['unsubscribe']['note-title']=h3 ( htmlspecialchars ($n2['Title'],ENT_COMPAT,HSC_ENC) ); $d['unsubscribe']['note-href']=jv ( 'e2m_note', array ('*note' => $n2) ); } if (!$m8){ $d['unsubscribe']['error-message']=$_strings['gs--unsubscription-didnt-work']; } } } else { $d['unsubscribe']['error-message']=$_strings['gs--post-not-found']; } if ($m8){ $g6 = $_strings['pt--unsubscription-done']; } else { $g6 = $_strings['pt--unsubscription-failed']; } $d['unsubscribe']['success?']=$m8; $d['title']=$g6; $d['heading']=$g6; return $d; } function e2m_comment_flag ($parameters){ gf ($parameters); c (jv ('e2m_note',$parameters)); } function e2m_comment_flag_ajax ($parameters){ s ([ 'flag-name' => 'comment', 'candy-name' => 'e2m_comment_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ gf ($parameters); }, ]); } function gf ($parameters){ $k6 = e2_commentrec_with_parameters_($parameters); $lx = $k6['NoteID']; if ($k6){ nn ('Comments', array ( 'ID' => $k6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); e2_drop_caches_for_note_($lx,true); } } function e2s_comment_process () { global$_strings,$_fp_error; z2 (); if (($s8 = f2 ()) !== false){ list ($lx,$ph,$a8)=$s8; } else { return e2_error404_mode (); } if(Log::$cy)__log ('Comments: processed, noteid <'. $lx .'>, commentid <'. $ph .'>'); if (!$ph){ $q8 = ''; if($_fp_error == FP_NOT_COMMENTABLE){ mv ($_strings['er--post-not-commentable'],E2E_USER_ERROR); } elseif($_fp_error == FP_EMPTY_FIELD){ mv ($_strings['er--name-email-text-required'],E2E_USER_ERROR); } elseif($_fp_error == FP_COMMENT_TOO_LONG){ $l8 = $_strings['gs--comment-too-long']; $q8 = $_strings['gs--comment-too-long-description']; } elseif($_fp_error == FP_COMMENT_DOUBLE_POST){ $l8 = $_strings['gs--comment-double-post']; $q8 = $_strings['gs--comment-double-post-description']; } elseif($_fp_error == FP_COMMENT_SPAM_SUSPECT){ $l8 = $_strings['gs--comment-spam-suspect']; $q8 = $_strings['gs--comment-spam-suspect-description']; } elseif($_fp_error == FP_NO_ID_OR_NEW){ mv ($_strings['er--error-occurred'].' (FP_NO_ID_OR_NEW)'); } else { mv ($_strings['er--error-occurred'].' (FP '. $_fp_error .')'); } if ($q8){ $d['title']=$l8; $d['heading']=$l8; $d['form']='form-unaccepted-comment'; $d['form-unaccepted-comment'] = array ( 'reason' => $q8, 'text' => @htmlspecialchars ($a8['text'],ENT_COMPAT,HSC_ENC), ); return $d; } } if ($lx){ c (jv ('e2m_note', array ('*note' => mm ($lx)))); } else { c (); } die; } function e2s_comment_edit_reply () { global$_config; z2 (); $z8 = @$_POST['text']; if(trim ($z8)=='')$z8 = ''; $lx = @$_POST['note-id']; $n2 = mm ($lx); $ph = @$_POST['comment-id']; $k6 = uf ($ph); $k8 = isset ($_POST['mail-back']); $x8 = time (); if (@$_POST['reply-action']=='new'){ $e8 = time (); } @unlink (e2_note_cache_filename_with_id_($lx .'-comments')); @unlink (e2_note_cache_filename_with_id_($lx .'-comments-author')); if ($k6){ xn ( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='". rn ($z8) ."', ". ( isset ($e8)? ( "`ReplyStamp`='". $e8 ."', " ) : ( "" ) ). "`ReplyLastModified`='". $x8 ."', ". "`IsReplyVisible`='1' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$ph), 'update comment reply' ); $v6 = jv ('e2m_note', array ('*note' => $n2)); if ($k8 and $z8 != ''){ $ij['comment-time'] = array ($k6['Stamp'],ay ()); $ij['commenter']=$k6['AuthorName']; $ij['commenter-email']=$k6['AuthorEmail']; $ij['comment-text']=$k6['Text']; $ij['note-title']=h3 ($n2['Title']); $ij['reply-time'] = array (time (), ay ()); $ij['blog-author']=nd (); $ij['note-href']=$v6; $ij['comment-href']=$v6; $ij['reply-text']=$z8; if(1){ $r8 = a1 ( 'comment-reply',$ij ); $t8 = e2l_get_string ( 'em--comment-reply', $ij ); $j8 = $k6['AuthorEmail']; $h8 = 'From: '. q1 (); l1 ($j8,$t8,$r8,$h8); } if(1){ unset ($ij['commenter-email']); $h8 = 'From: '. q1 (); foreach (y2 ($n2,$k6['AuthorEmail']) as $g8){ $w8 = $g8['AuthorEmail']; $u8 = md5 ($g8['ID'].$g8['Stamp'].'x'); $ij['unsubscribe-href']=jv ('e2m_unsubscribe', array ( '*note' => $n2, 'unsubscribe-email' => $w8, 'unsubscribe-key' => $u8, ) ); $j8 = $w8; $r8 = a1 ('comment-reply-to-public',$ij); $t8 = e2l_get_string ( 'em--comment-reply-to-public-subject', $ij ); l1 ($j8,$t8,$r8,$h8); } } } c ($v6); } else { v (); } die; } function wf ($n2,$x6,$wv){ global$_config,$full_blog_url; if(Log::$cy)__log ('Package comment '. $x6['ID'] .'...'); if ($n2 === null){ $n2 = mm ($x6['NoteID']); } $ij['number']=$wv; $i8 = !empty ($x6['IsGIPUsed']); $ij['gip-used?']=$i8; $ij['gip']=$ij['gip-used?']?$x6['GIP']:''; $ij['name']=htmlspecialchars ($x6['AuthorName'],ENT_NOQUOTES,HSC_ENC); $ij['userpic-set?']=false; if ($i8){ $o8 = AVATARS_FOLDER . $x6['GIP'] .'-'. $x6['GIPAuthorID'] .'.jpg'; if(is_file (MEDIA_ROOT_FOLDER . $o8)) { $ij['userpic-set?']=true; $ij['userpic-href']=$full_blog_url .'/'. $o8; } } $ij['name-href']=''; if ( $i8 and $p8 = e2_get_user_profile_url ( $x6['GIP'],$x6['GIPAuthorID'],$x6['AuthorProfileLink'] ) ) { $ij['name-href']=$p8; } if (r2 ()) { $ij['email']=htmlspecialchars ($x6['AuthorEmail'],ENT_NOQUOTES,HSC_ENC); if ('' != trim ($x6['IP'])) { $ij['ip']=$x6['IP']; } } $ij['author-name']=nd (); $ij['important?'] = (bool)$x6['IsFavourite']; $ij['reply-visible?'] = (bool) ($x6['IsVisible'] && $x6['IsReplyVisible']); $ij['reply-important?'] = (bool)$x6['IsReplyFavourite']; $ij['spam-suspect?'] = (bool)$x6['IsSpamSuspect']; $cg = array ((int)$x6['Stamp'],dy ($n2)); $ij['time']=$cg; $ij['last-modified']=$cg; if ($x6['LastModified']) $ij['last-modified'] = array ((int)$x6['LastModified'],dy ($n2)); if ($x6['ReplyStamp']) $ij['reply-time'] = array ((int)$x6['ReplyStamp'],dy ($n2)); if ($x6['ReplyLastModified']) $ij['reply-last-modified'] = array ((int)$x6['ReplyLastModified'],dy ($n2)); if (r2 ()) { $ij['subscriber?'] = (bool)$x6['IsSubscriber']; $ij['new?'] = (bool)$x6['IsNew']; $ij['first-new?']=false; if (!@$_config['read_only']) { if ($x6['IsFavourite']) { $ij['important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ('*note' => $n2,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 0) ); } else { $ij['important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ('*note' => $n2,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 1) ); } if ($x6['IsReplyFavourite']) { $ij['reply-important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 0 ) ); } else { $ij['reply-important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 1 ) ); } $ij['edit-href']=jv ( 'e2m_comment_edit', array ('*note' => $n2,'comment-number' => $wv) ); $ij['removed-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => !$x6['IsVisible'] ) ); $ij['removed-reply-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => !$x6['IsVisible'] ) ); $ij['removed-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 0 ) ); $ij['removed-reply-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 0 ) ); $ij['replaced-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 1 ) ); $ij['replaced-reply-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 1 ) ); $vg = jv ( 'e2m_comment_reply', array ('*note' => $n2,'comment-number' => $wv) ); if ($x6['Reply']=='' or !$x6['IsReplyVisible']) { $ij['reply-href']=$vg; } else { $ij['edit-reply-href']=$vg; } } } if(mb_strlen ($x6['Text']) > $_config['max_comment_length']) { $x6['Text']=mb_substr ($x6['Text'],0,$_config['max_comment_length']); } $bg = $n2['FormatterID']==='raw' ? 'neasden' : $n2['FormatterID']; $t1 = u3 ($bg,$x6['Text'],'simple'); $ij['text']=$t1['text-final']; $ij['reply']=''; $ij['replying?'] = (bool)false; $ij['replied?'] = (bool) ( (trim ($x6['Reply']) != '') && ($x6['IsReplyVisible']) ); if ((string)$x6['Reply']!==''){ $t1 = u3 ($n2['FormatterID'],$x6['Reply'],'full'); $ij['reply']=$t1['text-final']; } if(Log::$cy)__log ('Comments: done'); return $ij; } function uf ($is){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $is ."'" ); $ib = en (); if(count ($ib)>0){ return $ib[0]; } else { return false; } } function if_ ($nl){ global$_strings,$settings; $yg = @$_COOKIE[b ('commenter_name')]; $ng = @$_COOKIE[b ('commenter_email')]; $mg = @$_COOKIE[b ('commenter_ph')]; $fg = false; if ($ng and $mg){ foreach (y2 ($nl) as $g8){ $d8 = md5 ($g8['ID'].$g8['Stamp'] .'x'); if ( $g8['AuthorEmail']==$ng and $mg == $d8 ) { $fg = true; break; } } } $sr = $_strings['fb--submit']; $uh = kf (); $v8 = array ( '.note-id' => $nl['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool)$fg, '.token' => q2 (), 'cookie-name' => ef ($nl['ID']), 'cookie-value' => rf (), 'email-field-name' => zf (), 'nospam-field-name-part-1' => substr ($uh,0,4), 'nospam-field-name-part-2' => substr ($uh,4), 'create:edit?' => true, 'form-action' => jv ('e2s_comment_process'), 'submit-text' => $sr, 'show-subscribe?' => (bool) !$fg, 'emailing-possible?' => MAIL_ENABLED, 'subscribe?' => (bool)$fg, 'subscription-status' => $fg? $_strings['gs--you-are-already-subscribed']:'', 'name' => htmlspecialchars ($yg,ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars ($ng,ENT_COMPAT,HSC_ENC), 'text' => '', 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => array (), ); $dg = false; $sg = ''; foreach(e2_list_gips () as $ag){ if (!is_file (SYSTEM_FOLDER .'gips/'. $ag .'.json')) { continue; } $qg = e2_is_logged_in ($ag); $v8['gips'][$ag] = ( e2_get_gip_auth_url ($ag) ); if ($qg){ $dg = true; $lg = e2_get_gip_session ($ag); $sg = $lg['GIP']; $v8['name']=htmlspecialchars ( $lg['AuthorName'],ENT_COMPAT,HSC_ENC ); } } if (!$v8['email-comments-enabled?'] and !count ($v8['gips'])) { return false; } $v8['email-comments-only?'] = (count ($v8['gips']) === 0); $v8['logged-in?']=$dg; $v8['logged-in-gip']=$sg; $v8['logout-url']=$dg ? jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $v8; } function of ($lx){ return c2 ($lx,'`IsNew` = 1'); } function pf ($lx){ return c2 ($lx,'`IsVisible` = 1'); } function c2 ($lx,$b){ global$_config; if (!is_numeric ($lx)) return 0; $zg = 0; xn ( "SELECT count(*) ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $lx ." ". "AND (". $b. ")", 'count comments' ); $e1 = en (); $e1 = (int)$e1[0]['count(*)']; $zg = $e1; return (int)$zg; } function v2 () { global$_config; if(Log::$cy)__log ('Count new comments'); $kg = 0; $xg = ''; $uq = ''; try { xn ( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsNew`=1 ORDER BY `Stamp` DESC", 'count new comments for author menu' ); $e1 = en (); $kg = count ($e1); while ($kg-- > 0){ if ($n2 = mm ($e1[$kg]['NoteID'])) { $uq = jv ('e2m_note', ['*note' => $n2]); break; } } $kg ++; } catch (AeMySQLException $e){ kv ($e); if(Log::$cy)__log ('Could not count new comments or provide link to the latest one'); } return array ((int)$kg,$xg,$uq); } function b2 ($lx){ global$_config; if(Log::$cy)__log ('Comments: getting comments for note '. $lx); xn ( "SELECT c.*, g.`AuthorProfileLink` ". "FROM `". $_config['db_table_prefix']."Comments` c ". "LEFT JOIN `". $_config['db_table_prefix']."GIPsSessions` g ". "ON c.`SubsetID`=g.`SubsetID` ". "AND c.`GIP`=g.`GIP` ". "AND c.`GIPAuthorID`=g.`GIPAuthorID` ". "WHERE c.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$lx . " ". "ORDER BY `Stamp`", 'get comments including deleted' ); $e1 = en (); return $e1; } function y2 ($n2,$eg = ''){ global$_config; $n8 = "ORDER BY `ID` DESC"; $d = $rg = []; xn ( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `IsVisible`, ". "`AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$n2['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `IsVisible`=1 ". "AND `AuthorEmail`!='". rn ($eg) ."' ". $n8, 'get subscribers by note' ); $e1 = en (); foreach ($e1 as $g8){ if (!in_array ($g8['AuthorEmail'],$rg)) { $d[] = $g8; } $rg[] = $g8['AuthorEmail']; } return $d; } function n2 ($n2,$bt = NOTE_COMMENTABLE_NOW){ global$settings,$_config; $tg = true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($n2['Stamp']<time () - $_config['comment_freshness_days']*SECONDS_IN_A_DAY) $tg = false; $jg = $n2['IsCommentable']; if ($bt == NOTE_COMMENTABLE_NOW_CONDITIONALLY){ $jg = true; } return ( rm ($n2)==='public' and $tg and $jg ); } function e2_commentrec_with_parameters_($parameters = array ()) { $n2 = $parameters['*note']; $l6 = b2 ($n2['ID']); $k6 = @$l6[$parameters['comment-number']-1]; if ($k6){ $k6['noterec']=$n2; return $k6; } } function f2 () { global$settings,$_config,$_fp_error; $_fp_error = false; $wh = zf (); $lx = $ph = $name = $z3 = $tv = ''; if(array_key_exists ('note-id',$_POST)) $lx = trim (@$_POST['note-id']); if(array_key_exists ('comment-id',$_POST)) $ph = trim (@$_POST['comment-id']); if(array_key_exists ('comment-number',$_POST)) $wv = trim (@$_POST['comment-number']); if(array_key_exists ('name',$_POST)) $name = trim (@$_POST['name']); if(array_key_exists ($wh,$_POST)) $z3 = trim (@$_POST[$wh]); if(array_key_exists ('text',$_POST)) $tv = trim (@$_POST['text']); if ($ph != 'new' and !r2 ()) { return false; } $hg = vn ('Comments'); if(stripos ($hg['Collation'],'utf8mb4')!==0){ $name = nb ($name); $tv = nb ($tv); } if ($ph == 'new'){ $gg = e2_get_logged_gip_name (); if ($gg){ $lg = e2_get_gip_session ($gg); $name = trim ($lg['AuthorName']); $z3 = ''; $wg = $lg['GIPAuthorID']; } } else { if(array_key_exists ('gip',$_POST))$gg = trim (@$_POST['gip']); } $ug = ( (array_key_exists ('already-subscribed',$_POST) and $_POST['already-subscribed']) or (array_key_exists ('subscribe',$_POST) and $_POST['subscribe']) ); $ig = time (); $a8['text']=$tv; if ($ph == 'new' and !$gg){ y ('commenter_name',$name); y ('commenter_email',$z3); } $og = ($ph == 'new' and ( tf () or e2_cookie_data_is_spam_suspicios_for_note_id_($lx) )); $pg = 1; $e1 = false; if (!is_numeric ($lx)) { $_fp_error = FP_NO_ID_OR_NEW; } elseif (!is_numeric ($ph) and !($ph == 'new')) { $_fp_error = FP_NO_ID_OR_NEW; } else { if ( $tv == '' or ( !$gg and ($name == '' or $z3 == '') ) ) { $_fp_error = FP_EMPTY_FIELD; } if ($ph == 'new'){ $cw = @unserialize (file_get_contents (USER_FOLDER. '/last-comment.psa')); if(md5 ($name . $z3 . $tv)==$cw['md5']) { $_fp_error = FP_COMMENT_DOUBLE_POST; } if ( isset ($_config['max_comment_length']) and strlen (@$_POST['text']) > ($_config['max_comment_length']) ) { $_fp_error = FP_COMMENT_TOO_LONG; } $n2 = mm ($lx); if ($ph == 'new' and !n2 ($n2)) { $_fp_error = FP_NOT_COMMENTABLE; } if ($og){ $_fp_error = FP_COMMENT_SPAM_SUSPECT; } } } if (!$_fp_error){ e2_drop_caches_for_note_($lx,true); if ($ph == 'new'){ $k6 = array ( 'NoteID' => (int)$lx, 'AuthorName' => $name, 'AuthorEmail' => $z3, 'Text' => $tv, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int)$ug, 'IsSpamSuspect' => (int)$og, 'IsNew' => (int)$pg, 'Stamp' => (int)time (), 'LastModified' => (int)time (), 'IP' => rn (k2 ()), 'IsGIPUsed' => intval (!empty ($gg) && !empty ($wg)), 'GIP' => !empty ($gg)?rn ($gg):'', 'GIPAuthorID' => !empty ($wg)?rn ($wg):'', ); $k6 = yn ('Comments',$k6); $ph = $k6['ID']; $cw = array ( 'id' => $ph, 'md5' => md5 ($name . $z3 . $tv), ); @m3 (USER_FOLDER. 'last-comment.psa',serialize ($cw)); $e1 = (int)$ph; $vw = md5 ($k6['ID'].$k6['Stamp'].'x'); y ('commenter_ph',$vw); $n2 = mm ($lx); $v6 = jv ('e2m_note', array ('*note' => $n2)); $ij['comment-time'] = array ($ig,ay ()); $ij['commenter']=$name; $ij['commenter-email']=$z3; $ij['comment-text']=$tv; $ij['note-title']=$n2['Title']; $ij['note-href']=$v6; $ij['comment-href']=$v6; $ij['comments-disable-href']=jv ('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 0 )); $ij['reply-href']=jv ( 'e2m_comment_reply', array ( '*note' => $n2, 'comment-number' => $wv ) ); if (isset ($settings['author_email']) and @$settings['notifications']['new_comments']) { $r8 = a1 ( 'comment-new-to-author',$ij ); $t8 = e2l_get_string ( 'em--comment-new-to-author-subject', $ij ); $j8 = $settings['author_email']; $h8 = 'From: '. q1 () ."\r\n". 'Reply-to: '. $name .' <'. $z3 .">"; l1 ($j8,$t8,$r8,$h8); } if (!$og){ unset ($ij['commenter-email']); $h8 = 'From: '. q1 (); foreach (y2 ($n2,$z3) as $g8){ $w8 = $g8['AuthorEmail']; $u8 = md5 ($g8['ID'].$g8['Stamp'].'x'); $ij['unsubscribe-href']=jv ('e2m_unsubscribe', array ( '*note' => $n2, 'unsubscribe-email' => $w8, 'unsubscribe-key' => $u8 ) ); $j8 = $w8; $r8 = a1 ('comment-new-to-public',$ij); $t8 = e2l_get_string ( 'em--comment-new-to-public-subject', $ij ); l1 ($j8,$t8,$r8,$h8); } } } else { $bw = array ( 'ID' => $ph, 'Text' => $tv, 'IsSubscriber' => ((int)$ug), 'LastModified' => time (), ); if (!empty ($name))$bw['AuthorName']=$name; if (!empty ($z3))$bw['AuthorEmail']=$z3; nn ('Comments',$bw); $e1 = (int)$ph; } } return array ((int)$lx,$e1,$a8); } function e2m_most_commented ($parameters = []) { global$settings,$_strings,$_config; $pe = r2 (); $mostCommentedView = new AePageableNotesView ('e2m_most_commented',$parameters); $mostCommentedView -> setPortionSize ($settings['appearance']['notes_per_page']); $mostCommentedView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $mostCommentedView -> setWantNewCommentsCount ($pe); $mostCommentedView -> setWantReadHrefs ($_config['count_reads']); $mostCommentedView -> setWantControls ($pe and !@$_config['read_only']); $mostCommentedView -> setWantHiddenTags ($pe); $yw = $_config['hot_period']; $nw = time () - d2 ($_config['hot_period']); $mostCommentedView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm ($pe). "AND `ID` IN ( ". "SELECT `NoteID` FROM ( ". "SELECT `NoteID`, COUNT(*) `CommentsCount` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND `Stamp` > ". $nw . " ". "GROUP BY `NoteID` ". "ORDER BY `CommentsCount` DESC ". ") As MostCommentedNotesIDs ". ")" ); $d = [ 'title' => e2l_get_string ('pt--most-commented', ['period' => $yw]), 'heading' => e2l_get_string ('pt--most-commented', ['period' => $yw]), 'notes' => $mostCommentedView -> getNotesCTree (), 'pages' => $mostCommentedView -> getPagesCTree (), ]; if($mostCommentedView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$mostCommentedView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function e2m_favourites ($parameters = []) { global$settings,$_config,$_strings; $pe = r2 (); $favouritesView = new AePageableNotesView ('e2m_favourites',$parameters); $favouritesView -> setPortionSize ($settings['appearance']['notes_per_page']); $favouritesView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $favouritesView -> setWantPaging (true); $favouritesView -> setWantNewCommentsCount ($pe); $favouritesView -> setWantReadHrefs ($_config['count_reads']); $favouritesView -> setWantControls ($pe and !@$_config['read_only']); $favouritesView -> setWantHiddenTags ($pe); $favouritesView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `IsFavourite`=1 ". tm ($pe). "ORDER BY `Stamp` DESC" ); $g6 = $_strings['pt--favourites']; if($parameters['page']>1){ $g6 .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $d = [ 'title' => $g6, 'heading' => $_strings['pt--favourites'], 'notes' => $favouritesView -> getNotesCTree (), 'pages' => $favouritesView -> getPagesCTree (), ]; if($favouritesView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-favourites']; } elseif (!$favouritesView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function d2 ($yw){ if ('year' == $yw) return SECONDS_IN_A_YEAR; elseif ('month' == $yw) return SECONDS_IN_A_MONTH; elseif ('week' == $yw) return SECONDS_IN_A_DAY * 7; elseif ('day' == $yw) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function e2m_popular ($parameters = []) { global$settings,$_config,$_strings; $pe = r2 (); $popularView = new AePageableNotesView ('e2m_popular',$parameters); $popularView -> setPortionSize ($settings['appearance']['notes_per_page']); $popularView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $popularView -> setWantNewCommentsCount ($pe); $popularView -> setWantReadHrefs ($_config['count_reads']); $popularView -> setWantControls ($pe and !@$_config['read_only']); $popularView -> setWantHiddenTags ($pe); $yw = $_config['popular_period']; if ($yw === 'ever'){ $popularView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm ($pe). "ORDER BY `ReadCount` DESC" ); } else { $nw = time () - d2 ($_config['popular_period']); $mj = ( "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND a.`Stamp` > ". $nw ." ". "AND n.`IsPublished` = 1 ". tm ($pe). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID`" ); $popularView -> setSQLCountRequest ( "SELECT COUNT(*) Total FROM (SELECT 1 ". $mj .") _" ); $popularView -> setLimitlessSQLRequest ( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". $mj ." ". "ORDER BY `AggregateReadCount` DESC" ); } $d = [ 'title' => e2l_get_string ('pt--most-read', ['period' => $yw]), 'heading' => e2l_get_string ('pt--most-read', ['period' => $yw]), 'notes' => $popularView -> getNotesCTree (), 'pages' => $popularView -> getPagesCTree (), ]; if($popularView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$popularView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function s2 ($rj = false,$kx = []) { global$_config,$_current_url; $mw = $fw = ''; $mostReadNotesCollectionView = new AeArbitraryNotesCollectionView ('most read or most read by tag'); $mostReadNotesCollectionView -> setCurrentURL ($_current_url); $mostReadNotesCollectionView -> setFilterOutIDs ($kx); $nw = time () - d2 ($_config['popular_period']); $mostReadNotesCollectionView -> setSQLRequest ( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". $mw. "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". $fw. "AND a.`Stamp` > ". $nw ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". tm (r2 ()). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC ". "LIMIT 10" ); if ($rj === false){ if(CACHE_POPULAR){ $mostReadNotesCollectionView -> setViewExpiration (SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename (CACHE_FILENAME_POPULAR); $mostReadNotesCollectionView -> setCacheExpiresFilename (CACHE_FILENAME_POPULAR_EXPIRES); } } else { if(CACHE_POPULAR_WITH_TAG){ $mostReadNotesCollectionView -> setViewExpiration (SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename (e2_cache_filename_with_id_($rj,CACHE_FILENAMES_POPULAR_WITH_TAG)); $mostReadNotesCollectionView -> setCacheExpiresFilename ( e2_cache_filename_with_id_($rj,CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES) ); } } return$mostReadNotesCollectionView -> getNotesCTree (); } function a2 ($rj = false,$kx = []) { global$_strings; $dw = [ 'title' => $_strings['nm--most-read'], ]; $dw['each']=s2 ($rj,$kx); if ($rj){ $dw['seed']=$rj; } if(count ($dw['each']) < 7){ return []; } return $dw; } function e2m_password_reset () { global$_strings,$_superconfig,$settings; if (!is_file (USER_FOLDER. 'password-reset.psa')) { $rm = sha1 (u2 ()); $sm = jv ('e2m_password', array ('recovery-key' => $rm)); @m3 (USER_FOLDER. 'password-reset.psa',$sm); } $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; $sw = (bool) ($j8 = $settings['author_email']); $d['form']='form-password-reset-email'; $d['form-password-reset-email'] = array ( 'form-action' => jv ('e2s_password_reset_email'), 'show-controls?' => $sw, 'submit-text' => $_strings['fb--send-link-by-email'], ); if (!@$_superconfig['user_has_no_access_to_files']) { $d['form-password-reset-email']['reset-info']=$_strings['gs--password-reset-link-saved']; } elseif (!$sw){ mv ($_strings['er--cannot-reset-password']); } return $d; } function e2s_password_reset_email () { global$_strings,$settings; if($_SERVER['REQUEST_METHOD']!='POST')c (); if(array_key_exists ('email',$_POST))$z3 = trim ($_POST['email']); if (!$z3){ mv ($_strings['er--cannot-send-link-email-empty']); c (jv ('e2m_password_reset')); } $aw = @file_get_contents (USER_FOLDER. 'password-reset.psa'); if(strlen ($aw)==0){ mv ($_strings['er--error-occurred']); c (jv ('e2m_password_reset')); } if ($j8 = $settings['author_email']) { if ($z3 == $j8){ $r8 = a1 ( 'password-reset', array ('reset-href' => $aw) ); $t8 = $_strings['em--password-reset-subject']; $h8 = 'From: '. q1 (); l1 ($j8,$t8,$r8,$h8); } mv ($_strings['gs--password-reset-link-sent-maybe'],E2E_MESSAGE); c (jv ('e2m_password_reset')); } die; } function e2m_password ($parameters){ global$_strings; $qw = false; $rm = ''; if(array_key_exists ('recovery-key',$parameters)) { $rm = $parameters['recovery-key']; $sm = jv ('e2m_password', array ('recovery-key' => $rm)); $aw = @file_get_contents (USER_FOLDER. 'password-reset.psa'); if(strlen ($aw)>0){ $qw = ($sm == $aw); } } if (r2 () or $qw){ $d['title']=$_strings['pt--password']; $d['heading']=$_strings['pt--password-for-blog']; if ($qw){ $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; } $d['form']='form-password'; $d['form-password'] = array ( '.recovery-key' => $rm, '.token' => q2 (), 'form-action' => jv ('e2s_password_save'), 'recovering?' => $qw, 'submit-text' => $_strings['fb--change'], ); return $d; } else { c (); } } function e2m_sessions () { global$_strings; $lk = t2 (); $d['title']=$_strings['pt--sessions']; $d['heading']=$_strings['pt--sessions']; $lw = array (); $rm = $_COOKIE[b ('key')]; foreach ($lk['sessions'] as $t => $xf){ $lw[] = array ( 'current?' => sha1 ($rm)===$xf['key_hash'], 'opened' => array ((int)$xf['stamp'],sy ()), 'ip-address' => $xf['remote_ip'], 'source' => ($xf['remote_ip']=='127.0.0.1')? $_strings['gs--locally']:$xf['remote_ip'], 'title' => w2 ($xf['ua']), 'user-agent' => $xf['ua']? $xf['ua']:$_strings['gs--unknown'], ); } $lw = array_reverse ($lw); $d['sessions']['each']=$lw; if(count ($lw)>1){ $d['form']='form-sessions'; $d['form-sessions'] = array ( '.token' => q2 (), 'form-action' => jv ('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $d; } function e2m_sign_in () { if (r2 ()) { c (jv ('e2m_frontpage', array ('page' => 1))); } else { return array (); } } function e2m_sign_out () { global$_strings; $lk = t2 (); $zw = -1; if(array_key_exists ('sessions',$lk) and is_array ($lk['sessions'])) { foreach ($lk['sessions'] as $t => $xf){ $rm = $_COOKIE[b ('key')]; if(sha1 ($rm)===$xf['key_hash']) { $zw = $t; break; } } } if ($zw > -1) unset ($lk['sessions'][$zw]); if (!j2 ($lk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } y ('key',''); c (); } function e2s_password_save () { global$_strings; z2 (); $qw = false; $kw = trim ($_POST['old-password']); if ($rm = trim ($_POST['recovery-key'])) { $sm = jv ('e2m_password', array ('recovery-key' => $rm)); $aw = @file_get_contents (USER_FOLDER. 'password-reset.psa'); if(strlen ($aw)>0){ $qw = ($sm == $aw); } } if (x2 ($kw) or $qw){ $qk = trim ($_POST['new-password']); if ($qk != ''){ if (@m3 (USER_FOLDER. '/password-hash.psa',serialize (sha1 ($qk)))) { @unlink (USER_FOLDER. 'password-reset.psa'); mv ($_strings['gs--password-changed'],E2E_MESSAGE); c (); } else { mv ($_strings['er--could-not-change-password'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_password', array ('recovery-key' => ''))); } } else { mv ($_strings['er--no-password-entered'],E2E_USER_ERROR); c (jv ('e2m_password', array ('recovery-key' => ''))); } } else { mv ($_strings['er--wrong-password'],E2E_USER_ERROR); c (jv ('e2m_password', array ('recovery-key' => ''))); } die; } function q2 () { global$_token; if (!r2 ()) return ''; return$_token; } function l2 () { return sha1 ( $_SERVER['HTTP_USER_AGENT'].k2 () . time () . mt_rand (1000000,9999999) ); } function z2 () { global$_token; if (!r2 ()) return true; if ( !array_key_exists ('token',$_POST) or ((string)$_POST['token'] !== (string) @$_token) ) { throw new AeTokenException (); } return true; } function k2 () { $gv = $_SERVER['REMOTE_ADDR']; if(array_key_exists ('HTTP_X_FORWARDED_FOR',$_SERVER)) { $gv = array_pop (explode (',',$_SERVER['HTTP_X_FORWARDED_FOR'])); } return $gv; } function e2s_sign_in () { global$_strings; $lk = t2 (); if($_SERVER['REQUEST_METHOD']=='POST'){ $xw = @$_POST['password']; $ew = @$_POST['is_public_pc']; } else { $xw = @$_GET['password']; $ew = false; } if (x2 ($xw)) { @unlink (USER_FOLDER. 'password-reset.psa'); $rw = [ 'stamp' => time (), 'remote_ip' => k2 (), 'key_hash' => e2_ ($ew), 'anti_csrf_token' => l2 (), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]; $lk['sessions'][] = $rw; } elseif(strlen (trim ($xw)) > 0){ i2 (); mv ($_strings['er--wrong-password'],E2E_USER_ERROR); } if (!j2 ($lk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); c (); } v (); } function e2s_drop_other_sessions () { global$_strings; z2 (); $lk = t2 (); $rw = null; foreach ($lk['sessions'] as $t => $xf){ $rm = $_COOKIE[b ('key')]; if(sha1 ($rm)===$xf['key_hash']) { $rw = $xf; break; } } $lk['sessions'] = array ($rw); if (!j2 ($lk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } v (); die; } function x2 ($xw){ $tw = @unserialize (file_get_contents (USER_FOLDER. '/password-hash.psa')); return (sha1 ($xw)===$tw and trim ($xw)!=''); } function e2_ ($jw = false){ $rm = u2 (); $hw = sha1 ($rm); y ('key',$rm, !$jw); return $hw; } function r2 () { global $nn,$_token; if (isset ($nn)) return $nn; $nn = false; if (!isset ($_COOKIE[b ('key')])) return $nn; $lk = t2 (); $hw = sha1 ($_COOKIE[b ('key')]); $nn = false; $_token = ''; foreach ($lk['sessions'] as &$rw){ if ($hw === $rw['key_hash']) { $nn = true; $_token = (string) @$rw['anti_csrf_token']; if($_token === ''){ $rw['anti_csrf_token']=l2 (); j2 ($lk); } break; } } if (!$nn)y ('key',''); return $nn; } function t2 () { if(is_file (USER_FOLDER . 'auth.psa')) { $lk = unserialize (@file_get_contents (USER_FOLDER . 'auth.psa')); if (!is_array ($lk))$lk = []; if (!array_key_exists ('sessions',$lk))$lk['sessions'] = []; if (!is_array ($lk['sessions']))$lk['sessions'] = []; return $lk; } return []; } function j2 ($lk){ return m3 (USER_FOLDER . 'auth.psa',serialize ($lk)); } function h2 () { if ($rm = @$_COOKIE[b ('key')]) { return b ('key') .'='. $rm .""; } } function g2 () { if ($rm = @$_COOKIE[b ('key')]) { return 'Cookie: '. b ('key') .'='. $rm ."\r\n"; } return "\r\n"; } function w2 ($xv){ global$_strings; if(strstr ($xv,'iPhone')) return$_strings['gs--ua-iphone']; if(strstr ($xv,'iPad')) return$_strings['gs--ua-ipad']; if(strstr ($xv,'Opera'))$d = $_strings['gs--ua-opera']; if(strstr ($xv,'Firefox'))$d = $_strings['gs--ua-firefox']; if(strstr ($xv,'Chrome'))$d = $_strings['gs--ua-chrome']; if(strstr ($xv,'Safari') and !strstr ($xv,'Chrome'))$d = $_strings['gs--ua-safari']; if (!$d)$d = $_strings['gs--ua-unknown']; if(strstr ($xv,'Macintosh')) { if ($d)$d .= ' '. $_strings['gs--ua-for-mac']; } return $d; } function e2j_check_password () { $tw = @unserialize (file_get_contents (USER_FOLDER. '/password-hash.psa')); $xw = ''; if(array_key_exists ('password',$_POST))$xw = $_POST['password']; i2 (); $zv = [ 'success' => true, 'data' => [ 'password-correct' => trim ($xw)!=='' and sha1 ($xw)===$tw ], ]; $zv = json_encode ($zv); die ($zv); } function u2 () { if(function_exists ('random_bytes')) { $uw = sha1 (random_bytes (128)); } else { $uw = ''; $iw = '0123456789abcdef'; for ($r = 0; $r < 40; $r++) { $uw .= $iw[mt_rand (0,15)]; } $uw .= time () . microtime (); $uw = sha1 ($uw); } return $uw; } function i2 () { if(is_file (USER_FOLDER. 'password-wait.psa')) { $ow = unserialize ( file_get_contents (USER_FOLDER. '/password-wait.psa') ); if ($ow['delay']<5){ $ow['delay'] ++; } if(time () - $ow['time']>SECONDS_IN_A_MINUTE){ $ow['delay']=0; } $ow['time']=time (); } else { $ow = array ( 'time' => time (), 'delay' => 5, ); } m3 (USER_FOLDER . 'password-wait.psa',serialize ($ow)); sleep ($ow['delay']); } function o2 () { static $pw; if(empty($pw))$pw = md5 ('seсret'); return $pw; } function p2 ($x){ $rm = o2 (); $cu = strlen ($rm); $vu = strlen ($x); $d = ''; for ($r = 0; $r < $vu + rand (16,64); ++ $r){ if ($r > $vu){ $bu = rand (0,127); } elseif ($r == $vu){ $bu = 0; } else { $bu = ord ($x[$r]); } $yu = chr (($bu + ord ($rm[$r%$cu])) % 256); $d .= $yu; } $d = base64_encode ($d); return $d; } function cd ($x){ $rm = o2 (); $cu = strlen ($rm); $x = base64_decode ($x); $vu = strlen ($x); $d = ''; for ($r = 0; $r < $vu; ++ $r){ $nu = (ord ($x[$r]) + 256 - ord ($rm[$r%$cu])) % 256; if ($nu === 0) break; $d .= chr ($nu); } return $d; } function vd () { global$settings; if (r2 ()) { return null; } else { return [ 'form-action' => jv ('e2s_sign_in'), 'form-check-password-action' => jv ('e2j_check_password'), 'login-name' => @$settings['author'], 'public-pc?' => false, 'reset-href' => jv ('e2m_password_reset'), ]; } } $_candies_installer = array ( 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', 'e2s_update_perform', ); $_candies_public = array ( 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_tags', 'e2m_tag', 'e2m_untagged', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_popular', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_sitemap_xml', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_retrieve', 'e2s_notify', 'e2s_dump', ); $_candies_to_disallow_in_read_only = array ( 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2m_note_flag_favourite', 'e2m_note_flag', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2m_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ); $_candies_public = array_merge ($_candies_public,$_candies_installer); $_candies_indexable_conditionally = array ( 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ); $_candies_ajax = array ( 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_userpic_remove', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2m_note_flag_favourite', 'e2m_comment_flag_ajax', 'e2m_tag_flag_ajax', ); function bd () { global$settings,$_lang,$_config,$_strings,$c; if(Log::$cy)__log ('Blog information'); $mu['author']=htmlspecialchars (nd (), ENT_NOQUOTES,HSC_ENC); if(array_key_exists ('blog_subtitle',$settings)) { $t1 = i3 ($settings['blog_subtitle'],'full'); $s3 = $t1['text-final']; $mu['subtitle']=$s3; $mu['subtitle-format-info']=$t1['meta']; na (@$t1['meta']['links-required']); } $mu['title']=htmlspecialchars (yd (), ENT_NOQUOTES,HSC_ENC); $mu['userpic-set?']=false; $mu['userpic-changeable?']=r2 (); if ($mu['userpic-href']=md ()) { $mu['userpic-set?']=true; $mu['userpic-large-href']=md ('large'); $mu['userpic-square-href']=md ('square'); $mu['userpic-changeable-href']=$mu['userpic-href']; } else { unset ($mu['userpic-href']); } if (r2 ()) { $mu['userpic-upload-action']=jv ('e2j_userpic_upload'); $mu['userpic-remove-action']=jv ('e2j_userpic_remove'); } $mu['href']=jv ('e2m_frontpage', array ('page' => 1)); $mu['rss-href']=jv ('e2m_rss'); $mu['jsonfeed-href']=jv ('e2m_json'); $mu['language']=$_lang; $mu['show-subscribe-button?']=false; $rb = array (time (), ay ()); $fu = xy ('Y',$rb[0]); $mu['now']=$rb; $du = $fu; $su = ms ('start'); if(array_key_exists ('stamp',$su)) { $du = xy ('Y',$su['stamp']); $mu['start-time'] = array ((int)$su['stamp'],$su['timezone']); } $au = false; $qu = xm (true,true); if ($qu !== null){ if (r2 ()) { $lu = xm (true,false); if ($lu !== null){ $au = ($qu + $lu == 0); } } else { $au = ($qu == 0); } } $mu['notes-count'] = (int)$qu; $mu['virgin?']=$au; $zu = $_config['years_range_separator']? $_config['years_range_separator']:$_strings['gs--range-separator']; $mu['years-range']=$du . (($du == $fu)? '':($zu . $fu)); if ($c){ $mu['parent-site-href']=substr ($c, (int)strpos ('/',$c)); } return $mu; } function yd () { global$settings,$_strings; if ( array_key_exists ('blog_title',$settings) and trim ($settings['blog_title']) != '' ) { return trim ($settings['blog_title']); } else { return$_strings['e2--default-blog-title']; } } function nd () { global$settings,$_strings; if ( array_key_exists ('author',$settings) and trim ($settings['author']) != '' ) { return trim ($settings['author']); } else { return$_strings['e2--default-blog-author']; } } function md ($size = ''){ global$full_blog_url; $ku = false; if(is_file (USER_FOLDER .'userpic@2x.jpg')) { $fb = USER_FOLDER .'userpic@2x.jpg'; $ku = USER_FOLDER_URLPATH .'userpic@2x.jpg'; } elseif(is_file (USER_FOLDER .'userpic@2x.png')) { $fb = USER_FOLDER .'userpic@2x.png'; $ku = USER_FOLDER_URLPATH .'userpic@2x.png'; } if($size == 'large' and is_file (USER_FOLDER .'userpic-large@2x.jpg')) { $fb = USER_FOLDER .'userpic-large@2x.jpg'; $ku = USER_FOLDER_URLPATH .'userpic-large@2x.jpg'; } elseif($size == 'square' and is_file (USER_FOLDER .'userpic-square@2x.jpg')) { $fb = USER_FOLDER .'userpic-square@2x.jpg'; $ku = USER_FOLDER_URLPATH .'userpic-square@2x.jpg'; } if ($ku === false) return false; $ry = stat ($fb); if ($ry['mtime'])$ku .= '?'. $ry['mtime']; $ku = $full_blog_url .'/'. $ku; return $ku; } function fd () { global$_config,$_stopwatch,$nz; $xu = round (w () - $_stopwatch,3); return [ 'show?' => ($_config['display_stat'] > (int) !r2 ()), 'generation-time' => str_replace ('.',',',$xu), 'peak-memory-mb' => str_replace ('.',',',round ((memory_get_peak_usage () / 1024 / 1024)*100)/100), 'db-query-count' => (int) @$nz, ]; } function e2m_info () { global$settings,$_config,$v,$c,$_template; $hv = array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (fn_ () !== null), 'server_name' => $v, 'folder_on_server' => $c, '---', 'default formatter' => $_config['default_formatter'], '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba max_image_width' => $_template['max_image_width'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr (md5 (file_get_contents ('system/neasden/neasden.php')), 0,4), '---', ); echo '<pre>'; foreach ($hv as $t => $xf){ if ($xf == '---'){ echo "\n"; continue; } echo str_pad ($t,24); echo '\''; print_r ($xf); echo '\''; echo "\n"; } echo '</pre>'; die; } function e2s_notify () { global$_config; if($_config['holborn']) { $eu = @$_GET['src']; if ($eu == ''){ if(Log::$cy)__log ('Holborn: No src URL'); die; } $ru = file_get_contents ($eu); $ru = qd ($ru); $tu = json_decode ($ru,true); if (!$tu){ if(Log::$cy)__log ('Holborn: No meaningful info from '. $eu .' ('. json_last_error () .')'); if ($ju = sd ($eu)) { if(Log::$cy)__log ('Holborn: Delete note with ID '. $ju['ID']); nm ($ju['ID']); } die; } dd ($tu,$eu); } die; } function e2m_sources ($parameters){ global$_config; $hu = $_GET['ord']; if (!$hu)$hu = 'ID'; $hu = "`". rn ($hu) ."`"; xn ( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix']."Sources` " . "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY ". $hu ); $e1 = en (); foreach ($e1 as $bm){ $gu = $bm['ID']; if ($bm['ID']!=$bm['TrueID'])$gu .= '<br />'. $bm['TrueID']; $o7 = array ( 'id' => $gu, 'userpic-href' => $bm['PictureURL'], 'href' => $bm['URL'], 'href-display' => str_replace ('/','/<wbr>',$bm['URL']), 'href-filtered' => str_replace ('/','/<wbr>',$bm['_URLX']), 'title' => $bm['Title'], 'author' => $bm['AuthorName'], 'true?' => $bm['ID']==$bm['TrueID'], 'whitelisted?' => (bool)$bm['IsWhiteListed'], 'trusted?' => (bool)$bm['IsTrusted'], ); if (!$bm['IsTrusted']) { $o7['trust-url']=jv ( 'e2m_source_trust', array ('source' => $bm['ID']) ); } if ($bm['IsTrusted']) { $o7['premoderate-url']=jv ( 'e2m_source_premoderate', array ('source' => $bm['ID']) ); } $o7['ban-url']=jv ( 'e2m_source_ban', array ('source' => $bm['ID']) ); $o7['forget-url']=jv ( 'e2m_source_forget', array ('source' => $bm['ID']) ); $wu[] = $o7; } $d = array ( 'title' => 'Sources', 'heading' => 'Sources', ); if(count ($wu)) { $d['sources']=$wu; } else { $d['nothing']='No sources'; } return $d; } function e2m_source_trust ($parameters){ global$_config; $uu = $parameters['source']; xn ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $uu, 'trust source' ); xn ( "UPDATE  ". $_config['db_table_prefix']."Notes ". "SET `IsPublished`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $uu, 'publish all notes from the just trusted source' ); za (); qs (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c (); } function e2m_source_premoderate ($parameters){ global$_config; $uu = $parameters['source']; xn ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $uu, 'distrust source, set to premoderation' ); qs (); c (); } function e2m_source_ban ($parameters){ global$_config; $uu = $parameters['source']; xn ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $uu, 'ban source' ); xn ( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $uu, 'delete all notes from the just banned source' ); qs (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c (); } function e2m_source_forget ($parameters){ global$_config; $uu = $parameters['source']; xn ( "DELETE FROM  ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $uu, 'forget source' ); xn ( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $uu, 'delete all notes from the just forgotten source' ); qs (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c (); } function dd ($iu,$eu){ global$_config; $ou = ld (array ( 'author' => $iu['author']['name'], 'title' => $iu['title'], 'href' => $iu['author']['url'], 'userpic-href' => $iu['author']['avatar'], )); if (!$ou['IsWhiteListed']) return; if(preg_match ('/\+(\d\d)\:(\d\d)/',$iu['items'][0]['date_published'],$y3)) { $sl = $y3[1]*SECONDS_IN_AN_HOUR + $y3[2]*SECONDS_IN_A_MINUTE; } $pu = @$iu['items'][0]['_e2_data'] or $pu = array (); $pu = json_encode ($pu); $c0 = $ou['IsTrusted']; $n2 = array ( 'Title' => $iu['items'][0]['title'], 'Text' => $iu['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime ($iu['items'][0]['date_published']), 'Offset' => (int)$sl, 'IsDST' => 0, 'LastModified' => strtotime ($iu['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $c0, 'IsExternal' => 1, 'SourceID' => $ou['ID'], 'SourceNoteID' => $iu['items'][0]['id'], 'SourceNoteURL' => $iu['items'][0]['url'], 'SourceNoteJSONURL' => $eu, 'SourceNoteData' => $pu, ); $lx = $iu['items'][0]['id']; if ( $ju = ad ($ou['ID'],$lx) ) { $n2['ID']=$ju['ID']; nn ('Notes',$n2); } else { $n2 = yn ('Notes',$n2); } if ($c0){ if (xa ($n2)) { $n2['IsIndexed']='1'; nn ('Notes',$n2); } } e2_drop_caches_for_note_($n2['ID'],$c0); if($_config['backup_automatically']) { tn (); } } function sd ($eu){ global$_config; xn ( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceNoteJSONURL`='". rn ($eu) ."' ". "LIMIT 1", 'get note ID by source JSON URL' ); $e1 = en (); return $e1[0]; } function ad ($uu,$v0){ global$_config; xn ( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`= '". $uu ."' ". "AND `SourceNoteID`= '". $v0 ."' ". "LIMIT 1", 'get note ID by source ID and source note ID' ); $e1 = en (); return $e1[0]; } function qd ($ru){ for ($r = 0; $r <= 31; ++$r){ $ru = str_replace (chr ($r),'',$ru); } $ru = str_replace (chr (127),'',$ru); if(0 === strpos (bin2hex ($ru),'efbbbf')) { $ru = substr ($ru,3); } return $ru; } function ld ($b0){ global$_config; $y0 = false; xn ( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `URL`= '". $b0['href'] ."' ". "LIMIT 1", 'get source record by the URL from blog info' ); $e1 = en (); if(count ($e1)) { $y0 = $e1[0]; if ($y0['ID']!=$y0['TrueID']) { xn ( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`= '". $y0['TrueID'] ."' ". "LIMIT 1", 'get true source record by using the TrueID of just found record' ); $e1 = en (); if(count ($e1)) { $y0 = $e1[0]; } } } $ou = array ( 'Title' => $b0['title'], 'AuthorName' => $b0['author'], 'PictureURL' => $b0['userpic-href'], ); if ($y0 !== false){ if ( $y0['Title']!==$b0['title'] or $y0['AuthorName']!==$b0['author'] or $y0['PictureURL']!==$b0['userpic-href'] ) { $ou['ID']=$y0['ID']; nn ('Sources',$ou); } return $y0; } else { $ou['URL']=$b0['href']; $ou['IsWhiteListed']=1; $ou['IsTrusted']=0; $ou = yn ('Sources',$ou); $ou['TrueID']=$ou['ID']; nn ('Sources',$ou); return $ou; } } function zd ($n2){ global$_config; $ij = array (); if (@$n2['IsExternal']) { if(array_key_exists ('SourceID',$n2)) { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Sources` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $n2['SourceID'] ."'", 'get source by id' ); $ib = en (); $ij['source']=$ib[0]['Title']; $ij['source-id'] = (int)$n2['SourceID']; $ij['source-true-id'] = (int)$ib[0]['TrueID']; $ij['source-whitelisted?'] = (bool)$ib[0]['IsWhiteListed']; $ij['source-trusted?'] = (bool)$ib[0]['IsTrusted']; if (!$ib[0]['IsTrusted']) { $ij['source-trust-url']=jv ( 'e2m_source_trust', array ('source' => $n2['SourceID']) ); } if ($ib[0]['IsTrusted']) { $ij['source-premoderate-url']=jv ( 'e2m_source_premoderate', array ('source' => $n2['SourceID']) ); } $ij['source-ban-url']=jv ( 'e2m_source_ban', array ('source' => $n2['SourceID']) ); $ij['source-forget-url']=jv ( 'e2m_source_forget', array ('source' => $n2['SourceID']) ); $ij['author']=$ib[0]['AuthorName']; $ij['author-href']=$ib[0]['URL']; $ij['userpic-href']=$ib[0]['PictureURL']; } if(array_key_exists ('SourceNoteURL',$n2) and @$n2['SourceNoteURL']!=''){ $ij['href-external']=$n2['SourceNoteURL']; } } return $ij; } function e2m_frontpage ($parameters = []) { global$settings,$_strings,$_config; if(Log::$cy)__log ('Frontpage {'); $pe = r2 (); $frontpageView = new AePageableNotesView ('e2m_frontpage',$parameters); $frontpageView -> setPortionSize ($settings['appearance']['notes_per_page']); $frontpageView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $frontpageView -> setWantPaging (true); $frontpageView -> setWantNewCommentsCount ($pe); $frontpageView -> setWantReadHrefs ($_config['count_reads']); $frontpageView -> setWantControls ($pe and !@$_config['read_only']); $frontpageView -> setWantHiddenTags ($pe); $frontpageView -> setWantRelatedNotes (true); if(CACHE_FRONTPAGE and $frontpageView -> isFirstPage ()) { if ($pe){ $frontpageView -> setCacheFilename (CACHE_FILENAME_FRONTPAGE_AUTHOR); } else { $frontpageView -> setCacheFilename (CACHE_FILENAME_FRONTPAGE); } } $frontpageView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm ($pe). "ORDER BY `Stamp` DESC" ); $g6 = yd (); if($parameters['page']>1){ $g6 .= ' ('. $_strings['gs--page'] .' '. $parameters['page'] .')'; } $d = [ 'title' => $g6, 'heading' => '', 'notes' => $frontpageView -> getNotesCTree (), 'pages' => $frontpageView -> getPagesCTree (), 'frontpage?' => $frontpageView -> isFirstPage (), ]; if ( !$frontpageView -> isExistingPage () and !$frontpageView -> isFirstPageOfEmptyView () ) { return e2_error404_mode (); } if(Log::$cy)__log ('} // Frontpage'); return $d; } function e2m_json ($parameters = array ()) { list ($n0,$ig)=jd (); $ru = json_encode ($n0,E2_JSON_STYLE); ud ($ru,$ig,'json'); } function e2m_rss ($parameters = array ()) { list ($n0,$ig)=jd (); $m0 = e2feeds__rss_using_jsonfeed_array_($n0); ud ($m0,$ig,'rss'); } function e2m_tag_json ($parameters = array ()) { if(array_key_exists ('*tag',$parameters)) { $q2 = $parameters['*tag']; } else { return e2_error404_mode (); } list ($n0,$ig)=hd ($q2); $ru = json_encode ($n0,E2_JSON_STYLE); ud ($ru,$ig,'json'); } function e2m_tag_rss ($parameters = array ()) { if(array_key_exists ('*tag',$parameters)) { $q2 = $parameters['*tag']; } else { return e2_error404_mode (); } list ($n0,$ig)=hd ($q2); $m0 = e2feeds__rss_using_jsonfeed_array_($n0); ud ($m0,$ig,'rss'); } function e2m_note_json ($parameters = array ()) { global$settings,$_current_url; $n2 = $parameters['*note']; if ($n2 == false) return e2_error404_mode (); $pe = r2 (); if (!( rm ($n2)==='public' or ($pe and $n2['IsPublished']) )) return e2_error404_mode (); $ig = $n2['Stamp']; $f0 = e2_jsonfeed_item_array_from_noterec_($n2); $d0 = array ($f0); $n0 = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($d0); $n0['title']=yd (); $n0['_rss_description']=td (); $n0['home_page_url']=jv ('e2m_frontpage', array ('page' => 1)); $n0['feed_url']=$_current_url; ud (json_encode ($n0,E2_JSON_STYLE),$ig,'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($d0){ global$_lang,$_config,$settings; $d = [ 'version' => 'https://jsonfeed.org/version/1', 'title' => null, '_rss_description' => null, '_rss_language' => $_lang, '_itunes_email' => '', '_itunes_categories_xml' => '', '_itunes_image' => '', '_itunes_explicit' => '', 'home_page_url' => null, 'feed_url' => null, 'icon' => md (), 'author' => array ( 'name' => nd (), 'url' => jv ('e2m_frontpage', array ('page' => 1)), 'avatar' => md (), ), 'items' => $d0, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ]; return $d; } function e2_jsonfeed_item_array_from_noterec_($n2){ global$settings; $sm = jv ('e2m_note', array ('*note' => $n2)); $s0 = ( xy ('Y-m-d\TH:i:s',$n2['Stamp']) . gy ($n2['Stamp'],':') ); $a0 = ( xy ('Y-m-d\TH:i:s',$n2['LastModified']) . gy ($n2['LastModified'],':') ); $q0 = ( xy ('D, d M Y H:i:s ',$n2['Stamp']) . gy ($n2['Stamp']) ); $t1 = u3 ($n2['FormatterID'], @$n2['Text'],'full-rss'); $ae = d3 ( sb ( $t1['meta']['resources-detected'], q3 ('note',$n2['ID']) ) ); $gq = array ( 'id' => (string)$n2['ID'], 'url' => $sm, 'title' => h3 ($n2['Title']), 'content_html' => $t1['text-final'], 'date_published' => $s0, 'date_modified' => $a0, ); if ($n2['IsExternal']) { $z0 = zd ($n2); $gq['url']=$z0['href-external']; $gq['author'] = array ( 'name' => $z0['author'], 'url' => $z0['author-href'], 'avatar' => $z0['userpic-href'], ); } if(count ($ae)>0){ $gq['image']=$ae[0]; } $gq['_date_published_rfc2822']=$q0; $gq['_rss_guid_is_permalink']='false'; $gq['_rss_guid'] = (string)$n2['ID']; $gq['_e2_data'] = array ( 'is_favourite' => (bool)$n2['IsFavourite'], 'links_required' => $t1['meta']['links-required'], 'og_images' => $ae, ); return $gq; } function ed ($k0,$g6,$uq){ global$_newsfeeds; if (!isset ($_newsfeeds))$_newsfeeds = []; $x0 = ''; if ($k0 == 'rss')$x0 = 'application/rss+xml'; if ($k0 == 'json')$x0 = 'application/json'; $_newsfeeds[] = [ 'type' => $x0, 'title' => htmlspecialchars ($g6,ENT_NOQUOTES,HSC_ENC), 'href' => $uq ]; } function rd () { global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm (). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get recent public noterecs for RSS or JSONFeed' ); return en (); } function td () { global$settings; if (!empty ($settings['meta_description'])) { $e0 = strip_tags (h3 (htmlspecialchars ($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } elseif (!empty ($settings['blog_subtitle'])) { $t1 = i3 ($settings['blog_subtitle'],'full'); $e0 = $t1['text-final']; $e0 = em ($e0); } else { $e0 = yd (); } return $e0; } function jd () { global$settings,$_current_url; $ig = 0; $d0 = array (); $n0 = array (); $b5 = CACHE_FILENAME_FRONTPAGE_FEED; if(CACHE_FRONTPAGE_FEED and is_file ($b5)) { if(Log::$cy)__log ('Feed array (RSS, JSON): cached'); $n0 = @unserialize (file_get_contents ($b5)); $ig = filemtime ($b5); } else { if(Log::$cy)__log ('Feed array (RSS, JSON): not cached, will need to build'); $ft = rd (); foreach ($ft as $n2){ $d0[] = e2_jsonfeed_item_array_from_noterec_($n2); $ig = max ($ig,$n2['Stamp']); } $n0 = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($d0); $n0['title']=yd (); $n0['_rss_description']=td (); $n0['home_page_url']=jv ('e2m_frontpage', array ('page' => 1)); $n0['feed_url']=$_current_url; if(CACHE_FRONTPAGE_FEED)m3 ($b5,serialize ($n0)); } return array ($n0,$ig); } function hd ($q2){ global$_config,$_strings,$_current_url; $ig = 0; $d0 = array (); xn ( "SELECT n.* ". "FROM `". $_config['db_table_prefix']."Notes` n ". "INNER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (nk.`KeywordID` = ". $q2['ID'] .") ". "AND n.`IsPublished` = 1 ". tm (r2 ()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get tag noterecs for RSS or JSONFeed' ); $ft = en (); foreach ($ft as $n2){ $d0[] = e2_jsonfeed_item_array_from_noterec_($n2); $ig = max ($ig,$n2['Stamp']); } if ((string)$q2['Summary']!==''){ $e0 = strip_tags (h3 (htmlspecialchars ($q2['Summary'],ENT_NOQUOTES,HSC_ENC))); } else if ((string)$q2['Description']!==''){ $t1 = i3 ($q2['Description'],'full'); $e0 = $t1['text-final']; $e0 = em ($e0); } else { $e0 = td (); } $dj = htmlspecialchars ($q2['PageTitle'],ENT_COMPAT,HSC_ENC); if ((string)$dj !== ''){ $g6 = $dj; } else { $g6 = ( yd () .': '. $_strings['gs--posts-tagged'] .' '. htmlspecialchars ($q2['Keyword'],ENT_COMPAT,HSC_ENC) ); } $n0 = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($d0); $n0['title']=$g6; $n0['_rss_description']=$e0; $n0['home_page_url']=jv ('e2m_tag', array ('*tag' => $q2)); $n0['feed_url']=$_current_url; return array ($n0,$ig); } function e2feeds__rss_using_jsonfeed_array_($content){ $r0 = USER_FOLDER . 'rss/rss.tmpl.php'; if (!is_file ($r0)) { $r0 = DEFAULTS_FOLDER . 'rss/rss.tmpl.php'; } if(is_file ($r0)) { ob_start (); include $r0; $m0 = ob_get_contents (); ob_end_clean (); } return $m0; } function wd ($m0){ $m0 = str_replace ("\x0",'',$m0); for ($r = 0; $r < strlen ($m0); ++$r){ if(ord ($m0[$r]) < 32 and !in_array (ord ($m0[$r]), array (10,13))) { $m0[$r]=''; } } return $m0; } function ud ($t0,$ig,$k0){ global$_config; $j0 = gmdate ('r',$ig); $h0 = md5 ($ig); if ($k0 == 'rss'){ if (@$_config['dev_xml_as_text']) { header ('Content-Type: text/plain'); } else { header ('Content-Type: application/xml; charset=utf-8'); } } elseif ($k0 == 'json'){ header ('Content-Type: application/json'); } else { header ('Content-Type: text/plain'); } header ('Last-modified: '. $j0); header ('Etag: '. $h0); header ('Cache-Control: public'); header ('Expires: '. date ('r',$ig + SECONDS_IN_A_DAY)); $g0 = isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes ($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $w0 = isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes ($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$g0 && !$w0 or $w0 && $w0 != $h0 or $g0 && $g0 != $j0 ) { if ($k0 == 'rss'){ $t0 = wd ($t0); } ini_set ('zlib.output_compression',0); echo $t0; ini_set ('zlib.output_compression',1); } else { header ('HTTP/1.1 304 Not Modified'); } die; } function e2m_year ($parameters = array ()) { global$_strings,$_config; $u0 = $parameters['year']; $i0 = e2l_get_string ('pt--nth-year', array ('year' => $u0)); if (!pd ($u0)) { return e2_error404_mode (); } $o0 = gmmktime (0,0,0,1,1,$u0 - 1); $p0 = gmmktime (0,0,0,1,1,$u0 + 1); list ($c9,$v9)=e2__fruitful_neighbours_with_ymd_($u0); $b9 = 'e2m_year'; if ($c9){ $y9['prev-href']=jv ( $b9,e2__parameters_with_timestamp_($c9) ); $y9['prev-jump?'] = (bool) (gmdate ('Y',$o0)!=gmdate ('Y',$c9)); $y9['prev-title']=gmdate ('Y',$c9); } if ($v9){ $y9['next-href']=jv ( $b9,e2__parameters_with_timestamp_($v9) ); $y9['next-jump?'] = (bool) (gmdate ('Y',$p0)!=gmdate ('Y',$v9)); $y9['next-title']=gmdate ('Y',$v9); } $y9['timeline?']=false; $y9['this']=$u0; $y9['this-title']=$u0; $n9 = ms ('start'); $m9 = ms ('end'); if ( $u0 == ky ('Y',$n9['stamp'],$n9['timezone']) ) { $f9 = ky ('m',$n9['stamp'],$n9['timezone']); } else { $f9 = 1; } if ( $u0 == xy ('Y',time ()) ) { $d9 = xy ('m',time ()); } else { $d9 = 12; } $s9 = ys ($u0); for ($a9 = 1; $a9 <= 12; ++ $a9){ $q9 = gmmktime (0,0,0,$a9,1,$u0); $l9[$a9] = array ( 'number' => $a9, 'start-time' => array ($q9,sy ()), 'href' => gmdate ('Y/m/',$q9), 'real?' => $a9 >= $f9 and $a9 <= $d9, 'fruitful?' => @in_array (gmdate ('n',$q9),$s9), ); } list ($pr,$ct)=jy ($u0); $d = [ 'title' => $i0, 'heading' => $i0, 'pages' => $y9, 'year' => (int)$u0, 'year-months' => $l9, ]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm (r2 ()). "AND `Stamp` BETWEEN ". $pr ." ". "AND ". $ct ." ". "ORDER BY `Stamp`", 'get all notes for the year' ); $e1 = en (); $e5 = bs (true,$e1,$u0); if(count ($e5)) { $d['notes-list']=$e5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_month ($parameters = array ()) { global$_strings,$_config; $u0 = $parameters['year']; $a9 = $parameters['month']; $i0 = e2l_get_string ( 'pt--nth-month-of-nth-year', array ('year' => $u0,'month' => $a9) ); if (!pd ($u0,$a9)) { return e2_error404_mode (); } $o0 = gmmktime (0,0,0,$a9 - 1,1,$u0); $p0 = gmmktime (0,0,0,$a9 + 1,1,$u0); list ($c9,$v9)=e2__fruitful_neighbours_with_ymd_($u0,$a9); $b9 = 'e2m_month'; if ($c9){ $y9['prev-href']=jv ( $b9,e2__parameters_with_timestamp_($c9) ); $y9['prev-jump?'] = (bool) (gmdate ('Y/m',$o0)!=gmdate ('Y/m',$c9)); $y9['prev-title']=e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$c9),'month' => gmdate ('n',$c9) ) ); } if ($v9){ $y9['next-href']=jv ( $b9,e2__parameters_with_timestamp_($v9) ); $y9['next-jump?'] = (bool) (gmdate ('Y/m',$p0)!=gmdate ('Y/m',$v9)); $y9['next-title']=e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$v9),'month' => gmdate ('n',$v9) ) ); } $y9['timeline?']=false; $y9['this-title']=$i0; list ($pr,$ct)=jy ($u0,$a9); $d = [ 'title' => $i0, 'heading' => $i0, 'pages' => $y9, 'year' => (int)$u0, 'month' => (int)$a9, 'month-days' => e2_pack_month_days_with_ymd_($u0,$a9,false), ]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm (r2 ()). "AND `Stamp` BETWEEN ". $pr ." ". "AND ". $ct ." ". "ORDER BY `Stamp`", 'get all notes for the month' ); $e1 = en (); $e5 = bs (true,$e1,$u0,$a9); if(count ($e5)) { $d['notes-list']=$e5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_day ($parameters = array ()) { global$_strings,$_config; $u0 = (int)$parameters['year']; $a9 = (int)$parameters['month']; $k9 = (int)$parameters['day']; if (!(pd ($u0,$a9,$k9))) { return e2_error404_mode (); } $i0 = e2l_get_string ( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $u0,'month' => $a9,'day' => $k9) ); $o0 = gmmktime (0,0,0,$a9,$k9 - 1,$u0); $p0 = gmmktime (0,0,0,$a9,$k9 + 1,$u0); list ($c9,$v9)=e2__fruitful_neighbours_with_ymd_($u0,$a9,$k9); $b9 = 'e2m_day'; if ($c9){ $y9['prev-href']=jv ( $b9,e2__parameters_with_timestamp_($c9) ); $y9['prev-jump?'] = (bool) (gmdate ('Y/m/d',$o0)!=gmdate ('Y/m/d',$c9)); $y9['prev-title']=e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$c9),'month' => gmdate ('n',$c9),'day' => gmdate ('j',$c9), ) ); } if ($v9){ $y9['next-href']=jv ( $b9,e2__parameters_with_timestamp_($v9) ); $y9['next-jump?'] = (bool) (gmdate ('Y/m/d',$p0)!=gmdate ('Y/m/d',$v9)); $y9['next-title']=e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$v9),'month' => gmdate ('n',$v9),'day' => gmdate ('j',$v9), ) ); } $y9['timeline?']=false; $y9['this-title']=$i0; $d = [ 'title' => $i0, 'heading' => $i0, 'pages' => $y9, 'month-days' => e2_pack_month_days_with_ymd_($u0,$a9,$k9), ]; $e1 = sm ($u0,$a9,$k9); $e1 = array_reverse ($e1); $pe = r2 (); $e5 = []; foreach ($e1 as $t => $n2){ if (!( rm ($n2)==='public' or ($pe and $n2['IsPublished']) )) continue; $noteView = new AeNoteView ($n2); $noteView -> setWantNewCommentsCount ($pe); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($pe and !@$_config['read_only']); $noteView -> setWantHiddenTags ($pe); $noteView -> setWantCommentsLink (true); $e5[] = $noteView -> getNoteCTree (); } if(count ($e5)) { $d['notes']=$e5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function id ($x9){ global$_config; $e5 = null; if(CACHE_FULLLIST and is_file (CACHE_FILENAME_FULLLIST)) { $e5 = @unserialize (file_get_contents (CACHE_FILENAME_FULLLIST)); if(Log::$cy)__log ('Retrieving full notes list from cache...'); } if (!is_array ($e5)) { if(Log::$cy)__log ('Retrieving full notes list from database...'); xn ( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm (). "ORDER BY `Stamp`", 'get full notes list' ); $e1 = en (); $e5 = bs ($x9,$e1); if ($x9){ if(CACHE_FULLLIST)m3 (CACHE_FILENAME_FULLLIST,serialize ($e5)); } } return $e5; } function e2m_everything ($parameters = array ()) { global$_strings; $e5 = id (true); $e9 = count ($e5); $i0 = e2l_get_string ('pt--n-posts', array ('number' => $e9)); $d = [ 'title' => $i0, 'heading' => $i0, ]; if(count ($e5)) { $d['notes-list']=$e5; } else { $d['nothing']=$_strings['gs--no-notes']; } return $d; } function e2m_sitemap_xml ($parameters = array ()) { global$_config; $e5 = id (false); if (@$_config['dev_xml_as_text']) { header ('Content-Type: text/plain'); } else { header ('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; if(count ($e5)) { $ig = @$e5[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. jv ('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo gmdate ('Y-m-d\TH:i:s\Z',$ig[0]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($e5 as $l2){ echo '<url>'."\r\n"; echo '<loc>'; echo $l2['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo gmdate ('Y-m-d\TH:i:s\Z',$l2['last-modified'][0]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function e2_pack_month_days_with_ymd_($u0,$a9,$k9){ $r9 = ky ('t',gmmktime (0,0,0,$a9,1,$u0),sy ()); $n9 = ms ('start'); $m9 = ms ('end'); if ( $u0 .'/'. $a9 == ky ('Y/n',$n9['stamp'],$n9['timezone']) ) { $t9 = ky ('d',$n9['stamp'],$n9['timezone']); } else { $t9 = 1; } if ( $u0 .'/'. $a9 == xy ('Y/n',time ()) ) { $j9 = xy ('d',time ()); } else { $j9 = $r9; } $h9 = ns ($u0,$a9); for ($r = 1; $r <= $r9; ++ $r){ $q9 = gmmktime (0,0,0,$a9,$r,$u0); $g9[$r] = array ( 'number' => $r, 'start-time' => array ($q9,sy ()), 'href' => gmdate ('Y/m/d/',$q9), 'this?' => (bool) ($r == $k9), 'real?' => $r >= $t9 and $r <= $j9, 'fruitful?' => @in_array (gmdate ('d',$q9),$h9), ); } return $g9; } function pd ($u0,$a9 = false,$k9 = false){ $n9 = ms ('start'); if ($n9 === false){ return false; } $w9 = ky ('Y',$n9['stamp'],$n9['timezone']); $u9 = xy ('Y',time ()); if ($a9 === false){ return (bool) ( $u0 >= $w9 and $u0 <= $u9 ); } else { $i9 = ky ('n',$n9['stamp'],$n9['timezone']); $o9 = xy ('n',time ()); if ($k9 === false){ return (bool) ( $a9 >= 1 and $a9 <= 12 and ( ($u0 > $w9 and $u0 < $u9) or ($u0 == $w9 and $a9 >= $i9) or ($u0 == $u9 and $a9 <= $o9) ) ); } else { $p9 = ky ('j',$n9['stamp'],$n9['timezone']); $ci = xy ('j',time ()); if(1){ return (bool) ( checkdate ($a9,$k9,$u0) and ( ($u0 > $w9 and $u0 < $u9) or ($u0 == $w9 and $a9 > $i9) or ($u0 == $w9 and $a9 == $i9 and $k9 >= $p9) or ($u0 == $u9 and $a9 < $o9) or ($u0 == $u9 and $a9 == $o9 and $k9 <= $ci) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($hb,$jb = false,$tb = false){ global$_db,$_config; list ($vi,$bi)=jy ($hb,$jb,$tb); $yi = SECONDS_IN_A_DAY; if ($tb === false)$yi = SECONDS_IN_A_MONTH; if ($jb === false)$yi = SECONDS_IN_A_YEAR; $ni = $mi = null; xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` < '". ($bi - $yi) ."' ". tm (r2 ()). "ORDER BY Stamp DESC", 'get previous fruitful neighbour with ymd' ); while ($u = mysqli_fetch_array ($_db['result'],MYSQLI_ASSOC)) { list ($u0,$a9,$k9)=explode ('/', ky ('Y/n/j',$u['Stamp'],dy ($u)) ); $fi = $hb * 10000 + ($jb? ($jb * 100):0) + ($tb? $tb : 0); $di = $u0 * 10000 + ($jb? ($a9 * 100):0) + ($tb? $k9 : 0); if ($di < $fi){ $ni = gmmktime (0,0,0,$a9,$k9,$u0); break; } } xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` > '". ($vi + $yi) ."' ". tm (r2 ()). "ORDER BY Stamp", 'get next fruitful neighbour with ymd' ); while ($u = mysqli_fetch_array ($_db['result'],MYSQLI_ASSOC)) { list ($u0,$a9,$k9)=explode ('/', ky ('Y/n/j',$u['Stamp'],dy ($u)) ); $fi = $hb * 10000 + ($jb? ($jb * 100):0) + ($tb? $tb : 0); $di = $u0 * 10000 + ($jb? ($a9 * 100):0) + ($tb? $k9 : 0); if ($di > $fi){ $mi = gmmktime (0,0,0,$a9,$k9,$u0); break; } } return [$ni,$mi]; } function e2__parameters_with_timestamp_($a4){ list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode ('/',gmdate ('Y/m/d',$a4)); return$parameters; } function bs ($x9,$ft,$u0 = false,$a9 = false){ $e5 = []; $si = []; foreach ($ft as $t => $n2){ $l2['href'] = jv ('e2m_note', array ('*note' => $n2)); $l2['time'] = array ((int)min ($n2['Stamp'],time ()), dy ($n2)); $l2['last-modified'] = array ((int)min ($n2['LastModified'],time ()), dy ($n2)); $l2['favourite?'] = (bool) ($n2['IsFavourite'] && $n2['IsPublished']); $oe = rm ($n2); $l2['draft?'] = $oe === 'draft'; $l2['scheduled?'] = $oe === 'scheduled'; $l2['public?'] = $oe === 'public'; $l2['hidden?'] = $oe === 'hidden'; if(array_key_exists ('SourceNoteURL',$n2) and @$n2['SourceNoteURL']!=''){ $l2['href']=$n2['SourceNoteURL']; $l2['href-original']=$n2['SourceNoteURL']; } if ( ($u0 and $a9 and ( ((int)$u0) .'/'. ((int)$a9) == ky ('Y/n',$n2['Stamp'],dy ($n2)) )) or ($u0 and !$a9 and ( (int)$u0 == ky ('Y',$n2['Stamp'],dy ($n2)) )) or (!$u0 and !$a9) ) { $e5[] = $l2; $si[] = str_replace ("\n",' ',$n2['Title']); } } if(Log::$cy)__log ('Will do typography'); if ($x9){ $ai = implode ("\n",$si); $ai = h3 (htmlspecialchars ($ai,ENT_NOQUOTES,HSC_ENC)); $si = explode ("\n",$ai); } foreach ($e5 as $t => $xf){ $e5[$t]['title']=$si[$t]; } $e5 = array_reverse ($e5); return $e5; } function ys ($hb){ global$_config; list ($qi,$li)=jy ($hb); xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $qi. "' AND '". $li ."' ". tm (r2 ()), 'get all notes for the year '. $hb .' to list months with notes' ); $e1 = en (); $zi = array (); foreach ($e1 as $vt){ if ( ((int)$hb) == ky ('Y',$vt['Stamp'],dy ($vt)) ) { $zi[] = (int)ky ('n',$vt['Stamp'],dy ($vt)); } } $zi = @array_unique ($zi); sort ($zi); return $zi; } function ns ($hb,$jb){ global$_config; list ($ki,$xi)=jy ($hb,$jb); xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $ki ."' AND '". $xi ."' ". tm (r2 ()), 'get all notes for the month '.$jb.' of the year '. $hb .' to list days with notes' ); $e1 = en (); $ei = array (); foreach ($e1 as $vt){ if ( ((int)$hb) .'/'. ((int)$jb) == ky ('Y/n',$vt['Stamp'],dy ($vt)) ) { $ei[] = (int)ky ('j',$vt['Stamp'],dy ($vt)); } } $ei = @array_unique ($ei); sort ($ei); return $ei; } function ms ($ri){ global$_config; $ti = 'p1'; if (!r2 ()) { $ti = 'p1v1'; } $b5 = CACHES_FOLDER . $ri .'-stamp-'. $ti .'.e2time.psa'; if(CACHE_EDGE_TIMEINFO and is_file ($b5)) { $d = @unserialize (file_get_contents ($b5)); } if(is_array (@$d)) { return $d; } else { $d = array ( 'stamp' => time (), 'timezone' => ay (), ); if ($ri == 'start'){ xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm (r2 ()). "ORDER BY `Stamp` LIMIT 1", 'get blog start timestamp' ); } elseif ($ri == 'end'){ xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm (r2 ()). "ORDER BY `Stamp` DESC LIMIT 1", 'get blog latest note timestamp' ); } $e1 = en (); if(count ($e1)) { $d = array ( 'stamp' => $e1[0]['Stamp'], 'timezone' => dy ($e1[0]), ); if(CACHE_EDGE_TIMEINFO)m3 ($b5,serialize ($d)); return $d; } return $d; } } function e2m_calliope ($parameters = []) { global$_config,$_strings; xn ( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = '1' ". "AND `FormatterID` = 'calliope' ". "AND (0 ". "OR `Text` LIKE '%!!%' ". "OR `Text` LIKE '%\%\%%' ". "OR `Text` LIKE '%##%' ". "OR `Text` LIKE '%++%' ". "OR `Text` LIKE '%((html%' ". "OR `Text` LIKE '%((img%' ". "OR `Text` LIKE '%((link%' ". "OR `Text` LIKE '%((%.jpg%' ". "OR `Text` LIKE '%((%.jpeg%' ". "OR `Text` LIKE '%((%.gif%' ". "OR `Text` LIKE '%((%.png%' ". "OR `Text` LIKE '%[[html%' ". "OR `Text` LIKE '%[[img%' ". "OR `Text` LIKE '%[[link%' ". "OR `Text` LIKE '%[[%.jpg%' ". "OR `Text` LIKE '%[[%.jpeg%' ". "OR `Text` LIKE '%[[%.gif%' ". "OR `Text` LIKE '%[[%.png%' ". ")". "ORDER BY `Stamp`", 'get calliope notes list' ); $e1 = en (); $e5 = bs (true,$e1); $e9 = count ($e5); $d = [ 'title' => 'Calliope', 'heading' => 'Legacy posts', ]; if ($e9 > 0){ $d['heading']='Edit and re-save these '. $e9 .' legacy post(s). Their content will not be displayed in the next version of Aegea'; } if(count ($e5)) { $d['notes-list']=$e5; } else { $d['nothing']=$_strings['gs--no-notes']; } return $d; } define ('CACHE',true); define ('CACHE_ALIASMAP',CACHE and true); define ('CACHE_NOTES',CACHE and true); define ('CACHE_NOTES_RELATED',CACHE and true); define ('CACHE_NOTES_COMMENTS',CACHE and true); define ('CACHE_POPULAR',CACHE and true); define ('CACHE_POPULAR_WITH_TAG',CACHE and true); define ('CACHE_TAGS',CACHE and true); define ('CACHE_FAVTAGS',CACHE and true); define ('CACHE_NOTES_COUNTS',CACHE and true); define ('CACHE_EDGE_TIMEINFO',CACHE and true); define ('CACHE_FRONTPAGE',CACHE and true); define ('CACHE_FRONTPAGE_FEED',CACHE and true); define ('CACHE_TAG',CACHE and true); define ('CACHE_FULLLIST',CACHE and true); define ('CACHE_DRAFTS',CACHE and true); define ('CACHE_DRAFTS_ALIAS_USE_COUNTS',CACHE and true); define ('CACHE_LASTMODIFIEDS',CACHE and true); define ('CACHE_FILENAME_ALIASMAP',CACHES_FOLDER . 'aliasmap.psa'); define ('CACHE_FILENAMES_NOTES',CACHES_FOLDER . 'note-*.psa'); define ('CACHE_FILENAMES_NOTES_RELATED',CACHES_FOLDER . 'note-*-related.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS',CACHES_FOLDER . 'note-*-comments.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR',CACHES_FOLDER . 'note-*-comments-author.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COUNTS',CACHES_FOLDER . 'notes-count-*.txt'); define ('CACHE_FILENAMES_EDGE_TIMEINFO',CACHES_FOLDER . '*.e2time.psa'); define ('CACHE_FILENAME_POPULAR',CACHES_FOLDER . 'popular.ctree.psa'); define ('CACHE_FILENAME_POPULAR_EXPIRES',CACHES_FOLDER . 'popular-expires.txt'); define ('CACHE_FILENAMES_POPULAR_WITH_TAG',CACHES_FOLDER . 'popular-*.ctree.psa'); define ('CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES',CACHES_FOLDER . 'popular-*-expires.txt'); define ('CACHE_FILENAME_TAGS',CACHES_FOLDER . 'tags.ctree.psa'); define ('CACHE_FILENAME_TAGS_FULL',CACHES_FOLDER . 'tags-full.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR',CACHES_FOLDER . 'tags-author.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR_FULL',CACHES_FOLDER . 'tags-author-full.ctree.psa'); define ('CACHE_FILENAME_FAVTAGS',CACHES_FOLDER . 'favtags.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE',CACHES_FOLDER . 'frontpage.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_AUTHOR',CACHES_FOLDER . 'frontpage-author.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_FEED',CACHES_FOLDER . 'frontpage-feed.psa'); define ('CACHE_FILENAMES_TAG',CACHES_FOLDER . 'tag-*.ctree.psa'); define ('CACHE_FILENAMES_TAG_AUTHOR',CACHES_FOLDER . 'tag-*-author.ctree.psa'); define ('CACHE_FILENAME_FULLLIST',CACHES_FOLDER . 'notes-list.ctree.psa'); define ('CACHE_FILENAME_DRAFTS',CACHES_FOLDER . 'drafts.psa'); define ('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS',CACHES_FOLDER . 'drafts-auc.psa'); define ('CACHE_FILENAME_LASTMODIFIEDS',CACHES_FOLDER . 'last-modifieds-by-id.psa'); function e2_cache_filename_with_id_($is,$ti){ return str_replace ('*',$is,$ti); } function e2_note_cache_filename_with_id_($is){ return e2_cache_filename_with_id_($is,CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($lx,$er){ if(is_numeric ($lx)) { if(Log::$cy)__log ('Caches: Drop caches for note id '. $lx); @unlink (e2_note_cache_filename_with_id_($lx)); @unlink (e2_note_cache_filename_with_id_($lx .'-comments')); @unlink (e2_note_cache_filename_with_id_($lx .'-comments-author')); } else { r (CACHE_FILENAMES_NOTES); r (CACHE_FILENAMES_NOTES_COMMENTS); r (CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } ls (); if ($er !== false){ zs (); r (CACHE_FILENAMES_NOTES_RELATED); r (CACHE_FILENAMES_POPULAR_WITH_TAG); r (CACHE_FILENAMES_TAG); r (CACHE_FILENAMES_TAG_AUTHOR); @unlink (CACHE_FILENAME_POPULAR); @unlink (CACHE_FILENAME_FRONTPAGE); @unlink (CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink (CACHE_FILENAME_FRONTPAGE_FEED); @unlink (CACHE_FILENAME_FULLLIST); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_FULL); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_TAGS_AUTHOR_FULL); } if ($er !== true){ @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } @unlink (CACHE_FILENAME_LASTMODIFIEDS); } function e2_drop_caches_for_tag_($rj){ if(is_numeric ($rj)) { @unlink (e2_cache_filename_with_id_($rj,CACHE_FILENAMES_TAG)); @unlink (e2_cache_filename_with_id_($rj,CACHE_FILENAMES_TAG_AUTHOR)); } else { r (CACHE_FILENAMES_TAG); r (CACHE_FILENAMES_TAG_AUTHOR); } @unlink (CACHE_FILENAME_FAVTAGS); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_FULL); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_TAGS_AUTHOR_FULL); } function qs () { if(Log::$cy)__log ('Caches: Drop notes caches'); e2_drop_caches_for_note_(null,null); } function ls () { if(Log::$cy)__log ('Caches: Drop notes counts cache'); r (CACHE_FILENAMES_NOTES_COUNTS); } function zs () { if(Log::$cy)__log ('Caches: Drop egde time info cache'); r (CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache () { if(Log::$cy)__log ('Caches: Drop all kinds of caches'); r (CACHES_FOLDER . '*'); return true; } define ('OLBA_SPECIAL_CHAR',"\x1"); define ('OLBA_SPECIAL_SEQUENCE_LENGTH',6); function ks ($ji = null){ global$_template,$_config,$settings; if ($ji === null)$ji = @$settings['template']; $hi = null; $gi = null; $wi = null; $ui = null; $ii = array (); $oi = $ji; if ($oi !== null){ while (1){ if(Log::$cy)__log ('Prepare theme "'. $oi .'"'); $pi = TEMPLATES_FOLDER . $oi .'/'; if ( !is_dir ($pi) or !is_file ($pi .'/theme-info.php') ) { if(Log::$cy)__log ('Theme "'. $oi .'" not found, using default theme "'. DEFAULT_TEMPLATE .'"'); $oi = DEFAULT_TEMPLATE; $pi = TEMPLATES_FOLDER . $oi .'/'; } array_push ($ii,$pi); $co = include $pi .'/theme-info.php'; $vo[$pi]=$co; if(array_key_exists ('max_image_width',$co)) { if ($hi === null){ $hi = $co['max_image_width']; } } if(array_key_exists ('meta_viewport',$co)) { if ($gi === null){ $gi = $co['meta_viewport']; } } if(array_key_exists ('supports_dark_mode',$co)) { if ($wi === null){ $wi = $co['supports_dark_mode']; } } if(array_key_exists ('use_likely_light',$co)) { if ($ui === null){ $ui = $co['use_likely_light']; } } if(array_key_exists ('based_on',$co)) { $oi = $co['based_on']; } else { break; } } } if ($hi === null){ $hi = $_config['max_image_width']; } if ($gi === null)$gi = ''; if ($wi === null)$wi = false; if ($ui === null)$ui = false; $pi = SYSTEM_TEMPLATE_FOLDER; array_push ($ii,$pi); $vo[$pi] = []; $_template['name']=$ji; $_template['max_image_width']=$hi; $_template['meta_viewport']=$gi; $_template['supports_dark_mode']=$wi; $_template['use_likely_light']=$ui; $_template['stack']=$ii; $_template['infos']=$vo; }; function xs ($bo){ global$content; if (!isset ($_olba_includes))$_olba_includes = 0; ++ $_olba_includes; if(Log::$cy)__log ('Eat "'. $bo .'"'); ob_start (); include $bo; return ob_get_clean (); } function es ($ez){ return ( OLBA_SPECIAL_CHAR. str_pad ($ez,OLBA_SPECIAL_SEQUENCE_LENGTH,'0',STR_PAD_LEFT). OLBA_SPECIAL_CHAR ); } function rs ($name){ static $ez = 0; ma ($name,'_olba_placeholders'); return es ($ez ++); } function ts ($yo){ global$_olba_placeholders; foreach($_olba_placeholders as $ez => $s){ $no = es ($ez); $mo = strpos ($yo,$no); $fo = hs ($s,true); if ($mo !== false){ $yo = substr_replace ( $yo,$fo,$mo,strlen ($no) ); } else { break; } } return $yo; } function js ($do_){ if(is_dir (EXTRAS_FOLDER)) { $so = EXTRAS_FOLDER . $do_ .'.tmpl.php'; if(is_file ($so)) { return xs ($so); } } return ''; } function hs ($do_){ global$_template,$_olba_includes; $so = 'templates/'. $do_ .'.tmpl.php'; if ($bo = e2o__usable_file_with_basename_($so)) { return xs ($bo); } else { ob_end_clean (); throw new AeOlbaTemplateMissingException ('Missing: '. $so); } } function gs () { global$_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists ('raw',$_GET) ) { $ao = 'raw'; } else { $ao = 'main'; } return hs ($ao,true); } function ws ($qo){ ma ($qo .'.css','_olba_used_stylesheets'); } function us ($lo){ ma ($lo .'.js','_olba_used_scripts'); } function is ($zo){ foreach (array (SYSTEM_LIBRARY_FOLDER,USER_LIBRARY_FOLDER) as $ko){ foreach(glob ($ko . $zo .'/*') as $fy){ $ha = pathinfo ($fy,PATHINFO_EXTENSION); if ($ha == 'js'){ ma ($fy,'_olba_used_scripts'); } if ($ha == 'css'){ ma ($fy,'_olba_used_stylesheets'); } } } } function os () { global$_template,$_config,$settings; if ($xo = @opendir (TEMPLATES_FOLDER)) { while (false !== ($eo = readdir ($xo))) { if(is_dir (TEMPLATES_FOLDER. $eo) and $eo != '.' and $eo != '..'){ if(is_file (TEMPLATES_FOLDER . $eo .'/theme-info.php')) { $ro[$eo]=TEMPLATES_FOLDER . $eo .'/'; } } } closedir ($xo); } $y1 = array (); $to = 1000; foreach ($ro as$name => $oa){ $co = include $oa .'theme-info.php'; $n3 = @$co['display_name']; if (!$n3) continue; if(is_array ($n3)) { if(array_key_exists ($settings['language'],$n3)) { $n3 = $n3[$settings['language']]; } else { $n3 = array_shift ($n3); } } $ez = @$co['index'] or $ez = $to ++; $jo = @$co['colors']; if (!$jo)$jo = array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $ho = (bool) ($name == $_template['name']); if ($ho){ $go = jv ('e2m_theme_preview', array ('theme' => '')); } else { $go = jv ('e2m_theme_preview', array ('theme' => $name)); } $y1[$ez] = array ( 'name' => $name, 'display-name' => $n3, 'colors' => $jo, 'current?' => $ho, 'preview-url' => $go, 'supports-dark-mode?' => $co['supports_dark_mode'], ); } ksort ($y1); return $y1; } function ps ($fb){ return e2o__usable_file_with_basename_('images/'. $fb); } function ca ($wo){ $uo = e2o__usable_file_with_basename_('images/'. $wo .'.svg'); if(is_file ($uo)) { return file_get_contents ($uo); } return ''; } function va ($qo){ global$_template; $ua = 'styles/'. $qo .'.css'; $io = array (); foreach($_template['stack'] as $pi){ if(is_file ($fb = $pi . $ua)) { $io[] = $fb; } if ( array_key_exists ('reset_styles',$_template['infos'][$pi]) and in_array ($qo,$_template['infos'][$pi]['reset_styles']) ) { break; } } $io = array_reverse ($io); } function ba () { global$_olba_used_stylesheets,$_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets = array_unique ($_olba_used_stylesheets); $oo = array (); foreach($_olba_used_stylesheets as $qo){ if(is_file ($qo)) { $oo[] = $qo; continue; } if(is_file ($fb = USER_FOLDER .'js/'. $qo)) { $oo[] = $fb; } $ua = 'styles/'. $qo; $io = array (); foreach($_template['stack'] as $pi){ if(is_file ($fb = $pi . $ua)) { $io[] = $fb; } if ( array_key_exists ('reset_styles',$_template['infos'][$pi]) and in_array ($qo,$_template['infos'][$pi]['reset_styles']) ) { break; } } $io = array_reverse ($io); $oo = array_merge ($oo,$io); } foreach ($oo as $t => $xf){ $ry = stat ($xf); $oo[$t].='?'. $ry['mtime']; } return $oo; } function ya () { global$_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts = array_unique ($_olba_used_scripts); $po = array (); foreach($_olba_used_scripts as $lo){ if ( substr ($lo,0,7)=='http://' or substr ($lo,0,8)=='https://' or substr ($lo,0,2)=='//' ) { $po[] = $lo; continue; } if(is_file ($lo)) { $po[] = $lo; continue; } if(is_file ($cp = USER_FOLDER .'js/'. $lo)) { $po[] = $cp; } $ua = 'js/'. $lo; if ($cp = e2o__usable_file_with_basename_($ua)) { $po[] = $cp; } } foreach ($po as $t => $xf){ $ry = stat ($xf); if ($ry['mtime']) { $po[$t].='?'. $ry['mtime']; } } return $po; } function na ($vp){ if (!is_array ($vp)) return; foreach ($vp as $bp){ if(substr ($bp, -3)=='.js'){ us (substr ($bp,0, -3)); } if(substr ($bp, -4)=='.css'){ ws (substr ($bp,0, -4)); } } } function ma ($s,$hv){ if (!isset ($GLOBALS[$hv])) { $GLOBALS[$hv] = array ($s); } else { $GLOBALS[$hv][] = $s; } } function e2o__usable_file_with_basename_($ua){ global$_template; if (!isset ($_template))ks (); foreach($_template['stack'] as $pi){ if(is_file ($fb = $pi . $ua)) { return $fb; } } return ''; } function e2m_theme_preview ($parameters){ global$_lang,$_strings,$_superconfig,$_template; if (@$_superconfig['disallow_themes_preview']) { return e2_error404_mode (); } if($parameters['theme']==$_template['name']) { c (jv ('e2m_theme_preview', array ('theme' => ''))); } if($parameters['theme']) { ks ($parameters['theme']); } $yp = $_lang; if (!is_file ($fy = 'system/preview/'. $yp .'.php')) { $yp = $_strings['--secondary-language']; $fy = 'system/preview/'. $yp .'.php'; } if (!is_file ($fy = 'system/preview/'. $yp .'.php')) { $fy = 'system/preview/'. DEFAULT_LANGUAGE .'.php'; } $gq = include $fy; return $gq; } define ('SEARCH_EXTRA_PREFIX','Rose'); define ('SEARCH_LIMIT',20); define ('SEARCH_SNIPPETS_LIMIT',20); define ('SEARCH_USE_ROSE',1); define ('SEARCH_USE_MYSQL',1); define ('BSI_SELECT_PORTION',10); define ('BSI_GIVE_UP_TIMEOUT',10); define ('BSI_UNLOCK_TIMEOUT',10); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Storage\Database\MysqlRepository; use S2\Rose\Stemmer\PorterStemmerEnglish; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Entity\ExternalContent; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found ($parameters = array ()) { global$_db,$_strings,$_config; $parameters['query']=trim ($parameters['query']); $bf = $parameters['query']; if (!$bf){ return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $lvv = false; $fj = []; try { if (r2 ()) { $zvv = ''; } else { $zvv = 'AND `IsVisible` = 1 '; } xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". $zvv . "AND `Keyword`='". rn ($bf) ."'", 'get tags matching the search query' ); $ib = en (); if (isset ($ib[0]['ID'])) { $lvv = [ 'href' => jv ('e2m_tag', array ('*tag' => $ib[0])), 'name' => htmlspecialchars ($bf,ENT_NOQUOTES,HSC_ENC), 'visible?' => (bool)$ib[0]['IsVisible'], ]; $fj = nf ($ib[0]['ID'],4); array_unshift ($fj,$lvv); } } catch (AeMySQLException $e){ kv ($e,'Could not get tags matching the search query'); } $kvv = n (' ',$parameters['query']); if(SEARCH_USE_ROSE){ $xvv = new PorterStemmerRussian (new PorterStemmerEnglish ()); foreach ($kvv as $t => $xf){ $kvv[$t]=$xvv -> stemWord ($kvv[$t]); } } $evv = array (); $pe = r2 (); if(SEARCH_USE_ROSE){ try { $p3 = ja (); $rvv = new Finder ($p3,$xvv); $rvv -> setHighlightTemplate ('<mark>%s</mark>'); $tvv = new Query ($bf); $tvv -> setInstanceId ($_config['db_table_subset']); $tvv -> setLimit (SEARCH_LIMIT); $resultSet = $rvv -> find ($tvv); foreach($resultSet -> getFoundExternalIds () as $jvv){ $hvv = $jvv -> getId (); if ($hvv[0]=='n'){ $lx = substr ($hvv,1); $n2 = mm ($lx); if (!empty ($_config['search_favourites_boost'])) { if ($n2['IsFavourite']) { $resultSet->setRelevanceRatio ( $hvv, $_config['search_favourites_boost'] ); } } } } $snippetBuilder = new SnippetBuilder ($xvv); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets ( $resultSet, static function (array $wvv) use ($pe,$_config){ $e1 = new ExternalContent (); foreach ( array_slice ($wvv,0,SEARCH_SNIPPETS_LIMIT) as $jvv ) { $hvv = $jvv -> getId (); if ($hvv[0]=='n'){ $lx = substr ($hvv,1); $n2 = mm ($lx); if ($n2){ $noteView = new AeNoteView ($n2); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($pe and !@$_config['read_only']); $noteView -> setWantHiddenTags ($pe); $rx = $noteView -> getNoteCTree (); $uvv[$n2['ID']] = $rx; $e1 -> attach ($jvv,$rx['text']); } } } return $e1; } ); foreach($resultSet -> getItems () as $ivv){ $ovv = $ivv -> getId (); if ($ovv[0]=='n'){ $lx = substr ($ovv,1); $n2 = mm ($lx); if (!( rm ($n2)==='public' or ($pe and $n2['IsPublished']) )) continue; $n2['_']['_srprovider']='Rose'; $n2['_']['_rose_relevance']=$ivv -> getRelevance (); $n2['_']['_rose_title']=$ivv -> getHighlightedTitle ($xvv); $n2['_']['_rose_snippet']=$ivv -> getSnippet (); $evv[] = $n2; } } $pvv = false; if (@$_config['dev_rose_info']) { $pvv = print_r ($resultSet -> getTrace (), true); } } catch (EmptyIndexException $e){ la (); } catch (AeMySQLException $e){ kv ($e,'Could not do something with the database while working on Rose search results'); } } if(SEARCH_USE_MYSQL){ $cbv = rn (preg_quote ($bf)); if($_db['innodb-fulltext?']) { $vbv = "MATCH (`Title`, `Text`) AGAINST ('". $cbv ."')"; $bbv = 'MySQL FT'; } else { $vbv = "`Title` LIKE '%". $cbv ."%' OR `Text` LIKE '%". $cbv ."%'"; $bbv = 'MySQL Like'; } $ybv = ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 AND (". $vbv. ") ". tm ($pe). "LIMIT ". SEARCH_LIMIT ); try { xn ( $ybv, 'search using MySQL fulltext search' ); $e1 = en (); foreach ($e1 as $t => $n2){ $n2['_']['_srprovider']=$bbv; $evv[] = $n2; } } catch (AeMySQLException $e){ kv ($e,'Could not search using MySQL fulltext search'); } } $nbv = array (); $e5 = array (); $r = 0; foreach ($evv as $n2){ if (!in_array ($n2['ID'],$nbv)) { if (!empty ($uvv[$n2['ID']])) { $l2 = $uvv[$n2['ID']]; } else { $noteView = new AeNoteView ($n2); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($pe and !@$_config['read_only']); $l2 = $noteView -> getNoteCTree (); } $l2['search-result-provider']=$n2['_']['_srprovider']; if ($n2['_']['_srprovider']=='Rose'){ $l2['search-rose'] = [ 'relevance' => $n2['_']['_rose_relevance'], 'title' => $n2['_']['_rose_title'], 'snippet' => $n2['_']['_rose_snippet'], ]; } if (@$n2['_']['_rose_title']) { $l2['title']=$n2['_']['_rose_title']; } else { $l2['title']=ha ($l2['title'],$kvv); } $l2['title']=h3 ($l2['title']); if (!empty ($n2['_']['_rose_snippet'])) { $l2['snippet-text']=$n2['_']['_rose_snippet']; } else { $tv = $l2['text']; $tv = preg_replace ('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i','',$tv); $tv = preg_replace ('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i','',$tv); $tv = str_replace ( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $tv ); $tv = strip_tags ($tv); $mbv = array (); $fbv = preg_split ('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis',$tv); $dbv = 0; $sbv = ''; foreach ($fbv as $abv){ $abv = trim ($abv); if (!$abv) continue; if (!$sbv)$sbv = $abv; $qbv = $abv; $qbv = ha ($qbv,$kvv); if ($qbv != $abv){ $mbv[] = ga ($qbv); $dbv ++; if ($dbv > 3) break; } } if(count ($mbv)) { $l2['snippet-text']=implode (' · ',$mbv); } else { $l2['snippet-text']=$sbv; } } $l2['has-highlighed-thumbs?']=false; if ($ya = @$l2['format-info']['resources-detected']) { $lbv = qb ( db ($ya) ); foreach ($lbv as $t => $xf){ $lbv[$t]['highlighted?'] = ( strstr ($xf['original-filename'],$bf)!==false ); if ($lbv[$t]['highlighted?']) { $l2['has-highlighted-thumbs?']=true; } } $l2['thumbs']=$lbv; } $e5[] = $l2; $nbv[] = $n2['ID']; $r ++; if ($r >= SEARCH_LIMIT) break; } } $qj = count ($e5); if ($qj){ $zbv = e2l_get_string ( 'pt--n-posts', array ('number' => $qj) ); } else { $zbv = $_strings['pt--no-posts']; $d['nothing']=$_strings['gs--nothing-found']; } if ($r >= SEARCH_LIMIT){ $zbv = $_strings['gs--many-posts']; } if ($fj){ $d['search-related-tags']=$fj; } $d['notes']=$e5; $d['pages'] = array (); $d['title']=$zbv .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars ($bf,ENT_NOQUOTES,HSC_ENC); $d['heading']=$bf; if (@$pvv){ $d['rose-debug-info']=$pvv; } return $d; } function aa ($parameters){ if(Log::$cy)__log ('Search form'); $bf = trim ((string) @$parameters['query']); return [ 'form-action' => jv ('e2s_search'), 'query' => htmlspecialchars ($bf,ENT_COMPAT,HSC_ENC), ]; } function e2s_search () { $bf = @$_POST['query']; $bf = str_replace ('?',urlencode ('?'),$bf); $bf = str_replace ('/',' ',$bf); $bf = trim ($bf); $bf = str_replace (' ','+',$bf); c (jv ('e2m_found', array ('query' => $bf))); } function qa () { global$_config; $kbv = @unserialize (file_get_contents (USER_FOLDER . 'indexing.psa')); if (!is_array ($kbv))$kbv = array ('spent' => '?'); $xbv = $ebv = '?'; try { xn ( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ", 'count total published notes' ); $sy = en (); $xbv = $sy[0]['c']; xn ( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=1 AND `IsPublished`=1 ", 'count indexed published notes' ); $sy = en (); $ebv = $sy[0]['c']; } catch (AeMySQLException $e){ kv ($e,'Could not count some notes'); return false; } $rbv = true; foreach (ta () as $tbv){ if (!cn (SEARCH_EXTRA_PREFIX. $tbv)) { $rbv = false; break; } } if (!$rbv){ $ebv = 0; $kbv['spent']=false; } return [ 'indexed_count' => $ebv, 'total_count' => $xbv, 'time_spent' => @$kbv['spent']? $kbv['spent']:false, ]; } function e2s_bsi_step () { global$_db,$_config,$_strings; echo '<pre>'; if($_config['log_bsi']) { Log::$cy = true; if(Log::$cy)bv ('bsi'); } if(Log::$cy)__log ('BSI step'); if (!ka ()) { if(Log::$cy)__log ('Not indexing'); die ('Not indexing</pre>'); } $kbv = @unserialize (file_get_contents (USER_FOLDER . 'indexing.psa')); if (!is_array ($kbv))$kbv = array ('spent' => '?'); if ( !isset ($kbv['lock']) or $kbv['lock']<time () - (BSI_GIVE_UP_TIMEOUT + BSI_UNLOCK_TIMEOUT) ) { if (isset ($kbv['lock'])) { if(Log::$cy)__log ('Indexer: old lock is '. $kbv['lock']); echo 'Old lock is '. $kbv['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $kbv['lock']=time (); if (!@m3 (USER_FOLDER . 'indexing.psa',serialize ($kbv))) { if(Log::$cy)__log ('Indexer: can’t get a new lock'); die ('Can’t get a new lock<br />'); } if(Log::$cy)__log ('Indexer: new lock is '. $kbv['lock']); echo 'New lock is '. $kbv['lock'] .'<br /><br />'; try { $r = 0; $jbv = 0; $hbv = w (); $gbv = false; $sn = false; while ($jbv < BSI_GIVE_UP_TIMEOUT){ xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION, 'get portion of unindexed notes for indexing' ); $sy = en (); if(count ($sy)) { ++ $r; if(Log::$cy)__log ('Indexer: portion '. $r); echo 'Portion '. $r .'<br />'; foreach ($sy as $nl){ if(Log::$cy)__log ('Indexer: indexing "'. $nl['Title'].'"'); echo 'Indexing: '. $nl['Title'] .'<br />'; if (xa ($nl)) { $nl['IsIndexed']='1'; nn ('Notes',$nl); } else { $sn = true; break 2; } if($_config['broadcast_on_indexing']) { by ($nl); } } $jbv = round (w () - $hbv,3); if(Log::$cy)__log ('Indexer: step done '. count ($sy) .', spent '. $jbv .' ms so far'); echo 'Step done '. count ($sy) .', spent '. $jbv .' ms so far<br /><br />'; } else { $gbv = true; break; } } if ($gbv){ if(Log::$cy)__log ('Indexer: indexing complete'); echo 'Indexing complete<br /><br />'; @unlink (USER_FOLDER . 'indexing.psa'); } elseif ($sn){ if(Log::$cy)__log ('Indexer: indexing failed'); echo 'Indexing failed<br /><br />'; } else { echo 'Time out<br />'; unset ($kbv['lock']); $kbv['done']=count ($sy); if ($kbv['spent']!='?')$kbv['spent']+=$jbv; @m3 (USER_FOLDER . 'indexing.psa',serialize ($kbv)); } } catch (AeMySQLException $e){ kv ($e,'Could not index notes'); if(Log::$cy)__log ('Indexer: DB unaccessible'); echo 'DB unaccessible<br />'; } } else { if(Log::$cy)__log ('Indexer: locked'); echo 'Locked<br />'; } die ('</pre>'); } function e2s_bsi_drop () { if($_SERVER['REQUEST_METHOD']=='POST'){ z2 (); la (true); } c (jv ('e2m_underhood')); } function la ($wbv = false){ try { wa (); if ($wbv)mv ('Notes marked for reindexing',E2E_MESSAGE); $p3 = ja (); try { $p3 -> erase (); if ($wbv)mv ('Indexes erased',E2E_MESSAGE); } catch (\S2\Rose\Exception\RuntimeException $e){ kv ($e,'Rose threw RuntimeException'); } za (); } catch (AeMySQLException $e){ kv ($e,'Could not mark all notes for reindexing'); } } function za () { $kbv = array (); @m3 (USER_FOLDER . 'indexing.psa',serialize ($kbv)); } function ka () { return (is_file (USER_FOLDER . 'indexing.psa')); } function xa ($n2){ global$_config; if(Log::$cy)__log ('Indexer: index noterec'); static $ubv = null; try { if ($ubv === null){ $xvv = new PorterStemmerRussian (new PorterStemmerEnglish ()); $ubv = new Indexer (ja (), $xvv); } $t1 = u3 ($n2['FormatterID'], @$n2['Text'],'full-rss'); f3 ( 'note',$n2, $t1['meta']['resources-detected'] ); $tv = strip_tags ($t1['text-final']); $ibv = new Indexable ( 'n'. $n2['ID'], $n2['Title'], $tv, $_config['db_table_subset'] ); $ubv -> index ($ibv); return true; } catch (EmptyIndexException $e){ la (); } catch (\Exception $e){ kv ($e,'Could not index note'); return false; } } function ea ($is){ global$_config; static $ubv = null; try { if ($ubv === null){ $xvv = new PorterStemmerRussian (new PorterStemmerEnglish ()); $ubv = new Indexer (ja (), $xvv); } return $ubv -> removeById ('n'. $is,$_config['db_table_subset']); } catch (EmptyIndexException $e){ la (); } catch (\Exception $e){ kv ($e,'Could not index note'); return false; } } function ra ($obv){ $zz = 'S2\\Rose\\'; $pbv = __DIR__ . '/library/rose/'; $e2_ = strlen ($zz); if(strncmp ($zz,$obv,$e2_)!==0) return; $c3v = substr ($obv,$e2_); $fy = $pbv . str_replace ('\\','/',$c3v).'.php'; if(file_exists ($fy)) require $fy; } function ta () { return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function ja () { global$_config,$settings; static $v3v = null; if ($v3v === null and SEARCH_USE_ROSE){ if(getenv ('E2_DB_SERVER'))$u3['server']=getenv ('E2_DB_SERVER'); if(getenv ('E2_DB_USER_NAME'))$u3['user_name']=getenv ('E2_DB_USER_NAME'); if(getenv ('E2_DB_PASSW'))$u3['passw']=p2 (getenv ('E2_DB_PASSW')); if(getenv ('E2_DB_NAME'))$u3['name']=getenv ('E2_DB_NAME'); if (empty ($u3))$u3 = $settings['db']; list ($mz,$fz)=wn ($u3['server']); if ((string)$fz === '')$fz = null; $b3v = new \PDO ( 'mysql:'. 'host='. $mz .';'. 'dbname='. $u3['name'].';'. 'port='. $fz, $u3['user_name'], cd ($u3['passw']) ); $dk = $b3v -> getAttribute(\PDO::ATTR_SERVER_VERSION); $y3v = version_compare ($dk,'5.5.3','>=')?'utf8mb4' : 'utf8'; $b3v -> exec ('SET NAMES '. $y3v); $b3v -> setAttribute (\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); $n3v = ta (); $v3v = new PdoStorage ( $b3v, $_config['db_table_prefix'].SEARCH_EXTRA_PREFIX, array ( MysqlRepository::TOC => $n3v['TOC'], MysqlRepository::WORD => $n3v['WORD'], MysqlRepository::FULLTEXT_INDEX => $n3v['FULLTEXT_INDEX'], MysqlRepository::KEYWORD_INDEX => $n3v['KEYWORD_INDEX'], MysqlRepository::KEYWORD_MULTIPLE_INDEX => $n3v['KEYWORD_MULTIPLE_INDEX'], ) ); } return $v3v; } function ha ($tv,$kvv){ foreach ($kvv as $m4){ if ($m4 == '-') continue; $m4 = preg_quote ($m4,'/'); $m4 = str_replace ('е','[её]',$m4); $m4 = str_replace ('Е','[ЕЁ]',$m4); $tv = preg_replace ('/(?<=^|\W)('.$m4.'[\w\p{M}]*)/iu','<mark>$1</mark>',$tv); } $tv = str_replace ('</mark> <mark>',' ',$tv); $tv = str_replace ('</mark> <mark>',' ',$tv); return $tv; } function ga ($o2){ $m3v = mb_strtoupper (mb_substr ($o2,0,1)); return $m3v . mb_substr ($o2,1); } function wa () { global$_config; xn ( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `IsIndexed`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'mark all notes for reindexing' ); } function e2_check_timeout(){ static $f3v; if(is_null($f3v)) { $d3v = ini_get('max_execution_time'); if ($d3v){ $f3v = time()+$d3v - 5; } else { $f3v = 0; } } return ($f3v == 0)?true : $f3v >= time(); } function e2_write_dump_header($fy){ $ss = ( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($fy,$ss); return true; } function e2_write_dump_footer($fy){ $s3v = 'COMMIT;' .PHP_EOL; $s3v .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" . PHP_EOL . "/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" . PHP_EOL . "/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;" . PHP_EOL . "/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" . PHP_EOL; fwrite($fy,$s3v); return true; } function e2_get_table_definition($a3v,$lz){ $q3v = null; $e1 = mysqli_query($a3v,"SHOW CREATE TABLE `{$lz}`"); if ($e1){ $l3v = mysqli_fetch_array($e1); $q3v = $l3v['Create Table']; } return $q3v; } function e2_write_table_definition($fy,$a3v,$lz){ $z3v = e2_get_table_definition($a3v,$lz); if(e2_check_timeout() && $z3v){ fwrite($fy,$z3v); fwrite($fy,';'); fwrite($fy,PHP_EOL . PHP_EOL); return true; } return false; } function e2_get_table_data($a3v,$lz,$sl,$limit){ $bf = "SELECT * FROM `{$lz}` LIMIT {$sl}, {$limit}"; $e1 = mysqli_query($a3v,$bf); if (!$e1){ return false; } $k3v = ''; $x3v = "INSERT INTO `{$lz}` VALUES"; while ($cz = mysqli_fetch_row($e1)) { $mvv = array(); foreach($cz as $s){ $mvv[] = is_null($s)?"NULL" : "'" . mysqli_real_escape_string($a3v,$s)."'"; } $k3v .= $x3v . '(' . join(', ',$mvv).');' . PHP_EOL; } return $k3v; } function e2_table_disable_keys($lz){ return "ALTER TABLE `{$lz}` DISABLE KEYS;" . PHP_EOL; } function e2_table_enable_keys($lz){ return "ALTER TABLE `{$lz}` ENABLE KEYS;" . PHP_EOL; } function e2_get_total_records($a3v,$lz){ $t = mysqli_fetch_row(mysqli_query($a3v,"SELECT COUNT(*) FROM `{$lz}`")); return $t[0]; } function e2_backup_select_chuck_size_for_table_($lz){ $limit = 5000; if(substr ($lz, -7)==='Actions')$limit = 50000; if(substr ($lz, -7)==='Aliases')$limit = 20000; if(substr ($lz, -7)==='NotesKeywords')$limit = 50000; if(Log::$cy)__log ('Backup: chunk size '. (int)$limit); return$limit; } function e2_write_table_data($fy,$a3v,$lz){ $qj = e2_get_total_records($a3v,$lz); $sl = 0; $limit = e2_backup_select_chuck_size_for_table_($lz); $e1 = true; $e3v = 20000; $r3v = 30; if ($qj){ $t3v = e2_table_disable_keys($lz); fwrite($fy,$t3v); } $k3v = "INSERT INTO `{$lz}` VALUES"; $j3v = $qj; while ($j3v > 0){ $bf = "SELECT * FROM `{$lz}` ORDER BY `ID` LIMIT {$sl}, {$limit}"; $e1 = mysqli_query($a3v,$bf); $h3v = mysqli_num_rows($e1); if (!$e1 || !e2_check_timeout()) { $e1 = false; break; } $g3v = array(); $w3v = 0; $u3v = 0; while ($cz = mysqli_fetch_row($e1)) { if (!e2_check_timeout()) { $e1 = false; break; } $h3v--; $rz = array(); foreach($cz as $s){ $rz[] = is_null($s)?"NULL" : "'" . mysqli_real_escape_string($a3v,$s)."'"; } $lv = '(' . join(', ',$rz).')'; $w3v += strlen($lv); $g3v[] = $lv; $u3v++; if ( ($w3v >= $e3v) || ($u3v >= $r3v) || ($h3v == 0)) { $bf = $k3v . join(', ',$g3v).';'; fwrite($fy,$bf); fwrite($fy,PHP_EOL); $w3v = 0; $u3v = 0; $g3v = array(); } } $sl += $limit; $j3v -= $limit; } if ($qj){ $i3v = e2_table_enable_keys($lz); fwrite($fy,$i3v); } return $e1; } function e2_backup($a3v,$e7,$o3v,$cb = array()) { $p3v = tmpfile(); e2_write_dump_header($p3v); if(Log::$cy)__log ('Backup: wrote header'); $cyv = true; foreach($e7 as $lz){ if(Log::$cy)__log ('Backup: table '. $lz); $vyv = e2_write_table_definition($p3v,$a3v,$lz); if(Log::$cy)__log ('Backup: wrote table definition with result '. @(int)$vyv); $byv = e2_write_table_data($p3v,$a3v,$lz); if(Log::$cy)__log ('Backup: wrote table data with result '. @(int)$byv); $cyv = $vyv && $byv; if ($cyv === false){ break; } } if(Log::$cy)__log ('Backup: wrote data with running == '. (int)$cyv); if ($cyv){ e2_write_dump_footer($p3v); fseek($p3v,0); $fy = fopen($o3v,'w+'); while ($cyv && ($lv = fread($p3v,1024))) { if(e2_check_timeout()) { fwrite($fy,$lv); } else { $cyv = false; } } fclose($fy); } fclose($p3v); return $cyv; } function a1 ($yyv,$content){ $nyv = MTMPL_FOLDER . $yyv .'.mtmpl.php'; if(is_file ($nyv)) { ob_start (); include $nyv; $r8 = ob_get_contents (); ob_end_clean (); return trim ($r8); } } function q1 () { global$_config,$_superconfig; $myv = $_config['mail_from']; if (@$_superconfig['mail_from']) { $myv = $_superconfig['mail_from']; } if ($myv[strlen ($myv)-1]=='@'){ $myv .= $_SERVER['HTTP_HOST']; } return $myv; } function l1 ($w,$subject,$xn,$fyv = ''){ global$_superconfig; if (@$_superconfig['mail_debug']) { $oa = 'mail-debug'; $dn = basename (tempnam ($oa,'m-')); $tv = ( 'To:       '.$w ."\n". 'Subject:  '.$subject ."\n". $fyv ."\n". "--------------------------------------------------\n". $xn ); m3 ($oa .'/'. $dn,$tv); chmod ($oa .'/'. $dn,E2_NEW_FILES_RIGHTS); rename ($oa .'/'. $dn,$oa .'/'. $dn.'.txt'); } $subject = '=?UTF-8?B?'. base64_encode ($subject) .'?='; $fyv .= "\r\nContent-Type: text/plain; charset=utf-8"; if(MAIL_ENABLED){ mail ($w,$subject,$xn,trim ($fyv)); } } function _A ($tv){ global$_candy,$_protocol,$v,$c,$_current_url; if ( preg_match ('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si',$tv,$y3) and ( $y3[1]==='' or $y3[1]===$_current_url or $_protocol .'://'. $v . $y3[1]===$_current_url or $_protocol .'://'. $v . $c .'/'. $y3[1]===$_current_url or $_candy == 'e2m_install' ) ) { return $y3[2]; } else { return $tv; } } function _AT ($uq){ global$_protocol,$v,$c,$_current_url; return ( $uq === '' or $uq === $_current_url or $_protocol .'://'. $v . $uq === $_current_url or $_protocol .'://'. $v . $c .'/'. $uq === $_current_url ); } function _READS ($rx){ if (!empty ($rx['read-count'])) return $rx['read-count']; return AeNoteReadCountsProvider :: getReadCountForNoteID ($rx['id']); } function _IMGSRC ($fb){ return ps ($fb); } function _SVG ($fb){ return ca ($fb); } function _COLOR ($jx,$hx,$dyv,$syv = 1){ if(strlen ($jx)!=3 and strlen ($jx)!=6) return 'f0f'; if(strlen ($hx)!=3 and strlen ($hx)!=6) return 'f0f'; if(strlen ($jx)==3)$jx = $jx[0].$jx[0].$jx[1].$jx[1].$jx[2].$jx[2]; if(strlen ($hx)==3)$hx = $hx[0].$hx[0].$hx[1].$hx[1].$hx[2].$hx[2]; $iz = array ( $jx[0].$jx[1],$jx[2].$jx[3],$jx[4].$jx[5], $hx[0].$hx[1],$hx[2].$hx[3],$hx[4].$hx[5], ); foreach ($iz as $t => $xf){ $iz[$t]=hexdec ($xf); } $ty = array ( $iz[0]+pow ($dyv,$syv) * ($iz[3]-$iz[0]), $iz[1]+pow ($dyv,$syv) * ($iz[4]-$iz[1]), $iz[2]+pow ($dyv,$syv) * ($iz[5]-$iz[2]), ); $ayv = ''; foreach ($ty as $t => $xf){ $ayv .= str_pad (dechex ($xf),2,'0',STR_PAD_LEFT); } return $ayv; } function _DT ($il,$qyv){ if (!$qyv) return ''; list ($a4,$rl)=$qyv; $d = $il; $a9 = ky ('m',$a4,$rl); $d = str_replace ('{zone}',e2__escape_all (my ($rl['offset'])), $d); $d = str_replace ('{month}',e2__escape_all (e2l_get_string ('um--month', array ('month' => $a9))), $d); $d = str_replace ('{month-short}',e2__escape_all (e2l_get_string ('um--month-short', array ('month' => $a9))), $d); $d = str_replace ('{month-g}',e2__escape_all (e2l_get_string ('um--month-g', array ('month' => $a9))), $d); $d = ky ($d,$a4,$rl); return $d; } function _AGO ($qyv){ return oy ($qyv[0], array ('offset' => $qyv[1]['offset'],'is_dst' => $qyv[1]['is_dst']) ); } function _NUM ($tv){ return e2_decline_for_number ($tv); } function _CSS ($lyv){ return ws ($lyv); } function _CSS_HREF ($lyv){ return va ($lyv); } function _JS ($zyv){ return us ($zyv); } function _LIB ($zo){ return is ($zo); } function _T ($do_){ echo hs ($do_); } function _T_DEFER ($name){ echo rs ($name); } function _X ($do_){ echo js ($do_); } function _T_FOR ($do_,$kyv = null){ global$content; if ($kyv === null)$kyv = $do_; if(array_key_exists ($kyv,$content)) { echo hs ($do_); } else { echo ''; } } function _FIT ($fp,$dp){ } function _GUIDES ($xyv = false){ global$_olba_guides; if(is_array ($xyv))$_olba_guides = $xyv; if (!is_array ($_olba_guides)) return; $eyv = '<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $ryv = 0; $tyv = $_olba_guides; $tyv[] = 100; foreach ($tyv as $r => $n7){ if ($n7 == 100) break; $ryv += $n7; $eyv .= '<div style="position: fixed; left: '. $n7 .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $jyv = 'position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($tyv[$r+1]-$tyv[$r]<4){ $eyv .= '<div style="'. $jyv.'; right: '. (100 - $n7) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $n7 .'%</div>'; } else { $eyv .= '<div style="'. $jyv.'; left: '. $n7 .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $n7 .'%</div>'; } } $eyv .= '</div>'; $_olba_current_col = 0; return $eyv; } function _S ($x){ global$_strings; return$_strings[$x]; } function _SHORTCUT ($name){ return a ($name); } function e2__escape_all ($x){ $d = ''; for ($r = 0; $r < mb_strlen ($x); ++ $r){ $d .= '\\'. mb_substr ($x,$r,1); } return $d; } abstract class E2GIP { protected $gip_cookie_name = 'gip'; protected $gip_token_cookie_name = 'gip_access_token'; protected $gip_token = null; abstract public function get_auth_url(); abstract public static function get_profile_url($is,$bp); abstract public function callback(); const PHP_VERSION_VK_FEATURE = 70100; public static function set_session_data($rm,$s){ if(session_status()==PHP_SESSION_NONE){ session_start(); } $_SESSION[$rm]=$s; } public static function get_session_data($rm,$hyv = false){ if(session_status()==PHP_SESSION_NONE){ session_start(); } if(!isset($_SESSION[$rm])) { return null; } $s = $_SESSION[$rm]; if($hyv){ unset($_SESSION[$rm]); } return $s; } public static function get_gips_order(){ return [ 'twitter' => 0, 'facebook' => 1, 'vk' => 2, 'telegram' => 3 ]; } public function get_config($rm){ $gyv = 'gips/'. $this->type .'.json'; if(is_file (USER_FOLDER . $gyv)) { $ru = @file_get_contents (USER_FOLDER . $gyv); } else { $ru = @file_get_contents (SYSTEM_FOLDER . $gyv); } if ($ru !== false){ $d = json_decode ($ru,true,512,JSON_BIGINT_AS_STRING)[$rm]; if ($d) return $d; } return null; } public function get_callback_url(){ return jv('e2m_gip_sign_in_callback', array('provider' => $this->type)); } protected function get_proxy_param(){ global$settings; $yp = DEFAULT_LANGUAGE; if(array_key_exists ('language',$settings))$yp = $settings['language']; return '?language=' . $yp . '&type=' . $this->type . '&callback_url=' . urlencode($this->get_callback_url()); } public function get_gip_session_data(){ global$_config; $wyv = $this->gip_token ? $this->gip_token : $_COOKIE[b($this->gip_token_cookie_name)]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '". $this->type ."' ". "AND `SessionToken` = '" . rn($wyv)."' ". "ORDER BY `ID` DESC LIMIT 1", 'get GIP session data' ); $e1 = en (); return $e1 ? $e1[0] : array(); } public function is_logged_in(){ if(empty($_COOKIE[b($this->gip_cookie_name)]) || !in_array($_COOKIE[b($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[b($this->gip_cookie_name)] != $this->type || empty($_COOKIE[b($this->gip_token_cookie_name)])) { return false; } $lv = $this->get_gip_session_data(); return (bool)$lv; } protected function save_session($is,$name,$accessToken,$uyv = '',$userEmail = '',$userLink = ''){ $a4 = time(); yn ( 'GIPsSessions', [ 'GIP' => $this->type, 'GIPAuthorID' => $is, 'AuthorName' => $name, 'AuthorEmail' => $userEmail, 'AuthorProfileLink' => $userLink, 'SessionToken' => $accessToken, 'Stamp' => $a4, ], 'INSERT', 'ON DUPLICATE KEY UPDATE '. '`SessionToken` = "' . rn($accessToken).'", '. '`AuthorName` = "' . rn($name).'", '. '`Stamp` = "' . $a4 . '"' ); y($this->gip_cookie_name,$this->type); y($this->gip_token_cookie_name,$accessToken); if(isset($userEmail) && !empty($userEmail))y('commenter_email',$userEmail); $this->gip_token = $accessToken; } public static function get_logout_key(){ if ($iyv = self::get_session_data('logout_key')) { return $iyv; } $iyv = md5(microtime()); self::set_session_data('logout_key',$iyv); return $iyv; } public static function is_valid_logout_key($rm){ $oyv = self::get_session_data('logout_key',true); if (empty($oyv) || empty($rm) || $oyv != $rm){ return false; } return true; } public function logout(){ global$_config; y($this->gip_cookie_name); y($this->gip_token_cookie_name); xn ( "DELETE FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '" . $this->type . "' ". "AND `SessionToken` = '" . rn($_COOKIE[b($this->gip_token_cookie_name)]) . "'", 'logout' ); } public function get_avatar_width(){ return USERPIC_WIDTH; } public function get_avatar_height(){ return USERPIC_HEIGHT; } public function save_avatar($is,$pyv){ global$_config; if (!preg_match ('/^https?\:\/\//i',$pyv)) return; $pyv = str_replace ("\0",'',$pyv); $is = preg_replace ('/[^a-zA-Z0-9._-]/','',$is); $is = substr ($is,0,64); @j (MEDIA_ROOT_FOLDER . AVATARS_FOLDER); @chmod (MEDIA_ROOT_FOLDER . AVATARS_FOLDER,$_config['uploaded_files_mode']); $fb = MEDIA_ROOT_FOLDER . AVATARS_FOLDER . $this->type .'-'. $is .'.jpg'; if ($cnv = file_get_contents ($pyv)) { file_put_contents ($fb,$cnv); } return $fb; } } function e2m_gip_sign_in($lv){ global$_config,$settings; $type = $lv['provider']; $fk = e2_get_gip_instance($type); if (!$fk)v (); header('Location: ' . $fk->get_auth_url()); die; } function e2m_gip_sign_in_callback($lv){ global$_config; $type = $lv['provider']; $fk = e2_get_gip_instance($type); if (!$fk){ die ('Unknown provider'); } $vnv = $fk->callback(); echo '<script>'; if ($vnv === true){ $lg = $fk->get_gip_session_data(); $bnv = [ 'name' => $lg['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized(' . json_encode($bnv).');'; } else { echo 'alert (\''. $vnv. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($lv){ global$_config; $iyv = $lv['provider']; if (!E2GIP::is_valid_logout_key($iyv)) { die('invalid logout key'); } $fk = e2_get_logged_gip(); if($fk){ $fk->logout(); } v(); } function e2_list_gips(){ static $ynv = null; if(!is_null($ynv)) { return $ynv; } $nnv = SYSTEM_FOLDER. 'gips/'; $mnv = opendir($nnv); $ynv = []; $fnv = E2GIP::get_gips_order(); $dnv = count($fnv); while (($fy = readdir($mnv)) !== false){ if(pathinfo($fy,PATHINFO_EXTENSION)!='php') continue; $snv = pathinfo($fy,PATHINFO_FILENAME); if ($snv == 'vk'){ if(PHP_VERSION_ID < E2GIP::PHP_VERSION_VK_FEATURE) continue; } $rm = isset($fnv[$snv]) ? $fnv[$snv] : ++$dnv; $ynv[$rm]=$snv; } closedir($mnv); ksort($ynv); return $ynv; } function e2_get_gip_class_name($type){ return "E2GIP" . ucfirst($type); } function e2_get_gip_instance($type){ if (!in_array($type,e2_list_gips())) { return false; } $anv = e2_get_gip_class_name($type); $fk = new $anv; return $fk; } function e2_get_gip_auth_url($type){ return jv('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type = ''){ $qnv = !$type ? e2_list_gips() : array($type); foreach($qnv as$type){ $fk = e2_get_gip_instance($type); if ($fk && $fk->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip(){ foreach(e2_list_gips() as$type){ $fk = e2_get_gip_instance($type); if ($fk && $fk->is_logged_in()) { return $fk; } } return false; } function e2_get_logged_gip_name(){ foreach(e2_list_gips() as$type){ $fk = e2_get_gip_instance($type); if ($fk && $fk->is_logged_in()) { return$type; } } return false; } function e2_get_user_profile_url($type,$is,$bp){ $anv = e2_get_gip_class_name($type); return $anv::get_profile_url($is,$bp); } function e2_get_gip_session($type){ $fk = e2_get_gip_instance($type); if (!$fk || !$fk->is_logged_in()) { return false; } return $fk->get_gip_session_data(); } foreach(e2_list_gips() as $ag){ require_once 'system/gips/' . $ag . '.php'; } define ('__DEV', (@$_config['dev_verbose'] > (int) !r2 ())); $_stopwatch = w ($_stopwatch); spl_autoload_register ('ra'); vv (); o (); $_strings = cv (); if (!BUILT) @include 'builder.php'; function e2 () { global$settings,$content, $_candy, $_lang, $_config, $_strings, $_candies_installer, $_candies_public, $_candies_ajax, $_candies_to_disallow_in_read_only, $_template, $_diagnose; k (); set_error_handler ('dv'); set_exception_handler ('ev'); header ('X-Powered-By: E2 Aegea v'. E2_VERSION); header ('Content-type: text/html; charset=UTF-8'); list ($candy,$parameters)=hv (); try { $content = []; $_candy = $candy; if ( @$_config['dev_slow_ajax'] and ( in_array ($candy,$_candies_ajax) ) ) { sleep (1 + 2 * (rand () / getrandmax ())); } if (!in_array ($candy,$_candies_installer)) { an (); } if (@$_config['read_only'] and in_array ($candy,$_candies_to_disallow_in_read_only)) { $candy = 'e2m_error404'; } $lnv = (bool)r2 (); $znv = !in_array ($candy,$_candies_public); if(Log::$cy)__log ('User signed in? '. ($lnv? 'Yes' : 'No')); $_newsfeeds = []; ed ('rss',yd (), jv ('e2m_rss')); ed ('json',yd (), jv ('e2m_json')); if(substr ($candy,0,4)=='e2m_'){ ks (); } if(is_callable ($candy)) { if ($znv && !$lnv){ if(substr ($candy,0,4)=='e2s_'){ c (jv ('e2m_sign_in')); } else { $content['title']=$_strings['pt--sign-in']; } } else { if(Log::$cy)__log ('Candy call {'); $content = call_user_func ($candy,$parameters); if(Log::$cy)__log ('}'); } } else { $znv = false; $content = e2_error404_mode (); } } catch (AeMySQLException $e){ if(substr ($candy,0,4)=='e2s_'){ xv ($e); } else { kv ($e); $parameters = array (); $content['unavailable?']=true; } } if (!is_array ($content))$content = array (); $content['template']['respond-to-dark-mode?'] = ( $_template['supports_dark_mode'] and (bool) @$settings['appearance']['respond_to_dark_mode'] ); $content['template']['use-likely-light?']=$_template['use_likely_light']; if (!array_key_exists ('class',$content)) { $content['class']=str_replace ('_','-',str_replace ('e2m_','',$candy)); } if (!array_key_exists ('notes',$content))$content['notes'] = []; if (!array_key_exists ('drafts',$content))$content['drafts'] = []; if (!array_key_exists ('comments',$content))$content['comments'] = []; if (!array_key_exists ('notes-list',$content))$content['notes-list'] = []; if (fn_ () !== null){ if(Log::$cy)__log ('Stuff for installed engine {'); $content['sign-in'] = [ 'done?' => $lnv, 'required?' => $znv, 'necessary?' => $znv && !$lnv, 'href' => jv ('e2m_sign_in'), 'prompt' => $_strings['gs--need-password'], ]; $content['hrefs'] = array ( 'everything' => jv ('e2m_everything'), ); if (!array_key_exists ('tags',$content)) $content['tags']=ff ($parameters); $content['blog']=bd (); $content['form-search']=aa ($parameters); $content['engine']=im (); $content['form-login']=vd (); if($content['form-login']===null) unset($content['form-login']); if (!array_key_exists ('summary',$content)) { if (!empty ($settings['meta_description'])) { $content['summary']=strip_tags (h3 (htmlspecialchars ($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } else { $content['summary'] = @trim (strip_tags ($content['blog']['subtitle'])); } } if (r2 ()) { $content['admin']=pm (); $content['last-modifieds-by-id']='{}'; if (@$_COOKIE[b ('local_copies')]) { $content['last-modifieds-by-id'] = ( dm ($_COOKIE[b ('local_copies')]) ); } } if(Log::$cy)__log ('}'); } $content['title']=strip_tags (h3 (htmlspecialchars ($content['title'],ENT_NOQUOTES,HSC_ENC))); if (@$content['heading']) { $content['heading']=strip_tags (h3 (htmlspecialchars ($content['heading'],ENT_NOQUOTES,HSC_ENC))); } $content['language']=$_lang; if (!@isset ($_diagnose['ok?'])) { if (@$_COOKIE[b ('diagnose')] or @$_diagnose['need?']) { fv (); } } if (fn_ () !== null){ if (@$settings['appearance']['show_view_counts']) { AeNoteReadCountsProvider :: setSQLRequestTemplateToMapIDsToReadCounts ( "SELECT `ID`, `ReadCount` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } foreach($content['notes'] as $l2){ na (@$l2['format-info']['links-required']); } } $content['message']=av (); $yo = gs (); $content['meta']=om ( $candy, $content['notes'], @$content['tag'], $content['blog'], $content['pages'] ); $content['stat']=fd (); $yo = ts ($yo); if (fn_ () !== null){ $knv = false; if (fn_ () !== null and ka ()) { if(is_writable (USER_FOLDER . 'indexing.psa')) { $knv = true; } else { $_diagnose['need?']=true; y ('diagnose','1'); } } } echo $yo; if (fn_ () !== null){ if ($knv){ if(Log::$cy)__log ('Spawn BSI step'); p3 (jv ('e2s_bsi_step', array ())); } } if (@$_config['dev_dump_ctree'])yv ($content); } ?>