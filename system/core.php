<?php $_stopwatch = microtime (); define ('E2_VERSION',3820); define ('E2_RELEASE','2.10'); define ('E2_UA_STRING','E2 (v'. E2_VERSION .'; Aegea)'); define ('E2_MINIMUM_PHP','5.6'); define ('E2_MINIMUM_MYSQL',4.1); define ('BUILDER_OBFUSCATE',1); define ('BUILDER_FLATTEN',1); define ('E2_NEW_FILES_RIGHTS',0777); define ('E2_JSON_STYLE',JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); define ('E2_RUN_ID',chr (rand (65,90))); define ('HSC_ENC','UTF-8'); define ('SECONDS_IN_A_MINUTE',60); define ('SECONDS_IN_AN_HOUR',3600); define ('SECONDS_IN_A_DAY',86400); define ('SECONDS_IN_A_WEEK',604800); define ('SECONDS_IN_A_MONTH',2592000); define ('SECONDS_IN_A_YEAR',31536000); if(version_compare (PHP_VERSION,E2_MINIMUM_PHP)<0){ die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } if (!function_exists ('getimagesize')) { die ('Function getimagesize is not defined, php_gd not installed?'); } if (!function_exists ('mb_internal_encoding')) { die ('Function mb_internal_encoding is not defined, php_mbstring not installed?'); } error_reporting (E_ALL); setlocale (LC_CTYPE,'ru_RU.UTF'); mb_internal_encoding ('UTF-8'); date_default_timezone_set ('GMT'); if(version_compare (PHP_VERSION,'7.0')<0){ error_reporting (E_ALL & ~E_STRICT); } if(is_file ('superconfig.php')) { include 'superconfig.php'; } $_protocol = ( !empty ($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off' or $_SERVER['SERVER_PORT']==443 or isset ($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO']=='https' or isset ($_SERVER['HTTP_X_HTTPS']) && ($_SERVER['HTTP_X_HTTPS']) ) ? 'https' : 'http'; if(is_file ('force-https')) { $_protocol = 'https'; } $c = substr ( $_SERVER['PHP_SELF'],0,strpos ($_SERVER['PHP_SELF'],'/index.php') ); list ($v, ) = explode (':',$_SERVER['HTTP_HOST']); $full_blog_url = $_protocol. '://'. $v . $c; $_user_folder_name = str_replace ('/','--',$v . $c); if(substr ($_user_folder_name,0,4)=='www.'){ $_user_folder_name = substr ($_user_folder_name,4); } if(is_file ('multiuser')) { if ( !empty ($_superconfig) and array_key_exists ('rewrites',$_superconfig) and array_key_exists ($_user_folder_name,$_superconfig['rewrites']) ) { $_user_folder_name = $_superconfig['rewrites'][$_user_folder_name]; } define ('USER_FOLDER','users/'. $_user_folder_name .'/'); define ('USER_FOLDER_URLPATH','user/'); } else { define ('USER_FOLDER','user/'); define ('USER_FOLDER_URLPATH','user/'); } if ( !empty ($_superconfig) and array_key_exists ('store_files_by_users',$_superconfig) and $_superconfig['store_files_by_users'] ) { define ('MEDIA_ROOT_FOLDER',USER_FOLDER .'files/'); } else { define ('MEDIA_ROOT_FOLDER',''); } if(in_array ('mail',explode (',',ini_get ('disable_functions')))) { define ('MAIL_ENABLED',false); } else { define ('MAIL_ENABLED',true); } define ('EXTRAS_FOLDER',USER_FOLDER . 'extras/'); define ('BACKUP_FOLDER',USER_FOLDER . 'backup/'); define ('CACHES_FOLDER',USER_FOLDER . 'caches/'); define ('USER_LIBRARY_FOLDER',USER_FOLDER . 'library/'); define ('LOG_FOLDER',USER_FOLDER . 'logs/'); define ('LICENSE_FILE',USER_FOLDER . 'license.psa'); define ('PICTURES_FOLDER','pictures/'); define ('THUMBNAILS_FOLDER','pictures/thumbs/'); define ('AVATARS_FOLDER','pictures/avatars/'); define ('VIDEO_FOLDER','video/'); define ('AUDIO_FOLDER','audio/'); define ('TEMPLATES_FOLDER','themes/'); define ('SYSTEM_FOLDER','system/'); define ('SCRIPTS_FOLDER','system/js/'); define ('SYSTEM_LIBRARY_FOLDER','system/library/'); define ('SYSTEM_TEMPLATE_FOLDER','system/theme/'); define ('VIDEO_ICON_IMAGE','system/theme/images/video.svg'); define ('VIDEO_ICON_WIDTH',180); define ('VIDEO_ICON_HEIGHT',120); define ('AUDIO_ICON_IMAGE','system/theme/images/audio.svg'); define ('AUDIO_ICON_WIDTH',120); define ('AUDIO_ICON_HEIGHT',120); define ('LANGUAGES_FOLDER','system/languages/'); define ('DEFAULTS_FOLDER','system/default/'); define ('MTMPL_FOLDER','system/default/mail/'); define ('DEFAULT_TEMPLATE','acute'); if (!is_file (DEFAULTS_FOLDER. 'config.php')) die ('System config missing'); include DEFAULTS_FOLDER . 'config.php'; $_default_config = $_config; if(is_file (USER_FOLDER. 'config.php')) { include USER_FOLDER . 'config.php'; $_config = array_merge ($_default_config,$_config); } define ('E2E_STRANGE_ERROR',10); define ('E2E_USER_ERROR',20); define ('E2E_PERMISSIONS_ERROR',30); define ('E2E_MESSAGE',100); define ('E2E_DIAGNOSTICS_MESSAGE',110); define ('DEFAULT_ITEMS_PER_PAGE',10); define ('MAX_ITEMS_PER_PAGE',100); define ('FP_NO_ID_OR_NEW', -1); define ('FP_INSERT_ERROR', -10); define ('FP_UPDATE_ERROR', -11); define ('FP_EMPTY_FIELD', -20); define ('FP_TITLE_OR_TEXT_EMPTY', -21); define ('FP_NOT_COMMENTABLE', -30); define ('FP_COMMENT_DOUBLE_POST', -101); define ('FP_COMMENT_TOO_LONG', -102); define ('FP_COMMENT_SPAM_SUSPECT', -103); define ('NOTE_COMMENTABLE_NOW', -1); define ('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define ('THUMB_WIDTH',180); define ('THUMB_HEIGHT',120); define ('THUMB_JPG_QUALITY',50); define ('SCALED_IMAGE_JPG_QUALITY',80); define ('USERPIC_WIDTH',80); define ('USERPIC_HEIGHT',80); define ('USERPIC_JPG_QUALITY',80); $_fp_error = false; if(strstr (__FILE__,'all.php')) { define ('BUILT',0); } else { define ('BUILT',1); } function c ($b = ''){ global$_protocol,$errors,$v,$c; @session_start (); $_SESSION['errors']=$errors; if(substr ($b,0,strlen ($_protocol)+3)!=$_protocol .'://'){ header ('Location: '. $_protocol .'://'. $v . $c .'/'. $b); } else { header ('Location: '. $b); } flush (); die; } function v () { $y = $_SERVER['HTTP_REFERER']; c ($y); } function b ($n = ''){ global $c; $m = str_replace ('/','--',trim ($c,'/')); if ($m !== '')$m .= '-'; $f = substr_count ($_SERVER['HTTP_HOST'],'.'); $d = $m . @str_repeat ('_',$f).$n; return $d; } function y ($n,$s = '',$a = true){ $q = $a? (time () + 3600 * 24 * 365) : (0); $l = $_SERVER['HTTP_HOST']; $z = substr_count ($l,'.'); if ($z < 3)$l = str_repeat ('.',3 - $z).$l; $f = setcookie (b ($n),$s,$q,'/'); } function n ($k,$x,$e_ = ''){ if(trim ($x)!=''){ $x = explode ($k,$x); foreach ($x as $r => $t)$x[$r]=trim ($t); foreach ($x as $r => $t) if ($t == '') unset ($x[$r]); $j = array_unique ($x); if ('sort' == $e_)sort ($j); return $j; } else return array (); } function m ($x){ $g = array (); if(is_file (DEFAULTS_FOLDER . 'romanize.txt')) { $g = file (DEFAULTS_FOLDER . 'romanize.txt'); } $w = $u = ''; foreach ($g as $r => $i){ if (!($r%2))$w .= rtrim ($i) .' '; else $u .= rtrim ($i) .' '; if ($r%2){ while (mb_strlen ($u)<mb_strlen ($w))$u .= ' '; while (mb_strlen ($u)>mb_strlen ($w))$w .= ' '; } } $o = ''; $p = -1; for ($r = 0; $r < mb_strlen ($w); ++ $r){ $cv = mb_substr ($w,$r,1); if ($cv != ' '){ $o .= $cv; if ($p == -1)$p = $r; } elseif ($o){ $vv = trim (mb_substr ($u,$p,mb_strpos ($u,' ',$p + 1)-$p)); $bv = array ($o,$vv); $yv[mb_strlen ($o)][] = $bv; $o = ''; $p = -1; } } $nv = array (); for ($r = count ($yv); $r > 0; -- $r){ foreach ($yv[$r] as $bv)$nv[$bv[0]] = $bv[1]; } return strtr ($x,$nv); } function f ($mv,$fv,$dv = 0){ if ($fv == 0) return 0; $sv = round ($mv / $fv * 100,$dv); $av = pow (10, -$dv); if ($mv > 0 and $sv == 0)$sv = $av; if ($mv < $fv and $sv == 100)$sv = 100 - $av; return $sv; } function d ($qv,$action,$lv){ if (!is_array ($qv))$qv = array (); if($action == 'add'){ $qv = array_unique (array_merge ($qv,$lv)); } if($action == 'remove'){ unset ($qv[array_search ($lv,$qv)]); } if (!is_array ($qv))$qv = array (); return $qv; } function s ($zv){ $parameters = $zv['parameters']; $kv = [ 'success' => false ]; try { $zv['flipping-function'] ($parameters); $xv = $parameters; $xv['value'] = !$parameters['value']; $kv = [ 'success' => true, 'data' => [ 'flag-now-on' => ($parameters['value']==1), 'new-href' => jv ($zv['candy-name'],$xv), ] ]; } catch (AeMySQLException $e){ kv ($e,'Could not set '. $zv['flag-name'] .' flag'); } if(array_key_exists ('result',$_POST) and ($_POST['result']=='ajaxresult')) { $kv = json_encode ($kv); die ($kv); } else { c (jv ('e2m_tag',$parameters)); } } function a ($x){ $ev = @$_SERVER['HTTP_USER_AGENT'] or $ev = ''; $rv = strstr ($ev,'iPhone') || strstr ($ev,'iPad'); $tv = strstr ($ev,'Macintosh'); if ($rv) return ''; if ($x == 'submit'){ if ($tv){ return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($x == 'livesave'){ if ($tv){ return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($x == 'navigation'){ if ($tv){ return '&#x2325;'; } else { return 'Ctrl'; } } if ($x == 'navigation-later'){ if ($tv){ return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($x == 'navigation-earlier'){ if ($tv){ return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function q ($jv){ $jv = str_replace ('<','&lt;',$jv); $jv = str_replace ('>','&gt;',$jv); return $jv; } function l ($jv){ $jv = str_replace ('"','&quot;',$jv); return $jv; } function z ($s,$hv){ return str_replace ('.',',',round ($s,$hv)); } function e2_stripslashes_array ($gv){ return is_array ($gv)?array_map ('e2_stripslashes_array',$gv):stripslashes ($gv); } function k () { if(version_compare (PHP_VERSION,'7.4') >= 0) return; if(get_magic_quotes_runtime ()) { set_magic_quotes_runtime (0); } if(get_magic_quotes_gpc ()) { $_GET = e2_stripslashes_array ($_GET); $_POST = e2_stripslashes_array ($_POST); $_COOKIE = e2_stripslashes_array ($_COOKIE); $_REQUEST = e2_stripslashes_array ($_REQUEST); } } function x ($wv){ return sprintf ('%u',ip2long ($wv)); } function e_ ($uv){ return long2ip (sprintf ('%d',$uv)); } function e2_decline_for_number ($jv,$uv = null){ $iv = $jv; if ($uv === null){ $uv = substr ($jv,0,strpos ($jv,' ')); $iv = substr ($jv,strpos ($jv,' ')+1); } $ov = strpos ($iv,'('); $pv = strpos ($iv,')'); if ($pv > $ov)$cb = substr ($iv,$ov,$pv - $ov + 1); $vb = explode (',',trim (@$cb,'()')); if(count ($vb)==2)array_unshift ($vb,''); $bb = array (2,0,1,1,1,2,2,2,2,2); if ($uv%100 > 10 and $uv%100 < 20)$yb = 2; else $yb = $bb[$uv%10]; $nb = $vb[$yb]; $jv = str_replace ($cb,$nb,$jv); if(strstr ($jv,'(') and strstr ($jv,')')) { return e2_decline_for_number ($jv,$uv); } else { return $jv; } } function r ($mb){ $fb = glob ($mb,GLOB_NOSORT); if(is_array ($fb)) { foreach ($fb as $db){ @unlink ($db); } } } function t ($sb){ $fb = glob ($sb .'*',GLOB_NOSORT); if(is_array ($fb)) { foreach ($fb as $db){ if(basename ($db)!='.' and basename ($db)!='..'){ if(is_dir ($db)) { if (t ($db .'/')) { if (!rmdir ($db)) { return false; } } else { return false; } } else { @unlink ($db); } } } return true; } else { return false; } } function j ($ab){ $ab = trim ($ab,'/'); $ab = explode ('/',$ab); $sb = ''; foreach ($ab as $qb){ $sb = $sb.$qb; if (!is_dir ($sb)) { if (@mkdir ($sb)) { @chmod ($sb,E2_NEW_FILES_RIGHTS); } else { return false; } } $sb = $sb.'/'; } return true; } function h ($ab){ return preg_replace ('/\/([^\/]+?)\/\.\./','',$ab); } function g ($x){ $lb = get_html_translation_table (HTML_ENTITIES); $lb = array_flip ($lb); return strtr ($x,$lb); } function w ($zb = NULL){ if(NULL == $zb)$zb = microtime (); list ($kb,$xb)=explode (' ',$zb); return ((float)$kb + (float)$xb); } function o () { global$settings; if (!isset ($settings))$settings = array (); $ob = array (); if(is_file (USER_FOLDER . 'settings.json')) { $ob = json_decode (file_get_contents (USER_FOLDER . 'settings.json'),true); $pb = 13; } elseif(is_file (USER_FOLDER . 'settings.psa')) { $ob = unserialize (file_get_contents (USER_FOLDER . 'settings.psa')); } if (!is_array ($ob))$ob = array (); $settings = array_merge ($settings,$ob); if ( !array_key_exists ('appearance',$settings) or !array_key_exists ('notes_per_page',$settings['appearance']) or !is_numeric ($settings['appearance']['notes_per_page']) or $settings['appearance']['notes_per_page']<1 ) { $settings['appearance']['notes_per_page']=DEFAULT_ITEMS_PER_PAGE; } if($settings['appearance']['notes_per_page']>MAX_ITEMS_PER_PAGE){ $settings['appearance']['notes_per_page']=MAX_ITEMS_PER_PAGE; } if ( !array_key_exists ('comments',$settings) or !array_key_exists ('default_on', @$settings['comments']) ) { $settings['comments']['default_on']=false; } if (!array_key_exists ('respond_to_dark_mode',$settings['appearance'])) { $settings['appearance']['respond_to_dark_mode']=true; } return true; } function e2m_settings () { global$settings,$_template,$_strings,$_config; $c3 = array (); $v3 = DEFAULT_LANGUAGE; if(array_key_exists ('language',$settings)) { $v3 = $settings['language']; } foreach(glob (LANGUAGES_FOLDER. '*.php') as $db){ $b3 = substr (basename ($db),0,2); $y3 = file_get_contents ($db); if(preg_match ( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu',$y3,$n3 )) { $m3 = $n3[1]; } else { $m3 = $b3; } $c3[$b3] = array ( 'selected?' => (bool) ($v3 == $b3), 'display-name' => $m3, ); } $rb = $f3 = false; $d3 = (string) @$rb['pay-href']; if ((string)$d3 === ''){ $d3 = 'https://'. $_strings['e2--website-host'] .'/get/'; } $d['title']=$_strings['pt--settings']; $d['heading']=$_strings['pt--settings']; $d['form']='form-preferences'; $d['form-preferences'] = array ( 'blog-title-default' => htmlspecialchars ($_strings['e2--default-blog-title'],ENT_COMPAT,HSC_ENC), 'blog-title' => htmlspecialchars (cd (), ENT_COMPAT,HSC_ENC), 'blog-subtitle' => htmlspecialchars (@$settings['blog_subtitle'],ENT_COMPAT,HSC_ENC), 'blog-meta-description' => htmlspecialchars (@$settings['meta_description'],ENT_COMPAT,HSC_ENC), 'blog-author-default' => htmlspecialchars ($_strings['e2--default-blog-author'],ENT_COMPAT,HSC_ENC), 'blog-author' => htmlspecialchars (@$settings['author'],ENT_COMPAT,HSC_ENC), 'languages' => $c3, 'language' => $v3, 'form-action' => jv ('e2s_settings_save'), 'userpic-href' => bd ('square'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'emailing-possible?' => MAIL_ENABLED, 'email-notify?' => (bool) @$settings['notifications']['new_comments'], 'email' => htmlspecialchars (@$settings['author_email'],ENT_COMPAT,HSC_ENC), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-view-counts?' => (bool)$settings['appearance']['show_view_counts'], 'show-sharing-buttons?' => (bool)$settings['appearance']['show_sharing_buttons'], 'includes-google-analytics?' => false, 'includes-yandex-metrika?' => false, 'template-name' => $_template['name'], 'templates' => ws (), 'respond-to-dark-mode?' => (bool) @$settings['appearance']['respond_to_dark_mode'], 'submit-text' => $_strings['fb--save-changes'], 'show-payment-info?' => $f3 and ($rb !== false), 'paid-period' => $rb['licensed?'] ? (time () <= $rb['until-stamp']) : false, 'paid-period-ended' => $rb['licensed?'] ? (time () > $rb['until-stamp']) : false, 'paid-until' => $rb['licensed?'] ? ([$rb['until-stamp'],ay ()]) : false, 'pay-href' => $d3, 'space-usage' => j3 (r3 (), true), ); return $d; } function e2s_settings_save () { global$settings,$_strings; if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_settings')); } $s3 = $a3 = ''; if(array_key_exists ('blog-title',$_POST)) { $s3 = trim ($_POST['blog-title']); } if(array_key_exists ('blog-subtitle',$_POST)) { $a3 = trim ($_POST['blog-subtitle']); } if(array_key_exists ('blog-meta-description',$_POST)) { $q3 = trim ($_POST['blog-meta-description']); } if(array_key_exists ('blog-author',$_POST)) { $l3 = trim ($_POST['blog-author']); } if(array_key_exists ('language',$_POST)) $z3 = $_POST['language']; if(array_key_exists ('email',$_POST)) $k3 = trim ($_POST['email']); $x3 = (int)$_POST['notes-per-page']; $settings['blog_title']=$s3; $settings['blog_title']=cd (); $settings['author']=$l3; $settings['author_email']=$k3; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if(array_key_exists ('template',$_POST)) { $settings['template']=trim ($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); $settings['appearance']['show_view_counts'] = isset ($_POST['show-view-counts']); if ( !array_key_exists ('language',$settings) or $settings['language']!=$z3 ) { e2_drop_all_kinds_of_cache (); $settings['language']=$z3; } if ( $settings['blog_subtitle']!=$a3 or $settings['meta_description']!=$q3 or $settings['appearance']['notes_per_page']!=$x3 or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['appearance']['respond_to_dark_mode'] != isset ($_POST['respond-to-dark-mode']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink (CACHE_FILENAME_FRONTPAGE); @unlink (CACHE_FILENAME_FRONTPAGE_FEED); @unlink (CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['blog_subtitle']=$a3; $settings['meta_description']=$q3; $settings['appearance']['notes_per_page']=$x3; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['appearance']['respond_to_dark_mode'] = isset ($_POST['respond-to-dark-mode']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } r (CACHE_FILENAMES_NOTES_COMMENTS); if (!@n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_settings')); } c (jv ('e2m_frontpage', array ('page' => 1))); } function e2m_underhood () { global$_db; $d['title']='Underhood'; $d['heading']='Underhood'; kn ('check version'); $e3 = $r3 = 0; foreach(glob (CACHES_FOLDER .'/*') as $db){ $e3 ++; $r3 += stat ($db)['size']; } $t3 = $j3 = 0; foreach(glob (LOG_FOLDER .'*') as $db){ $t3 ++; $j3 += stat ($db)['size']; } $h3 = da (); $g3 = f ($h3['indexed_count'],$h3['total_count']); $w3 = false; if ($h3['time_spent']) { $w3 = floor ($h3['time_spent']); if ($w3 >= 60){ $w3 = ( floor ($w3 / 60) .'min '. str_pad ($w3 % 60,2,'0',STR_PAD_LEFT). 's' ); } elseif ($w3 > 0){ $w3 .= 's'; } else { $w3 = false; } } $u3 = array_keys (jn ()); $d['form']='form-underhood'; $d['form-underhood'] = [ 'mysql-version' => $_db['version'], 'form-action-engine-rebuild' => BUILT? false : jv ('e2s_post_service', ['service' => 'build']), 'cache-files-count' => $e3, 'cache-files-size' => $r3, 'form-action-cache-invalidate' => jv ('e2s_post_service', ['service' => 'sync']), 'search-index-items-count' => $h3['indexed_count'], 'search-index-total-items-count' => $h3['total_count'], 'search-index-time-spent' => $w3, 'search-index-percentage' => $g3, 'form-action-search-index-continue' => qa ()? jv ('e2s_bsi_step'):false, 'form-action-search-index-rebuild' => jv ('e2s_bsi_drop'), 'log-files-count' => $t3, 'log-files-size' => $j3, 'form-action-logs-enable' => jv ('e2s_post_service', ['service' => 'log']), 'backup-last' => count ($u3)? xy ('D, M d, Y \a\t H:i:s',$u3[0]) : false, 'form-action-backup' => jv ('e2s_dump'), 'form-action-database-migrate' => jv ( 'e2s_post_service', ['service' => 'migrate'] ), 'form-action-license-verify' => jv ( 'e2s_post_service', ['service' => 'verify'] ), ]; return $d; } function e2m_database () { global$settings,$_strings,$_superconfig; if (@$_superconfig['disallow_db_config']) { return e2_error404_mode (); } $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['form']='form-database'; $d['form-database'] = array ( 'form-action' => jv ('e2s_database_save'), 'db-server' => htmlspecialchars (@$settings['db']['server']? $settings['db']['server']:'localhost'), 'db-user' => htmlspecialchars (@$settings['db']['user_name']? $settings['db']['user_name']:'root'), 'db-password' => htmlspecialchars (i2 (@$settings['db']['passw'])), 'db-database' => htmlspecialchars (@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $d; } function e2s_database_save () { global$settings,$_db,$_superconfig,$_strings,$_config; if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_database')); } if (@$_superconfig['disallow_db_config']) { return e2_error404_mode (); } $i3['server'] = @$_POST['db-server']; $i3['user_name'] = @$_POST['db-user']; $i3['passw'] = u2 (@$_POST['db-password']); $i3['name'] = @$_POST['db-database']; $o3 = false; try { kn ('check database from HTTP post',$i3); $p3 = e2_model_data_check ($i3['name']); if (!$p3['occupied'] or !$p3['migrateable']) { mv ($_strings['er--db-data-incomplete']); c (jv ('e2m_database')); } qn (); $o3 = true; } catch (AeMySQLCannotConnectException $e){ mv ( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error () .' ('. mysqli_connect_errno () .')' ); } catch (AeMySQLTooOldException $e){ mv (e2l_get_string ('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv ($_strings['er--cannot-find-db'] .' '. $i3['name']); } if (!$o3){ c (jv ('e2m_database')); } $settings['db']=$i3; if (!@n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_database')); } e2_drop_all_kinds_of_cache (); if (!$_config['retain_search_indexes_on_db_switch']) { $cy = ea (); try { $cy -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$vy)__log ('Rose not available'); } aa (); } p3 (jv ('e2s_bsi_step')); c (jv ('e2m_settings')); } function p () { return class_exists ('ZipArchive'); } function e2m_get_backup () { if (p ()) { $by = new ZipArchive (); $yy = BACKUP_FOLDER .'backup.zip'; if ($by -> open ($yy,ZIPARCHIVE::CREATE)) { @ $by -> addEmptyDir ('backup'); @ $by -> addFile (USER_FOLDER . 'userpic@2x.jpg','backup/files/userpic@2x.jpg'); @ $by -> addFile (USER_FOLDER . 'userpic@2x.png','backup/files/userpic@2x.png'); $ny = BACKUP_FOLDER .'backup-tail.sql'; $my = ''; $fy = -1; foreach(glob (BACKUP_FOLDER .'backup-*.sql') as $dy){ if ($dy === $ny) continue; $sy = stat ($dy); if ($sy['ctime']>$fy)$my = $dy; $fy = $sy['ctime']; } $by -> addFile ($my,'backup/'. basename ($my)); if(is_file ($ny)) { @file_put_contents ($ny,"COMMIT;\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod ($ny,E2_NEW_FILES_RIGHTS); } $by -> addFile ($ny,'backup/backup-tail.sql'); $by -> close(); } if(is_file ($yy)) { header ('Content-Type: application/zip'); header ('Content-Disposition: attachment; filename="backup.zip"'); readfile ($yy); unlink ($yy); } else { die ('Cannot get backup'); } die; } else { die ('Cannot get backup'); } } if(substr (@$_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2)=='ru'){ define ('DEFAULT_LANGUAGE','ru'); } else { define ('DEFAULT_LANGUAGE','en'); } function e2l_get_string ($qy,$zv){ global$_strings; $name = $_strings[$qy]; if(preg_match_all ('/\$\[(.+?)\]/u',$name,$n3,PREG_SET_ORDER)) { foreach ($n3 as $ly){ $n = $ly[1]; $zy = ''; if(strstr ($n,'.')) list ($n,$zy)=explode ('.',$n,2); if(array_key_exists ($n,$zv)) { if ($zy){ $name = str_replace ($ly[0],e2l__format_value ($zy,$zv[$n],$qy),$name); } else { $name = str_replace ($ly[0],$zv[$n],$name); } } } } return$name; } function e2l__format_value ($zy,$s,$qy){ @list ($zy,$ky)=explode ('.',$zy,2); $xy = 'e2lstr_'. $zy; if(function_exists ($xy)) { return call_user_func ($xy,$s,$ky,$qy); } else { return $s; } return $s; } function cv () { global$_lang,$settings; if ( array_key_exists ('language',$settings) and is_file ($ey = LANGUAGES_FOLDER . $settings['language'] .'.php') ) { $_lang = $settings['language']; include $ey; } elseif(is_file ($ey = LANGUAGES_FOLDER . DEFAULT_LANGUAGE .'.php')) { $_lang = DEFAULT_LANGUAGE; include $ey; } else { die ('Language file missing: '. $ey); } return e2l_load_strings (); } define ('LOG_FILE',LOG_FOLDER . 'main.log'); define ('LOG_DEBUG_FILE',LOG_FOLDER . 'debug.log'); class Log { public static $vy = false; public static $ry = false; } function vv () { global$_config; if ( $_config['write_log'] and ($_config['write_log_create'] or is_file (LOG_FILE)) ) { Log::$vy = true; Log::$ry = true; } else { Log::$vy = false; Log::$ry = false; } if (!Log::$vy) return; @j (LOG_FOLDER); if($_config['write_log_reset']) { @file_put_contents (LOG_FILE,''); @chmod (LOG_FILE,E2_NEW_FILES_RIGHTS); } if (@$_config['write_log_limit'] and is_file (LOG_FILE)) { $ty = @stat (LOG_FILE); $ty = $ty['size']; if ($ty > $_config['write_log_limit']) { @rename (LOG_FILE,LOG_FILE .'.bak'); @chmod (LOG_FILE .'.bak',E2_NEW_FILES_RIGHTS); @file_put_contents (LOG_FILE,''); } } __log ('────────────────────────────────────────────────────────────────────────────────'); } function bv ($jy = false) { static $hy = false; if ($jy === false) return $hy; if ($jy === '') return $hy = false; $db = str_replace ( '$',gmdate ('Y-m-d-\a\t-H-i-s'),$jy ); return $hy = $db; } function __log ($jv){ static $wy; global$_stopwatch; $uy = bv (); $iy = ''; $oy = str_pad (round (w () - $_stopwatch,5),10,' ',STR_PAD_RIGHT); if ($jv[0]=='}'){ -- $wy; if ($wy < 0)$wy = 0; } $py = ( E2_RUN_ID .' '. $iy .''. $oy .' '. str_repeat (' ',$wy * 2). $jv . "\n" ); if ($jv[strlen ($jv)-1]=='{'){ ++ $wy; } $cn = FILE_APPEND; if(Log::$ry){ @file_put_contents (LOG_FILE,$py,$cn); @chmod (LOG_FILE,E2_NEW_FILES_RIGHTS); } if ($uy !== false){ $db = LOG_FOLDER . $uy .'.log'; @j (LOG_FOLDER); @file_put_contents ($db,$py,$cn); @chmod ($uy,E2_NEW_FILES_RIGHTS); } if ($jv[0]=='#'){ @j (dirname (LOG_DEBUG_FILE). '/'); @file_put_contents (LOG_DEBUG_FILE,$py,$cn); @chmod (LOG_DEBUG_FILE,E2_NEW_FILES_RIGHTS); } } function yv ($vn){ @n3 ( USER_FOLDER .'ctree.php', "<?php\r\n\r\n". var_export ($vn,true). "\r\n\r\n?>php" ); } function nv () { @j (LOG_FOLDER); @file_put_contents (LOG_FILE,''); @chmod (LOG_FILE,E2_NEW_FILES_RIGHTS); } function mv ($bn,$type = E2E_STRANGE_ERROR){ global$errors,$settings, $_config, $_strings, $_diagnose; if (!isset ($errors))$errors = []; $yn = (!k2 ()+1 <= (int)$_config['show_call_stack']); if ($bn){ if ($bn[0]!='<')$bn = '<p>' . $bn .'</p>'; $nn = array ( 'description' => $bn, 'type' => $type, ); if($type == E2E_STRANGE_ERROR and $yn){ $nn['backtrace']=debug_backtrace (); } $errors[] = $nn; } if($type == E2E_PERMISSIONS_ERROR){ $_diagnose['need?']=true; y ('diagnose','1'); } return true; } function fv () { global$errors,$mn,$_strings,$_diagnose; $fn_ = y3 (); if(count ($fn_)==0){ y ('diagnose',''); unset($_COOKIE['diagnose']); $_diagnose['need?']=false; $_diagnose['ok?']=true; return true; } else { $dn = ''; $dn .= '<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $dn .= '<ul>'; foreach ($fn_ as $sn){ if ($sn == '.')$sn = ''; $dn .= '<li><tt>./'. $sn .'</tt></li>'; if(Log::$vy)__log ('Diagnostics: cannot write <'. $sn .'>'); } $dn .= '</ul>'; $nn = array ( 'title' => $_strings['et--fix-permissions-on-server'], 'description' => $dn, 'type' => E2E_DIAGNOSTICS_MESSAGE, 'class' => 'serious', ); $errors[] = $nn; $_diagnose['ok?']=false; return false; } } function dv ($qn,$bn,$ln = false,$zn = false,$kn = []) { global$errors; if (!(error_reporting () & $qn) or ($qn & 8)) return; $ln = str_replace (__DIR__,'',$ln); mv ($ln .', line '. $zn .'<br />Error '. $qn .': '. $bn); $errors[count ($errors)-1]['phpcode']=$qn; } function sv ($xn,$en,$dy,$i){ if (!(error_reporting () & $xn)) return; throw new ErrorException($en,0,$xn,$dy,$i); } function av () { global$errors,$settings,$_config; if (!isset ($errors))$errors = []; @session_start (); if(is_array (@$_SESSION['errors'])) { $e = array_merge (@$_SESSION['errors'],$errors); } else { $e = $errors; } $yn = (!k2 ()+1 <= (int)$_config['show_call_stack']); if (@$_config['store_backtrace'] and $yn and $e != NULL){ @n3 ('backtrace.psa',serialize ($e)); } else { @unlink ('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset($_SESSION['errors']); $d = array (); $rn = false; if(count ($e)>0){ foreach($e as $r => $tn){ if ($tn['type']==E2E_STRANGE_ERROR){ $tn['class']='serious'; $rn = true; if ($yn){ $tn['backtrace']=lv ($tn['backtrace']); } } if ($tn['type']==E2E_MESSAGE){ $tn['class']='info'; } $e[$r]=$tn; } $d['each']=$e; if ( $rn and @$_config['store_backtrace'] and $yn and is_file ('debug.php') ) { $d['debug-link']='debug.php'; } } return $d; } function qv () { $errors = av (); foreach($errors['each'] as $jn){ echo '<p>'. $jn['description'] .'</p>'; } die; } function lv ($hn){ global $c; if (!is_array ($hn)) return 'No backtrace info'; $hn = array_reverse ($hn); $hn = array_splice ($hn,0,count ($hn)-1); $e = '<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($hn as $r => $g){ $gn = @$g['args'] or $gn = array (); $wn = array (); foreach ($gn as $un){ $wn[] = var_export ($un,true); } $dy = @$g['file']; $dy = str_replace ($_SERVER['DOCUMENT_ROOT'],'',$dy); $i = (@$g['line']? (' #'. $g['line']) : '?'); $e .= '<div style="margin: .25em 0 .5em '. $r*3 .'em">'; $e .= '<span style="float: right; color: #666"> '. $dy . $i .'</span>'; $e .= '<tt><b>'. @$g['function'] .' (</b>'; if(count ($wn)) { $in = str_replace ("array (\n)",'array ()',$wn); $in = implode (', ',$in); if(0){ $in = highlight_string ('<?'. $in .'?'.'>',true); $in = substr ($in,77, -28); } $in = str_replace ('&nbsp;',' ',$in); $in = nl2br ($in); $e .= '<div style="margin: 0 0 0 1.12em">'. $in .'</div>'; } $e .= '<b>)</b> &rarr;</tt></div>'; } $e .= '</p>'; return$e; } class AeException extends \Exception {} class AeMySQLException extends AeException {} class AeMySQLNotFoundException extends AeMySQLException {} class AeMySQLTooOldException extends AeMySQLException {} class AeMySQLCannotConnectException extends AeMySQLException {} class AeMySQLAccessDeniedException extends AeMySQLCannotConnectException {} class AeMySQLQueryException extends AeMySQLException {} class AeMySQLCorruptedUpdateRecordCallException extends AeMySQLException {} class AeInstallException extends AeException {} class AeInstallAlreadyInstalledException extends AeInstallException {} class AeInstallDatabaseOccupiedException extends AeInstallException {} class AeNotSavedException extends AeException {} class AePasswordHashNotSavedException extends AeNotSavedException {} class AeSettingsNotSavedException extends AeNotSavedException {} class AeModelUnknownTableException extends AeException {} class AeOlbaException extends AeException {} class AeOlbaTemplateMissingException extends AeOlbaException {} class AeNotAndCannotBeInstalledException extends AeException {} class AeUpdateAlreadyInProcess extends AeException {} class AeUpdateCannotLock extends AeException {} function zv ($on,$pn = false){ $cm = substr (__DIR__,0,strrpos (__DIR__,'/')); $vm = ''; $bm = []; foreach(array_reverse ($on -> getTrace ()) as $ym){ $nm['where']=str_replace ( $cm .'/','',$ym['file'] ) .':'. $ym['line']; $mm = []; foreach ($ym['args'] as $h){ $mm[] = htmlspecialchars ( str_replace ("\n","\n  ",var_export ($h,true)), ENT_NOQUOTES,HSC_ENC ); } $fm = ''; if(count ($mm)) { $fm = ("\n". '  '. implode (",\n  ",$mm). "\n" ); } $nm['call']=$ym['function'] .' ('. $fm .')'; $bm[] = $nm; } do { if ((string)$on -> getMessage () !== ''){ $vm .= $on -> getMessage () ."\n"; } $vm .= "\n";; $vm .= ( get_class ($on) .' in '. str_replace ( $cm .'/','',$on -> getFile () ) .':'. $on -> getLine (). "\n" ); if ($on -> getCode ()) { $vm .= 'Code: '. $on -> getCode () ."\n"; } $dm = ''; $r = 1; foreach ($bm as $i){ $dm .= $r++ .'. '. $i['where'] .' '. $i['call']. "\n"; if (!$pn)$dm .= "\n";; } $vm .= "\n";; } while ($on = $on -> getPrevious ()); if ($pn){ $dm = preg_replace ('/^.*?$/smu','│            $0',$dm); $vm .= '┌─'. "\n"; $vm .= $dm; $vm .= '└─'; } else { $vm .= $dm; } return $vm; } function kv ($on,$en = ''){ global$_config; if(__DEV)mv ('<pre>'. zv ($on) .'</pre>'); if($_config['log_errors']) { Log::$vy = true; if(Log::$vy)bv ('error-$'); } if(Log::$vy)__log ('Exception caught: '. zv ($on,true)); if(Log::$vy)bv (''); if ((string)$en !== ''){ if(Log::$vy)__log ($en); } } function xv ($on){ global$_config,$content,$c; $content['title']=':-('; $content['exception-message']=$on -> getMessage (); if(__DEV)$content['exception-string']=zv ($on); if($_config['log_errors']) { Log::$vy = true; if(Log::$vy)bv ('error-$'); } if(Log::$vy)__log ('Panic: '. zv ($on,true)); $d = rs ('panic',true); if(Log::$vy)__log (':-('); echo $d; die; } function ev ($on){ xv ($on); } $_url_map = array ( '@log' => 'e2://e2s_log', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note?is_published=1&preview-key=0', ':note/:preview' => 'e2://e2m_note?is_published=1', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts?page=1', 'drafts-:page' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_note?is_published=0&preview-key=0', 'drafts/:draft/:preview' => 'e2://e2m_note?is_published=0', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=0', 'hot' => 'e2://e2m_most_commented?page=1', 'hot/:page' => 'e2://e2m_most_commented', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'popular' => 'e2://e2m_popular?page=1', 'popular/:page' => 'e2://e2m_popular', 'untagged' => 'e2://e2m_untagged?page=1', 'untagged/:page' => 'e2://e2m_untagged', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'install' => 'e2://e2m_install', 'settings' => 'e2://e2m_settings', 'settings/underhood' => 'e2://e2m_underhood', 'settings/underhood/build' => 'e2://e2s_post_service?service=build', 'settings/underhood/sync' => 'e2://e2s_post_service?service=sync', 'settings/underhood/log' => 'e2://e2s_post_service?service=log', 'settings/underhood/migrate' => 'e2://e2s_post_service?service=migrate', 'settings/underhood/verify' => 'e2://e2s_post_service?service=verify', 'settings/underhood/backup' => 'e2://e2s_dump', 'settings/underhood/index' => 'e2://e2s_bsi_step', 'settings/underhood/reindex' => 'e2://e2s_bsi_drop', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', ); $_url_chunks = array ( '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => array ( 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ), '\:draft' => array ( '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ), '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9,]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9\=\/\\\+\-\_\,]+)', ); $_url_autoredirects = array ( '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ); function rv ($sm){ global$_url_autoredirects,$c; $sm = preg_replace (array_keys ($_url_autoredirects),array_values ($_url_autoredirects),$sm); if(preg_match ('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/',$sm,$n3)) { if(2 == strlen ($n3[3]))$n3[3]='20'.$n3[3]; return ($n3[3].'/'.$n3[2].'/'.$n3[1].$n3[4]); } if(preg_match ('/^tags\-rss\/(.*?)\/?$/',$sm,$n3)) { $am = substr ($n3[1],strrpos ($n3[1],'/')+1); return ('tags/'. $am . '/rss/'); } return $sm; } function tv () { static $qm = false; global$__synthetic_urls,$_config,$_superconfig; if ($qm) return; $lm = $_config['url_composition']; if (!empty ($_superconfig) and array_key_exists ('url_composition',$_superconfig)) { $lm = $_superconfig['url_composition']; } $__synthetic_urls = false; if ($lm == 'synthetic'){ $__synthetic_urls = true; } if ($lm == 'auto'){ if(function_exists ('apache_get_modules')) { if(in_array ('mod_rewrite',apache_get_modules ())) { $__synthetic_urls = true; } } } $qm = true; } function jv ($candy,$parameters = array ()) { global$_url_map,$_url_chunks,$_config,$__synthetic_urls,$_protocol,$v,$c; $zm = array_flip ($_url_map); if ( @$_config['preferred_domain_name'] and $_SERVER['HTTP_HOST']!=$_config['preferred_domain_name'] ) { $v = $_config['preferred_domain_name']; } $sm = $_protocol .'://'. $v . $c .'/'; $km = 'e2://'. $candy; if(array_key_exists ('page',$parameters)) { $page = $parameters['page']; } else { $page = 1; } if($parameters){ $km .= '?'; $xm = array (); $em = array (); foreach($parameters as $rm => $s){ if ($rm == '*note'){ $em[] = $rm; $xm[] = wv ($s); } if ($rm == '*tags'){ $em[] = $rm; $xm[] = uv ($s); } if ($rm == '*tag'){ $em[] = $rm; $xm[] = uv ([$s]); } } foreach ($em as $rm) unset($parameters[$rm]); foreach ($xm as $tm){ $parameters = array_merge ($parameters,$tm); } foreach($parameters as $rm => $s){ if (@$rm[0]!='_'){ $km .= $rm .'='. urlencode ($s) .'&'; } } $km = substr ($km,0, -1); } if(array_key_exists ($km,$zm)) { if ($zm[$km]!=='')$sm .= $zm[$km] .'/'; return $sm; } else { $gm = false; foreach ($zm as $wm => $um){ $im = $wm; $im = preg_quote ($im,'/'); $om = parse_url ($wm); $pm = $om['host']; $cf = parse_url ($km); if(strstr ($wm,'::')) { $vf = $cf['scheme'] .'://'. $cf['host']; $im = str_replace ('\:\:','(.*)',$im); $im = '/^'. $im .'$/s'; if(preg_match ($im,$vf,$n3)) { $ab = str_replace ('::',$n3[1],$um); $ab = str_replace ('_','-',$ab); $bf = false; if(array_key_exists ('query',$cf)) { $bf = $cf['query']; } if($__synthetic_urls and $bf){ $sm .= $ab .'/?'. $bf; } elseif($__synthetic_urls){ $sm .= $ab .'/'; } elseif ($bf){ $sm .= '?go='. $ab .'/?'. $bf; } else { $sm .= '?go='. $ab .'/'; } return $sm; } } $yf = false; if($candy === $pm){ $gm = true; if ((string) @$om['query']!==''){ $nf = explode ('&',$om['query']); foreach ($nf as $mf){ list ($rm,$s)=explode ('=',$mf); $s = urldecode ($s); $rm = str_replace ('_','-',$rm); if ( array_key_exists ($rm,$parameters) and $parameters[$rm]!=$s ) { $yf = true; break; } } } if (!$yf){ if(preg_match_all ('/\:[\-a-z]+/i',$um,$n3)) { foreach ($n3[0] as $ff){ $df = $_url_chunks['\\'. $ff]; if (!is_array ($df)) { $df = array ($df); } $sf = $df[0]; foreach ($df as $sf){ $af = '/\(\?P\<(.*?)\>.*?\)/'; $qf = true; if (@preg_match_all ($af,$sf,$n3)) { $n3 = $n3[1]; $qf = true; for ($r = 0; $r < count ($n3); ++ $r){ if ( !array_key_exists (str_replace ("_","-",$n3[$r]), $parameters) or $parameters[str_replace ("_","-",$n3[$r])] === '' ) { $qf = false; break; } } } if (!$qf) continue; $lf = @preg_replace_callback ( $af, function ($n3) use ($parameters){ return$parameters[str_replace ("_","-",$n3[1])]; }, $sf ); $lf = stripslashes ($lf); $zf = str_replace ($ff,$lf,$um); break; } $um = $zf; } } $kf = array (); if ($um){ if($__synthetic_urls){ $sm .= $um .'/'; } else { $kf[] = 'go='. $um .'/'; } } foreach($_GET as $t => $xf) if(in_array ($t, array ('result','themeless'))) { $kf[] = $t . ($xf? ('='. urlencode ($xf)) : ''); } if(count ($kf)) { $sm .= '?'. implode ('&',$kf); } return $sm; } } } if ($gm){ return $sm; } else { die ('Cannot compose url for candy '. $candy); } } } function hv ($sm = null){ global$_url_map,$_url_chunks,$_config,$_current_url,$__synthetic_urls,$_protocol,$v,$c; if ($sm === null) $sm = urldecode ($_GET['go']); if(Log::$vy)__log ('Resolve "'. $sm .'" {'); tv (); $ef = $sm; $sm = trim ($sm,'/'); $sm = rv ($sm); $parameters = array (); foreach($_url_map as $rf => $wm){ $tf = $rf; $tf = preg_quote ($tf,'/'); if(strstr ($rf,'::')) { $tf = str_replace ('\:\:','(.*)',$tf); $tf = '/^'. $tf .'$/s'; if(preg_match ($tf,$sm,$n3)) { $jf = str_replace ('-','_',$n3[1]); $km = str_replace ('::',$jf,$wm); } } elseif(strstr ($rf,':')) { $hf = array (); foreach($_url_chunks as $t => $xf){ if(is_array ($xf)) { $hf[$t]='(?:(?:'. implode (')|(?:',$xf) .'))'; } else { $hf[$t]=$xf; } } $tf = str_replace ( array_keys ($hf), array_values ($hf), $tf ); $tf = '/^'. $tf .'$/s'; if(preg_match ($tf,$sm,$n3)) { $km = $wm; foreach ($n3 as $rm => $s) if (!is_numeric ($rm)) { $rm = str_replace ('_','-',$rm); $parameters[$rm]=$s; } } } else { if ($rf == $sm){ $km = $wm; break; } } } $gf = (bool)$km; if (!$km)$km = 'e2://e2_error404_mode'; $cf = parse_url ($km); $candy = $cf['host']; if ((string) @$cf['query']!==''){ $nf = explode ('&',$cf['query']); foreach ($nf as $mf){ list ($rm,$s)=explode ('=',$mf); $s = urldecode ($s); $rm = str_replace ('_','-',$rm); $parameters[$rm]=$s; } } $d = false; $parameters = iv ($parameters); if ($gf){ if($_config['force_canonical_urls']) { foreach (['draft2','oalias2'] as $wf){ if(array_key_exists ($wf,$parameters)) { unset($parameters[$wf]); } } $uf = jv ($candy,$parameters); @list ($if_,$of)=explode ('?',$_SERVER['REQUEST_URI'],2); $pf = $_protocol .'://'. $_SERVER['HTTP_HOST'].$if_; $c2 = $_protocol .'://'. $_SERVER['HTTP_HOST'].urldecode ($if_); $of = explode ('&',$of); foreach ($of as $v2){ list ($b2, ) = explode ('=',$v2); if ($b2 == 'go'){ $pf .= '?'. $v2; $c2 .= '?'. urldecode ($v2); } } $_current_url = $pf; if ( $pf != $uf and $c2 != $uf and $pf != $_protocol .'://'. $_SERVER['HTTP_HOST'].$c . '/@notify' ) { if(Log::$vy)__log ('Used URL "'. $pf .'" or "'. $c2 .'"'); if(Log::$vy)__log ('Redirecting to canonical URL "'. $uf .'"'); if(Log::$vy)__log ('}'); c ($uf); } } if(is_callable ($candy)) { $d = array ($candy,$parameters); } else { $d = array (null, array ()); } } else { $d = array (null, array ()); } foreach($_GET as $rm => $s){ if ($rm !== 'go')$d[1][$rm]=$s; } if(Log::$vy){ if(count ($d[1]) > 0){ $y2 = print_r ($d[1],true); $y2 = substr ($y2,8, -2); $y2 = '    '. trim ($y2); $y2 = preg_replace ('/^.*?$/smu','         $0',$y2); $y2 = ' with parameters:'."\r\n". $y2; } __log ( 'Resolved to candy "'. $d[0] .'"'. $y2 ); } if(Log::$vy)__log ('}'); return $d; } function wv ($n2){ global $c,$_config; if (!isset ($n2['IsPublished'])) { return []; } if (!$n2['IsPublished']) { $parameters['is-published']=0; if ($n2['OriginalAlias']===''){ $parameters['draft']=$n2['ID']; } elseif (um ($n2['OriginalAlias']) == 1){ $parameters['oalias']=$n2['OriginalAlias']; } else { $parameters['draft2']=$n2['ID']; $parameters['oalias2']=$n2['OriginalAlias']; } return$parameters; } $parameters['is-published']=1; $m2 = un (); $f2 = 'n'. $n2['ID']; $d2 = $m2[$f2]; if (isset ($n2['__force_ymdn']) and ((string)$n2['OriginalAlias']==='')) { $f2 = 'n'. $n2['ID'] .'-ymdn'; if(array_key_exists ($f2,$m2)) { $d2 = $m2[$f2]; } } if(preg_match ( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $d2,$n3 )) { $parameters['year']=$n3['year']; $parameters['month']=$n3['month']; $parameters['day']=$n3['day']; $parameters['day-number']=$n3['day_number']; } else { $parameters['alias']=$d2; } return$parameters; } function uv ($s2){ $a2 = $parameters = []; foreach ($s2 as $q2){ $a2[] = un () ['t'. $q2['ID']]; } if(count ($a2)) { $parameters['tag-alias']=implode (',',$a2); } return$parameters; } function iv ($parameters){ if ( (string) @$parameters['alias']!=='' or ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' and (string) @$parameters['day-number']!=='' ) ) { if ($l2 = e2_published_noterec_with_parameters_($parameters)) { $parameters['*note']=$l2; } } if ( (string) @$parameters['oalias']!=='' or (string) @$parameters['draft']!=='' or (string) @$parameters['oalias2']!=='' or (string) @$parameters['draft2']!=='' ) { if ($l2 = e2_noterec_with_parameters_($parameters)) { $parameters['*note']=$l2; } } if ( (string) @$parameters['tag-alias']!=='' ) { $parameters['*tags']=e2_tagrecs_with_parameters_($parameters); if(count ($parameters['*tags']) == 1){ $parameters['*tag']=$parameters['*tags'][0]; } } return$parameters; } function ov ($f){ global$_e2utf8__unformat_htmlentity_neasden; if($_e2utf8__unformat_htmlentity_neasden){ return $f; } else { return '((html '. $f .'))'; } } function pv ($z2,$k2 = false){ $x2 = ''; $e2_ = strlen ($z2); for ($r = 0; $r < 256; ++ $r){ $r2[$r]=0; $t2 = $r; while ($t2 & 0x00000080){ $t2 <<= 1; ++ $r2[$r]; } } for ($r = 0xd090; $r <= 0xd0bf; $r++)$j2[$r]=chr (($r & 0x000000ff)+48); for ($r = 0xd180; $r <= 0xd18f; $r++)$j2[$r]=chr (($r & 0x000000ff)+112); $j2[0xd081]="\xa8"; $j2[0xd191]="\xb8"; $j2[0xc299]="\x99"; $j2[0xc2a9]="\xa9"; $j2[0xc2ae]="\xae"; $j2[0xc2ab]="\xab"; $j2[0xc2bb]="\xbb"; $j2[0xc2a0]="\xa0"; $r = 0; while ($r < $e2_){ $h2 = $z2[$r]; $g2 = ord ($h2); if ($r2[$g2]==0){ $x2 .= $h2; ++ $r; } elseif ($r2[$g2]==2){ $w2 = $j2[($g2 << 8) | ord ($z2[$r+1])]; $x2 .= ($w2 != null)? $w2 : ( $k2? (ov ( cb (substr ($z2,$r,2)) )) : '?' ); $r += 2; } else { $u2 = substr ($z2,$r,$r2[$g2]); if ($u2 == "\xe2\x84\x96")$x2 .= "\xb9"; elseif ($u2 == "\xe2\x80\x93")$x2 .= "\x96"; elseif ($u2 == "\xe2\x80\x94")$x2 .= "\x97"; elseif ($u2 == "\xe2\x80\x98")$x2 .= "\x91"; elseif ($u2 == "\xe2\x80\x99")$x2 .= "\x92"; elseif ($u2 == "\xe2\x80\x9a")$x2 .= "\x82"; elseif ($u2 == "\xe2\x80\x9c")$x2 .= "\x93"; elseif ($u2 == "\xe2\x80\x9d")$x2 .= "\x94"; elseif ($u2 == "\xe2\x80\x9e")$x2 .= "\x84"; elseif ($u2 == "\xe2\x80\xa6")$x2 .= "\x85"; elseif ($u2 == "\xe2\x80\xb9")$x2 .= "\x8b"; elseif ($u2 == "\xe2\x80\xba")$x2 .= "\x9b"; elseif ($u2 == "\xe2\x82\xac")$x2 .= "\x88"; elseif ($u2 == "\xe2\x84\xa2")$x2 .= "\x99"; else $x2 .= $k2? (ov ( cb ($u2) )) : '?'; $r += $r2[$g2]; } } return $x2; } function cb ($cv){ $i2 = ''; $e2_ = strlen ($cv); for ($r = 0; $r < $e2_; ++ $r){ $i2 .= preg_replace ('/^1*0/','',decbin (ord ($cv[$r]))); } return '&#'. bindec ($i2) .';'; } function vb ($o2) { $d = $o2; $d = preg_replace_callback ('/([\x80-\xFF])/','e2_utf_from_windows_1251_char',$d); return $d; } function e2_utf_from_windows_1251_char ($cv){ list (, $cv)=$cv; if ($cv == "\xa8") return "\xd0\x81"; if ($cv == "\xb8") return "\xd1\x91"; if ($cv >= "\xc0" && $cv <= "\xef") return "\xd0" . chr (ord ($cv)-48); if ($cv >= "\xf0") return "\xd1" . chr (ord ($cv)-112); if ($cv == "\x85") return "\xe2\x80\xa6"; if ($cv == "\x96") return "\xe2\x80\x93"; if ($cv == "\x97") return "\xe2\x80\x94"; if ($cv == "\xab") return "\xc2\xab"; if ($cv == "\xbb") return "\xc2\xbb"; if ($cv == "\x91") return "\xe2\x80\x98"; if ($cv == "\x92") return "\xe2\x80\x99"; if ($cv == "\x93") return "\xe2\x80\x9c"; if ($cv == "\x94") return "\xe2\x80\x9d"; if ($cv == "\x84") return "\xe2\x80\x9e"; if ($cv == "\x99") return "\xe2\x84\xa2"; if ($cv == "\xb9") return "\xe2\x84\x96"; if ($cv == "\xa0") return "\xc2\xa0"; return '?'; }; function e2_utf8_version_of_array_($gv){ foreach ($gv as $t => $xf){ if (!array_key_exists ($t.'.u?',$gv)) { if(is_string ($gv[$t])) { $gv[$t]=vb ($gv[$t]); } elseif(is_array ($gv[$t])) { $gv[$t]=e2_utf8_version_of_array_($gv[$t]); } } } return $gv; } function yb ($hb){ return mb_convert_encoding ($hb[0],'HTML-ENTITIES','UTF-8'); } function nb ($o2,$p2 = false){ if ($p2){ return preg_replace_callback ( '/[\x{10000}-\x{fffff}]/u','e2_question_long_utf8_chars_helper',$o2 ); } else { return preg_replace ('/[\x{10000}-\x{fffff}]/u','?',$o2); } } function e2img_filename_by_processing ( $cd,$vd, $bd,$yd,$nd ) { global$_config; if(Log::$vy)__log ('Process image: "'. $cd .'" -> "'. $vd .'"'); if (!is_file ($cd)) return false; $md = stat ($cd)['size']; if (!wb ($cd)) { if(Log::$vy)__log ('Process image: SVG, no processing'); return $cd; } if(is_file ($vd) and !b3 ($cd,$vd)) { if(Log::$vy)__log ('Process image: Already exists'); return $vd; } if (!extension_loaded ('gd')) return false; $fd = pathinfo ($vd); if (!@j ($fd['dirname'])) { if(Log::$vy)__log ( 'Process image: Can’t create directory <'. $fd['dirname'] .'>' ); return false; } if(Log::$vy)__log ('Process image: Detecting image type'); $type = e2img__type_of_file ($cd); if (!$type) return false; $dd = 'imagecreatefrom'. $type; if (!function_exists ($dd)) return false; if(Log::$vy)__log ('Process image: Opening original image ('. $dd .')'); $sd = call_user_func ($dd,$cd); if (!$sd) return false; if ($ad = e2img__orientation_of_file ($cd)) { if(Log::$vy)__log ('Process image: Needs orientation fix'); $sd = e2img__res_rotate ($sd, -$ad); } $qd = [imagesx ($sd),imagesy ($sd)]; $ld = $qd; $zd = [0,0,0,0]; if ($yd == CROP_SQUARE){ if(Log::$vy)__log ('Process image: Needs crop'); list ($ld,$zd) = ( e2img__crop_metrics_to_square ($ld) ); } $ld = e2_fit_metrics_to_constraints ( $ld,$bd ); if ( $ad === 0 and $ld === $qd ) { if(Log::$vy)__log ('Process image: No changes necessary, leaving original'); return $cd; } if(Log::$vy)__log (var_export ($ld,true)); if(Log::$vy)__log (var_export ($zd,true)); $kd = e2img__create_copy_resampled ( $sd, $ld, $zd, $type ); imagejpeg ($kd,$vd,$nd); if (!is_file ($vd)) { if(Log::$vy)__log ('Process image: File not created by imagejpeg'); return false; } if ($vd !== $cd){ if ($ad === 0){ $xd = stat ($vd)['size']; if ($xd >= $md){ if(Log::$vy)__log ('Process image: Conversion to JPEG made file bigger, back up'); unlink ($vd); $vd = $cd; } } } @chmod ($vd,$_config['uploaded_files_mode']); if(Log::$vy)__log ('Process image: Done'); return $vd; } function e2img__create_copy_resampled ( $sd,$ld,$zd,$type ) { list ($ed,$rd)=$ld; list ($td,$jd,$hd,$gd)=$zd; $kd = imagecreatetruecolor ($ed,$rd); if($type === 'png'){ imagefill ($kd,0,0,imagecolorallocate ($kd,255,255,255)); imagealphablending ($kd,true); } $wd = imagesx ($sd); $ud = imagesy ($sd); imagecopyresampled ( $kd, $sd, 0,0, 0 + $td,0 + $jd, $ed,$rd, $wd - $hd,$ud - $gd ); imageinterlace ($kd,1); return $kd; } function e2img__type_of_file ($db){ $id = @getimagesize ($db); if (!$id or $id[2]>3) return false; if ($id[2]==IMAGETYPE_GIF) return 'gif'; if ($id[2]==IMAGETYPE_JPEG) return 'jpeg'; if ($id[2]==IMAGETYPE_PNG) return 'png'; return false; } function e2img__orientation_of_file ($db){ if (!function_exists ('exif_read_data')) return 0; if (($od = @exif_read_data ($db)) === false) return 0; if ($od['Orientation']==3) return -180; if ($od['Orientation']==6) return -270; if ($od['Orientation']==8) return -90; return 0; } function e2img__res_rotate ($ay,$ad){ $pd = imagerotate ($ay,$ad,0); if ($pd !== false){ imagedestroy ($ay); $ay = $pd; } return $ay; } function e2_fit_metrics_to_constraints ( $cs,$bd ) { if ($bd === false)$bd = [0,0]; list ($vs,$bs)=$cs; list ($ys,$ns)=$bd; $ms = [1]; if ($ys)$ms[] = $ys / $vs; if ($ns)$ms[] = $ns / $bs; $fs = min ($ms); if ($fs < 1){ $vs = (int)round ($vs * $fs); $bs = (int)round ($bs * $fs); } return [$vs,$bs]; } function e2img__crop_metrics_to_square ($cs){ $ds = $ss = $as_ = $qs = 0; list ($vs,$bs)=$cs; if ($vs > $bs){ $as_ = $vs - $bs; $ds = floor ($as_ / 2); $bs = $vs; } elseif ($vs < $bs){ $qs = $bs - $vs; $ss = floor ($as_ / 2); $vs = $bs; } $zd = [$ds,$ss,$as_,$qs]; $ls = [$vs,$bs]; return [$ls,$zd]; } define ('PROVIDE_MEDIA_ASYNC',10); define ('PROVIDE_MEDIA_NOW',20); function mb ($zs){ global$full_blog_url; $ks = parse_url ($zs); if (isset ($ks['host'])) { $sm = $zs; if ($ks['host']=='www.youtube.com'){ $xs = basename ($ks['path']); $es = 'remote/youtube-'. $xs .'-cover.jpg'; return [ 'url' => $sm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'youtube', 'video-id' => $xs, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER . $es, 'local-relative-filename' => $es, 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $es, 'local-full-failname' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $es . '.failed', ]; } elseif ($ks['host']=='player.vimeo.com'){ $xs = basename ($ks['path']); $es = 'remote/vimeo-'. $xs .'-cover.jpg'; return [ 'url' => $sm, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'vimeo', 'video-id' => $xs, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER . $es, 'local-relative-filename' => $es, 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $es, 'local-full-failname' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $es . '.failed', ]; } elseif (gb ($ks['path'])) { return [ 'url' => $sm, 'type' => 'remote-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => false, 'mime-type' => v3 ($ks['path']), 'length' => '', ]; } else { return [ 'url' => $sm, 'type' => 'remote-non-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3 ($ks['path']), 'length' => '', ]; } } else { if (gb ($ks['path'])) { $sm = $full_blog_url .'/'. PICTURES_FOLDER . $ks['path']; $rs = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $ks['path']; return [ 'url' => $sm, 'type' => 'local-image', 'is-local?' => true, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => wb ($ks['path']), 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'mime-type' => v3 ($ks['path']), 'length' => @stat ($rs)['size'], 'local-href' => $sm, 'local-cover-href' => $sm, 'local-relative-filename' => $ks['path'], 'local-full-filename' => $rs, 'thumb-full-filename' => $rs, ]; } elseif (ib ($ks['path'])) { $sm = $full_blog_url .'/'. VIDEO_FOLDER . $ks['path']; $rs = MEDIA_ROOT_FOLDER . VIDEO_FOLDER . $ks['path']; return [ 'url' => $sm, 'type' => 'local-video', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3 ($ks['path']), 'length' => @stat ($rs)['size'], 'local-href' => $sm, 'local-relative-filename' => $ks['path'], 'local-full-filename' => $rs, 'thumb-full-filename' => VIDEO_ICON_IMAGE, ]; } else { $sm = $full_blog_url .'/'. AUDIO_FOLDER . $ks['path']; $rs = MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $ks['path']; return [ 'url' => $sm, 'type' => 'local-non-image', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3 ($ks['path']), 'length' => @stat ($rs)['size'], 'local-href' => $sm, 'local-full-filename' => $rs, 'thumb-full-filename' => AUDIO_ICON_IMAGE, ]; } } } function fb ($ts){ $js = []; foreach ($ts as $zs){ $hs = mb ($zs); if ($hs['is-local?'])$js[] = $zs; } return $js; } function db ($ts){ $js = []; foreach ($ts as $zs){ $hs = mb ($zs); if ($hs['is-snippetable?'])$js[] = $zs; } return $js; } function sb ( $gs,$ws ){ if (!is_array ($gs))$gs = []; if (!is_array ($ws))$ws = []; $ts = array_merge ($ws,$gs); $ts = array_reverse ($ts); $ts = array_unique ($ts); $ts = array_reverse ($ts); return $ts; } function ab ($ts){ global$full_blog_url; if (!is_array ($ts) or !count ($ts)) return []; rb ($ts); $us = []; foreach ($ts as $zs){ if (!empty ($is[$zs])) continue; $hs = mb ($zs); if (!$hs['is-usable-as-cover?']) continue; if (!is_file ($hs['local-full-filename'])) continue; $size = m3 ($hs['local-full-filename']); list ($vs,$bs,$os,$ps)=$size; $us[] = [ 'src' => $hs['local-cover-href'], 'width' => $vs, 'height' => $bs, 'horizontality' => $os, 'verticality' => $ps, ]; $is[$zs]=true; } return $us; } function qb ($ts){ global$full_blog_url,$_strings; if (!is_array ($ts) or !count ($ts)) return []; rb ($ts); $ca = []; foreach ($ts as $zs){ if (!empty ($is[$zs])) continue; $hs = mb ($zs); if (!$hs['is-using-thumbnails?']) continue; if (!is_file ($hs['local-full-filename'])) continue; $va = [ 'is-available?' => true, 'src' => '', 'width' => '', 'height' => '', 'original-filename' => '', 'original-filesize' => '', ]; if (!$hs['is-local?'] or is_file ($hs['local-full-filename'])) { if ($hs['is-generating-thumbnail?']) { $ba = tb ( $hs ); } else { $ba = $hs['thumb-full-filename']; } } if (empty ($ba)) { $va['is-available?']=false; $ba = jb ( $hs['local-relative-filename'] ); } $va['src']=x3 ($ba); if ($va['is-available?']) { $size = m3 ($ba); list ($vs,$bs)=$size; } else { $vs = $bs = ''; } if (!$vs)$vs = THUMB_WIDTH/2; if (!$bs)$bs = THUMB_HEIGHT/2; list ($vs,$bs)=e2_fit_metrics_to_constraints ( [$vs,$bs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $va['width']=$vs; $va['height']=$bs; if ($hs['is-local?']) { $va['original-filename']=$zs; if(is_file ($hs['local-full-filename'])) { $ya = stat ($hs['local-full-filename'])[7]; $ya = round ($ya / 1024) .' '. $_strings['gs--kb']; $va['original-filesize']=$ya; } } $ca[] = $va; $is[$zs]=true; } return $ca; } function lb ($na){ foreach ( ['maxresdefault','hqdefault','mqdefault','sddefault','default'] as $db ) { $sm = 'http://img.youtube.com/vi/'. $na .'/'. $db .'.jpg'; if(Log::$vy)__log ('Trying '. $sm .'...'); $ma = @file_get_contents ($sm); if ($ma !== false) return $ma; } return false; } function zb ($fa){ $da = @unserialize ( file_get_contents ('http://vimeo.com/api/v2/video/'. $fa .'.php') ); if (!empty ($da[0]['thumbnail_large'])) { return @file_get_contents ($da[0]['thumbnail_large']); } return false; } function kb ($hs,$sa){ if(is_file ($hs['local-full-filename'])) { if(Log::$vy)__log ('Already exists: '. $hs['local-full-filename']); } elseif(is_file ($hs['local-full-failname'])) { if(Log::$vy)__log ('Already tried and failed: '. $hs['local-full-filename']); } else { if(Log::$vy)__log ('Resource '. $hs['url'].' is missing a cover, retrieving'); if ($sa == PROVIDE_MEDIA_ASYNC){ p3 (jv ('e2s_retrieve', [ 'url' => strtr (base64_encode ($hs['url']), '+/','-_'), ])); } if ($sa == PROVIDE_MEDIA_NOW){ if(Log::$vy)__log ('Downloading "'. $hs['video-service'] .'" cover as '. $hs['local-full-filename'] .'...'); if ($hs['video-service']=='youtube'){ $ma = lb ($hs['video-id']); } if ($hs['video-service']=='vimeo') { $ma = zb ($hs['video-id']); } if ($ma !== false){ n3 ($hs['local-full-filename'],$ma); } else { n3 ($hs['local-full-failname'],''); } } } } function xb ($zs,$sa){ $hs = mb ($zs); if(Log::$vy)__log ('Resource '. $zs .' is of type '. $hs['type']); if ($hs['type']=='local-image'){ tb ($hs); } if ($hs['type']=='online-video'){ kb ($hs,$sa); if ($sa == PROVIDE_MEDIA_NOW and is_file ($hs['local-full-filename'])) { tb ($hs); } } if ($hs['type']=='remote-image'){ } } function eb ($ts){ foreach ($ts as $zs){ $hs = mb ($zs); if (empty ($hs['local-full-failname'])) continue; if(is_file ($hs['local-full-failname'])) { if(Log::$vy)__log ('Deleting '. $hs['local-full-failname'] .' to try again'); unlink ($hs['local-full-failname']); } } } function rb ($ts){ if (!is_array ($ts)) return; if(Log::$vy)__log ('Asynchronously provide data for resnames {'); foreach ($ts as $zs){ xb ($zs,PROVIDE_MEDIA_ASYNC); } if(Log::$vy)__log ('}'); } function tb ($hs){ if (!$hs['is-generating-thumbnail?']) return false; return e2img_filename_by_processing ( $hs['local-full-filename'], jb ($hs['local-relative-filename']), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); } function jb ($aa){ return pb ( MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $aa, 'thumb@2x' ); } function gb ($zs){ $la = pathinfo ($zs); $za = $la['extension']; return (in_array (strtolower ($za), ['jpg','jpeg','gif','png','svg'])); } function wb ($zs){ $la = pathinfo ($zs); $za = $la['extension']; return (in_array (strtolower ($za), ['jpg','jpeg','gif','png'])); } function ub ($zs){ $la = pathinfo ($zs); $za = $la['extension']; return (in_array (strtolower ($za), ['svg'])); } function ib ($zs){ $la = pathinfo ($zs); $za = $la['extension']; return (in_array (strtolower ($za), ['mp4','mov'])); } function ob ($zs){ $la = pathinfo ($zs); $za = $la['extension']; return (in_array (strtolower ($za), ['mp3'])); } function pb ($zs,$ka){ if (!empty ($ka)) { $xa = explode ('/',$zs); $ea = array_pop ($xa); $ra = explode ('.',$ea); if(count ($ra)<2)$ra[] = ''; $za = array_pop ($ra); $ra[] = $ka; if ($za)$ra[] = $za; $ea = implode ('.',$ra); $xa[] = $ea; $zs = implode ('/',$xa); } return $zs; } function c3 ($ta,$ea){ if (!is_file ($ta . $ea)) return $ea; $ja = strrpos ($ea,'.'); $ha = substr ($ea,0,$ja); $za = substr ($ea,$ja); $r = 0; while (is_file ($ta . $ha .'-'. (++ $r).$za)); $ea = $ha .'-'. $r . $za; return $ea; } function v3 ($zs){ $la = pathinfo ($zs); $za = $la['extension']; if ($za == 'png') return 'image/png'; if ($za == 'gif') return 'image/gif'; if ($za == 'jpg' or $za == 'jpeg') return 'image/jpeg'; if ($za == 'mp3') return 'audio/mpeg'; if ($za == 'svg') return 'image/svg+xml'; if ($za == 'mp4') return 'video/mp4'; if ($za == 'mov') return 'video/quicktime'; } function b3 ($ga,$wa){ return strcasecmp ($ga,$wa)===0; } $_folders_written = [ '.', USER_FOLDER, CACHES_FOLDER, BACKUP_FOLDER, LOG_FOLDER, MEDIA_ROOT_FOLDER . PICTURES_FOLDER, MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER, MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'remote/', MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER .'remote/', MEDIA_ROOT_FOLDER . VIDEO_FOLDER, MEDIA_ROOT_FOLDER . AUDIO_FOLDER, MEDIA_ROOT_FOLDER . AVATARS_FOLDER, ]; $_files_written = [ USER_FOLDER . 'password-hash.psa', USER_FOLDER . 'password-wait.psa', USER_FOLDER . 'last-comment.psa', USER_FOLDER . 'new-uploads.psa', USER_FOLDER . 'settings.json', USER_FOLDER . 'indexing.psa', USER_FOLDER . 'auth.psa', USER_FOLDER . 'scheduled.psa', ]; define ('CROP_NONE',0); define ('CROP_SQUARE',1); function y3 () { global$_folders_written,$_files_written; clearstatcache (); $ua = []; foreach($_folders_written as $sn){ if(is_dir ($sn) and !is_writable ($sn)) { $ua[] = $sn; } } foreach($_files_written as $sn){ if(is_file ($sn) and !is_writable ($sn)) { $ua[] = $sn; } } return $ua; } function n3 ($dy,$x){ @j (dirname ($dy)); if (!@file_put_contents ($dy,$x,LOCK_EX)) { return false; } @chmod ($dy,E2_NEW_FILES_RIGHTS); return true; } function m3 ($db){ $vs = $bs = 0; if (wb ($db)) { list ($vs,$bs)=getimagesize ($db); } elseif (ib ($db)) { try { require_once SYSTEM_LIBRARY_FOLDER .'getid3/getid3.php'; $id = new getid3 (); $id = $id->analyze ($db); $vs = $id['video']['resolution_x']; $bs = $id['video']['resolution_y']; } catch (\Exception $e){} } elseif (ub ($db)) { if(function_exists ('simplexml_load_string')) { $ia = simplexml_load_string (file_get_contents ($db)); if ($ia){ $oa = $ia->attributes (); list ($vs,$bs) = [(string)$oa -> width, (string)$oa -> height]; } } } if(substr ($db,strrpos ($db,'.')-3,3)=='@2x'){ $vs = (int)floor ($vs / 2); $bs = (int)floor ($bs / 2); } $os = round (($bs > 0) ? ($vs / $bs):1,2); $ps = round (($vs > 0) ? ($bs / $vs):1,2); return [$vs,$bs,$os,$ps]; } function e2s_retrieve ($parameters){ $sm = base64_decode (strtr ($parameters['url'],'-_','+/')); if(Log::$vy)__log ('Retrieve: '. $sm); xb ($sm,PROVIDE_MEDIA_NOW); die; } function f3 ( $pa,$c1,$gs ){ $v1 = []; if(is_array ($gs)) { $v1 = fb ($gs); } $b1 = @unserialize ( $c1['Uploads'] ) or $b1 = []; $y1 = array_diff ($v1,$b1); if(count ($y1)>0){ z3 ($pa,$c1['ID'],'add',$y1); } return $y1; } function d3 ($ts){ $ua = []; foreach (ab ($ts) as $n1){ $ua[] = $n1['src']; } return $ua; } function s3 ($name,$m1){ $name = m ($name); if(preg_match('//u',$name))$name = pv ($name,false); if ($m1 == 'image'){ $ta = MEDIA_ROOT_FOLDER . PICTURES_FOLDER; } elseif ($m1 == 'video'){ $ta = MEDIA_ROOT_FOLDER . VIDEO_FOLDER; } elseif ($m1 == 'audio'){ $ta = MEDIA_ROOT_FOLDER . AUDIO_FOLDER; } else { return false; } $f1 = ''; for ($r = 0; $r < strlen ($name); $r++) { if($name[$r]=='?'){ $f1 .= ''; } elseif($name[$r]==' '){ $f1 .= '-'; } elseif(ord ($name[$r]) <= 127){ $f1 .= $name[$r]; } } if ($f1 == '')$f1 = $m1; if ($f1[0]=='.')$f1 = $m1 . $f1; return $f1; } function a3 ($d1){ global$_config; if(Log::$vy)__log ('Count references for upload <'. $d1 .'>'); if(is_file (USER_FOLDER . 'new-uploads.psa')) { $s1 = @unserialize (file_get_contents (USER_FOLDER . 'new-uploads.psa')); } $a1 = '%'. str_replace ('%','#%',$d1) .'%'; xn ( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Text` LIKE '". $a1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $a1 ."' ESCAPE '#')", 'get notes where uploads may be referenced' ); $q1 = en (); $l1 = @unserialize ($q1[0]['Uploads']); if (!is_array ($l1)) { foreach ($q1 as $n2){ $z1 = u3 ( $n2['FormatterID'], @$n2['Text'],'full-rss' ); $l1 = f3 ( 'note',$n2, $z1['meta']['resources-detected'] ); } } xn ( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Description` LIKE '". $a1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $a1 ."' ESCAPE '#')", 'get tags where uploads may be referenced' ); $q1 = en (); $k1 = @unserialize ($q1[0]['Uploads']); if (!is_array ($k1)) { foreach ($q1 as $q2){ $z1 = i3 ( @$q2['Description'],'full-rss' ); $k1 = f3 ( 'tag',$q2, $z1['meta']['resources-detected'] ); } } if (!is_array ($s1))$s1 = []; if (!is_array ($l1))$l1 = []; if (!is_array ($k1))$k1 = []; $x1 = array_merge ($s1,$l1,$k1); if(Log::$vy)__log ('References found in relevant entries: '. var_export ($x1,true)); if(in_array ($d1,$x1)) { if(Log::$vy)__log ('Still referenced, do not delete file'); return true; } return false; } function q3 ($e1,$xs){ global$_config; if ($e1 == 'note' and $xs == 'new'){ if(is_file (USER_FOLDER . 'new-uploads.psa')) { $x1 = @unserialize (file_get_contents (USER_FOLDER . 'new-uploads.psa')); } } elseif ($e1 == 'note'){ xn ( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); $q1 = en (); $x1 = @unserialize ($q1[0]['Uploads']); } elseif ($e1 == 'tag'){ xn ( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); $q1 = en (); $x1 = @unserialize ($q1[0]['Uploads']); } if (!is_array ($x1))$x1 = array (); return $x1; } function l3 ($e1,$xs,$x1){ global$_config; if ($e1 == 'note' and $xs == 'new'){ if (!@n3 (USER_FOLDER . 'new-uploads.psa',serialize ($x1))) { mv ('ERROR',E2E_PERMISSIONS_ERROR); } } elseif ($e1 == 'note'){ xn ( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `Uploads`='". serialize ($x1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); } elseif ($e1 == 'tag'){ xn ( "UPDATE `". $_config['db_table_prefix']."Keywords` ". "SET `Uploads`='". serialize ($x1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $xs ); } else { return false; } if (!is_array ($x1))$x1 = array (); return $x1; } function z3 ($e1,$xs,$action,$lv){ global$_config; $x1 = array (); if(Log::$vy)__log ('Register upload: <'. $e1.', '. $xs.', '. $action.', '. $lv .'>'); $x1 = q3 ($e1,$xs); $x1 = d ($x1,$action,$lv); l3 ($e1,$xs,$x1); } function k3 ($r1,$t1,$gs){ $b1 = @unserialize ($t1['Uploads']) or $b1 = array (); $j1 = fb ($gs); $x1 = d ($b1,'add',$j1); $x1 = serialize ($x1); if ($x1 != $t1['Uploads']) { $t1['Uploads']=$x1; nn ($r1,$t1); } } function e2j_file_upload ($parameters = array ()) { global$_config,$full_blog_url,$_strings; @j (MEDIA_ROOT_FOLDER . PICTURES_FOLDER); @chmod (MEDIA_ROOT_FOLDER . PICTURES_FOLDER,$_config['uploaded_files_mode']); @j (MEDIA_ROOT_FOLDER . VIDEO_FOLDER); @chmod (MEDIA_ROOT_FOLDER . VIDEO_FOLDER,$_config['uploaded_files_mode']); @j (MEDIA_ROOT_FOLDER . AUDIO_FOLDER); @chmod (MEDIA_ROOT_FOLDER . AUDIO_FOLDER,$_config['uploaded_files_mode']); $kv = [ 'success' => false ]; if(count ($_FILES)>0){ foreach($_FILES as $dy){ if (!$dy['error']) { if(Log::$vy)__log ('Ajax file upload: <'. $dy['name'].'>'); $kv['data']['file-kind']='image'; $ta = MEDIA_ROOT_FOLDER . PICTURES_FOLDER; if (ib ($dy['name'])) { $kv['data']['file-kind']='video'; $ta = MEDIA_ROOT_FOLDER . VIDEO_FOLDER; } elseif (ob ($dy['name'])) { $kv['data']['file-kind']='audio'; $ta = MEDIA_ROOT_FOLDER . AUDIO_FOLDER; } $h1 = ( array_key_exists ('overwrite',$_GET) and is_file ($ta . $dy['name']) ); $g1 = false; $kv['data']['overwrite'] = (int)$h1; if(Log::$vy)__log ('Ajax file upload: Overwrite is resolved to <'. (int)$h1.'>'); $f1 = s3 ($dy['name'],$kv['data']['file-kind']); if(Log::$vy)__log ('Ajax file upload: Safe name is <'. $f1.'>'); if(is_file ($ta . $f1)) { if(file_get_contents ($ta . $f1)==file_get_contents ($dy['tmp_name'])) { if(Log::$vy)__log ('Ajax file upload: Existing file is the same'); $g1 = true; } elseif (!$h1){ $f1 = c3 ($ta,$f1); } } if (!$g1){ move_uploaded_file ($dy['tmp_name'],$ta . $f1); @chmod ($ta . $f1,$_config['uploaded_files_mode']); } if(Log::$vy)__log ('Ajax file upload: File kind is <'. $kv['data']['file-kind'].'>'); if ($kv['data']['file-kind']=='image'){ $za = pathinfo ($f1,PATHINFO_EXTENSION); if (b3 ($za,'jpg')) { $w1 = $f1; } else { $w1 = $f1 .'.jpg'; $w1 = c3 ( MEDIA_ROOT_FOLDER . PICTURES_FOLDER,$w1 ); } $u1 = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $f1; $i1 = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $w1; if(Log::$vy)__log ('Ajax file upload: Process uploaded image <'. $u1.'>'. ' to possibly <'. $i1.'>'); $i1 = e2img_filename_by_processing ( $u1, $i1, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); $ya = $dy['size']; if (!b3 ($i1,$u1)) { @unlink ($u1); $f1 = $w1; $ya = stat ($i1)['size']; } if ($h1){ @unlink (jb ($f1)); } if ($o1 = e2img_filename_by_processing ( $u1, jb ($f1), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY )) { if(Log::$vy)__log ('Ajax file upload: thumbnail, done as '. $o1); list ($vs,$bs)=m3 ($o1); if(Log::$vy)__log ('Ajax file upload: image size '. $vs .'×'. $bs); if (!$vs)$vs = THUMB_WIDTH/2; if (!$bs)$bs = THUMB_HEIGHT/2; list ($vs,$bs)=e2_fit_metrics_to_constraints ( [$vs,$bs], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $kv['success']=true; $kv['data']['new-name']=$f1; $kv['data']['filesize']=round ($ya / 1024) .' '. $_strings['gs--kb']; $kv['data']['thumb']=x3 ($o1); $kv['data']['width']=$vs; $kv['data']['height']=$bs; z3 ($parameters['entity'],$parameters['entity-id'],'add', array ($f1)); } else { if(Log::$vy)__log ('Ajax file upload: couldn’t create thumbnail'); @unlink ($ta . $f1); $kv['error']['message']=_S ('er--cannot-create-thumbnail'); } } if ($kv['data']['file-kind']=='video'){ if(Log::$vy)__log ('Ajax file upload: video, done'); $kv['success']=true; $kv['data']['new-name']=$f1; $kv['data']['filesize']=round ($dy['size']/1024) .' '. $_strings['gs--kb']; $kv['data']['thumb']=VIDEO_ICON_IMAGE; $kv['data']['width']=VIDEO_ICON_WIDTH/2; $kv['data']['height']=VIDEO_ICON_HEIGHT/2; z3 ($parameters['entity'],$parameters['entity-id'],'add', array ($f1)); } if ($kv['data']['file-kind']=='audio'){ if(Log::$vy)__log ('Ajax file upload: audio, done'); $kv['success']=true; $kv['data']['new-name']=$f1; $kv['data']['filesize']=round ($dy['size']/1024) .' '. $_strings['gs--kb']; $kv['data']['thumb']=AUDIO_ICON_IMAGE; $kv['data']['width']=AUDIO_ICON_WIDTH/2; $kv['data']['height']=AUDIO_ICON_HEIGHT/2; z3 ($parameters['entity'],$parameters['entity-id'],'add', array ($f1)); } } elseif(4 != $dy['error']) { if ($dy['error']==1){ $kv['error']['message']='too-big'; } elseif ($dy['error']==2){ $kv['error']['message']='too-big'; } elseif ($dy['error']==3){ $kv['error']['message']='partial'; } else { $kv['error']=$dy['error']; } } } } else { if(Log::$vy)__log ('Ajax file upload error: no files'); $kv['error']['message']='no-files'; } $kv = json_encode ($kv); die ($kv); } function x3 ($p1){ global$full_blog_url; $e2_ = strlen (MEDIA_ROOT_FOLDER); if ($e2_ and substr ($p1,0,$e2_)==MEDIA_ROOT_FOLDER){ return substr ($p1,$e2_); } else { return$full_blog_url .'/'. $p1; } } function e3 () { @unlink (USER_FOLDER . 'userpic@2x.png'); @unlink (USER_FOLDER . 'userpic@2x.jpg'); @unlink (USER_FOLDER . 'userpic-large@2x.jpg'); @unlink (USER_FOLDER . 'userpic-square@2x.jpg'); } function e2j_userpic_remove () { if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_settings')); } e3 (); $kv = json_encode ([ 'success' => true ]); die ($kv); } function e2j_userpic_upload () { global$_config; $kv = [ 'success' => false ]; if(count ($_FILES)!=1){ if(Log::$vy)__log ('Ajax userpic upload error: no or too many files'); $kv['error']['message']='No or too many files'; $kv = json_encode ($kv); die ($kv); } $dy = array_pop ($_FILES); if (!$dy['error']) { if(Log::$vy)__log ('Ajax userpic upload: <'. $dy['name'].'>'); $cq = pathinfo ($dy['name']); $za = strtolower ($cq['extension']); if ($za != 'png')$za = 'jpg'; $db = 'userpic.original.'. $za; move_uploaded_file ($dy['tmp_name'],USER_FOLDER . $db); @chmod (USER_FOLDER . $db,$_config['uploaded_files_mode']); e3 (); copy ( USER_FOLDER . $db, USER_FOLDER .'userpic-large@2x.jpg' ); $vq = e2img_filename_by_processing ( USER_FOLDER .'userpic-large@2x.jpg', USER_FOLDER .'userpic-large@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_NONE, USERPIC_JPG_QUALITY ); copy ( USER_FOLDER . $db, USER_FOLDER .'userpic-square@2x.jpg' ); $bq = e2img_filename_by_processing ( USER_FOLDER .'userpic-square@2x.jpg', USER_FOLDER .'userpic-square@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_SQUARE, USERPIC_JPG_QUALITY ); $yq = e2img_filename_by_processing ( USER_FOLDER . $db, USER_FOLDER .'userpic@2x.jpg', [USERPIC_WIDTH,USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); if ($bq){ $nq = str_replace (USER_FOLDER,USER_FOLDER_URLPATH,$bq); $kv = [ 'success' => true, 'data' => [ 'new-image-src' => $nq, ] ]; } else { $kv['error']['message']=_S ('er--supported-only-png-jpg-gif'); } } elseif(4 != $dy['error']) { if ($dy['error']==1){ $kv['error']['message']='File too big'; } elseif ($dy['error']==2){ $kv['error']['message']='File too big'; } elseif ($dy['error']==3){ $kv['error']['message']='File upload is partial'; } else { $kv['error']['message']='File upload error '. $dy['error']; } } $kv = json_encode ($kv); die ($kv); } function e2j_file_remove ($parameters){ if (!array_key_exists ('file',$_POST)) { $kv = [ 'success' => false ]; $kv = json_encode ($kv); die ($kv); } $dy = $_POST['file']; $kv = [ 'success' => true ]; $kv = json_encode ($kv); z3 ($parameters['entity'],$parameters['entity-id'],'remove',$dy); if (!a3 ($dy)) { if (ob ($dy)) { if(Log::$vy)__log ('Not referenced, deleting '. MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $dy); @unlink (MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $dy); } elseif (ib ($dy)) { if(Log::$vy)__log ('Not referenced, deleting '. MEDIA_ROOT_FOLDER . VIDEO_FOLDER . $dy); @unlink (MEDIA_ROOT_FOLDER . VIDEO_FOLDER . $dy); } else { $yq = pb ($dy,'thumb@2x'); $mq = @unlink (MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $dy); $fq = @unlink (MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $yq); } } die ($kv); } function r3 () { global$_config; if (!$_config['files_total_size_limit']) return false; $dq = 0; foreach(glob (MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'/*') as $dy){ $f = stat ($dy); $dq += $f['size']; } foreach(glob (MEDIA_ROOT_FOLDER . VIDEO_FOLDER .'/*') as $dy){ $f = stat ($dy); $dq += $f['size']; } foreach(glob (MEDIA_ROOT_FOLDER . AUDIO_FOLDER .'/*') as $dy){ $f = stat ($dy); $dq += $f['size']; } $sq = $_config['files_total_size_limit']; $aq = f ($dq,$sq); return array ($dq,$sq,$aq); } function t3 ($qq){ $lq = true; if (list ($dq,$sq,$aq)=$qq){ $lq = ($sq - $dq)>0; } return $lq; } function j3 ($qq,$zq = false){ $kq = ''; if (list ($dq,$sq,$aq)=$qq){ $qq = array ( 'used' => round ($dq / 1024 / 1024), 'total' => round ($sq / 1024 / 1024), 'percent' => $aq ); if ($zq or ($sq - $dq)<1024 * 1024 * 10){ if ($dq < $sq){ $kq = e2l_get_string ('gs--used',$qq); } else { $kq = e2l_get_string ('gs--used-all',$qq); } } } return $kq; } function e2_error404_mode () { global$_config,$_strings; if($_config['try_redirect_to_all']) { $xq = 'all/'. urldecode ($_GET['go']); hv ($xq); } header ('HTTP/1.1 404 Not found'); $eq['class']='404'; $eq['heading']=$_strings['pt--page-not-found']; $eq['title']=$_strings['pt--page-not-found']; return $eq; } function e2s_post_service ($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_underhood')); } if($parameters['service']==='build'){ e2_build (); mv ('Engine core built',E2E_MESSAGE); } if($parameters['service']==='sync'){ e2_drop_all_kinds_of_cache (); mv ('Caches invalidated',E2E_MESSAGE); } if($parameters['service']==='log'){ nv (); mv ('Logs enabled',E2E_MESSAGE); } if($parameters['service']==='backup'){ } if($parameters['service']==='migrate'){ qn (); mv ('Database structure up to date',E2E_MESSAGE); } c (jv ('e2m_underhood')); } function h3 ($jv){ include_once 'neasden/neasden.php'; $Nn = new Neasden; $Nn->profile_name = 'kavychki'; return$Nn->format ($jv); } function g3 ($zy,$jv,$rq){ include_once 'neasden/neasden.php'; if ($jv === '') return array (); if ($zy == 'calliope'){ preg_match_all ('/\(\(([^ ]*)( |\)\))/',$jv,$n3); return $n3[1]; } elseif ($zy == 'neasden'){ $Nn = new Neasden; $Nn->profile_name = $rq; $Nn->format ($jv); return$Nn->resources_detected; } else { return array (); } } function w3 () { return '<div class="foot" style="color: var(--errorColor); font-style: italic">This text was created with a very old version of Aegea that used a formatter called Calliope. It is no longer included with Aegea&nbsp;2.10.</div><div class="foot" style="color: var(--errorColor); font-style: italic">Edit this note to switch it and its comments to the current formatter, Neasden. If anything breaks, edit again to fix.</div><div class="foot" style="color: var(--errorColor); font-style: italic">To temporarily install Calliope, get the directory <tt>/system/calliope/</tt> from Aegea&nbsp;2.9 and copy it to your <tt>/user/calliope/</tt>. This will not work with Aegea&nbsp;2.11. See release notes for Aegea&nbsp;2.10 for details.</div>'; } function u3 ($zy,$jv,$rq){ include_once 'neasden/neasden.php'; if(Log::$vy)__log ('Format: format with formatter "'. $zy .'" in context "'. $rq.'"'); if ($zy == 'calliope'){ $jv = pv ($jv); $jv = o3 ($jv,$rq); $meta = array (); $jv = vb ($jv); $jv = '<div class="e2-text-calliope-formatted">'. h3 ($jv) .'</div>'; } elseif ($zy == 'neasden'){ $Nn = new Neasden; $Nn->profile_name = $rq; $jv = $Nn->format ($jv); $meta = array ( 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ); } return array ( 'text-final' => $jv, 'meta' => $meta, ); } function i3 ($jv,$rq){ global$_config; return u3 ($_config['default_formatter'],$jv,$rq); } function o3 ($jv,$rq){ global$_config,$settings,$full_blog_url,$_template; @ (list ($rq,$tq)=explode ('|',$rq)); if (!is_file (USER_FOLDER . 'calliope/WikiFormatter.php')) { return w3 (); } require_once USER_FOLDER . 'calliope/WikiFormatter.php'; if ('full' == $rq)$jq = WF_FULL_MODE; elseif ('full-rss' == $rq)$jq = WF_FULL_MODE; elseif ('simple' == $rq)$jq = WF_SIMPLE_MODE; elseif ('simple-rss' == $rq)$jq = WF_SIMPLE_MODE; else return $jv; $hq = new WikiFormatter (); $hq -> replace = array ( '/' => 'i', '+' => 'small', '-' => 's', '*' => 'b', '^' => 'sup', 'v' => 'sub', '#' => 'tt', '!' => 'blockquote', ); $hq -> settings = array ( 'hrefSize' => 100, 'localImgDir' => $full_blog_url .'/'. PICTURES_FOLDER, 'maxImgWidth' => $_template['max_image_width'], 'mode' => $jq, 'enableShrinkLongHref' => 1, 'enableHr' => 0, 'enableBr' => 1, 'enableHeaders' => 1, 'headersStartWith' => 1, 'enableTables' => 1, 'simpleTableCSSClass' => 'e2-text-table', 'enableAutoAcronymEngine' => 0, 'enableAcronym' => 0, 'acronymBase' => '', 'enableList' => 1, 'mailSafe' => "<a href=\"\" onmouseover=\"this.href='mailto:'+{email}\">{icon}<script language=\"JavaScript\">document.write({name});</script></a>", 'ljUserTag' => '<a href="http://livejournal.com/users/{name}/">{name}</a>', 'fullVersionURL' => $tq, 'enableTagIcons' => 0, 'outerUrlInNewWindow' => 0, 'lineBreak' => "\n", 'extLinkHrefPrefix' => '', ); $jv = $hq -> Wiki2HTML ($jv); return $jv; } function p3 ($sm,$gq = false){ if(Log::$vy)__log ('Spawn: Curl '. $sm .' using '. ($gq? 'post' : 'get') .'...'); if(function_exists ('curl_init')) { $wq = curl_init (); $uq = !ini_get ('open_basedir'); $uq = ($uq and !$gq); curl_setopt_array ($wq, array ( CURLOPT_URL => $sm, CURLOPT_POST => $gq, CURLOPT_POSTREDIR => false, CURLOPT_POSTFIELDS => '', CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => r2 (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $uq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($wq); $iq = curl_errno ($wq); $oq = curl_error ($wq); $pq = curl_getinfo ($wq); curl_close ($wq); if(Log::$vy)__log ('Spawn: Curl returns: ['. print_r ($pq,true) .'] ['. $content .'], (errno='. $iq .', errstr='. $oq .')...'); } else { if(Log::$vy)__log ('Spawn: Curl functions are not available'); } } function cy ($cl){ global$_config; if (@$_config['broadcast_url'] and !$cl['IsExternal']) { if($_config['log_broadcast']) { Log::$vy = true; if(Log::$vy)bv ('broadcast'); } if(Log::$vy)__log ('Broadcast-async note: '. $cl['Title']); $sm = jv ('e2m_note_broadcast', array ('*note' => $cl)); if(Log::$vy)__log ('Broadcast will spawn url: '. $sm); p3 ($sm); } } function vy ($vl){ global$_config; if (!$vl) return false; $sm = $_config['broadcast_url']; $sm .= '?src='. urlencode ($vl); if($_config['log_broadcast']) { Log::$vy = true; if(Log::$vy)bv ('broadcast'); } if(Log::$vy)__log ('Broadcast: Curl '. $sm .'...'); if(function_exists ('curl_init')) { $wq = curl_init (); $uq = !ini_get ('open_basedir'); curl_setopt_array ($wq, array ( CURLOPT_URL => $sm, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => r2 (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $uq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($wq); $iq = curl_errno ($wq); $oq = curl_error ($wq); $pq = curl_getinfo ($wq); curl_close ($wq); if(Log::$vy)__log ('Broadcast: Curl returns: ['. print_r ($pq,true) .'] ['. $content .'], (errno='. $iq .', errstr='. $oq .')...'); if ($iq === 0) return true; } else { if(Log::$vy)__log ('Spawn: Curl functions are not available'); } return false; } function by ($cl){ if (!$cl) return false; $vl = jv ('e2m_note_json', array ('*note' => $cl)); return vy ($vl); } function e2m_note_broadcast ($parameters = array ()) { global$_config; if (@$_config['broadcast_url']) { if(array_key_exists ('*note',$parameters)) { $vl = jv ('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif(array_key_exists ('alias',$parameters)) { $vl = jv ('e2m_note_json', array ('alias' => $parameters['alias'])); } if (vy ($vl)) { die ('Broadcasted.'); } else { die ('Could not broadcast.'); } } else { return e2_error404_mode (); } } function e2m_timezone () { global$_strings,$settings; $bl = array ( 'form-action' => jv ('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => fy ($settings['timezone']['offset'],1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $bl, ); } function yy () { global$_strings; $yl = array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $yl; } function ny ($nl){ $yl = yy (); return @$yl[(int)$nl/SECONDS_IN_A_MINUTE]; } function my ($nl){ $ml = '+'; if ($nl < 0)$ml = '&ndash;'; $fl = str_pad ((int) (abs ($nl)/3600),2,'0',STR_PAD_LEFT); $dl = str_pad (abs ($nl)/60 % 60,2,'0',STR_PAD_LEFT); return 'GMT'. $ml . $fl .':'. $dl; } function fy ($sl,$al = ''){ global$_strings; $yl = yy (); $d = ''; if (!$al)$al = count ($yl); $d .= '<select class="e2-select" name="offset" size="'. $al .'">'; foreach ($yl as $nl => $ql){ $ll = ''; if ($nl * SECONDS_IN_A_MINUTE == $sl)$ll = ' selected="selected"'; $d .= '<option'. $ll .' value="'.$nl.'">'; $ml = ''; if ($nl < 0)$ml = '−'; if ($nl > 0)$ml = '+'; $fl = (int) (abs ($nl * SECONDS_IN_A_MINUTE)/3600); $dl = (int) (abs ($nl * SECONDS_IN_A_MINUTE)/60 % 60); if ($fl){ $d .= ( $ml .' '. $fl .' '. $_strings['gs--timezone-offset-hours'] .' '. ($dl? ($dl .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($ql){ $d .= ' ('. $ql. ')'; } } else { $d .= $ql; } $d .= '</option>'; } $d .= '</select>'; return $d; } function e2s_select_timezone () { global$settings,$_strings; if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780){ $settings['timezone']['offset'] = @$_POST['offset']*SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_timezone')); } c (jv ('e2m_settings')); } function dy ($l2){ return array ( 'offset' => (int)$l2['Offset'], 'is_dst' => (bool)$l2['IsDST'], ); } function sy () { return array ( 'offset' => 0, 'is_dst' => false, ); } function ay () { global$settings; if(array_key_exists ('timezone',$settings)) { return$settings['timezone']; } else { return sy (); } } function qy ($zl,$kl){ if (@$zl['is_dst']) { $xl = (int)date ('I',$kl); $el = date ('Z',$kl)-$xl * SECONDS_IN_AN_HOUR; $rl = $zl['offset']; $tl = $rl - $el; $jl = date ('I',$kl + $tl); return $jl; } else { return 0; } } function ly ($zl,$kl){ global$settings; if ($zl and is_array ($zl)) { return ( $zl['offset'] + qy ($zl,$kl)*SECONDS_IN_AN_HOUR ); } } function zy ($kl){ return ly (ay (), $kl); } function ky ($hl,$lv,$zl){ return gmdate ($hl,$lv + ly ($zl,$lv)); } function xy ($hl,$lv){ return ky ($hl,$lv,ay ()); } function ey ($gb,$hb = false,$jb = false){ if(is_numeric ($jb)) { $gl = gmmktime (0,0,0,$hb,$jb,$gb); $wl = gmmktime (0,0,0,$hb,$jb + 1,$gb)-1; } elseif(is_numeric ($hb)) { $gl = gmmktime (0,0,0,$hb,1,$gb); $wl = gmmktime (0,0,0,$hb + 1,1,$gb)-1; } else { $gl = gmmktime (0,0,0,1,1,$gb); $wl = gmmktime (0,0,0,1,1,$gb + 1)-1; } return array ($gl,$wl); } function ry ($zl,$gb,$hb = false,$jb = false){ list ($gl,$wl)=ey ($gb,$hb,$jb); $gl -= ly ($zl,$gl); $wl -= ly ($zl,$wl); return array ($gl,$wl); } function ty ($gb,$hb = false,$jb = false){ return ry (ay (), $gb,$hb,$jb); } function jy ($gb,$hb = false,$jb = false){ $ul = 13; $il = -12; $ul += 1; $il -= 1; list ($gl,$wl)=ey ($gb,$hb,$jb); $gl -= $ul * 3600; $wl -= $il * 3600; return array ($gl,$wl); } function hy ($nl){ if ((int) @$nl > 0) return (string)'+'.abs (@$nl); elseif ((int) @$nl < 0) return (string)'-'.abs (@$nl); else return ''; } function gy ($kl,$ol = ''){ $pl = zy ($kl); $ml = ($pl >= 0)?'+':'-'; $pl = abs ($pl); $c4 = $pl % 60; $pl -= $c4; $hb = $pl % 3600 / 60; $pl -= $hb * 60; $v4 = $pl / 3600; if ($v4 < 10)$v4 = '0'.$v4; if ($hb < 10)$hb = '0'.$hb; return $ml.$v4.$ol.$hb; } function wy ($b4){ global$settings; if(is_numeric ($b4)) { $q1['offset']=SECONDS_IN_A_MINUTE * $b4; $q1['is_dst']=false; $y4 = SECONDS_IN_A_MINUTE * $b4 - SECONDS_IN_AN_HOUR; $n4 = array ('offset' => $y4,'is_dst' => true); $n4 = (int)ly ($n4,time ()); if ($q1['offset']==$n4){ $q1['offset']=$y4; $q1['is_dst']=true; } } else { if(array_key_exists ('timezone',$settings)) { $q1 = $settings['timezone']; } else { $q1['offset']=0; $q1['is_dst']=false; } } return $q1; } function uy ($m4){ $v4 = xy ('H',$m4); if ($v4 <= 4) return 4; elseif ($v4 <= 10) return 1; elseif ($v4 <= 16) return 2; elseif ($v4 <= 22) return 3; else return 4; } function iy ($f4,$d4 = null){ global$_strings; if ($d4 === null)$d4 = ay (); $s4 = ky ('d.m.Y',$tb,$d4); $a4 = ky ('d.m.Y',$f4,$d4); $q4 = SECONDS_IN_A_MINUTE; $l4 = SECONDS_IN_AN_HOUR; $tb = time (); $z4 = uy ($tb); $k4 = uy ($f4); $xb = $tb - $f4; if ($xb < 0) return$_strings['tt--from-the-future']; if ($xb >= 0 and $xb < 54) return$_strings['tt--just-now']; if ($xb >= 54 and $xb < 108) return$_strings['tt--one-minute-ago']; $x4 = $xb + 12; $e4 = floor ($x4 / $q4); if ($xb >= 108 and $xb < 54*$q4) return e2l_get_string ( 'tt--minutes-ago', array ('minutes' => $e4) ); if ($xb >= 54*$q4 and $xb < 108*$q4) return$_strings['tt--one-hour-ago']; $x4 = $xb + 12*$q4; $r4 = floor ($x4 / $l4); if ($xb >= 108*$q4 and $xb < 4*$l4) return e2l_get_string ( 'tt--hours-ago', array ('hours' => $r4) ); $t4 = ky ('G:i',$f4,$d4); if ($xb >= 4*$l4 and $z4 > $k4 and $s4 == $a4){ return$_strings['tt--today']; } if ((($tb - $f4) <= 7884000)) { return e2l_get_string ( 'tt--date', array ( 'day' => ky ('j',$f4,$d4), 'month' => ky ('m',$f4,$d4), ) ); } return ky ('Y',$f4,$d4); } function oy ($f4,$d4 = null){ global$_strings; $xb = time () - $f4; if ($xb < 0) return$_strings['tt--from-the-future']; if ($xb == 0) return$_strings['tt--now']; $j4 = array ( array (1,'tt--seconds-short'), array (SECONDS_IN_A_MINUTE,'tt--minutes-short'), array (SECONDS_IN_AN_HOUR,'tt--hours-short'), array (SECONDS_IN_A_DAY,'tt--days-short'), array (SECONDS_IN_A_MONTH,'tt--months-short'), array (SECONDS_IN_A_YEAR,'tt--years-short'), array (SECONDS_IN_A_YEAR + SECONDS_IN_A_MONTH,''), ); for ($r = 0; $r < count ($j4); ++ $r){ if ($xb >= $j4[$r][0] and $xb < $j4[$r + 1][0]) { return e2l_get_string ( $j4[$r][1], array ('value' => floor ($xb / $j4[$r][0])) ); } } if ($d4 === null)$d4 = ay (); return ky ('Y',$f4,$d4); } $_model_contractions = [ 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'pkey1' => "INT UNSIGNED DEFAULT '1' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v39' => "VARCHAR(39) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". $_config['default_formatter'] ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ]; $_model = [ 'Actions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityID', 'pkey'], ['Stamp', 'time'], ['ReadCount', 'int'], ], 'Aliases' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityType', 'v1'], ['EntityID', 'pkey'], ['Alias', 'v64'], ['Stamp', 'time'], ], 'Comments' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['Text', 'text'], ['Reply', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ['IsReplyVisible', '0'], ['IsReplyFavourite', '0'], ['IsAnswerAware', '1'], ['IsSubscriber', '0'], ['IsSpamSuspect', '0'], ['IsNew', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['ReplyStamp', 'time'], ['ReplyLastModified', 'time'], ['IP', 'v39'], ['IsGIPUsed', '0'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ], 'GIPsSessions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['AuthorProfileLink', 'v255'], ['SessionToken', 'v255'], ['Stamp', 'time'], ], 'Keywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Keyword', 'v255'], ['OriginalAlias', 'v64'], ['PageTitle', 'v255'], ['Description', 'text'], ['Summary', 'text'], ['Uploads', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ], 'Notes' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Title', 'v255'], ['Text', 'text'], ['Summary', 'text'], ['FormatterID', 'fid'], ['OriginalAlias', 'v64'], ['Uploads', 'text'], ['IsPublished', '0'], ['IsCommentable', '0'], ['IsVisible', '1'], ['IsFavourite', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['Offset', 'int'], ['IsDST', '0'], ['IsIndexed', '0'], ['IsExternal', '0'], ['ReadCount', 'uint'], ['SourceID', 'pkey'], ['SourceNoteID', 'pkey'], ['SourceNoteURL', 'v255'], ['SourceNoteJSONURL', 'v255'], ['SourceNoteData', 'text'], ], 'NotesKeywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['KeywordID', 'pkey'], ], 'Sources' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['TrueID', 'pkey'], ['Title', 'v255'], ['AuthorName', 'v255'], ['URL', 'v255'], ['PictureURL', 'v255'], ['IsWhiteListed', '0'], ['IsTrusted', '0'], ], ]; $_model_indexes_create_sql = [ 'index' => 'INDEX', 'unique' => 'UNIQUE INDEX', 'fulltext' => 'FULLTEXT', ]; $_model_indexes_check_sql = [ 'index' => 'KEY', 'unique' => 'UNIQUE KEY', 'fulltext' => 'FULLTEXT KEY', ]; $_model_indexes = [ 'Actions' => [ ['unique', ['EntityID','Stamp']], ['index', ['SubsetID']], ], 'Aliases' => [ ['index', ['SubsetID']], ['index', ['Alias']], ['index', ['EntityID']], ], 'Comments' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'GIPsSessions' => [ ['unique', ['SubsetID','GIP','GIPAuthorID']], ['index', ['SubsetID']], ], 'Keywords' => [ ['index', ['SubsetID']], ], 'Notes' => [ ['fulltext', ['Title','Text']], ['index', ['SubsetID']], ['index', ['Stamp']], ['index', ['SourceID']], ['index', ['SourceNoteID']], ], 'NotesKeywords' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'Sources' => [ ['index', ['SubsetID']], ], ]; $_model_minimal_table_list = [ 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ]; function e2_model_data_check ($h4){ global$_db,$_model,$_model_minimal_table_list,$_config; $g4 = false; $w4 = array (); $sql = 'SHOW TABLES FROM `'. mysqli_real_escape_string ($_db['link'],$h4). '`'; $q1 = mysqli_query ($_db['link'],$sql); if ($q1){ while ($u4 = mysqli_fetch_row ($q1)) { foreach(array_keys ($_model) as $i4){ if(strcasecmp ($u4[0],$_config['db_table_prefix'].$i4)===0){ $g4 = true; $w4[] = $i4; } } } } $o4 = true; foreach(array_keys ($_model) as $i4){ if (!in_array ($i4,$w4)) { $o4 = false; } } $p4 = true; foreach($_model_minimal_table_list as $i4){ if (!in_array ($i4,$w4)) { $p4 = false; } } return array ( 'occupied' => $g4, 'complete' => $o4, 'migrateable' => $p4, ); } function py ($i3){ global $cz; list ($vz,$bz)=wn ($i3['server']); if (($yz = mysqli_connect ( 'p:'. $vz, $i3['user_name'], i2 ($i3['passw']), $i3['passw'], '', $db_port )) === false) return []; $nz = []; $mz = [ 'information_schema', 'performance_schema', 'sys', 'mysql' ]; @$cz ++; $bf = 'SHOW DATABASES'; if(Log::$vy)__log ('DB ['. $cz .']: '. $bf); $q1 = mysqli_query ($yz,$bf); while ($u4 = mysqli_fetch_row ($q1)) { if(mysqli_select_db ($yz,$u4[0]) and !in_array ($u4[0],$mz)) { $nz[] = $u4[0]; } } return $nz; } function cn ($fz){ global$_config; xn ( "SHOW TABLES LIKE '". $_config['db_table_prefix'].$fz . "'" ); $ay = en (); return count ($ay)>0; } function vn ($fz,$dz = null){ global$_config; if ($dz === null){ $dz = $_config['db_table_prefix']; } xn ( "SHOW TABLE STATUS LIKE '". $dz . $fz . "'" ); $q1 = en (); return $q1 ? $q1[0] : []; } function bn ($fz){ global $_model, $_model_contractions, $_model_indexes, $_model_indexes_create_sql, $_config, $_db; if (!array_key_exists ($fz,$_model)) throw new AeModelUnknownTableException (); if (cn ($fz)) return; $dz = $_config['db_table_prefix']; $sz = []; foreach($_model[$fz] as $az){ list ($name,$type)=$az; $sz[] = "`". $name ."` ". $_model_contractions[$type]; } if(is_array (@$_model_indexes[$fz])) { foreach($_model_indexes[$fz] as $qz){ list ($type,$lz)=$qz; $zz = implode ('',$lz); $kz = $_model_indexes_create_sql[$type].' `'. $zz .'` (`'. implode ('`, `',$lz) .'`)'; $sz[] = $kz; } } $sql = ( "CREATE TABLE `". $dz . $fz ."` ". "(". implode (", ",$sz) .") ". "ENGINE=InnoDB DEFAULT CHARSET=". $_db['charset'] ); xn ($sql); } function yn ($fz,$t1,$xz = 'INSERT',$ez = ''){ global$_config,$_db; $rz['SubsetID']=$_config['db_table_subset']; foreach ($t1 as $t => $xf){ $rz[$t]="'". rn ($xf) ."'"; } $tz = "`". implode ("`, `",array_keys ($rz)). "`"; $jz = implode (", ",array_values ($rz)); xn ( $xz ." INTO `". $_config['db_table_prefix'].$fz ."` ". "(" . $tz .") VALUES (". $jz .")". ($ez? (' '. $ez):'') ); $t1['ID']=mysqli_insert_id ($_db['link']); return $t1; } function nn ($fz,$t1,$hz = false,$gz = false){ global$_config; if(Log::$vy)__log ('Model: update record in table '. $fz .' {'); $wz = array (); foreach(e2model__soft_fields_for_table_($fz) as $uz){ if(array_key_exists ($uz,$t1)) { $wz[] = '`'. $uz .'`'."='". rn ($t1[$uz]) ."'"; } } $iz = array (); if(is_array ($hz)) { foreach(e2model__soft_fields_for_table_($fz) as $uz){ if(array_key_exists ($uz,$hz)) { $iz[] = '`'. $uz .'`'."='". rn ($hz[$uz]) ."'"; } } } if(count ($iz)) { $b = implode (" AND ",$iz); } else { if (!array_key_exists ('ID',$t1) or !is_numeric ($t1['ID'])) { if(Log::$vy)__log ('Error: e2_update_record must be called with an ID field in $record when updating single row'); return false; } $b = "`ID`=". $t1['ID']; } if(count ($wz)>0){ $oz = $gz? 'LOW_PRIORITY ' : ''; xn ( "UPDATE ". $oz ."`". $_config['db_table_prefix'].$fz ."` ". "SET ". implode (', ',$wz) ." ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")" ); } if(Log::$vy)__log ('}'); return true; } function e2model__soft_fields_for_table_($fz){ global$_model; $d = array (); if(array_key_exists ($fz,$_model)) { foreach($_model[$fz] as $uz){ if (!in_array ($uz[1], array ('key'))) { $d[] = $uz[0]; } } } return $d; } function e2m_install () { global$_strings,$_superconfig,$_files_written,$_diagnose; if (fn_ () !== null)c (); qs (DEFAULT_TEMPLATE); $d = array (); if($_superconfig['disallow_installer']) { die ('Installer disabled by superconfig'); } if(Log::$vy)__log ('Installer: not installed, present user with form'); $pz = true; $ck['server'] = @$_COOKIE[b ('install_db_server')]; $ck['user_name'] = @$_COOKIE[b ('install_db_user_name')]; $ck['passw']=i2 (@$_COOKIE[b ('install_db_passw')]); $ck['name'] = @$_COOKIE[b ('install_db_name')]; if (!@isset ($_diagnose['ok?']))fv (); if (!$_diagnose['ok?']) { if(Log::$vy)__log ('Installer: problems, tell user'); $pz = false; } $d = [ 'title' => $_strings['pt--install'], 'heading' => $_strings['pt--install'], 'form-install' => [ 'form-action' => jv ('e2s_install'), 'form-check-db-config-action' => jv ('e2j_check_db_config'), 'form-list-databases-action' => jv ('e2j_list_databases'), 'installation-possible?' => $pz, 'submit-text' => $_strings['fb--begin'], 'retry-href' => jv ('e2m_install'), 'retry-text' => $_strings['fb--retry'], 'db-server' => htmlspecialchars (@$ck['server']? $ck['server']:'localhost'), 'db-user' => htmlspecialchars (@$ck['user_name']? $ck['user_name']:'root'), 'db-password' => '', 'db-database' => htmlspecialchars (@$ck['name']), ] ]; return $d; } function fn_ () { static $vk = null; if ($vk === null){ $vk = @unserialize ( @file_get_contents (USER_FOLDER . 'instance.psa') ) or $vk = null; } return $vk; } function dn ($bk){ static $vk = null; $vk = fn_ (); $vk['version']=$bk; if (n3 (USER_FOLDER. '/instance.psa',serialize ($vk))) { return $vk; } else { die ('Cannot instantiate v'. $bk .': probably permission denied'); } } function e2s_instantiate ($parameters){ global$_strings; if (fn_ () !== null){ die ('Remove the file "'. USER_FOLDER .'instance.psa" first'); } else { if(is_numeric ($parameters['version'])) { if (dn ($parameters['version'])) { mv ($_strings['gs--instantiated-version'] .' v'. $parameters['version'],E2E_MESSAGE); c (jv ('e2m_frontpage', array ('page' => 1))); } } } die ('Could not create instance of engine'); } function e2_install ($zv){ global$_folders_written,$_model,$_strings,$_config,$settings; if (fn_ () !== null){ throw new AeInstallAlreadyInstalledException ('Instance already created'); } if($_config['log_installs']) { Log::$vy = true; if(Log::$vy)bv ('install-$'); } if(Log::$vy)__log ('Installer: force directories'); foreach($_folders_written as $yk){ @j ($yk); } if(Log::$vy)__log ('Installer: write password hash'); if (!@n3 (USER_FOLDER . 'password-hash.psa',serialize (sha1 ($zv['password'])))) { throw new AePasswordHashNotSavedException; } if(array_key_exists ('plain_password',$zv['db_params'])) { $zv['db_params']['passw']=u2 ($zv['db_params']['plain_password']); unset ($zv['db_params']['plain_password']); } $settings['db']=$zv['db_params']; $settings['template']=DEFAULT_TEMPLATE; $settings['language']=DEFAULT_LANGUAGE; kn ('check database during installation',$zv['db_params']); $p3 = e2_model_data_check ($zv['db_params']['name']); $nk = false; if ($p3['occupied']) { if ($p3['migrateable'] and $zv['allow_migration']) { $nk = true; if(Log::$vy)__log ('Installer: data exists and migrateable'); } else { if(Log::$vy)__log ('Installer: incomplete data in the database'); throw new AeInstallDatabaseOccupiedException ('Database already has some data'); } } if ($nk){ if(Log::$vy)__log ('Installer: no need to create tables, will migrate'); try { qn (); } catch (AeMySQLException $e){ kv ($e,'Could not migrate'); mv ($_strings['er--double-check-db-params']); } } else { if(Log::$vy)__log ('Installer: create tables'); foreach(array_keys ($_model) as $fz){ bn ($fz); } } if(Log::$vy)__log ('Installer: write settings'); if (!@n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { throw new AeSettingsNotSavedException; } e2_drop_all_kinds_of_cache (); if(Log::$vy)__log ('Installer: search index'); $cy = ea (); try { $cy -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$vy)__log ('Installer: Rose not available'); } aa (); if(Log::$vy)__log ('Installer: instantiate'); dn (E2_VERSION); if(Log::$vy)__log ('Installer: complete'); } function sn () { $i3['server']=$i3['user_name'] = $i3['passw']=$i3['name']=''; if(array_key_exists ('db-server',$_POST)) $i3['server']=$_POST['db-server']; if(array_key_exists ('db-user',$_POST)) $i3['user_name']=$_POST['db-user']; if(array_key_exists ('db-password',$_POST))$i3['passw']=$_POST['db-password']; if(array_key_exists ('db-database',$_POST))$i3['name']=$_POST['db-database']; return $i3; } function e2s_install () { global$_strings,$_config,$_db; if (fn_ () !== null)c (); $i3 = sn (); foreach ($i3 as $t => $xf){ y ('install_db_'. $t,$xf); } if (!array_key_exists ('password',$_POST) or trim ($_POST['password']) == ''){ mv ($_strings['er--no-password-entered'],E2E_USER_ERROR); c (jv ('e2m_install')); } $mk = trim ($_POST['password']); @session_start (); $o3 = false; try { e2_install ([ 'allow_migration' => true, 'password' => $mk, 'db_params' => $i3, ]); $o3 = true; } catch (AeMySQLCannotConnectException $e){ mv ( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error () .' ('. mysqli_connect_errno () .')' ); } catch (AeMySQLTooOldException $e){ mv (e2l_get_string ('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv ($_strings['er--cannot-find-db'] .' '. $i3['name']); } catch (AeInstallDatabaseOccupiedException $e){ mv ($_strings['er--db-data-incomplete-install']); } catch (AeNotSavedException $e){ mv ($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); } catch (AeInstallException $e){ } if (!$o3)c (jv ('e2m_install')); $fk['sessions'] = [[ 'stamp' => time (), 'remote_ip' => q2 (), 'key_hash' => z2 (true), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]]; if (!e2_ ($fk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } p3 (jv ('e2s_bsi_step', array ())); c (); } function an () { global $v,$c,$_superconfig,$_config; $vk = fn_ (); if (fn_ () !== null){ if(E2_VERSION < $vk ['version']) { if (@$_config['dev_ignore_version_mismatch']) return; if(Log::$vy)__log ('Installer: cannot downdate'); header ('HTTP/1.1 503 Service Unavailable'); die ('E2 does not support automatic downgrade.'); } elseif(E2_VERSION > $vk ['version']) { if(Log::$vy)__log ('Installer: need to update'); header ('Location: http://'. $v . $c .'/perform_update/'); header ('Location: '. jv ('e2s_update_perform')); die; } else { return; } } if(Log::$vy)__log ('Installer: not installed {'); if ((strpos ($_SERVER['SERVER_SOFTWARE'],'Apache')===0)) { if(Log::$vy)__log ('Installer: running on Apache'); $dk = DEFAULTS_FOLDER . 'default.htaccess'; $sk = false; if (!is_file ($dk)) { echo 'File not found: '.$dk. '. Please use the full E2 installation package.'; die; } if(is_file ('.htaccess')) { if(Log::$vy)__log ('Installer: there is a .htaccess file in the installation directory'); $ak = file_get_contents ($dk); $qk = file_get_contents ('.htaccess'); if ($qk != $ak){ $sk = true; $lk = $zk = '.htaccess.old'; $kk = 1; while (is_file ($zk)) { $zk = $lk .'.'. $kk ++; } if(Log::$vy)__log ('Installer: existing .htaccess wrong, backing up as <'. $zk .'>'); if (!@rename ('.htaccess',$zk)) { if(Log::$vy)__log ('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $sk = true; } if ($sk){ if(Log::$vy)__log ('Installer: writing a correct .htaccess file'); if (!@copy ($dk,'.htaccess')) { if(Log::$vy)__log ('Installer: fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } @chmod ('.htaccess',E2_NEW_FILES_RIGHTS); } } if($_superconfig['disallow_installer']) { if(Log::$vy)__log ('Installer: disallowed in superconfig'); xv (new AeNotAndCannotBeInstalledException); } else { $xk = jv ('e2m_install'); if(Log::$vy)__log ('Installer: will need to install, going to '. $xk); if(Log::$vy)__log ('}'); c ($xk); } } function e2j_check_db_config () { global$_db,$_strings; $i3 = sn (); $kv = [ 'success' => true, 'data' => [ 'message' => '', 'db-responding' => false, 'db-connected' => false, 'db-found' => false, 'db-compatible' => false, 'db-occupied' => false, 'db-migrateable' => false, ] ]; try { $i3['passw']=u2 ($i3['passw']); kn ('connect to check DB config (try 1)',$i3); } catch (AeMySQLAccessDeniedException $e){ $kv['data']['db-responding']=true; $kv = json_encode ($kv); die ($kv); } catch (AeMySQLCannotConnectException $e){ $kv['data']['message']='no-connect'; $kv = json_encode ($kv); die ($kv); } catch (AeMySQLTooOldException $e){ $kv['data']['db-responding']=true; $kv['data']['db-connected']=true; $kv['data']['message']=e2l_get_string ('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ]); $kv = json_encode ($kv); die ($kv); } catch (AeMySQLNotFoundException $e){ $kv['data']['db-responding']=true; $kv['data']['db-connected']=true; if ($i3['name']) { $kv = json_encode ($kv); die ($kv); } else { $nz = py ($i3); if(count ($nz)>0){ $kv['data']['db-found']=true; $i3['name']=$nz[0]; } else { $kv = json_encode ($kv); die ($kv); } } } $kv['data']['db-responding']=true; $kv['data']['db-connected']=true; $kv['data']['db-found']=true; $kv['data']['db-compatible']=true; try { kn ('connect to check DB config (try 2)',$i3); } catch (AeMySQLException $e){ $kv = json_encode ($kv); die ($kv); } $kv['data']['db-good']=true; $p3 = e2_model_data_check ($i3['name']); if ($p3['occupied']) { if ($p3['migrateable']) { $kv['data']['message']=$_strings['gs--data-exists']; } else { $kv['data']['db-good']=false; $kv['data']['message']=$_strings['er--db-data-incomplete-install']; } } $kv = json_encode ($kv); die ($kv); } function e2j_list_databases () { $i3 = sn (); $nz = py ($i3); $kv = [ 'success' => true, 'data' => [ 'databases-list' => $nz, ] ]; $kv = json_encode ($kv); die ($kv); } function qn () { global $_db, $_config, $_model, $_model_indexes, $_model_indexes_create_sql, $_model_indexes_check_sql; $dz = $_config['db_table_prefix']; xn ('SET sql_quote_show_create=1'); ln ( $dz, ($_db['charset']==='utf8mb4')?'utf8mb4' : 'utf8' ); if(Log::$vy)__log ('Get existing table information {'); $ek = false; foreach(array_keys ($_model) as $fz){ bn ($fz); try { xn ("SHOW CREATE TABLE `". $dz . $fz ."`"); $rk[$fz]=en (); $rk[$fz]=$rk[$fz][0]['Create Table']; } catch (AeMySQLException $e){ kv ($e); die ('Database table "'. $prefix . $fz .'" not accessible during migration. Check your database availability'); } xn ("SHOW INDEX FROM `". $dz . $fz ."`"); $tk = en (); $jk = []; $hk = []; foreach ($tk as $qz){ $qz = $qz['Key_name']; if ( preg_match ('/\_[0-9]+$/',$qz) or ($fz === 'Actions' and $qz === 'EntityID') or ($fz === 'GIPsSessions' and $qz === 'GIP') or ($fz === 'Notes' and $qz === 'Title') ) { $jk[] = $qz; $hk[] = 'DROP INDEX `'. $qz. '`'; } if ($fz === 'Actions' and $qz === 'EntityID'){ $ek = true; } if ($fz === 'Actions' and $qz === 'EntityIDStamp'){ $ek = true; } } if(count ($hk)) { $hk = implode (', ',array_unique ($hk)); $jk = implode (', ',array_unique ($jk)); if(Log::$vy)__log ( 'Drop erroneous index "'. $jk .'" on "'. $dz . $fz .'"' ); xn ( "ALTER TABLE `". $dz . $fz ."` ". $hk ); } if (!strstr ($rk[$fz],'InnoDB')) { xn ( "ALTER TABLE `". $dz . $fz ."` ". "ENGINE = InnoDB" ); } if (!strstr ($rk[$fz],'`SubsetID`')) { xn ( "ALTER TABLE `". $dz . $fz . "` ". "ADD `SubsetID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); } if ( $fz === 'Actions' and strstr ($rk['Actions'],'`ReadCount`') and !$ek ) { zn ($dz); } if($_config['db_table_subset']>0){ xn ( "UPDATE `". $dz . $fz ."` ". "SET `SubsetID` = ". $_config['db_table_subset'] ." ". "WHERE `SubsetID` = 0" ); } else { die ('db_table_subset must be greater than 0'); } } if(Log::$vy)__log ('}'); if (!strstr ($rk['Actions'],'`ReadCount`')) { xn ( "ALTER TABLE `". $dz . "Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if(strstr ($rk['Actions'],'`HitCount`')) { xn ( "ALTER TABLE `". $dz . "Actions` ". "DROP `HitCount`" ); xn ( "DELETE FROM `". $dz . "Actions` ". "WHERE `ReadCount` = 0" ); } if (!strstr ($rk['Aliases'],'`EntityType`')) { xn ( "ALTER TABLE `". $dz . "Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } xn ( "UPDATE `". $dz . "Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); xn ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `ID` IN (". "SELECT `ID` FROM (". "SELECT a.`ID` FROM `". $_config['db_table_prefix']."Aliases` a ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."Keywords` e ". "ON a.`EntityID` = e.`ID` ". "WHERE a.`EntityType` = 't' ". "AND e.`ID` IS NULL". ") AS temp". ")", 'clean up “leaked” tag aliases' ); if (!stristr ($rk['Comments'],'`Text` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!stristr ($rk['Comments'],'`Reply` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); } if (!stristr ($rk['Comments'],'`IP` VARCHAR(39)')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "CHANGE `IP` `IP` VARCHAR(39)  DEFAULT '' NOT NULL" ); } if (!strstr ($rk['Comments'],'`IsGIPUsed`')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr ($rk['Comments'],'`GIP`')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr ($rk['Comments'],'`GIPAuthorID`')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if(strstr ($rk['Comments'],'`SocialType`')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "DROP `SocialType`" ); } if(strstr ($rk['Comments'],'`SocialID`')) { xn ( "ALTER TABLE `". $dz . "Comments` ". "DROP `SocialID`" ); } if (!strstr ($rk['GIPsSessions'],'`AuthorEmail`')) { xn ( "ALTER TABLE `". $dz . "GIPsSessions` ". "ADD `AuthorEmail` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorName`" ); } if (!strstr ($rk['GIPsSessions'],'`AuthorProfileLink`')) { xn ( "ALTER TABLE `". $dz . "GIPsSessions` ". "ADD `AuthorProfileLink` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorEmail`" ); } if(strstr ($rk['Keywords'],'`ParentKeywordID`')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr ($rk['Keywords'],'`OriginalAlias`')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } if (!strstr ($rk['Keywords'],'`PageTitle`')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "ADD `PageTitle` VARCHAR(255) DEFAULT '' NOT NULL AFTER `OriginalAlias`" ); } if (!stristr ($rk['Keywords'],'`Description` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); } if (!strstr ($rk['Keywords'],'`Summary`')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "ADD `Summary` MEDIUMTEXT AFTER `Description`" ); } if (!strstr ($rk['Keywords'],'`Uploads`')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Summary`" ); } if (!stristr ($rk['Keywords'],'`Uploads` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr ($rk['Keywords'],'`IsVisible`')) { xn ( "ALTER TABLE `". $dz . "Keywords` ". "ADD `IsVisible` TINYINT(1) DEFAULT '1' NOT NULL AFTER `Uploads`" ); } xn ( "UPDATE `". $dz . "Keywords` SET `Summary` = '' WHERE `Summary` IS NULL" ); xn ( "UPDATE `". $dz . "Keywords` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); if (!strstr ($rk['Notes'],'`FormatterID`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL AFTER `Text`" ); } if (!strstr ($rk['Notes'],"DEFAULT 'calliope'")) { xn ( "ALTER TABLE `". $dz . "Notes` ". "CHANGE `FormatterID` `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL" ); } if (!strstr ($rk['Notes'],'`OriginalAlias`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if(strstr ($rk['Notes'],'`IP`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "DROP `IP`" ); } if (!stristr ($rk['Notes'],'`Text` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!strstr ($rk['Notes'],'`Summary`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `Summary` MEDIUMTEXT AFTER `Text`" ); } if (!strstr ($rk['Notes'],'`IsIndexed`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr ($rk['Notes'],'`Uploads`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } if (!stristr ($rk['Notes'],'`Uploads` MEDIUMTEXT')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr ($rk['Notes'],'`IsExternal`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr ($rk['Notes'],'`SourceID`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr ($rk['Notes'],'`SourceNoteID`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr ($rk['Notes'],'`SourceNoteURL`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr ($rk['Notes'],'`SourceNoteData`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr ($rk['Notes'],'`SourceNoteJSONURL`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if(strstr ($rk['Notes'],'`SourceMainImageURL`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "DROP `SourceMainImageURL`" ); } if(strstr ($rk['Notes'],'`IsIssue`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "DROP `IsIssue`" ); } if (!strstr ($rk['Notes'],'`ReadCount`')) { xn ( "ALTER TABLE `". $dz . "Notes` ". "ADD `ReadCount` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); xn ( "UPDATE `". $dz . "Notes` n JOIN (". "SELECT `EntityID`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM  `". $dz . "Actions` ". "GROUP BY `EntityID`". ") a ON n.`ID` = a.`EntityID` ". "SET `ReadCount` = `AggregateReadCount`" ); } xn ( "UPDATE `". $dz . "Notes` SET `Summary` = '' WHERE `Summary` IS NULL" ); xn ( "UPDATE `". $dz . "Notes` SET `Uploads` = '' WHERE `Uploads` IS NULL" ); xn ( "UPDATE `". $dz . "Notes` SET `SourceNoteData` = '' WHERE `SourceNoteData` IS NULL" ); if (!strstr ($rk['Sources'],'`TrueID`')) { xn ( "ALTER TABLE `". $dz . "Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); xn ( "UPDATE `". $dz . "Sources` ". "SET `TrueID` = `ID`" ); } if(Log::$vy)__log ('Ensure indexes {'); if(strstr ($rk['Notes'],'`Title` (`Title`(191))')) { if(Log::$vy)__log ('Drop erroneous index on "'. $dz .'Notes.Title"'); xn ( "ALTER TABLE `". $dz ."Notes` ". "DROP INDEX `Title`" ); } foreach(array_keys ($_model) as $fz){ foreach($_model_indexes[$fz] as $qz){ list ($type,$lz)=$qz; $zz = implode ('',$lz); $gk = $_model_indexes_check_sql[$type].' `'. $zz .'` (`'. implode ('`,`',$lz) .'`)'; $kz = $_model_indexes_create_sql[$type].' `'. $zz .'` (`'. implode ('`, `',$lz) .'`)'; if (!strstr ($rk[$fz],$gk)) { if(Log::$vy)__log ( 'Table "'. $dz . $fz .'" is missing "'. $_model_indexes_check_sql[$type] .'" on columns "'. implode ('", "',$lz) .'"' ); if($type === 'fulltext'){ if($_db['innodb-fulltext?']) { xn ( "ALTER TABLE `". $dz . $fz ."` ". "ADD ". $kz ); } else { if(Log::$vy)__log ( 'MySQL version does not support fulltext search, skipping creation of this index' ); } } } } } if(Log::$vy)__log ('}'); return true; } function ln ($dz,$wk){ global$_model,$_db; if (!in_array ($wk, ['utf8','utf8mb4'])) return; if(Log::$vy)__log ('Ensure encoding '. $wk .' on all tables {'); $uk = xa (); foreach ($uk as $t => $xf){ $uk[$t]=SEARCH_EXTRA_PREFIX. $xf; } $ik = array_merge ( array_keys ($_model), array_values ($uk) ); foreach ($ik as $i4){ if(Log::$vy)__log ('Migrate: Check table '. $i4); $ok = vn ($i4,$dz); if (!$ok) continue; $pk = $ok['Collation']; if ($wk === 'utf8' and ($pk == 'utf8_general_ci')) continue; if ($wk === 'utf8mb4' and stripos ($pk,'utf8mb4')===0) continue; if(Log::$vy)__log ('Migrate: Drop indexes of table '. $i4); xn ( "SHOW INDEX FROM `". $dz . $i4 ."` ". "WHERE `Key_name` <> 'PRIMARY' ". "AND `Seq_in_index` = 1", 'show indexes from table '. $i4 ); $tk = en (); foreach ($tk as $qz){ xn ( "ALTER TABLE `". $dz . $i4 ."` ". "DROP INDEX `". $qz['Key_name'] ."`", 'drop index '. $qz['Key_name'] ); } if(Log::$vy)__log ('Migrate: Convert table '. $i4. ' to '. $wk); xn ( "ALTER TABLE `". $dz . $i4 ."` ". "CONVERT TO CHARACTER SET ". $wk. (($wk === 'utf8')? " COLLATE utf8_general_ci" : ""), 'convert table to character set '. $wk ); } if(Log::$vy)__log ('}'); } function zn ($dz){ if(Log::$vy)__log ( 'Table "'. $dz .'Actions" is missing necessary UNIQUE index, must rearrange {' ); xn ( "DROP TABLE IF EXISTS `". $dz ."Actions_Fixed`", 'remove temporary Actions_Fixed table if exists' ); xn ( "CREATE TABLE `". $dz ."Actions_Fixed` ". "LIKE `". $dz ."Actions`", 'create new temporary Actions_Fixed table' ); xn ( "ALTER TABLE `". $dz ."Actions_Fixed` ". "ADD UNIQUE INDEX(`EntityID`, `Stamp`)", 'add UNIQUE index to the temporary Actions_Fixed table' ); xn ( "INSERT INTO `". $dz ."Actions_Fixed` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) ". "SELECT `SubsetID`, `EntityID`, `Stamp`, `AggregateReadCount` FROM (". "SELECT `SubsetID`, `EntityID`, `Stamp`, SUM(`ReadCount`) `AggregateReadCount` ". "FROM `". $dz ."Actions` ". "GROUP BY `EntityID`, `Stamp`". ") `". $dz ."Actions_Fixed_AliasRequiredForNoReason`", 'rearrange Actions records from existing problematic Actions table to the new temporary Actions_Fixed table' ); xn ( "RENAME TABLE `". $dz ."Actions` TO `". $dz ."Actions_Corrupt`", 'rename Actions to Actions_Corrupt' ); xn ( "RENAME TABLE `". $dz ."Actions_Fixed` TO `". $dz ."Actions`", 'rename Actions_Fixed to Actions' ); xn ( "DROP TABLE `". $dz ."Actions_Corrupt`", 'remove Actions_Corrupt table' ); if(Log::$vy)__log ('}'); } function e2s_update_perform () { global$settings,$_config,$_diagnose,$_strings; if(1){ $c7 = ini_get ('max_execution_time')+5; $v7 = @unserialize (file_get_contents (USER_FOLDER . 'updating.psa')); if (!is_array ($v7))$v7 = []; if ( isset ($v7['lock']) and $v7['lock'] >= time () - $c7 ) { throw new AeUpdateAlreadyInProcess ('Update already in process'); } $v7['lock']=time (); if (!@n3 (USER_FOLDER . 'updating.psa',serialize ($v7))) { throw new AeUpdateCannotLock ('Update can’t get a new lock'); } } $vk = fn_ (); $w = max ((int) ($vk['version']), 2285); if ($vk['version']==E2_VERSION)v (); if($_config['log_updates']) { Log::$vy = true; if(Log::$vy)bv ('update-$'); } if($_config['backup_before_update']) { if(Log::$vy)__log ('Backup before update {'); if (!gn ()) { @unlink (USER_FOLDER . 'updating.psa'); die ('Could not make backup before update. Try again?'); } if(Log::$vy)__log ('}'); } if(Log::$vy)__log ('Update from v'. $w .' to v'. E2_VERSION.' {'); if ($w < 2587){ r ('caches/*'); rmdir ('caches'); } if ($w < 2691){ $settings = e2_utf8_version_of_array_($settings); if (!@n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { @unlink (USER_FOLDER . 'updating.psa'); mv ($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); qv (); } } if ($w < 2921){ $settings['template']='plain'; } if ($w < 3354){ @rename ('pictures/userpics/',AVATARS_FOLDER); @unlink (USER_FOLDER. 'password-reset.txt'); } if ($w < 3496){ $settings['appearance']['respond_to_dark_mode']=true; } @unlink (USER_FOLDER. 'last-update.psa'); @unlink (CACHES_FOLDER . 'index.xml'); @j (CACHES_FOLDER); @j (BACKUP_FOLDER); @j (MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'remote/'); @j (MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER .'remote/'); @j (MEDIA_ROOT_FOLDER . VIDEO_FOLDER); if (@$settings['template']=='')$settings['template']=DEFAULT_TEMPLATE; if (isset ($settings['appearance']['hot_frontpage'])) { unset($settings['appearance']['hot_frontpage']); } if (!isset ($settings['blog_subtitle'])) { if (isset ($settings['description'])) { $settings['blog_subtitle']=$settings['description']; unset($settings['description']); } } if (!isset ($settings['blog_title'])) { if (isset ($settings['site_title'])) { $settings['blog_title']=$settings['site_title']; unset($settings['site_title']); } } if (!isset ($settings['author_email'])) { if (isset ($settings['user']['email'])) { $settings['author_email']=$settings['user']['email']; unset($settings['user']); } } if (isset ($settings['db']['table_prefix'])) { if($settings['db']['table_prefix'] != @$_config['db_table_prefix']) { @unlink (USER_FOLDER . 'updating.psa'); die ('You’ve been using a database with a table prefix “'. $settings['db']['table_prefix'] .'”. Now this should be set in the configuration. Please add the following line to the file user/config.php:<br /><br />$_config[\'db_table_prefix\'] = \''. $settings['db']['table_prefix'] .'\';<br /><br />Then refresh this page.'); } else { unset($settings['db']['table_prefix']); } } if (isset ($settings['comments']['on'])) { if (!$settings['comments']['on']) { try { xn ( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `IsCommentable`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } catch (AeMySQLException $e){} } $settings['comments']['default_on'] = (bool)$settings['comments']['on']; unset($settings['comments']['on']); } if (isset ($settings['v3223_rss_permalinks_before_stamp'])) { unset($settings['v3223_rss_permalinks_before_stamp']); } if ( is_file (USER_FOLDER . 'settings.json') and is_file (USER_FOLDER . 'settings.psa') ) { @unlink (USER_FOLDER . 'settings.psa'); } if (!@n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE))) { mv ($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); } e2_drop_all_kinds_of_cache (); qn (); if ($w < 3601){ ja (); $cy = ea (); try { $cy -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$vy)__log ('Rose not available'); } aa (); } $_diagnose['need?']=true; y ('diagnose','1'); $vk = dn (E2_VERSION); if(Log::$vy)__log ('}'); @unlink (USER_FOLDER . 'updating.psa'); if (k2 ()) { mv (e2l_get_string ('gs--updated-successfully', array ( 'from' => 'v'. $w, 'to' => 'v'. $vk['version'], )), E2E_MESSAGE); } c (); } define ('E2_MYSQL_CONNECT_TIMEOUT',5); function kn ($b7 = '',$i3 = null){ static $y7 = false; global$settings,$_db,$cz,$_config; if ($y7) return; if ($i3 === null)$i3 = $settings['db']; $n7 = mysqli_init (); $n7 -> options (MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); if($_config['dev_chaos'] and !rand (0, (1 / $_config['dev_chaos']) - 1)) { throw new AeMySQLCannotConnectException ('Could not '. $b7 ."\n\nChaos in e2_mysql_ensure"); } list ($vz,$bz)=wn ($i3['server']); $m7 = @mysqli_real_connect ( $n7, 'p:'. $vz, $i3['user_name'], i2 ($i3['passw']), '', $db_port ); if (!$m7){ $iq = mysqli_connect_errno (); if ($iq == 1045){ $m7 = @mysqli_real_connect ( $n7, 'p:'. $vz, $i3['user_name'], $i3['passw'], '', $db_port ); if ($m7){ $i3['passw']=u2 ($i3['passw']); $settings['db']=$i3; if(Log::$vy)__log ('Storing encrypted password'); @n3 (USER_FOLDER . 'settings.json',json_encode ($settings,E2_JSON_STYLE)); } else { throw new AeMySQLAccessDeniedException ('Could not '. $b7); } } else { throw new AeMySQLCannotConnectException ('Could not '. $b7); } } $_db['version']=mysqli_get_server_info ($n7); if(version_compare ($_db['version'],E2_MINIMUM_MYSQL,'<')) { throw new AeMySQLTooOldException ('Could not '. $b7); } if (!@mysqli_select_db ($n7,$i3['name'])) { throw new AeMySQLNotFoundException ('Could not '. $b7); } $_db['link']=$n7; $_db['charset']=version_compare ($_db['version'],'5.5.3','>=')?'utf8mb4' : 'utf8'; $_db['innodb-fulltext?'] = (bool)version_compare ($_db['version'],'5.6','>='); $bf = 'SET NAMES '. $_db['charset']; mysqli_query ($n7,$bf); @$cz ++; if(Log::$vy)__log ('DB ['. $cz .']: '. $bf); $y7 = true; } function xn ($bf,$b7 = 'run some query'){ global $cz,$_db,$_strings,$_config; kn ($b7); if($_config['dev_chaos'] and !rand (0, (1 / $_config['dev_chaos']) - 1)) { throw new AeMySQLQueryException ('Could not '. $b7 ."\n\nChaos in e2_mysql_query"); } @$cz ++; if(Log::$vy) if ($b7)__log ('Will '. $b7); if(Log::$vy)__log ('DB ['. $cz .']: '. $bf); $_db['result'] = @mysqli_query ($_db['link'],$bf); if($_config['backup_tail']) { if ( stripos ($bf,"SELECT")!==0 and stripos ($bf,"SHOW")!==0 ) { $db = BACKUP_FOLDER .'backup-tail.sql'; @file_put_contents ($db,$bf .";\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod ($db,E2_NEW_FILES_RIGHTS); } } if (!$_db['result']) { throw new AeMySQLQueryException ('Could not '. $b7 ."\n\nMySQL says:\n". mysqli_error ($_db['link'])); } } function en ($type = MYSQLI_ASSOC){ global$_db; $d = array (); while ($mv = @mysqli_fetch_array ($_db['result'],$type)) { foreach ($mv as $r => $f7){ if(is_string ($f7)) { $mv[$r]=$f7; } } $d[] = $mv; } return $d; } function rn ($x){ global$_db; kn ('escape string'); return mysqli_real_escape_string ($_db['link'],$x); } function tn () { global$_config; $ua = array_keys (jn ()); if(Log::$vy)__log ('Backup: Found '. count ($ua) .' backups'); if(count ($ua)) { $d7 = time () - $ua[0]; $s7 = ($d7 >= $_config['backup_rebase_interval']); if(Log::$vy)__log ('Backup: '. $d7 .' seconds since last backup'); } else { $s7 = true; } if ($s7){ if(Log::$vy)__log ('Backup: Will rebuild backup'); p3 (jv ('e2s_dump', []), true); } } function jn () { $ua = []; foreach(glob (BACKUP_FOLDER. '*.sql') as $dy){ if(preg_match ('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is',basename ($dy),$n3)) { list (, $gb,$hb,$jb,$v4,$r,$c4)=$n3; $m4 = gmmktime ($v4,$r,$c4,$hb,$jb,$gb); $ua[$m4]=$dy; } } krsort ($ua); return $ua; } function hn () { $ua = jn (); if(count ($ua)>3){ $q7 = -1; $l7 = array (SECONDS_IN_A_MINUTE,SECONDS_IN_AN_HOUR,SECONDS_IN_A_DAY, -1); $r = 0; foreach ($ua as $m4 => $dy){ if ($q7 == -1){ $q7 = $m4; } elseif ($l7[$r] == -1){ @unlink ($dy); } else { if ($q7 - $m4 < $l7[$r]) { @unlink ($dy); } else { $r ++; $q7 = $m4; } } } } else { } return; } function gn () { global$_model,$_db,$_config; try { kn ('make backup'); if($_db['link']) { $z7 = []; foreach(array_keys ($_model) as $fz){ $z7[] = $_config['db_table_prefix'].$fz; } $t4 = time (); $db = BACKUP_FOLDER .'backup-'.gmdate ('Y-m-d-\a\t-H-i-s',$t4).'.sql'; e2_backup ($_db['link'],$z7,$db); @unlink (BACKUP_FOLDER .'backup-tail.sql'); hn (); return true; } } catch (AeMySQLException $e){ kv ($e,'Could not do backup'); return false; } } function wn ($k7){ $x7 = parse_url ($k7); $vz = $x7['host']; $bz = $x7['port']; if ((string)$vz === ''){ $vz = $k7; $bz = ''; } return [$vz,$bz]; } function e2s_dump () { if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_underhood')); } if (gn ())mv ('Backed up',E2E_MESSAGE); c (jv ('e2m_underhood')); } define ('ALIAS_MAX_LENGTH',64); function un ($e7 = false){ global$_config; static $m2 = null; if ($e7){ if(Log::$vy)__log ('Reset aliasmap'); @unlink (CACHE_FILENAME_ALIASMAP); $m2 = null; return; } if(is_array ($m2)) return $m2; if(CACHE_ALIASMAP and is_file (CACHE_FILENAME_ALIASMAP)) { $m2 = @unserialize (file_get_contents (CACHE_FILENAME_ALIASMAP)); } if(is_array ($m2)) return $m2; if(Log::$vy)__log ('Build aliasmap {'); $m2 = []; xn ( "SELECT `EntityType`, `EntityID`, `Alias` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Stamp` IN (". "SELECT MAX(`Stamp`) `MaxStamp` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "GROUP BY `EntityType`, `EntityID`". ")", 'get all active aliases' ); foreach (en () as $r7){ $f2 = $r7['EntityType'].$r7['EntityID']; $m2[$f2]=$r7['Alias']; } xn ( "SELECT `ID`, `Stamp`, `Offset`, `IsDST`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". "ORDER BY `Stamp`", 'get all notes to cache y/d/m/n urls' ); $t7 = 0; $j7 = false; foreach (en () as $n2){ $f2 = 'n'. $n2['ID']; $h7 = ky ( 'Y/m/d',$n2['Stamp'],dy ($n2) ); if ($h7 !== $j7)$t7 = 0; $t7 ++; $g7 = $h7 .'/'. $t7; if (empty ($m2[$f2])) { $m2[$f2]=$g7; } else { if ((string)$n2['OriginalAlias']===''){ $m2[$f2 . '-ymdn']=$g7; } } $j7 = $h7; } xn ( "SELECT `ID`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'get original active aliases for tags' ); foreach (en () as $q2){ $f2 = 't'. $q2['ID']; if (empty ($m2[$f2])) { $m2[$f2]=$q2['OriginalAlias']; } } if(CACHE_ALIASMAP)n3 (CACHE_FILENAME_ALIASMAP,serialize ($m2)); if(Log::$vy)__log ('}'); return $m2; } function e2ali__alias_from_title_($w7){ global$_config; $u7 = $w7; if(array_key_exists ('autoreplace_for_aliases',$_config)) { $u7 = strtr ( $u7, $_config['autoreplace_for_aliases'] ); } $u7 = m ($u7); $u7 = str_replace ('\'','',$u7); $u7 = str_replace ('’','',$u7); $u7 = str_replace (chr (146),'',$u7); $i7 = ''; for ($r = 0; $r < strlen ($u7); ++ $r){ if ( (ord ($u7[$r]) >= 48 and ord ($u7[$r]) <= 57) or (ord ($u7[$r]) >= 65 and ord ($u7[$r]) <= 90) or (ord ($u7[$r]) >= 97 and ord ($u7[$r]) <= 122) or 0 ) { $i7 .= $u7[$r]; } else { $i7 .= '-'; } } $i7 = preg_replace ('/\-+/','-',$i7); $i7 = trim ($i7,'-'); $i7 = strtolower ($i7); if ($i7 == '-')$i7 = ''; $i7 = substr ($i7,0,ALIAS_MAX_LENGTH); return $i7; } function on ($o7){ global$_config; if ((string)$o7 === '') return false; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Alias` = '". $o7 ."' ". "ORDER BY `Stamp` LIMIT 1", 'get alias record for alias "'. $o7 .'"' ); $q1 = en (); if(count ($q1)==1){ return $q1[0]; } else { return false; } } function pn ($o7){ global$_config; if ((string)$o7 === '') return false; if(Log::$vy)__log ('Get entity type and id from alias "'. $o7 .'"'); $p7 = @array_flip (un ()); $f2 = $p7[$o7]; if ($f2[0]=='n' or $f2[0]=='t'){ $bv = [ 'type' => $f2[0], 'id' => (int)substr ($f2,1) ]; return $bv; } $r7 = on ($o7); if (!$r7) return false; $bv = [ 'type' => $r7['EntityType'], 'id' => (int)$r7['EntityID'], ]; if(Log::$vy)__log ('Got entity type "'. $bv['type'] .'" and id "'. $bv['id'] .'"'); return $bv; } function cm ($cn,$pa,$cx,$w7,$vx = 1){ if(Log::$vy)__log ('Aliases: "'. $cn .'" available alias for source "'. $w7. '"'); if ($cn == 'set' and (!$pa or !$cx)) return false; $i7 = e2ali__alias_from_title_($w7); if ($w7 !== '' and $i7 === ''){ $i7 = (string)$vx; } elseif ($vx > 1){ $bx = '-'. $vx; $i7 = substr ($i7,0,ALIAS_MAX_LENGTH - strlen ($bx)) . $bx; } if ($r7 = on ($i7)) { $yx = $r7['EntityType']; $nx = $r7['EntityID']; if ( (($cx and $nx == $cx) and ($pa and $yx == $pa)) or $i7 != un () [$yx . $nx] ) { if ($cn == 'find'){ return $i7; } if ($cn == 'set'){ if(Log::$vy)__log ('Aliases: update alias timestamp'); nn ('Aliases', array ( 'ID' => $r7['ID'], 'EntityType' => $pa, 'EntityID' => $cx, 'Alias' => $i7, 'Stamp' => time (), )); un (true); return $i7; } } else { return cm ($cn,$pa,$cx,$w7,$vx + 1); } } else { if ($pa and $cx and $i7 == ''){ if(preg_match ( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', un () [$pa . $cx] )) { if(Log::$vy)__log ('Aliases: d/m/y/n was already used for this entity'); return ''; } } if(Log::$vy)__log ('Aliases: it’s an empty alias, and it was not being used for this entity'); if ( $pa == 't' and $mx = af ($i7) ) { if ($mx['ID']!=$cx){ return cm ($cn,$pa,$cx,$w7,$vx + 1); } } if ($cn == 'find'){ return $i7; } if ($cn == 'set'){ yn ('Aliases', array ( 'EntityType' => $pa, 'EntityID' => $cx, 'Alias' => $i7, 'Stamp' => time (), )); un (true); return $i7; } } return ''; } class AeLayoutDiversityManager { private static $layoutsUseIndexes = []; private static $layoutsUseIndex = 1; private static $layoutsUseMaxIndex = 1; public static function addLayoutsUsed ($fx){ self::$layoutsUseIndexes[$fx]=self::$layoutsUseIndex; self::$layoutsUseIndex ++; self::$layoutsUseMaxIndex ++; } public static function hasLayoutBeenUsed ($fx){ if (isset (self::$layoutsUseIndexes[$fx])) return true; } public static function getLayoutsUseRecency ($fx){ if (isset (self::$layoutsUseIndexes[$fx])) { return self::$layoutsUseIndexes[$fx]-self::$layoutsUseMaxIndex; } } } class AeNoteReadCountsProvider { private static $dataByNoteID = []; private static $hasRun = false; private static $sql = null; public static function setSQLRequestTemplateToMapIDsToReadCounts ($sql){ self::$sql = $sql; } public static function requestDeferredReadCountForNoteID ($noteID){ self::$dataByNoteID[$noteID]=true; } public static function getReadCountForNoteID ($noteID){ if(self::$sql === null) return false; if (!self::$hasRun)self :: run (); if (empty (self::$dataByNoteID[$noteID])) return false; return self::$dataByNoteID[$noteID]; } private static function run () { self::$hasRun = true; $dx = []; foreach(self::$dataByNoteID as $sx => $zv){ $dx[] = "(`ID` = ". $sx . ")"; } if (!count ($dx)) return; $dx = implode (' OR ',$dx); try { xn ( self::$sql ." AND (". $dx .")", 'get all requested read counts for notes' ); $ob = en (); foreach ($ob as $bv){ self::$dataByNoteID[$bv['ID']] = $bv['ReadCount']; } } catch (AeMySQLException $e){ kv ($e); if(Log::$vy)__log ('Could not get requested read counts for notes'); } } } class AePageableNotesView { private $candy; private $parameters; private $pageExists = false; private $isCached = false; private $hasRun = false; private $sql = null; private $sql_count = null; private $highlightedTags = null; private $cacheFilename = null; private $prevPageTitle = null; private $nextPageTitle = null; private $totalNotes = null; private $totalPages = null; private $notesCTree = null; private $pagesCTree = null; private $wantPaging = false; private $wantNewCommentsCount = false; private $wantReadHrefs = false; private $wantPreviewHrefs = false; private $wantControls = false; private $wantHiddenTags = false; private $wantRelatedNotes = false; private $useLocalHrefs = false; private $page = 1; private $limit = 10; public function __construct ($candy,$parameters){ $this->candy = $candy; $this->parameters = $parameters; if (empty ($parameters['page'])) { $this->page = 1; } else { $this->page = (int)$parameters['page']; } } public function setSQLCountRequest ($sql_count){ if(strpos ($sql_count,"SELECT COUNT(*) Total FROM ")!==0){ die ('AePageableNotesView: Count request must start with "SELECT COUNT(*) Total FROM "'); } $this->sql_count = $sql_count; } public function setLimitlessSQLRequest ($sql){ if(strstr ($sql,"LIMIT")) { die ('AePageableNotesView: Request must not contain "LIMIT"'); } $this->sql = $sql; if($this->sql_count === null){ if(strpos ($sql,"SELECT * ")===0){ $this->sql_count = "SELECT COUNT(*) Total ". substr ($sql,9); } else { die ('AePageableNotesView: setSQLCountRequest () must be used'); } } } public function setPortionSize ($limit){ $this->limit = abs ((int)$limit); } public function setNextPrevPageTitles ($nextPageTitle,$prevPageTitle){ $this->nextPageTitle = $nextPageTitle; $this->prevPageTitle = $prevPageTitle; } public function setHighlightedTags ($highlightedTags){ $this->highlightedTags = $highlightedTags; } public function setCacheFilename ($cacheFilename){ $this->isCached = true; $this->cacheFilename = $cacheFilename; } public function setWantPaging ($wantPaging){ $this->wantPaging = $wantPaging; } public function setWantNewCommentsCount ($wantNewCommentsCount){ $this->wantNewCommentsCount = $wantNewCommentsCount; } public function setWantReadHrefs ($wantReadHrefs){ $this->wantReadHrefs = $wantReadHrefs; } public function setWantPreviewHrefs ($wantPreviewHrefs){ $this->wantPreviewHrefs = $wantPreviewHrefs; } public function setWantControls ($wantControls){ $this->wantControls = $wantControls; } public function setWantHiddenTags ($wantHiddenTags){ $this->wantHiddenTags = $wantHiddenTags; } public function setWantRelatedNotes ($wantRelatedNotes){ $this->wantRelatedNotes = $wantRelatedNotes; } public function setUseLocalHrefs ($useLocalHrefs){ $this->useLocalHrefs = $useLocalHrefs; } public function isExistingPage () { if (!$this->hasRun)$this -> run (); return$this->pageExists; } public function isFirstPage () { return$this->page === 1; } public function isFirstPageOfEmptyView () { if (!$this->hasRun)$this -> run (); return$this->page === 1 and $this->totalPages === 0; } public function getTotalNotes () { if (!$this->hasRun)$this -> run (); return$this->totalNotes; } public function getTotalPages () { if (!$this->hasRun)$this -> run (); return$this->totalPages; } public function getNotesCTree () { if (!$this->hasRun)$this -> run (); return$this->notesCTree; } public function getPagesCTree () { if (!$this->hasRun)$this -> run (); return$this->pagesCTree; } private function prepareCacheableData () { $this->totalNotes = 0; if($this->limit){ $nl = ($this->page - 1)*$this->limit; $this->sql .= ' LIMIT '. $nl .', '. $this->limit; } xn ($this->sql_count,'count total notes of "'. $this->candy .'" list'); $ax = en (); $this->totalNotes = $ax ? (int)$ax[0]['Total']:0; xn ($this->sql,'get limited full notes "'. $this->candy .'" list'); $q1 = en (); $qx = []; foreach ($q1 as $t => $cl){ $qx[] = $cl['ID']; } $this->notesCTree = []; foreach ($q1 as $t => $cl){ $noteView = new AeNoteView ($cl); $noteView -> setWantNewCommentsCount ($this->wantNewCommentsCount); $noteView -> setWantReadHref ($this->wantReadHrefs); $noteView -> setWantPreviewHref ($this->wantPreviewHrefs); $noteView -> setWantControls ($this->wantControls); $noteView -> setWantHiddenTags ($this->wantHiddenTags); $noteView -> setWantCommentsLink (true); $noteView -> setWantRelatedNotes ($this->wantRelatedNotes); $noteView -> setFilterOutRelatedNoteIDs ($qx); $noteView -> setHighlightedTags ($this->highlightedTags); $noteView -> setUseLocalHref ($this->useLocalHrefs); $this->notesCTree[] = $noteView -> getNoteCTree (); } $this->pagesCTree = []; if ( $this->limit and $this->totalPages = (int)ceil ($this->totalNotes / $this->limit) ) { $this->pagesCTree['timeline?']=true; $this->pagesCTree['count'] = (int)$this->totalPages; $this->pagesCTree['this'] = (int)$this->page; if($this->wantPaging){ $this->pagesCTree['earlier-title']=$this->nextPageTitle; $this->pagesCTree['later-title']=$this->prevPageTitle; $lx = $this->parameters; if($this->page < $this->totalPages){ $lx['page']=$this->page + 1; $this->pagesCTree['earlier-href']=jv ($this->candy,$lx); } if($this->page > 1){ $lx['page']=$this->page - 1; $this->pagesCTree['later-href']=jv ($this->candy,$lx); } } } } private function run () { $this->hasRun = true; if($this->isCached and is_file ($this->cacheFilename)) { $zx = @unserialize (file_get_contents ($this->cacheFilename)); $this->totalNotes = @$zx['notes_total']; $this->notesCTree = @$zx['notes_ctree']; $this->pagesCTree = @$zx['pages_ctree']; $this->totalPages = $this->pagesCTree['count']; } if ( is_int ($this->totalNotes) and is_array ($this->notesCTree) and is_array ($this->pagesCTree) and is_int ($this->totalPages) ) { if(Log::$vy)__log ('Retrieved cached CTree'); } else { $this -> prepareCacheableData (); if($this->isCached){ n3 ($this->cacheFilename,serialize ([ 'notes_total' => $this->totalNotes, 'notes_ctree' => $this->notesCTree, 'pages_ctree' => $this->pagesCTree, ])); } } foreach($this->notesCTree as $kx){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($kx['id']); if (empty ($kx['related']['each'])) continue; foreach ($kx['related']['each'] as $xx){ AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($xx['id']); } } $this->pageExists = ( $this->totalPages > 0 and $this->page >= 1 and $this->page <= $this->totalPages ); } } class AeArbitraryNotesCollectionView { private $name = ''; private $isCached = false; private $hasRun = false; private $sql = null; private $currentURL = null; private $cacheFilename = null; private $cacheExpiresFilename = null; private $cacheable = []; private $viewExpiration = null; private $notesCTree = null; private $filterOutIDs = []; public function __construct ($name){ $this->name = $name; } public function setSQLRequest ($sql){ $this->sql = $sql; } public function setCurrentURL ($currentURL){ $this->currentURL = $currentURL; } public function setCacheFilename ($cacheFilename){ $this->isCached = true; $this->cacheFilename = $cacheFilename; } public function setCacheExpiresFilename ($cacheExpiresFilename){ $this->cacheExpiresFilename = $cacheExpiresFilename; } public function setViewExpiration ($viewExpiration){ $this->viewExpiration = $viewExpiration; } public function setFilterOutIDs ($filterOutIDs){ $this->filterOutIDs = $filterOutIDs; } public function orderNotesCTreeByVerticality () { if (!$this->hasRun)$this -> run (); usort ($this->notesCTree, function ($ex,$rx){ if (empty ($ex['images'][0]['verticality']))$tx = 0; else $tx = $ex['images'][0]['verticality']; if (empty ($rx['images'][0]['verticality']))$jx = 0; else $jx = $rx['images'][0]['verticality']; return (int)round (($jx - $tx)*10000); }); } public function getNotesCTree () { if (!$this->hasRun)$this -> run (); return$this->notesCTree; } private function prepareCacheableData () { $hx = [ 'notes-records' => function () { $gx = []; try { xn ($this->sql,'get "'. $this->name .'" list'); foreach (en () as $cl){ if (rm ($cl)==='public'){ $gx[] = $cl; } } } catch (AeMySQLException $e){ kv ($e); if(Log::$vy)__log ('Could not get list from database'); } return $gx; }, ]; if($this->isCached and is_file ($this->cacheFilename)) { $this->cacheable = @unserialize (file_get_contents ($this->cacheFilename)) or $this->cacheable = []; } $wx = true; if (!empty ($this->cacheExpiresFilename)) { if($this->isCached and is_file ($this->cacheExpiresFilename)) { $t4 = time (); $ux = (int) @file_get_contents ($this->cacheExpiresFilename); if(Log::$vy)__log ('List expires '. date ('r',$ux) .', now '. date ('r',$t4)); $wx = ($t4 < $ux); } } $ix = false; foreach ($hx as $uz => $ox){ if (!array_key_exists ($uz,$this->cacheable) or !$wx){ if(Log::$vy)__log ('Build cache: "'. $uz .'"'); $this->cacheable[$uz]=$ox (); $ix = true; } else { if(Log::$vy)__log ('Retrieved from cache: "'. $uz .'"'); } } if ($ix){ n3 ($this->cacheFilename,serialize ($this->cacheable)); if($this->cacheExpiresFilename){ @n3 ($this->cacheExpiresFilename,time () + $this->viewExpiration); } } } private function run () { $this->hasRun = true; if(Log::$vy)__log ('AeArbitraryNotesCollectionView "'. $this->name .'" run {'); if(Log::$vy)__log ('Cacheable data {'); $this -> prepareCacheableData (); if(Log::$vy)__log ('}'); if(Log::$vy)__log ('Uncacheable data {'); $this->notesCTree = []; foreach($this->cacheable['notes-records'] as $cl){ if(in_array ($cl['ID'],$this->filterOutIDs)) continue; $noteView = new AeNoteView ($cl); $l2 = $noteView -> getNoteCTree (); $l2['current?'] = ($l2['href']==$this->currentURL); $this->notesCTree[] = $l2; AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($cl['ID']); } if(Log::$vy)__log ('}'); if(Log::$vy)__log ('}'); } } class AeNoteView { private $noteRecord = []; private $isCached = false; private $hasRun = false; private $cacheFilename = null; private $noteCTree = null; private $highlightedTags = null; private $cacheable = []; private $OGImages = []; private $wantRichText = false; private $wantCommentsLink = false; private $wantNewCommentsCount = false; private $wantReadHref = false; private $wantPreviewHref = false; private $wantControls = false; private $wantHiddenTags = false; private $wantSharingButtons = false; private $wantRelatedNotes = false; private $filterOutRelatedNoteIDs = []; private $useLocalHref = false; public function __construct ($noteRecord){ $this->noteRecord = $noteRecord; if(CACHE_NOTES){ $this->isCached = true; $this->cacheFilename = e2_note_cache_filename_with_id_($noteRecord['ID']); } } public function setHighlightedTags ($highlightedTags){ $this->highlightedTags = $highlightedTags; } public function setWantRichText ($wantRichText){ $this->wantRichText = $wantRichText; } public function setWantCommentsLink ($wantCommentsLink){ $this->wantCommentsLink = $wantCommentsLink; } public function setWantNewCommentsCount ($wantNewCommentsCount){ $this->wantNewCommentsCount = $wantNewCommentsCount; } public function setWantReadHref ($wantReadHref){ $this->wantReadHref = $wantReadHref; } public function setWantPreviewHref ($wantPreviewHref){ $this->wantPreviewHref = $wantPreviewHref; } public function setWantControls ($wantControls){ $this->wantControls = $wantControls; } public function setWantHiddenTags ($wantHiddenTags){ $this->wantHiddenTags = $wantHiddenTags; } public function setWantSharingButtons ($wantSharingButtons){ $this->wantSharingButtons = $wantSharingButtons; } public function setWantRelatedNotes ($wantRelatedNotes){ $this->wantRelatedNotes = $wantRelatedNotes; } public function setFilterOutRelatedNoteIDs ($filterOutRelatedNoteIDs){ $this->filterOutRelatedNoteIDs = $filterOutRelatedNoteIDs; } public function setUseLocalHref ($useLocalHref){ $this->useLocalHref = $useLocalHref; } public function getNoteCTree () { if (!$this->hasRun)$this -> run (); return$this->noteCTree; } private function prepareCacheableData () { $hx = [ 'title' => function () { return h3 ( htmlspecialchars ($this->noteRecord['Title'],ENT_NOQUOTES,HSC_ENC) ); }, 'text-format-info' => function () { return u3 ( $this->noteRecord['FormatterID'], $this->noteRecord['Text'], 'full' ); }, 'summary' => function () { if ((string)$this->noteRecord['Summary']!==''){ return h3 (htmlspecialchars ($this->noteRecord['Summary'],ENT_NOQUOTES,HSC_ENC)); } else { return em ($this->cacheable['text-format-info']['text-final']); } }, 'comments-count' => function () { if (!$this->noteRecord['IsPublished']) { return false; } else { return pf ($this->noteRecord['ID']); } }, 'tags-data' => function () { $s2 = bf ($this->noteRecord['ID']); $px['ctree'] = []; $px['all-resnames-uploads'] = []; foreach ($s2 as $r => $q2){ $px['ctree'][] = [ 'visible?' => (bool)$q2['IsVisible'], 'name' => htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv ('e2m_tag', array ('*tag' => $q2)), ]; $px['all-resnames-uploads']=array_merge ( $px['all-resnames-uploads'], q3 ('tag',$q2['ID']) ); } $px['all-resnames-uploads']=array_unique ( $px['all-resnames-uploads'] ); return $px; }, ]; if($this->isCached and is_file ($this->cacheFilename)) { $this->cacheable = @unserialize (file_get_contents ($this->cacheFilename)) or $this->cacheable = []; } $ix = false; foreach ($hx as $uz => $ox){ if (!array_key_exists ($uz,$this->cacheable)) { if(Log::$vy)__log ('Build cache: "'. $uz .'"'); $this->cacheable[$uz]=$ox (); $ix = true; } else { if(Log::$vy)__log ('Retrieved from cache: "'. $uz .'"'); } } if ($ix){ n3 ($this->cacheFilename,serialize ($this->cacheable)); } } private function run () { $this->hasRun = true; if(Log::$vy)__log ('AeNoteView run {'); if(Log::$vy)__log ('Cacheable data {'); $this -> prepareCacheableData (); if(Log::$vy)__log ('}'); if(Log::$vy)__log ('Uncacheable data {'); $ce = false; if($this->noteRecord['IsPublished']) { if ((string)$this->noteRecord['OriginalAlias']!==''){ $ce = jv ('e2m_note', ['alias' => $this->noteRecord['OriginalAlias']]); } else { $ve = $this->noteRecord; $ve['__force_ymdn']=true; $ce = jv ('e2m_note', ['*note' => $ve]); } } $zl = dy ($this->noteRecord); $be = [(int)$this->noteRecord['LastModified'],$zl]; $t4 = ( $this->noteRecord['IsPublished'] ? [(int)$this->noteRecord['Stamp'],$zl]:$be ); $ye = rm ($this->noteRecord); $gs = $this->cacheable['text-format-info']['meta']['resources-detected']; if (!is_array ($gs))$gs = []; if(count ($gs)) { rb ($gs); } $ne = db ($gs); $ws = @unserialize ($this->noteRecord['Uploads']) or $ws = []; $me = array_merge ( sb ( $gs,$ws ), $this->cacheable['tags-data']['all-resnames-uploads'] ); $fe = d3 ($me); $de = db ($me); $se = $this->noteRecord['SourceNoteData']; $se = @json_decode ($se,true); $ae = @$se['og_images'][0] or $ae = ''; if($this->noteRecord['IsExternal']) { $qe = ad ($this->noteRecord); } else { $qe = []; } $le = false; $ze = $this->cacheable['tags-data']['ctree']; foreach ($ze as $t => $xf){ if($this->highlightedTags !== null){ $ze[$t]['current?']=in_array ($ze[$t]['name'],$this->highlightedTags); } if (!$this->wantHiddenTags and !$ze[$t]['visible?']) { unset ($ze[$t]); } } if($this->wantSharingButtons and $ye === 'public'){ $ke = vm ($fe); } else { $ke = false; } if($this->wantNewCommentsCount){ $xe = of ($this->noteRecord['ID']); } else { $xe = false; } $this->noteCTree = [ 'id' => (int)$this->noteRecord['ID'], 'title' => (string)$this->cacheable['title'], 'href' => jv ('e2m_note', ['*note' => $this->noteRecord]), 'href-original' => $ce, 'time' => $t4, 'last-modified' => $be, 'text' => (string)$this->cacheable['text-format-info']['text-final'], 'format-info' => $this->cacheable['text-format-info']['meta'], 'summary' => (string)$this->cacheable['summary'], 'snippet-text' => (string)$this->cacheable['summary'], 'draft?' => $ye === 'draft', 'scheduled?' => $ye === 'scheduled', 'public?' => $ye === 'public', 'hidden?' => $ye === 'hidden', 'current?' => false, 'favourite?' => (bool) ($this->noteRecord['IsFavourite'] and $ye !== 'draft'), 'images' => ab ($ne), 'thumbs' => qb ($ne), 'source-main-image-url' => (string)$ae, 'og-images' => $fe, 'og-images-thumbs' => qb ($de), 'tags' => $ze, 'sharing-buttons' => $ke, 'related' => $le, 'read-href' => ($this->wantReadHref and $this->noteRecord['IsPublished'])? jv ('e2m_note_read', ['*note' => $this->noteRecord]) : false, 'preview-href' => ($this->wantPreviewHref and ($ye !== 'public'))? jv ('e2m_note', [ '*note' => $this->noteRecord, 'preview-key' => jm ($this->noteRecord) ]) : false, 'comments-count' => $this->cacheable['comments-count'], 'comments-count-text' => is_int ($this->cacheable['comments-count'])? e2l_get_string ('gs--n-comments', [ 'number' => $this->cacheable['comments-count'] ]) : '', 'new-comments-count' => $xe, 'new-comments-count-text' => is_int ($xe)? e2l_get_string ('gs--comments-n-new', [ 'number' => $xe ]) : '', 'comments-link?' => (bool) ( $this->wantCommentsLink and $this->noteRecord['IsPublished'] and ( n2 ($this->noteRecord) or ($this->cacheable['comments-count']>0) ) ), ]; if($this->noteRecord['IsExternal']) { $this->noteCTree = array_merge ($this->noteCTree,$qe); $this->noteCTree['href-original']=$this->noteCTree['href-external']; if (!$this->useLocalHref){ $this->noteCTree['href']=$this->noteCTree['href-external']; } } if($this->wantControls){ $this->noteCTree['edit-href']=jv ( 'e2m_note_edit', array ('*note' => $this->noteRecord) ); if($this->noteRecord['IsPublished'] and !$this->noteRecord['IsVisible']) { $this->noteCTree['show-href']=jv ('e2m_note_flag', [ '*note' => $this->noteRecord, 'flag' => 'IsVisible', 'value' => 1 ]); } if($this->noteRecord['IsPublished']) { $this->noteCTree['favourite-toggle-href']=jv ( 'e2m_note_flag_favourite', [ '*note' => $this->noteRecord, 'value' => !$this->noteRecord['IsFavourite'] ] ); } } if(Log::$vy)__log ('}'); AeNoteReadCountsProvider :: requestDeferredReadCountForNoteID ($this->noteRecord['ID']); if(Log::$vy)__log ('}'); } } function vm ($fe){ global$_config; $ee = $_config['share_to']; $re = '|twitter|facebook|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $zv['twitter']['via']=$_config['share_to_twitter_via']; } if(count ($fe)>0){ $te = $fe[0]; $re .= 'pinterest|'; $zv['pinterest']['media']=$te; } $je = []; foreach(explode (',',$ee) as $he){ $he = trim ($he); if(strstr ($re,'|'. $he. '|')) { $je[$he]['share?']=true; if ((string) @$zv[$he]!==''){ $je[$he]['data']=$zv[$he]; } } } return $je; } function e2m_note ($parameters = []) { global$settings,$_config,$_strings; if(Log::$vy)__log ('Note {'); $n2 = $parameters['*note']; if ($n2 == false) return e2_error404_mode (); $ge = jm ($n2); $we = rm ($n2); $ue = k2 (); $ie = ($parameters['preview-key']==$ge); if (!empty ($parameters['preview-key']) and !$ie) return e2_error404_mode (); if (!$ue and !$ie and $we !== 'public') return e2_error404_mode (); if (!empty ($parameters['preview-key']) and $we === 'public'){ unset($parameters['preview-key']); $oe = jv ('e2m_note',$parameters); c ($oe); } $oe = jv ('e2m_note',$parameters); $noteView = new AeNoteView ($n2); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($ue and !@$_config['read_only']); $noteView -> setWantHiddenTags ($ue); if ($we === 'draft' or $we === 'scheduled'){ if (!$ie){ $pe = [ '.note-id' => $n2['ID'], 'form-action' => jv ('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-note'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], ]; } } $c6 = ''; $v6 = []; $b6 = []; if ($we === 'public'){ $noteView -> setWantNewCommentsCount ($ue); $noteView -> setWantSharingButtons ($settings['appearance']['show_sharing_buttons']); $noteView -> setWantRelatedNotes (true); } if ($we === 'public' or $we === 'hidden'){ if(Log::$vy)__log ('Navigation {'); $y6 = fm ($n2,'prev'); $n6 = fm ($n2,'next'); if ($y6){ $b6['prev-href']=jv ('e2m_note', array ('*note' => $y6)); $b6['prev-title']=h3 (htmlspecialchars ($y6['Title'],ENT_NOQUOTES,HSC_ENC)); } if ($n6){ $b6['next-href']=jv ('e2m_note', array ('*note' => $n6)); $b6['next-title']=h3 (htmlspecialchars ($n6['Title'],ENT_NOQUOTES,HSC_ENC)); } $b6['title']=$_strings['nm--posts']; $b6['timeline?']=false; $b6['this-title']=h3 (htmlspecialchars ($n2['Title'],ENT_NOQUOTES,HSC_ENC)); if(Log::$vy)__log ('}'); if(Log::$vy)__log ('Comments {'); if ($ue){ $m6 = e2_note_cache_filename_with_id_($n2['ID'] .'-comments-author'); } else { $m6 = e2_note_cache_filename_with_id_($n2['ID'] .'-comments'); } $f6 = null; if(CACHE_NOTES_COMMENTS and is_file ($m6)) { $f6 = @unserialize (file_get_contents ($m6)); } if(is_array ($f6)) { if(Log::$vy)__log ('retrieve cached ctree'); $c6 = $f6; } else { if(Log::$vy)__log ('assemble ctree...'); $d6 = b2 ($n2['ID']); $s6 = array (); $a6 = true; foreach ($d6 as $t => $q6){ if ($q6['IsVisible']) { $l6 = wf ( $n2, $q6, $t + 1 ); if ($l6['new?'] and $a6){ $l6['first-new?']=true; $a6 = false; } $s6[] = $l6; } } $c6 = $s6; if(CACHE_NOTES_COMMENTS)n3 ($m6,serialize ($c6)); } if (!@$_config['read_only'] and n2 ($n2)) { $z6 = if_ ($n2); $z6['.comment-number']=count ($c6)+1; } if(Log::$vy)__log ('} // Comments'); } $kx = $noteView -> getNoteCTree (); if ($ue and n2 ($n2,NOTE_COMMENTABLE_NOW_CONDITIONALLY)) { if ($n2['IsCommentable']) { $v6['href']=jv ('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 0, )); $v6['text']=$_strings['bt--close-comments-to-post']; } else { $v6['href']=jv ('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 1, )); $v6['text']=$_strings['bt--open-comments-to-post']; } } if ($ue and $kx['new-comments-count']>0){ if(Log::$vy)__log ('mark comments as not new'); e2_drop_caches_for_note_($n2['ID'],true); nn ('Comments', array ('IsNew' => 0), array ('NoteID' => $n2['ID'])); } if ($ue and ($n2['FormatterID']=='calliope')) { if(is_file (USER_FOLDER . 'calliope/WikiFormatter.php')) { $kx['text']=w3 () . $kx['text']; } } $d = [ 'title' => $n2['Title'], 'notes' => ['only' => $kx], 'pages' => $b6, 'summary' => $kx['summary'], ]; if ($c6) $d['comments']['each']=$c6; if ($v6) $d['comments']['toggle']=$v6; $d['comments']['count']=$kx['comments-count']; $d['comments']['count-text']=$kx['comments-count-text']; $d['comments']['new-count']=$kx['new-comments-count']; $d['comments']['new-count-text']=$kx['new-comments-count-text']; $d['comments']['display-form?']=n2 ($n2); if (!empty ($z6)) { $d['form']='form-comment'; $d['form-comment']=$z6; } if (!empty ($pe)) { $d['form']='form-note-publish'; $d['form-note-publish']=$pe; } if(Log::$vy)__log ('} // Note'); return $d; } function e2m_note_read ($parameters = array ()) { global$_config; if (!$_config['count_reads']) { die ('Read counting disabled'); } if(Log::$vy)__log ('Note read {'); $n2 = $parameters['*note']; xn ( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `ReadCount` = `ReadCount` + 1 ". "WHERE `ID` = ". $n2['ID'] ); $k6 = time (); $k6 = $k6 - ($k6 % SECONDS_IN_AN_HOUR); yn ( 'Actions', [ 'EntityID' => $n2['ID'], 'Stamp' => $k6, 'ReadCount' => 1, ], 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); xn ( "DELETE LOW_PRIORITY FROM `". $_config['db_table_prefix']."Actions` ". "WHERE (`Stamp` < ". (time () - (SECONDS_IN_A_MONTH)) .")" ); if(Log::$vy)__log ('}'); c (jv ('e2m_note',$parameters)); } function e2m_note_withdraw ($parameters = array ()) { global$_strings; $cl = $parameters['*note']; if (!$cl) return e2_error404_mode (); if($_SERVER['REQUEST_METHOD']!='POST'){ c (jv ('e2m_note', array ('*note' => $cl))); } $x6 = jv ('e2m_note_broadcast', array ('*note' => $cl)); $cl['IsPublished']=0; $cl['IsCommentable']=0; $cl['IsVisible']=1; $cl['Stamp']=time (); $cl['IP']=q2 (); if($parameters['alias']) { $cl['OriginalAlias']=$parameters['alias']; } else { $cl['OriginalAlias']=cm ( 'find','n',$cl['ID'],$cl['Title'] ); } e2_drop_caches_for_note_($cl['ID'],null); nn ('Notes',$cl); za ($cl['ID']); p3 ($x6); cm ('set','n',$cl['ID'],''); c (jv ('e2m_note', ['*note' => $cl])); } function e2m_note_delete ($parameters = array()) { global$_strings; $cl = $parameters['*note']; if (!$cl) return e2_error404_mode (); $we = rm ($cl); $e6 = !$cl['IsPublished']; if ($e6){ $r6 = e2l_get_string ('gs--draft-will-be-deleted', array ( 'draft' => htmlspecialchars ($cl['Title'],ENT_NOQUOTES,HSC_ENC), )); } else { $r6 = e2l_get_string ('gs--post-will-be-deleted', array ( 'post' => htmlspecialchars ($cl['Title'],ENT_NOQUOTES,HSC_ENC), )); } $t6 = $e6? $_strings['pt--draft-deletion']:$_strings['pt--post-deletion']; $j6 = array ( '.note-id' => $cl['ID'], '.is-draft' => (int)$e6, 'note-title' => htmlspecialchars ($cl['Title'],ENT_COMPAT,HSC_ENC), 'caution-text' => $r6, 'form-action' => jv ('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int)$e6, ); if ($we === 'public'){ $j6['hide-href']=jv ( 'e2m_note_flag', [ '*note' => $parameters['*note'], 'flag' => 'IsVisible', 'value' => 0 ] ); } if ($cl['IsPublished']) { $j6['withdraw-href']=jv ( 'e2m_note_withdraw',$parameters ); } $d = array ( 'title' => $t6. ': '. htmlspecialchars ($cl['Title'],ENT_NOQUOTES,HSC_ENC), 'heading' => $t6, 'form' => 'form-note-delete', 'form-note-delete' => $j6, ); return $d; } function e2m_note_flag_favourite ($parameters){ global$_config; $parameters['flag']='IsFavourite'; s ([ 'flag-name' => 'favourite', 'candy-name' => 'e2m_note_flag_favourite', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ bm ($parameters); }, ]); } function e2m_note_flag ($parameters){ bm ($parameters); c (jv ('e2m_note',$parameters)); } function bm ($parameters){ $sx = $parameters['*note']['ID']; if (!is_numeric ($sx)) { return e2_error404_mode (); } e2_drop_caches_for_note_($sx,$parameters['*note']['IsPublished']); if($parameters['flag']=='IsVisible'){ ds (); } nn ('Notes', array ( 'ID' => $sx, $parameters['flag'] => (int) ($parameters['value']==1), )); try { cy (mm ($sx)); } catch (AeMySQLException $e){ kv ($e,'Could not broadcast note flag change'); } return true; } function e2m_note_use_formatter ($parameters){ $sx = $parameters['*note']['ID']; if (!is_numeric ($sx)) { return e2_error404_mode (); } e2_drop_caches_for_note_($sx,$parameters['*note']['IsPublished']); if(in_array ($parameters['formatter'], array ('calliope','raw','neasden'))) { nn ('Notes', array ( 'ID' => $sx, 'FormatterID' => $parameters['formatter'], )); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function ym ($h6,$parameters = array ()) { global$full_blog_url,$_strings,$_config; $t6 = $_strings['pt--new-post']; $g6 = $_strings['pt--new-post']; $sx = 'new'; $w6 = $_config['default_formatter']; if ($h6 == 'edit'){ $cl = $parameters['*note']; if (!$cl) return e2_error404_mode (); if ($cl){ $u6 = (string)$cl['Summary']; if ($cl['IsPublished']) { $g6 = $_strings['pt--edit-post']; $i6 = ''; $o7 = $parameters['alias']; } else { $g6 = $_strings['pt--edit-draft']; $i6 = cm ( 'find','n',$cl['ID'],$cl['Title'] ); if (@$cl['OriginalAlias']) { $o7 = $cl['OriginalAlias']; } else { $o7 = $i6; } } } $sx = $cl['ID']; $w6 = $cl['FormatterID']; $t6 = $cl['Title']; } $o6 = df (); $p6 = array (); if ($o6 !== null) foreach ($o6 as $cr){ $p6[] = $cr['tag']; } $vr = array (); if ($h6 == 'edit' and count ($p6)) { $o6 = bf ($cl['ID']); foreach ($o6 as $cr){ $vr[] = htmlspecialchars ($cr['Keyword'],ENT_NOQUOTES,HSC_ENC); } } $br = array (); foreach ($p6 as $cr){ $yr['name']=$cr; $yr['selected?']=in_array ($cr,$vr); $br[] = $yr; } $nr = ''; $vr = implode (', ',$vr); if ($vr)$nr = $vr; if ($h6 == 'write'){ $mr = $_strings['fb--save-and-preview']; } if ($h6 == 'edit'){ if(array_key_exists ('draft',$parameters)) { $mr = $_strings['fb--save-and-preview']; } else { $mr = $_strings['fb--save-changes']; } } $gs = []; if ($h6 == 'edit'){ $gs = g3 ( $cl['FormatterID'],$cl['Text'],'full' ); } $ws = @unserialize ( $cl['Uploads'] ) or $ws = []; $fr = qb ( fb ( sb ( $gs,$ws ) ) ); if ($h6 == 'edit'){ k3 ( 'Notes', $cl, $gs ); } $m4 = min ($cl['Stamp'],time ()); $qq = r3 (); $lq = t3 ($qq); $zl = dy ($cl); $we = rm ($cl); $d['title']=$t6; $d['heading']=$g6; $d['form']='form-note'; $d['uploads'] = [ 'enabled?' => $lq, 'each' => $fr, 'default-name' => htmlspecialchars ($o7,ENT_COMPAT,HSC_ENC), 'upload-action' => jv ('e2j_file_upload'), 'remove-action' => jv ('e2j_file_remove'), ]; $d['form-note'] = [ '.note-id' => $sx, '.formatter-id' => $w6, '.last-modified-stamp' => (int)$cl['LastModified'], '.published?' => (bool)$cl['IsPublished'], '.old-tags-hash' => md5 ($nr), '.action' => $h6, 'form-action' => jv ('e2s_note_process'), 'form-note-livesave-action' => jv ('e2j_note_livesave'), 'create:edit?' => (bool) ($h6 == 'write'), 'title' => htmlspecialchars ($cl['Title'],ENT_COMPAT,HSC_ENC), 'tags' => $nr, 'tags-info' => $br, 'text' => htmlspecialchars ($cl['Text'],ENT_NOQUOTES,HSC_ENC), 'all-tags' => $p6, 'stamp-formatted' => ky ('d.m.Y H:i:s',$m4,$zl), 'time' => $cl['IsPublished']? [(int)$m4,$zl]:false, 'draft?' => $we === 'draft', 'uploads-enabled?' => $lq, 'summary' => $u6, 'alias-autogenerated' => htmlspecialchars ($i6,ENT_COMPAT,HSC_ENC), 'alias' => htmlspecialchars ($o7,ENT_COMPAT,HSC_ENC), 'submit-text' => $mr, 'space-usage' => j3 ($qq), ]; if ($h6 == 'edit'){ $d['related-delete-href']=jv ( 'e2m_note_delete', array ('*note' => $cl) ); } return $d; } function e2m_note_edit ($parameters = array ()) { return ym ('edit',$parameters); } function e2m_write () { return ym ('write'); } function e2s_note_process () { global$_fp_error,$_strings; $sx = km (); if (!$sx){ if($_fp_error == FP_TITLE_OR_TEXT_EMPTY){ mv ($_strings['er--post-must-have-title-and-text'],E2E_USER_ERROR); } elseif($_fp_error == FP_NO_ID_OR_NEW){ } else { mv ($_strings['er--error-occurred']); } c (jv ('e2m_write')); } try { $n2 = mm ($sx); c (jv ('e2m_note', ['*note' => $n2])); } catch (AeMySQLException $e){ kv ($e,'Could not get note by ID'); c (); } die; } function e2s_note_publish () { global$_strings,$_config,$settings; $sx = false; if(array_key_exists ('note-id',$_POST)) { $sx = $_POST['note-id']; $dr = false; $cl = mm ($sx); $sr = $cl['OriginalAlias']; $ar = $cl['Stamp']; $qr = !$cl['IsExternal']; $cl['ID']=$sx; $cl['IsVisible']=1; $cl['IsPublished']=1; $cl['IsCommentable'] = (int)$settings['comments']['default_on']; $cl['IsFavourite']=0; if(array_key_exists ('browser-offset',$_POST)) { $zl = wy (@$_POST['browser-offset']); } else { $zl = ay (); } if ($dr and $m4 = zm ($dr,$zl)) { $cl['Stamp']=$m4; } elseif ($qr){ $cl['Stamp']=time (); } else { $cl['Stamp']=$ar; } if (la ($cl)) { $cl['IsIndexed']='1'; } if ($zl){ $cl['Offset'] = (int)$zl['offset']; $cl['IsDST'] = (int)$zl['is_dst']; } e2_drop_caches_for_note_($sx,null); nn ('Notes',$cl); $o7 = ''; if ($sr or $sr === '0'){ $o7 = cm ('set','n',$sx,$sr); $cl['OriginalAlias']=$o7; } if ($o7 != $sr){ nn ('Notes',$cl); } $we = rm ($cl); if ($we === 'public'){ cy ($cl); } c (jv ('e2m_note', array ('*note' => $cl))); } c (); } function nm ($sx,$lr = -1){ global$_config; $zr = true; if ($lr){ $zr = false; } if ($lr === -1){ $zr = null; } e2_drop_caches_for_note_($sx,$zr); xn ( "DELETE FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$sx) ."'", 'delete note by ID' ); za ($sx); xn ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 'n' ". "AND `EntityID`=". ((int)$sx), 'delete aliases after deleting note' ); xn ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". ((int)$sx), 'delete tag bindings after deleting note' ); } function e2s_note_delete () { global$_strings,$_config; $sx = $_POST['note-id']; $lr = (bool)$_POST['is-draft']; $cl = mm ($sx); $x6 = jv ('e2m_note_broadcast', array ('*note' => $cl)); nm ($sx,$lr); p3 ($x6); if ($lr){ c (jv ('e2m_drafts', ['page' => 1])); } else { c (); } die; } function e2j_note_livesave () { die (km ('ajaxresult')); } function mm ($xs){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $xs ."'" ); $ob = en (); if(count ($ob)>0){ return $ob[0]; } else { return false; } } function fm ($n2,$kr,$xr = 1){ global$_strings,$_config; $er = ($kr == 'next')?'>':'<'; $rr = ($kr == 'next')?'':'DESC '; try { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". $xr ." ". "AND (". "`Stamp` ". $er ." '". $n2['Stamp'] ."' ". "OR (`Stamp` = '". $n2['Stamp'] ."' AND `ID` ". $er . $n2['ID'] .")". ") ". tm (k2 ()). "ORDER BY `Stamp` ". $rr . ", `ID` ". $rr . "LIMIT 1", 'get '. $kr .' note' ); $ob = en (); if(count ($ob)>0) return $ob[0]; else return false; } catch (AeMySQLException $e){ kv ($e,'Could not get '. $kr .' note'); return null; } } function dm ($tr){ global$_config; if(Log::$vy)__log ('Lastmodifieds for Local Copier'); if(CACHE_LASTMODIFIEDS and is_file (CACHE_FILENAME_LASTMODIFIEDS)) { $jr = @unserialize (file_get_contents (CACHE_FILENAME_LASTMODIFIEDS)); if ($jr['ids_csv']==$tr){ if(Log::$vy)__log ('Returned from cache'); return $jr['lastmodifieds_json']; } } $b = '`ID`='. str_replace (',',' OR `ID`=',$tr); $hr = array (); xn ( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")", 'get lastmodifieds for Local Copier' ); if(Log::$vy)__log ('Requested from DB'); $q1 = en (); foreach ($q1 as $t => $xf){ $hr[(int)$xf['ID']] = (int)$xf['LastModified']; } $gr = json_encode ($hr); if ($gr == '[]')$gr = '{}'; $jr = array ( 'ids_csv' => $tr, 'lastmodifieds_json' => $gr, ); if(CACHE_LASTMODIFIEDS){ n3 (CACHE_FILENAME_LASTMODIFIEDS,serialize ($jr)); } return $gr; } function sm ($gb,$hb,$jb = false){ global$_config; list ($ur,$ir)=jy ($gb,$hb,$jb); xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` AND (`Stamp` BETWEEN " .$ur. " AND " .$ir. ") ". "ORDER BY Stamp", 'get all notes for the date '. $jb .'.'. $hb .'.'. $gb ); $d = []; foreach (en () as $or_){ if(is_numeric ($jb)) { $pr = ((int)$gb) .'/'. ((int)$hb) .'/'. ((int)$jb) == ky ('Y/n/j',$or_['Stamp'],dy ($or_)); } elseif(is_numeric ($hb)) { $pr = ((int)$gb) .'/'. ((int)$hb) == ky ('Y/n',$or_['Stamp'],dy ($or_)); } else { $pr = ((int)$gb) == ky ('Y',$or_['Stamp'],dy ($or_)); } if ($pr)$d[] = $or_; } return $d; } function e2_published_noterec_with_parameters_($parameters = array ()) { $n2 = e2_noterec_with_parameters_($parameters); if ($n2['IsPublished']) return $n2; } function e2_noterec_with_parameters_($parameters = array ()) { global$_config; $n2 = false; $ct = false; if ((string) @$parameters['oalias']!=='')$ct = $parameters['oalias']; if ((string)$ct !== ''){ xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias` = '". $ct ."' ". "AND `IsPublished` = 0", 'get note record by original alias' ); $n2 = en (); if(count ($n2)===1) { $n2 = @$n2[0]; if ($n2) return $n2; } } $vt = false; if (@$parameters['draft']!=='') $vt = @$parameters['draft']; if (@$parameters['draft2']!=='')$vt = @$parameters['draft2']; if ($vt){ $n2 = mm ($vt); return $n2; } if ((string)$ct !== ''){ $parameters['alias']=$ct; } if ((string) @$parameters['alias']!==''){ if ($bt = pn (@$parameters['alias'])) { if ($bt['type']=='n'){ $n2 = mm ($bt['id']); if ($n2['IsPublished']) return $n2; } } } $yt = sm ($parameters['year'],$parameters['month'],$parameters['day']); if (@$yt[$parameters['day-number']-1]) { return $yt[$parameters['day-number']-1]; } } function lm ($t6,$jv,$zl,$nt){ global$_config; ss (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $n2 = array ( 'Title' => $t6, 'Text' => $jv, 'FormatterID' => $_config['default_formatter'], 'OriginalAlias' => cm ('find','','',$t6), 'Uploads' => $nt, 'Stamp' => (int)time (), 'LastModified' => (int)time (), ); if ($zl and is_array ($zl)) { $n2['Offset'] = (int)$zl['offset']; $n2['IsDST'] = (int)$zl['is_dst']; } $n2 = yn ('Notes',$n2); return $n2['ID']; } function zm ($mt,$zl){ $ft = '/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if(preg_match ($ft,$mt,$hb)) { $m4 = gmmktime ($hb[4],$hb[5],$hb[6],$hb[2],$hb[1],$hb[3]); $m4 -= ly ($zl,$m4); return $m4; } else { return false; } } function km ($dt = ''){ global$_fp_error,$_config,$_e2utf8__unformat_htmlentity_neasden,$_db; if(Log::$vy)__log ('Process note form'); try { $_fp_error = false; $sx = $t6 = $st = $jv = $at = ''; if(array_key_exists ('note-id',$_POST)) $sx = $_POST['note-id']; if(array_key_exists ('title',$_POST)) $t6 = trim ($_POST['title']); if(array_key_exists ('tags',$_POST)) $st = $_POST['tags']; if(array_key_exists ('text',$_POST)) $jv = trim ($_POST['text'],"\r\n"); if(array_key_exists ('summary',$_POST)) $u6 = trim ($_POST['summary'],"\r\n"); if(array_key_exists ('old-tags-hash',$_POST)) $at = $_POST['old-tags-hash']; if(is_array ($st))$st = implode (', ',$st); $st = trim ($st); if ($sx == 'new'){ $_e2utf8__unformat_htmlentity_neasden = ($_config['default_formatter']=='neasden'); } else { $_e2utf8__unformat_htmlentity_neasden = ($_POST['formatter-id']=='neasden'); } $qt = vn ('Notes'); if(stripos($qt['Collation'],'utf8mb4')!==0){ $t6 = nb ($t6); $st = nb ($st); $jv = nb ($jv,true); } $lt = $jv; $lt = str_replace ("\n",'\n'."\n",$lt); $lt = str_replace ("\r",'\r'."\r",$lt); $zt = n (',',$st,'sort'); $st = implode (', ',$zt); $kt = md5 ($st); if(array_key_exists ('browser-offset',$_POST)) { $zl = wy (@$_POST['browser-offset']); } else { $zl = ay (); } $xt = @$_POST['old-stamp']; $dr = @$_POST['stamp']; $o7 = @$_POST['alias']; if ($sx != 'new'){ $et = mm ($sx); } else { $et = array (); } if ($sx){ if ((string)$t6 !== '' and (string)$jv !== ''){ if ($sx == 'new'){ $nt = ''; if(is_file (USER_FOLDER . 'new-uploads.psa')) { $nt = @file_get_contents (USER_FOLDER . 'new-uploads.psa'); } try { $sx = lm ($t6,$jv,$zl,$nt); @unlink (USER_FOLDER . 'new-uploads.psa'); $rt = array ( '*note' => mm ($sx), ); $tt = [ 'success' => true, 'data' => [ 'status' => 'created', 'id' => $sx, 'note-url' => jv ('e2m_note',$rt), 'note-edit-url' => jv ('e2m_note_edit',$rt) ] ]; $q1 = (int)$sx; } catch (AeMySQLException $e){ kv ($e,'Could not insert note'); $tt = [ 'success' => false, 'error' => [ 'message' => 'Cannot create record' ] ]; $q1 = false; } } else { e2_drop_caches_for_note_($sx,$et['IsPublished']); $jt = $et; $jt['ID']=$sx; $jt['Title']=$t6; $jt['Summary']=$u6; $jt['Text']=$jv; $jt['FormatterID']=$et['FormatterID']; $jt['LastModified']=time (); $jt['IsIndexed']='0'; if ($jt['FormatterID']==='calliope'){ $jt['FormatterID']=$_config['default_formatter']; } if ($xt != $dr){ if ($m4 = zm ($dr,$zl)) { $jt['Stamp']=min ($m4,time ()); } } $i7 = $o7; if ((string)$o7 !== ''){ $ht = $o7; } elseif (!$et['IsPublished']) { $ht = $t6; } else { $ht = ''; } if ($et['IsPublished']) { $i7 = cm ( 'set','n',$sx,$ht ); $rt = array ( '*note' => $jt, 'alias' => $i7, ); } else { $gt = true; $i7 = cm ('find','n',$sx,$ht); $jt['OriginalAlias']=$i7; $rt = array ( '*note' => $jt, 'alias' => $i7, ); } $gs = g3 ( $jt['FormatterID'],$jt['Text'],'full' ); if(count ($gs)>0){ eb ($gs); rb ($gs); } try { nn ('Notes',$jt); if ($jt['IsPublished']) { if (la ($jt)) { $jt['IsIndexed']='1'; nn ('Notes',$jt); } if ($xt != $dr){ un (true); } cy ($jt); } $tt = [ 'success' => true, 'data' => [ 'status' => 'saved', 'new-alias' => $i7, 'note-url' => jv ('e2m_note',$rt), 'note-edit-url' => jv ('e2m_note_edit',$rt) ] ]; $q1 = (int)$sx; } catch (AeMySQLException $e){ kv ($e,'Could not update record'); $tt = [ 'success' => false, 'error' => [ 'message' => 'Cannot update record ('. mysqli_error ($_db['link']). ')' ] ]; $q1 = false; } } if ($kt != $at){ yf (array ('NoteID' => $sx)); foreach ($zt as $am){ $wt = sf ($am); if (!$wt){ $wt['ID']=mf ($am); } xn ( "INSERT INTO `". $_config['db_table_prefix']."NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$_config['db_table_subset']) .", ". ((int)$sx) .", ". ((int)$wt['ID']). ")", 'add new tag bindings' ); } } if ( $dt != 'ajaxresult' and $q1 and $_POST['instant-publish']=='yes' ) { $_POST['note-id']=$sx; e2s_note_publish (); } } else { $tt = [ 'success' => false, 'error' => [ 'message' => 'Title or text is empty' ] ]; $_fp_error = FP_TITLE_OR_TEXT_EMPTY; $q1 = false; } } else { $tt = [ 'success' => false, 'error' => [ 'message' => 'No note id/new specified' ] ]; $_fp_error = FP_NO_ID_OR_NEW; $q1 = false; } if($_config['backup_automatically']) { tn (); } } catch (AeMySQLException $e){ kv ($e); $tt = [ 'success' => false, 'error' => [ 'message' => 'Database error' ] ]; $q1 = false; } if ($dt == 'ajaxresult') return json_encode ($tt); else return $q1; } function xm ($ut,$it){ global$_config; if (!($ut and $it) and !k2 ()) { if(Log::$vy)__log ('Error: e2_notes_count_generic called for invisible items unsecurely'); return null; } if (!is_bool ($ut) or !is_bool ($it)) { if(Log::$vy)__log ('Error: e2_notes_count_generic called with non-bool params'); return null; } if (!$ut and !$it){ if(Log::$vy)__log ('Error: e2_notes_count_generic called with nonsensical parameters'); return null; } $ot = ( CACHES_FOLDER . 'notes-count-p'. (int)$ut . ($ut ? ('v'. (int)$it):'') . '.txt' ); $q1 = false; if(CACHE_NOTES_COUNTS and is_file ($ot)) { $q1 = @file_get_contents ($ot); } if(is_numeric ($q1) and $q1 > 0){ return $q1; } else { $q1 = null; try { xn ( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". (int)$ut. " ". ($ut ? ( "AND `IsVisible`=". (int)$it ) : ""), 'count notes with flags p'. (int)$ut . ($ut ? ('v'. (int)$it):'') ); $q1 = en (); $q1 = $q1[0]['NotesCount']; if(CACHE_NOTES_COUNTS)n3 ($ot,$q1); } catch (AeMySQLException $e){ kv ($e); if(Log::$vy)__log ('Could not count notes'); } return $q1; } } function em ($jv){ $u6 = $jv; $u6 = preg_match ( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/mu', $u6, $n3 ); $u6 = $n3[3]; if (!$u6)$u6 = $jv; if(mb_strlen ($u6) <= 50)$u6 = $jv; $u6 = str_replace (array ( '<p>','<blockquote>','<ul>','<ol>','<br />', ), "\n",$u6); $u6 = trim (strip_tags ($u6)); if(mb_strlen ($u6)>50){ $pt = mb_strpos ($u6,"\n",50); } else { $pt = mb_strrpos ($u6,"\n"); } if ($pt !== false){ $u6 = mb_substr ($u6,0,$pt); $u6 = trim ($u6,' :.()'."\n"); } if(preg_match ('/^(.{100,}?)(?:[:.!?()]|'."\n".')/su',$u6,$n3)) { $u6 = trim ($n3[0],' :.()'."\n"); } if(preg_match ('/^(.{150,}?)[:.!?(),]/su',$u6,$n3)) { $u6 = trim ($n3[0],' :.(),'."\n"); } if(preg_match ('/^(.{200,}?)[:.!?(), ]/su',$u6,$n3)) { $u6 = trim ($n3[0],' :.()'."\n"); } $u6 = preg_replace ('/[ \n\r\t]+/su',' ',$u6); if(mb_substr ($u6, -1)==='.')$u6 = mb_substr ($u6,0, -1); if(mb_substr ($u6, -1)===':')$u6 = mb_substr ($u6,0, -1); if(mb_substr ($u6, -1)==='!')$u6 = mb_substr ($u6,0, -1); if(in_array ($u6[mb_strlen ($u6)-1], array (',',' '))) { $u6 = trim ($u6,', '). '...'; } if(mb_strlen ($u6)>250){ $u6 = trim (mb_substr ($u6,0,250)). '...'; } return $u6; } function rm ($n2){ $c5 = false; if ($n2['IsPublished']) { if ($c5){ return 'scheduled'; } else { if ($n2['IsVisible']) { return 'public'; } else { return 'hidden'; } } } else { return 'draft'; } } function tm ($ue = false){ if ($ue){ return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time () .') '; } } function jm ($n2){ return ''; } function e2m_drafts ($parameters){ global$_strings,$_config; $ue = k2 (); $draftsView = new AePageableNotesView ('e2m_drafts',$parameters); $draftsView -> setPortionSize ((int)$_config['drafts_per_page']); $draftsView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $draftsView -> setWantPaging (true); $draftsView -> setUseLocalHrefs (true); if($draftsView -> isFirstPage () and CACHE_DRAFTS){ $draftsView -> setCacheFilename (CACHE_FILENAME_DRAFTS); } $draftsView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `LastModified` DESC" ); $s5 = $draftsView -> getNotesCTree (); if(count ($s5)) { if(Log::$vy)__log ('Thumbnails {'); foreach ($s5 as $t => $xf){ $s5[$t]['thumbs']=qb (@$xf['format-info']['resources-detected']); } if(Log::$vy)__log ('}'); } $d = [ 'title' => $_strings['pt--drafts'], 'heading' => $_strings['pt--drafts'], 'notes' => $s5, 'pages' => $draftsView -> getPagesCTree (), ]; if($draftsView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-drafts']; } elseif (!$draftsView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function um ($a5){ global$_config; if(Log::$vy)__log ('Drafts: find duplicate OriginalAliases...'); if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $q5 = @unserialize (file_get_contents (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_array ($q5)) { if(Log::$vy)__log ('Drafts: retrieve cached'); } else { if(Log::$vy)__log ('Drafts: assemle cacheable...'); $q5 = array (); xn ( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `ID`", 'get original aliases of drafts to calculate use counts' ); $q1 = en (); $l5 = array (); foreach ($q1 as $t => $n2){ @$q5[$n2['OriginalAlias']] ++; } if(CACHE_DRAFTS_ALIAS_USE_COUNTS){ n3 (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS,serialize ($q5)); } } return $q5[$a5]; } function im () { global$_strings,$_user_folder_name; $z5 = 'https://'. $_strings['e2--website-host'] .'/'; $k5 = '('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; return [ 'built?' => BUILT, 'installed?' => (fn_ () !== null), 'version' => 'v'. E2_VERSION, 'version-description' => $_strings['e2--vname-aegea'] .' '. $k5, 'user-folder-name' => $_user_folder_name, 'cookie-prefix' => b (), 'href' => $z5, 'about' => ( '<span title="E2 '.$k5 .'">'. $_strings['e2--powered-by'] .' '. '<a href="'. $z5 .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> '. '<span class="e2-svgi">'. is ('aegea') .'</span></a></span>' ), ]; } function om ($candy,$x5,$e5,$r5,$b6){ global$full_blog_url,$content, $_config, $_candies_indexable, $_candies_indexable_conditionally, $_template, $_newsfeeds, $_current_url; $meta['base-href']=$full_blog_url. '/'; $meta['current-href']=$_current_url; $meta['stylesheets']=ps (); $meta['scripts']=ca (); $meta['newsfeeds']=$_newsfeeds; $meta['favicon-type']='image/x-icon'; $meta['favicon-href']='favicon.ico'; if ($t5 = bd ()) { $meta['favicon-type']=v3 ($t5); $meta['favicon-href']=$t5; $meta['apple-touch-icon-href']=bd ('square'); } $meta['navigation-links'] = [[ 'rel' => 'index', 'href' => jv ('e2m_frontpage', ['page' => 1]), 'id' => 'link-index', ]]; if (!empty ($b6)) { foreach (['prev','next','earlier','later'] as $j5){ if(array_key_exists ($j5 .'-href',$b6)) { $er = $j5; if ($j5 == 'earlier')$er = 'prev'; if ($j5 == 'later')$er = 'next'; $meta['navigation-links'][] = [ 'rel' => $er, 'href' => $b6[$j5 .'-href'], 'id' => 'link-'. $j5, ]; } } } $h5 = 'noindex, follow'; if (@$_config['index_follow_everything']) { $h5 = 'index, follow'; } if(in_array ($candy,$_candies_indexable)) { $meta['robots']='index, follow'; } if(in_array ($candy,$_candies_indexable_conditionally)) { $meta['robots']=$h5; } $meta['viewport']=$_template['meta_viewport']; if(is_file (MEDIA_ROOT_FOLDER . 'manifest.json')) { $meta['manifest-href']=$full_blog_url. '/manifest.json'; } $meta['og-images'] = []; if(is_array ($x5['only']['og-images'])) { $meta['og-images']=$x5['only']['og-images']; $meta['twitter-card']='summary_large_image'; } if(is_array ($e5['og-images'])) { $meta['og-images']=$e5['og-images']; $meta['twitter-card']='summary_large_image'; } if (!count ($meta['og-images'])) { $meta['og-images'] = array ($r5['userpic-large-href']); $meta['twitter-card']='summary'; } return$meta; } function pm () { global$_superconfig,$_config; $g5 = [ 'new-note-href' => jv ('e2m_write'), 'drafts-href' => jv ('e2m_drafts', ['page' => 1]), 'drafts-count' => (int)xm (false,true), 'settings-href' => jv ('e2m_settings'), 'theme-preview-href' => jv ('e2m_theme_preview', array ('theme' => '')), 'password-href' => jv ('e2m_password', array ('recovery-key' => '')), 'database-href' => jv ('e2m_database'), 'timezone-href' => jv ('e2m_timezone'), 'sessions-href' => jv ('e2m_sessions'), 'sign-out-href' => jv ('e2m_sign_out'), ]; if (p ()) { $g5['get-backup-href']=jv ('e2m_get_backup'); } if (@$_config['read_only']) { unset ($g5['new-note-href']); unset ($g5['settings-href']); unset ($g5['timezone-href']); } if (@$_superconfig['disallow_themes_preview']) { unset ($g5['theme-preview-href']); } if (@$_superconfig['disallow_db_config']) { unset ($g5['database-href']); } list ($xe,$w5,$u5)=v2 (); if ($xe){ $g5['new-comments-count']=$xe; $g5['new-comments-href']=$u5; } return $g5; } function e2m_tags () { global$_strings; $d['title']=$_strings['pt--tags']; $d['heading']=$_strings['pt--tags']; $d['tags']=ff ([]); $i5 = df (true); if ($i5 === null){ $d['unavailable?']=true; } else { $d['tags']['each']=$i5; if(count ($i5)==0){ $d['nothing']=$_strings['gs--no-tags']; } } return $d; } function e2m_tag ($parameters = []) { global $settings, $_config, $_current_tags, $_strings; if(Log::$vy)__log ('Tag {'); $ue = k2 (); $tagNotesView = new AePageableNotesView ('e2m_tag',$parameters); $tagNotesView -> setPortionSize ($settings['appearance']['notes_per_page']); $tagNotesView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $tagNotesView -> setWantPaging (true); $tagNotesView -> setWantNewCommentsCount ($ue); $tagNotesView -> setWantReadHrefs ($_config['count_reads']); $tagNotesView -> setWantControls ($ue and !@$_config['read_only']); $tagNotesView -> setWantHiddenTags ($ue); $o5 = []; if(array_key_exists ('*tags',$parameters)) { foreach($parameters['*tags'] as $q2){ if ($ue or $q2['IsVisible']) { $o5[] = $q2; } } } if (!$o5[0]) return e2_error404_mode (); $p5 = count ($o5); $cr = $o5[0]; $cj = $parameters['tag-alias']; $_current_tags = []; foreach ($o5 as $cr)$_current_tags[] = $cr['Keyword']; $tagNotesView -> setHighlightedTags ($_current_tags); if(CACHE_TAG and $tagNotesView -> isFirstPage () and $p5 === 1){ if ($ue){ $tagNotesView -> setCacheFilename (e2_cache_filename_with_id_($cr['ID'],CACHE_FILENAMES_TAG_AUTHOR)); } else { $tagNotesView -> setCacheFilename (e2_cache_filename_with_id_($cr['ID'],CACHE_FILENAMES_TAG)); } } foreach ($o5 as $cr) if ($cr)$vj[] = "nk.`KeywordID`=". $cr['ID']; $bj = ( "FROM `". $_config['db_table_prefix'] ."Notes` n ". "JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (". implode (" OR ",$vj).") ". "AND IsPublished=1 ". tm ($ue). "GROUP BY n.`ID` ". "HAVING COUNT(*)>=". $p5 ); $tagNotesView -> setSQLCountRequest ( "SELECT COUNT(*) Total FROM (SELECT 1 ". $bj .") _" ); $tagNotesView -> setLimitlessSQLRequest ( "SELECT n.*, COUNT(*) ". $bj ." ". "ORDER BY n.`Stamp` DESC" ); $yj = nf ($cr['ID'],5); $nj = ''; $e5['description']=''; $e5['summary']=''; $e5['visible?'] = (bool)$cr['IsVisible']; if ($p5 == 1){ if ($ue){ $e5['edit-href']=jv ( 'e2m_tag_edit', array ('tag-alias' => $cj) ); } if ((string)$cr['Description']!==''){ $z1 = i3 ($cr['Description'],'full'); $bn = $z1['text-final']; $e5['description']=$bn; $e5['description-format-info']=$z1['meta']; va (@$z1['meta']['links-required']); } if ((string)$cr['Summary']!==''){ $e5['summary']=h3 (htmlspecialchars ($cr['Summary'],ENT_NOQUOTES,HSC_ENC)); } elseif ((string)$e5['description']!==''){ $e5['summary']=em ($e5['description']); }; $mj = jv ('e2m_tag_rss', array ('tag-alias' => $cj)); $fj = jv ('e2m_tag_json', array ('tag-alias' => $cj)); zd ( 'rss', cd () .': '. $cr['Keyword'], $mj ); zd ( 'json', cd () .': '. $cr['Keyword'], $fj ); $e5['og-images']=d3 ( sb ( $e5['description-format-info']['resources-detected'], q3 ('tag',$cr['ID']) ) ); $e5['name']=htmlspecialchars ($cr['Keyword'],ENT_COMPAT,HSC_ENC); $e5['related']=$yj; $nj = htmlspecialchars ($cr['PageTitle'],ENT_COMPAT,HSC_ENC); } $dj = $tagNotesView -> getTotalNotes(); $e5['notes-count']=$dj; $e5['notes-count-text']=e2l_get_string ('pt--n-posts', array ('number' => $dj)); $sj = $e5['notes-count-text'] .' '. $_strings['gs--tagged']; $aj = []; foreach ($o5 as $xf){ $aj[] = htmlspecialchars ($xf['Keyword'],ENT_COMPAT,HSC_ENC); } $aj = implode (', ',$aj); if ((string)$nj !== ''){ $t6 = $nj; $g6 = $nj; } else { $t6 = cd () .': '. $sj .' '. $aj; if(count ($o5)>1){ $g6 = $_strings['pt--tags'] .': '. $aj; } else { $g6 = $_strings['pt--tag'] .': '. $aj; } } $ze = ff ($parameters); $d = [ 'title' => $t6, 'heading' => htmlspecialchars_decode ($g6,ENT_COMPAT), 'notes' => $tagNotesView -> getNotesCTree (), 'pages' => $tagNotesView -> getPagesCTree (), 'tags' => $ze, ]; if ( !$tagNotesView -> isExistingPage () and !$tagNotesView -> isFirstPageOfEmptyView () ) { return e2_error404_mode (); } if ( $tagNotesView -> isFirstPageOfEmptyView () and !$ue ) { return e2_error404_mode (); } if($tagNotesView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-such-notes']; } if ((string)$e5['summary']!==''){ $d['summary']=$e5['summary']; } if(count ($o5)==1){ $d['tag']=$e5; if (k2 ()) { $d['related-edit-href']=$e5['edit-href']; $d['related-edit-title']=$_strings['tt--edit-tag']; } } if(Log::$vy)__log ('} // Tag'); return $d; } function e2m_tag_edit ($parameters = array()) { global$_strings; if(array_key_exists ('*tag',$parameters)) { $cr = $parameters['*tag']; } if (!$cr) return e2_error404_mode (); $gs = g3 ( 'neasden',$cr['Description'],'full' ); $ws = @unserialize ( $cr['Uploads'] ) or $ws = []; $fr = qb ( fb ( sb ( $gs,$ws ) ) ); k3 ( 'Keywords', $cr, $gs ); $qq = r3 (); $qj = [ 'enabled?' => t3 ($qq), 'each' => $fr, 'default-name' => htmlspecialchars ($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'upload-action' => jv ('e2j_file_upload'), 'remove-action' => jv ('e2j_file_remove'), ]; $lj = array ( '.tag-id' => $cr['ID'], '.formatter-id' => 'neasden', 'form-action' => jv ('e2s_tag_edit'), 'submit-text' => $_strings['fb--save-changes'], 'tag' => htmlspecialchars ($cr['Keyword'],ENT_COMPAT,HSC_ENC), 'page-title' => htmlspecialchars ($cr['PageTitle'],ENT_COMPAT,HSC_ENC), 'page-title-placeholder' => htmlspecialchars ($cr['Keyword'],ENT_COMPAT,HSC_ENC), 'alias' => htmlspecialchars ($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'description' => htmlspecialchars ($cr['Description'],ENT_COMPAT,HSC_ENC), 'summary' => (string)$cr['Summary'], 'favourite?' => (bool)$cr['IsFavourite'], 'space-usage' => j3 ($qq), ); $lj['.cache-sensitive-hash']=md5 ( $lj['tag'] . $lj['uploads'] . $lj['urlname'] ); $d = array ( 'body-uploads-enabled?' => t3 ($qq), 'title' => $_strings['pt--tag-edit'] .': '. $cr['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $lj, 'uploads' => $qj, 'related-delete-href' => jv ('e2m_tag_delete', array ('*tag' => $cr)), ); return $d; } function e2m_tag_flag_ajax ($parameters){ s ([ 'flag-name' => 'tag', 'candy-name' => 'e2m_tag_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ cf ($parameters); }, ]); } function cf ($parameters){ if(array_key_exists ('*tag',$parameters)) { $cr = $parameters['*tag']; } if (!$cr) return e2_error404_mode (); e2_drop_caches_for_tag_($cr['ID']); nn ('Keywords', array ( 'ID' => $cr['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); return true; } function e2m_tag_delete ($parameters = array()) { global$_strings; if(array_key_exists ('*tag',$parameters)) { $cr = $parameters['*tag']; } if (!$cr) return e2_error404_mode (); $zj = array ( '.tag-id' => $cr['ID'], 'caution-text' => e2l_get_string ('gs--tag-will-be-deleted-notes-remain', array ( 'tag' => htmlspecialchars ($cr['Keyword'],ENT_COMPAT,HSC_ENC) )), 'tag' => htmlspecialchars ($cr['Keyword'],ENT_COMPAT,HSC_ENC), 'form-action' => jv ('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ); $d = array ( 'title' => $_strings['pt--tag-delete'] .': '. $cr['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $zj, ); return $d; } function e2m_untagged ($parameters = []) { global$settings,$_strings,$_config; $ue = k2 (); $untaggedView = new AePageableNotesView ('e2m_untagged',$parameters); $untaggedView -> setPortionSize ($settings['appearance']['notes_per_page']); $untaggedView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $untaggedView -> setWantPaging (true); $untaggedView -> setWantNewCommentsCount ($ue); $untaggedView -> setWantReadHrefs ($_config['count_reads']); $untaggedView -> setWantControls ($ue and !@$_config['read_only']); $untaggedView -> setWantHiddenTags ($ue); $bj = ( "FROM `". $_config['db_table_prefix']."Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished`=1 ". "AND nk.`SubsetID` IS NULL ". tm ($ue) ); $untaggedView -> setSQLCountRequest ( "SELECT COUNT(*) Total ". $bj ); $untaggedView -> setLimitlessSQLRequest ( "SELECT n.* ". $bj ." ORDER BY n.`Stamp` DESC" ); $d = [ 'title' => $_strings['pt--posts-without-tags'], 'heading' => $_strings['pt--posts-without-tags'], 'notes' => $untaggedView -> getNotesCTree (), 'pages' => $untaggedView -> getPagesCTree (), ]; if($untaggedView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-posts-without-tags']; } elseif (!$untaggedView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function e2s_tag_edit () { global$_strings,$_config; $kj = $am = $bn = $ht = ''; if(array_key_exists ('tag-id',$_POST)) $kj = $_POST['tag-id']; if(array_key_exists ('tag',$_POST)) $am = $_POST['tag']; if(array_key_exists ('page-title',$_POST)) $nj = trim ($_POST['page-title'],"\r\n"); if(array_key_exists ('description',$_POST)) $bn = trim ($_POST['description'],"\r\n"); if(array_key_exists ('summary',$_POST)) $u6 = trim ($_POST['summary'],"\r\n"); if(array_key_exists ('urlname',$_POST)) $ht = trim ($_POST['urlname'],"\r\n"); if(array_key_exists ('cache-sensitive-hash',$_POST)) { $xj = $_POST['cache-sensitive-hash']; $ej = md5 ($am . $ht); } $qt = vn ('Notes'); if(stripos($qt['Collation'],'utf8mb4')!==0){ $am = nb ($am); $nj = nb ($nj); $bn = nb ($bn,true); } xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = ".((int)$kj)."", 'get tag record to update' ); $rj = en (); if(count ($rj)!=1) die; $q2 = $rj[0]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword` = '". rn ($am) ."' ". "AND (`ID` != ".((int)$kj).")", 'make sure new tag name does not conflict with existing ones' ); $rj = en (); if(count ($rj)==0){ if ($ej != $xj){ ds (); } e2_drop_caches_for_tag_($kj); $q2['ID'] = ((int)$kj); $q2['Keyword']=$am; $q2['PageTitle']=$nj; $q2['Description']=$bn; $q2['Summary']=$u6; $gs = g3 ( 'neasden',$q2['Description'],'full' ); if(count ($gs)>0){ eb ($gs); rb ($gs); } nn ('Keywords',$q2); $i7 = cm ( 'set','t',$q2['ID'],$ht ); c (jv ('e2m_tag', array ('tag-alias' => $i7))); } else { mv ($_strings['er--cannot-rename-tag'],E2E_USER_ERROR); v (); } die; } function e2s_tag_delete () { global$_strings,$_config; $kj = ((int)$_POST['tag-id']); ds (); e2_drop_caches_for_tag_($kj); xn ( "DELETE FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $kj, 'delete note by ID' ); xn ( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 't' ". "AND `EntityID` = ". ((int)$kj), 'delete aliases after deleting note' ); xn ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID`=". $kj, 'delete tag bindings after deleting tag' ); c (jv ('e2m_tags')); } function vf ($tj){ global$_current_tags,$_config; $jj = null; if(CACHE_FAVTAGS and is_file (CACHE_FILENAME_FAVTAGS)) { $jj = @unserialize (file_get_contents (CACHE_FILENAME_FAVTAGS)); } if (!is_array ($jj)) { try { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsFavourite`=1 ORDER BY `Keyword`", 'get favorite tags for tags menu' ); $hj = en (); $jj = array (); foreach ($hj as $q2){ $gj['tag']=htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC); $gj['href']=jv ( 'e2m_tag', array ('*tag' => $q2) ); $gj['visible?'] = (bool)$q2['IsVisible']; $jj[] = $gj; } if(CACHE_FAVTAGS)n3 (CACHE_FILENAME_FAVTAGS,serialize ($jj)); } catch (AeMySQLException $e){ kv ($e); if(Log::$vy)__log ('Count not get tags menu from database'); } } if (!is_array ($jj)) return null; $wj = false; if (!empty ($_current_tags)) { foreach ($jj as $t => $xf){ $jj[$t]['current?']=in_array ($jj[$t]['tag'],$_current_tags); if ($jj[$t]['current?']) { $wj = true; $uj = $tj; $uj['flag']='IsFavourite'; $uj['value']=0; if (k2 ()) { $jj[$t]['pinnable?']=true; $jj[$t]['pinned?']=true; $jj[$t]['pinned-toggle-href'] = ( jv ('e2m_tag_flag_ajax',$uj) ); } } } } if (k2 ()) { if (!$wj and array_key_exists ('*tag',$tj)) { $ij = $tj; $ij['flag']='IsFavourite'; $ij['value']=1; $oj = [ 'tag' => htmlspecialchars ($tj['*tag']['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv ('e2m_tag',$tj), 'visible?' => (bool)$tj['*tag']['IsVisible'], 'current?' => true, 'pinnable?' => true, 'pinned?' => false, 'pinned-toggle-href' => jv ('e2m_tag_flag_ajax',$ij), ]; $jj[] = $oj; } } return $jj; } function bf ($sx){ global$_config; $s2 = array (); xn ( "SELECT k.* ". "FROM `". $_config['db_table_prefix']."Keywords` k, ". "`". $_config['db_table_prefix']."NotesKeywords` nk ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID`=". ((int)$sx) ." ". "AND k.`ID`=nk.`KeywordID` ". "ORDER BY `Keyword`", 'get tag records for note by id' ); $s2 = en (); return $s2; } function yf ($pj){ global$_config; $ch = array (); foreach (array ( 'ID', 'NoteID', 'KeywordID', ) as $uz) if(array_key_exists ($uz,$pj)) { $wz[] = '`'. $uz .'`'."='". rn ($pj[$uz]) ."'"; if ($uz == 'ID')$vh = 'tagbinging-id'; if ($uz == 'NoteID')$vh = 'tagbinging-note-id'; if ($uz == 'KeywordID')$vh = 'tagbinging-tag-id'; $ch[$vh]=$pj[$uz]; } $bf = ( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND ". implode (' AND ',$wz) ); xn ($bf); } function nf ($kj,$bh){ global$_config; xn ( "SELECT `ID`, `Keyword`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] ."Keywords` k ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND k.`ID` IN (". "SELECT `KeywordID` FROM (". "SELECT COUNT(`NoteID`) NotesCount, `KeywordID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID` IN (". "SELECT nk2.`NoteID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk2 ". "WHERE nk2.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk2.`KeywordID`=". $kj. ") ". "GROUP BY nk.`KeywordID` ". "HAVING NotesCount > 1 ". "ORDER BY NotesCount DESC ". "LIMIT 1, ". $bh. ") k_ids". ")", 'find related tags' ); $yj = []; foreach (en () as $q2){ if ($q2['ID']===$kj) continue; $yj[] = [ 'name' => htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv ('e2m_tag', array ('*tag' => $q2)), 'visible?' => true, ]; } return $yj; } function mf ($am){ @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_FULL); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_TAGS_AUTHOR_FULL); un (true); $q2 = array ( 'Keyword' => $am, 'OriginalAlias' => cm ('find','','',$am), 'Description' => '', ); $q2 = yn ('Keywords',$q2); $yh = cm ( 'set','t',$q2['ID'],$am ); if ($yh != $q2['OriginalAlias']) { $q2['OriginalAlias']=$yh; nn ('Keywords',$q2); } return $q2['ID']; } function ff ($parameters){ if (($nh = df ()) === null) return []; $ze['each']=$nh; if(count ($ze['each']) > 0){ $ze['href']=jv ('e2m_tags'); } if (($mh = vf ($parameters)) !== null){ $ze['menu-each']=$mh; } return $ze; } function df ($fh = false){ global$_config; $ue = k2 (); $ot = CACHE_FILENAME_TAGS; if ($ue)$ot = CACHE_FILENAME_TAGS_AUTHOR; if ($fh){ $ot = CACHE_FILENAME_TAGS_FULL; if ($ue)$ot = CACHE_FILENAME_TAGS_AUTHOR_FULL; } $dh = null; if(CACHE_TAGS and is_file ($ot)) { $dh = @unserialize (file_get_contents ($ot)); } if (!is_array ($dh)) { try { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY `Keyword`", 'get all tags' ); $sh = array (); foreach (en () as $q2){ $am['id'] = (int)$q2['ID']; $am['tag']=htmlspecialchars ($q2['Keyword'],ENT_NOQUOTES,HSC_ENC); $am['favourite?'] = (bool)$q2['IsFavourite']; $am['visible?'] = (bool)$q2['IsVisible']; $am['notes-count']=0; $am['last-used']=0; $am['freshness']=0; $am['weight']=0; if ($fh){ $am['href']=jv ('e2m_tag', array ('*tag' => $q2)); } $sh[$q2['ID']] = $am; } xn ( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix']."NotesKeywords` nk, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". tm ($ue). "AND nk.`NoteID` = n.`ID` ". "GROUP BY nk.KeywordID", 'get tags ordering info' ); $ah = 0; $qh = 0; $lh = 0; foreach (en () as $zh){ $gj =& $sh[$zh['KeywordID']]; $gj['notes-count']=$zh['Count']; if (@$gj['last-used']<$zh['LastUsed']) { $gj['last-used']=$zh['LastUsed']; $kh = (time () - $gj['last-used']) / SECONDS_IN_A_YEAR; $gj['freshness']=pow (1/2,$kh); } $ah = max ($ah,$gj['notes-count']); $qh = max ($qh,$gj['freshness']); $lh = max ($lh,$gj['notes-count']*$gj['freshness']); } $dh = array (); foreach ($sh as $r => $xf){ if (!$ue and $xf['notes-count']==0) continue; $xh = mb_strtolower ($xf['tag']); $dh[$xh]=$xf; if ($qh != 0){ $dh[$xh]['freshness']=$xf['freshness']/$qh; } else { $dh[$xh]['freshness']=0; } if ($lh != 0){ $dh[$xh]['weight'] = ( $xf['freshness']*$xf['notes-count']/$lh ); } else { $dh[$xh]['weight']=0; } if ($dh[$xh]['favourite?'])$dh[$xh]['weight']=1; } if(CACHE_TAGS)n3 ($ot,serialize ($dh)); } catch (AeMySQLException $e){ kv ($e); if(Log::$vy)__log ('Could not get tags from database'); } } return $dh; } function sf ($cr){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". rn ($cr) ."'", 'get tag by name' ); $t = en (); if (isset ($t[0])) { return $t[0]; } else { return null; } } function af ($eh){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias`='".rn ($eh)."'", 'get tag by legacy urlname name' ); $ob = en (); if (isset ($ob[0])) { return $ob[0]; } else { return null; } } function qf ($xs){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`='".((int)$xs)."'", 'get tag by id' ); $ob = en (); if (isset ($ob[0])) { return $ob[0]; } else { return null; } } function e2_tagrecs_with_parameters_($parameters){ $rh = array (); if (@$parameters['tag-alias'] or $parameters['tag-alias']==='0'){ $rh = explode (',',$parameters['tag-alias']); } $s2 = array (); foreach ($rh as $eh) if ($eh or $eh === '0'){ if ( $bt = pn (@$eh) and ($bt['type']=='t') and ($q2 = qf ($bt['id'])) ) { $s2[] = $q2; } else { if ($th = af ($eh)) { $s2[] = $th; } } } return $s2; } function zf () { global$full_blog_url; static $jh; $rm = w2 (); if (empty ($jh)) { $jh = md5 ($full_blog_url .'email'. $rm); } return $jh; } function kf () { global$full_blog_url; static $hh; $rm = w2 (); if (empty ($hh)) { $hh = md5 ($full_blog_url .'nospam'. $rm . date ('n-Y')); } return $hh; } function xf () { global$full_blog_url; static $gh; $rm = w2 (); if(empty($gh)) { $gh = md5 ($full_blog_url .'nospam'. $rm . date ('n-Y',strtotime('-1 month'))); } return $gh; } function ef ($sx){ global$full_blog_url; $rm = w2 (); return b ('comment_'. md5 ($full_blog_url .'nospam_cookie'. $rm . $sx)); } function rf () { global$full_blog_url; $wh = $_SERVER['HTTP_USER_AGENT']; $rm = w2 (); return md5 ($full_blog_url .'nospam_cookie'. $rm . $wh); } function tf () { if ( array_key_exists ('email',$_POST) and $_POST['email']!=='' ) return true; $hh = kf (); $gh = xf (); if ( !array_key_exists ($hh,$_POST) and !array_key_exists ($gh,$_POST) ) return true; if ( ( array_key_exists ($hh,$_POST) and $_POST[$hh]!=='' ) or ( array_key_exists ($gh,$_POST) and $_POST[$gh]!=='' ) ) return true; if ( !array_key_exists ('comment',$_POST) or (strlen ($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($sx){ if ( !array_key_exists (ef ($sx),$_COOKIE) or ($_COOKIE[ef ($sx)] !== rf ()) ) return true; return false; } function e2m_comment ($parameters = array ()) { c (jv ('e2m_note',$parameters)); } function e2m_comment_edit ($parameters = array ()) { return hf ('edit',$parameters); } function hf ($h6,$parameters = array ()) { global$_config,$_strings,$full_blog_url; $t6 = $g6 = $_strings['pt--new-comment']; $uh = 'new'; if ($h6 == 'edit'){ $q6 = e2_commentrec_with_parameters_($parameters); $mr = $_strings['fb--save-changes']; $n2 = $q6['noterec']; $t6 = $g6 = $_strings['pt--edit-comment']; $ih = wf ($n2,$q6,$parameters['comment-number']); if (!$q6){ return e2_error404_mode (); } $oh = array ( '.note-id' => $q6['NoteID'], '.comment-id' => $q6['ID'], '.comment-number' => $parameters['comment-number'], '.already-subscribed?' => false, '.gip' => $q6['GIP'], 'create:edit?' => false, 'form-action' => jv ('e2s_comment_process'), 'submit-text' => $mr, 'show-subscribe?' => true, 'subscribe?' => (bool)$q6['IsSubscriber'], 'name' => htmlspecialchars ($q6['AuthorName'],ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars ($q6['AuthorEmail'],ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars ($q6['Text'],ENT_COMPAT,HSC_ENC), 'email-field-name' => zf (), ); if ('' != trim ($q6['IP'])) { $oh['ip']=$q6['IP']; } } $d = array ( 'title' => $t6, 'heading' => $g6, 'form' => 'form-comment', 'form-comment' => $oh, ); if (!empty ($ih)) { $d['comments'] = array ('each' => array ('only' => $ih)); } return $d; } function e2m_comment_reply ($parameters = array ()) { global$_strings; $q6 = e2_commentrec_with_parameters_($parameters); if (!$q6){ return e2_error404_mode (); } $n2 = $q6['noterec']; $ih = wf ($n2,$q6,$parameters['comment-number']); $ih['replying?'] = (bool)true; $ph = ($q6['Reply']=='' or !$q6['IsReplyVisible']); $t6 = $ph? $_strings['pt--reply-to-comment']:$_strings['pt--edit-reply-to-comment']; $c8 = array ( '.note-id' => $n2['ID'], '.comment-id' => $q6['ID'], '.reply-action' => $ph? 'new' : 'edit', 'form-action' => jv ('e2s_comment_edit_reply'), 'submit-text' => $ph? $_strings['fb--publish']:$_strings['fb--save-changes'], 'create:edit?' => (bool) ($ph), 'reply-text' => htmlspecialchars ($q6['Reply'],ENT_COMPAT,HSC_ENC), 'emailing-possible?' => MAIL_ENABLED, 'mail-back?' => (bool) ($ph), ); return array ( 'title' => $t6, 'heading' => $t6, 'comments' => array ('each' => array ('only' => $ih)), 'form' => 'form-comment-reply', 'form-comment-reply' => $c8, ); } function e2m_comment_delete ($parameters = array ()) { global$_config; $q6 = e2_commentrec_with_parameters_($parameters); $sx = $q6['NoteID']; if (!$q6){ return e2_error404_mode (); } e2_drop_caches_for_note_($sx,true); @unlink (USER_FOLDER. '/last-comment.psa'); xn ( "DELETE FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$q6['ID']). "'" ); v (); } function e2m_comment_reply_delete ($parameters = array ()) { global$_strings,$settings,$_config; $q6 = e2_commentrec_with_parameters_($parameters); if (!$q6){ return e2_error404_mode (); } xn ( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$q6['ID']) ); v (); } function e2m_unsubscribe ($parameters){ global$_strings,$_config; $v8 = "ORDER BY `ID` DESC"; $b8 = false; $n2 = $parameters['*note']; $sx = $n2['ID']; $k3 = $parameters['unsubscribe-email']; $y8 = $parameters['unsubscribe-key']; $k3 = str_replace (' ','+',$k3); if ($sx){ xn ( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $sx ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`='". $k3 ."' ". $v8, 'get subscriber’s comments ids' ); $q1 = en (); if(count ($q1)<1) { $d['unsubscribe']['error-message']=$_strings['gs--you-are-not-subscribed']; } else { $l6 = @$q1[0]; $n8 = md5 ($l6['ID'].$l6['Stamp'] .'x'); if ($y8 == $n8){ xn ( "UPDATE `". $_config['db_table_prefix']."Comments` ". "SET `IsSubscriber`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $sx ." ". "AND `AuthorEmail` = '". rn ($k3). "'", 'unsubscribe' ); $b8 = true; $d['unsubscribe']['note-title']=h3 ( htmlspecialchars ($n2['Title'],ENT_COMPAT,HSC_ENC) ); $d['unsubscribe']['note-href']=jv ( 'e2m_note', array ('*note' => $n2) ); } if (!$b8){ $d['unsubscribe']['error-message']=$_strings['gs--unsubscription-didnt-work']; } } } else { $d['unsubscribe']['error-message']=$_strings['gs--post-not-found']; } if ($b8){ $t6 = $_strings['pt--unsubscription-done']; } else { $t6 = $_strings['pt--unsubscription-failed']; } $d['unsubscribe']['success?']=$b8; $d['title']=$t6; $d['heading']=$t6; return $d; } function e2m_comment_flag ($parameters){ gf ($parameters); c (jv ('e2m_note',$parameters)); } function e2m_comment_flag_ajax ($parameters){ s ([ 'flag-name' => 'comment', 'candy-name' => 'e2m_comment_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ gf ($parameters); }, ]); } function gf ($parameters){ $q6 = e2_commentrec_with_parameters_($parameters); $sx = $q6['NoteID']; if ($q6){ nn ('Comments', array ( 'ID' => $q6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); e2_drop_caches_for_note_($sx,true); } } function e2s_comment_process () { global$_strings,$_fp_error; list ($sx,$uh,$m8)=f2 (); if(Log::$vy)__log ('Comments: processed, noteid <'. $sx .'>, commentid <'. $uh .'>'); if (!$uh){ $f8 = ''; if($_fp_error == FP_NOT_COMMENTABLE){ mv ($_strings['er--post-not-commentable'],E2E_USER_ERROR); } elseif($_fp_error == FP_EMPTY_FIELD){ mv ($_strings['er--name-email-text-required'],E2E_USER_ERROR); } elseif($_fp_error == FP_COMMENT_TOO_LONG){ $d8 = $_strings['gs--comment-too-long']; $f8 = $_strings['gs--comment-too-long-description']; } elseif($_fp_error == FP_COMMENT_DOUBLE_POST){ $d8 = $_strings['gs--comment-double-post']; $f8 = $_strings['gs--comment-double-post-description']; } elseif($_fp_error == FP_COMMENT_SPAM_SUSPECT){ $d8 = $_strings['gs--comment-spam-suspect']; $f8 = $_strings['gs--comment-spam-suspect-description']; } elseif($_fp_error == FP_NO_ID_OR_NEW){ mv ($_strings['er--error-occurred'].' (FP_NO_ID_OR_NEW)'); } else { mv ($_strings['er--error-occurred'].' (FP '. $_fp_error .')'); } if ($f8){ $d['title']=$d8; $d['heading']=$d8; $d['form']='form-unaccepted-comment'; $d['form-unaccepted-comment'] = array ( 'reason' => $f8, 'text' => @htmlspecialchars ($m8['text'],ENT_COMPAT,HSC_ENC), ); return $d; } } if ($sx){ c (jv ('e2m_note', array ('*note' => mm ($sx)))); } else { c (); } die; } function e2s_comment_edit_reply () { global$_strings,$v,$_config; $s8 = @$_POST['text']; if(trim ($s8)=='')$s8 = ''; $sx = @$_POST['note-id']; $n2 = mm ($sx); $uh = @$_POST['comment-id']; $q6 = uf ($uh); $a8 = isset ($_POST['mail-back']); $q8 = time (); if (@$_POST['reply-action']=='new'){ $l8 = time (); } @unlink (e2_note_cache_filename_with_id_($sx .'-comments')); @unlink (e2_note_cache_filename_with_id_($sx .'-comments-author')); if ($q6){ xn ( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='". rn ($s8) ."', ". ( isset ($l8)? ( "`ReplyStamp`='". $l8 ."', " ) : ( "" ) ). "`ReplyLastModified`='". $q8 ."', ". "`IsReplyVisible`='1' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$uh), 'update comment reply' ); $oe = jv ('e2m_note', array ('*note' => $n2)); if ($a8 and $s8 != ''){ $gj['comment-time'] = array ($q6['Stamp'],ay ()); $gj['commenter']=$q6['AuthorName']; $gj['commenter-email']=$q6['AuthorEmail']; $gj['comment-text']=$q6['Text']; $gj['note-title']=h3 ($n2['Title']); $gj['reply-time'] = array (time (), ay ()); $gj['blog-author']=vd (); $gj['note-href']=$oe; $gj['comment-href']=$oe; $gj['reply-text']=$s8; if(1){ $z8 = f1 ( 'comment-reply',$gj ); $k8 = e2l_get_string ( 'em--comment-reply', $gj ); $x8 = $q6['AuthorEmail']; $e8 = 'From: '. d1 (); s1 ($x8,$k8,$z8,$e8); } if(1){ unset ($gj['commenter-email']); $e8 = 'From: '. d1 (); foreach (y2 ($n2,$q6['AuthorEmail']) as $r8){ $t8 = $r8['AuthorEmail']; $j8 = md5 ($r8['ID'].$r8['Stamp'].'x'); $gj['unsubscribe-href']=jv ('e2m_unsubscribe', array ( '*note' => $n2, 'unsubscribe-email' => $t8, 'unsubscribe-key' => $j8, ) ); $x8 = $t8; $z8 = f1 ('comment-reply-to-public',$gj); $k8 = e2l_get_string ( 'em--comment-reply-to-public-subject', $gj ); s1 ($x8,$k8,$z8,$e8); } } } c ($oe); } else { v (); } die; } function wf ($n2,$l6,$uv){ global$_config,$full_blog_url; if(Log::$vy)__log ('Package comment '. $l6['ID'] .'...'); if ($n2 === null){ $n2 = mm ($l6['NoteID']); } $gj['number']=$uv; $h8 = !empty ($l6['IsGIPUsed']); $gj['gip-used?']=$h8; $gj['gip']=$gj['gip-used?']?$l6['GIP']:''; $gj['name']=htmlspecialchars ($l6['AuthorName'],ENT_NOQUOTES,HSC_ENC); $gj['userpic-set?']=false; if ($h8){ $g8 = AVATARS_FOLDER . $l6['GIP'] .'-'. $l6['GIPAuthorID'] .'.jpg'; if(is_file (MEDIA_ROOT_FOLDER . $g8)) { $gj['userpic-set?']=true; $gj['userpic-href']=$full_blog_url .'/'. $g8; } } $gj['name-href']=''; if ( $h8 and $w8 = e2_get_user_profile_url ($l6['GIP'],$l6['GIPAuthorID'],$l6['AuthorProfileLink']) ) { $gj['name-href']=$w8; } if (k2 ()) { $gj['email']=htmlspecialchars ($l6['AuthorEmail'],ENT_NOQUOTES,HSC_ENC); if ('' != trim ($l6['IP'])) { $gj['ip']=$l6['IP']; } } $gj['author-name']=vd (); $gj['important?'] = (bool)$l6['IsFavourite']; $gj['reply-visible?'] = (bool) ($l6['IsVisible'] && $l6['IsReplyVisible']); $gj['reply-important?'] = (bool)$l6['IsReplyFavourite']; $gj['spam-suspect?'] = (bool)$l6['IsSpamSuspect']; $u8 = array ((int)$l6['Stamp'],dy ($n2)); $gj['time']=$u8; $gj['last-modified']=$u8; if ($l6['LastModified']) $gj['last-modified'] = array ((int)$l6['LastModified'],dy ($n2)); if ($l6['ReplyStamp']) $gj['reply-time'] = array ((int)$l6['ReplyStamp'],dy ($n2)); if ($l6['ReplyLastModified']) $gj['reply-last-modified'] = array ((int)$l6['ReplyLastModified'],dy ($n2)); if (k2 ()) { $gj['subscriber?'] = (bool)$l6['IsSubscriber']; $gj['new?'] = (bool)$l6['IsNew']; $gj['first-new?']=false; if (!@$_config['read_only']) { if ($l6['IsFavourite']) { $gj['important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ('*note' => $n2,'comment-number' => $uv,'flag' => 'IsFavourite','value' => 0) ); } else { $gj['important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ('*note' => $n2,'comment-number' => $uv,'flag' => 'IsFavourite','value' => 1) ); } if ($l6['IsReplyFavourite']) { $gj['reply-important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv,'flag' => 'IsReplyFavourite','value' => 0 ) ); } else { $gj['reply-important-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv,'flag' => 'IsReplyFavourite','value' => 1 ) ); } $gj['edit-href']=jv ( 'e2m_comment_edit', array ('*note' => $n2,'comment-number' => $uv) ); $gj['removed-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv, 'flag' => 'IsVisible','value' => !$l6['IsVisible'] ) ); $gj['removed-reply-toggle-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv, 'flag' => 'IsReplyVisible','value' => !$l6['IsVisible'] ) ); $gj['removed-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv, 'flag' => 'IsVisible','value' => 0 ) ); $gj['removed-reply-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv, 'flag' => 'IsReplyVisible','value' => 0 ) ); $gj['replaced-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv, 'flag' => 'IsVisible','value' => 1 ) ); $gj['replaced-reply-href']=jv ( 'e2m_comment_flag_ajax', array ( '*note' => $n2,'comment-number' => $uv, 'flag' => 'IsReplyVisible','value' => 1 ) ); $i8 = jv ( 'e2m_comment_reply', array ('*note' => $n2,'comment-number' => $uv) ); if ($l6['Reply']=='' or !$l6['IsReplyVisible']) { $gj['reply-href']=$i8; } else { $gj['edit-reply-href']=$i8; } } } if(mb_strlen ($l6['Text']) > $_config['max_comment_length']) { $l6['Text']=mb_substr ($l6['Text'],0,$_config['max_comment_length']); } $o8 = $n2['FormatterID']==='raw' ? 'neasden' : $n2['FormatterID']; $z1 = u3 ($o8,$l6['Text'],'simple'); $gj['text']=$z1['text-final']; $gj['reply']=''; $gj['replying?'] = (bool)false; $gj['replied?'] = (bool) ( (trim ($l6['Reply']) != '') && ($l6['IsReplyVisible']) ); if ((string)$l6['Reply']!==''){ $z1 = u3 ($n2['FormatterID'],$l6['Reply'],'full'); $gj['reply']=$z1['text-final']; } if(Log::$vy)__log ('Comments: done'); return $gj; } function uf ($xs){ global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $xs ."'" ); $ob = en (); if(count ($ob)>0){ return $ob[0]; } else { return false; } } function if_ ($cl){ global$_strings,$settings; $p8 = @$_COOKIE[b ('commenter_name')]; $cg = @$_COOKIE[b ('commenter_email')]; $vg = @$_COOKIE[b ('commenter_ph')]; $bg = false; if ($cg and $vg){ foreach (y2 ($cl) as $r8){ $n8 = md5 ($r8['ID'].$r8['Stamp'] .'x'); if ( $r8['AuthorEmail']==$cg and $vg == $n8 ) { $bg = true; break; } } } $mr = $_strings['fb--submit']; $hh = kf (); $oh = array ( '.note-id' => $cl['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool)$bg, 'cookie-name' => ef ($cl['ID']), 'cookie-value' => rf (), 'email-field-name' => zf (), 'nospam-field-name-part-1' => substr ($hh,0,4), 'nospam-field-name-part-2' => substr ($hh,4), 'create:edit?' => true, 'form-action' => jv ('e2s_comment_process'), 'submit-text' => $mr, 'show-subscribe?' => (bool) !$bg, 'emailing-possible?' => MAIL_ENABLED, 'subscribe?' => (bool)$bg, 'subscription-status' => $bg? $_strings['gs--you-are-already-subscribed']:'', 'name' => htmlspecialchars ($p8,ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars ($cg,ENT_COMPAT,HSC_ENC), 'text' => '', 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => array (), ); $yg = false; $ng = ''; foreach(e2_list_gips () as $mg){ if (!is_file (SYSTEM_FOLDER .'gips/'. $mg .'.json')) { continue; } $fg = e2_is_logged_in ($mg); $oh['gips'][$mg] = ( e2_get_gip_auth_url ($mg) ); if ($fg){ $yg = true; $dg = e2_get_gip_session ($mg); $ng = $dg['GIP']; $oh['name']=htmlspecialchars ( $dg['AuthorName'],ENT_COMPAT,HSC_ENC ); } } if (!$oh['email-comments-enabled?'] and !count ($oh['gips'])) { return false; } $oh['email-comments-only?'] = (count ($oh['gips']) === 0); $oh['logged-in?']=$yg; $oh['logged-in-gip']=$ng; $oh['logout-url']=$yg ? jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $oh; } function of ($sx){ return c2 ($sx,'`IsNew` = 1'); } function pf ($sx){ return c2 ($sx,'`IsVisible` = 1'); } function c2 ($sx,$b){ global$_config; if (!is_numeric ($sx)) return 0; $sg = 0; xn ( "SELECT count(*) ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $sx ." ". "AND (". $b. ")", 'count comments' ); $q1 = en (); $q1 = (int)$q1[0]['count(*)']; $sg = $q1; return (int)$sg; } function v2 () { global$_config; if(Log::$vy)__log ('Count new comments'); $ag = 0; $qg = ''; $tq = ''; try { xn ( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsNew`=1 ORDER BY `Stamp`", 'count new comments for author menu' ); $q1 = en (); $ag = count ($q1); if ($ag){ $sx = $q1[0]['NoteID']; $tq = jv ( 'e2m_note', array ('*note' => mm ($sx)) ); } } catch (AeMySQLException $e){ kv ($e); if(Log::$vy)__log ('Could not count new comments or provide link to the latest one'); } return array ((int)$ag,$qg,$tq); } function b2 ($sx){ global$_config; if(Log::$vy)__log ('Comments: getting comments for note '. $sx); xn ( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$sx . " ". "ORDER BY `Stamp`", 'get comments including deleted' ); $q1 = en (); return $q1; } function y2 ($n2,$lg = ''){ global$_config; $v8 = "ORDER BY `ID` DESC"; $d = $zg = []; xn ( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `IsVisible`, ". "`AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$n2['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `IsVisible`=1 ". "AND `AuthorEmail`!='". rn ($lg) ."' ". $v8, 'get subscribers by note' ); $q1 = en (); foreach ($q1 as $r8){ if (!in_array ($r8['AuthorEmail'],$zg)) { $d[] = $r8; } $zg[] = $r8['AuthorEmail']; } return $d; } function n2 ($n2,$pr = NOTE_COMMENTABLE_NOW){ global$settings,$_config; $kg = true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($n2['Stamp']<time () - $_config['comment_freshness_days']*SECONDS_IN_A_DAY) $kg = false; $xg = $n2['IsCommentable']; if ($pr == NOTE_COMMENTABLE_NOW_CONDITIONALLY){ $xg = true; } return ( rm ($n2)==='public' and $kg and $xg ); } function e2_commentrec_with_parameters_($parameters = array ()) { $n2 = $parameters['*note']; $s6 = b2 ($n2['ID']); $q6 = @$s6[$parameters['comment-number']-1]; if ($q6){ $q6['noterec']=$n2; return $q6; } } function f2 () { global$settings,$_config,$_fp_error; $_fp_error = false; $jh = zf (); $sx = $uh = $name = $k3 = $jv = ''; if(array_key_exists ('note-id',$_POST)) $sx = trim (@$_POST['note-id']); if(array_key_exists ('comment-id',$_POST)) $uh = trim (@$_POST['comment-id']); if(array_key_exists ('comment-number',$_POST)) $uv = trim (@$_POST['comment-number']); if(array_key_exists ('name',$_POST)) $name = trim (@$_POST['name']); if(array_key_exists ($jh,$_POST)) $k3 = trim (@$_POST[$jh]); if(array_key_exists ('text',$_POST)) $jv = trim (@$_POST['text']); $eg = vn ('Comments'); if(stripos ($eg['Collation'],'utf8mb4')!==0){ $name = nb ($name); $jv = nb ($jv); } if ($uh == 'new'){ $rg = e2_get_logged_gip_name (); if ($rg){ $dg = e2_get_gip_session ($rg); $name = trim ($dg['AuthorName']); $k3 = ''; $tg = $dg['GIPAuthorID']; } } else { if(array_key_exists ('gip',$_POST))$rg = trim (@$_POST['gip']); } $jg = ( (array_key_exists ('already-subscribed',$_POST) and $_POST['already-subscribed']) or (array_key_exists ('subscribe',$_POST) and $_POST['subscribe']) ); $hg = time (); $m8['text']=$jv; if ($uh == 'new' and !$rg){ y ('commenter_name',$name); y ('commenter_email',$k3); } $gg = ($uh == 'new' and ( tf () or e2_cookie_data_is_spam_suspicios_for_note_id_($sx) )); $wg = 1; $q1 = false; if (!is_numeric ($sx)) { $_fp_error = FP_NO_ID_OR_NEW; } elseif (!is_numeric ($uh) and !($uh == 'new')) { $_fp_error = FP_NO_ID_OR_NEW; } else { if ( $jv == '' or ( !$rg and ($name == '' or $k3 == '') ) ) { $_fp_error = FP_EMPTY_FIELD; } if ($uh == 'new'){ $ug = @unserialize (file_get_contents (USER_FOLDER. '/last-comment.psa')); if(md5 ($name . $k3 . $jv)==$ug['md5']) { $_fp_error = FP_COMMENT_DOUBLE_POST; } if ( isset ($_config['max_comment_length']) and strlen (@$_POST['text']) > ($_config['max_comment_length']) ) { $_fp_error = FP_COMMENT_TOO_LONG; } $n2 = mm ($sx); if ($uh == 'new' and !n2 ($n2)) { $_fp_error = FP_NOT_COMMENTABLE; } if ($gg){ $_fp_error = FP_COMMENT_SPAM_SUSPECT; } } } if (!$_fp_error){ e2_drop_caches_for_note_($sx,true); if ($uh == 'new'){ $q6 = array ( 'NoteID' => (int)$sx, 'AuthorName' => $name, 'AuthorEmail' => $k3, 'Text' => $jv, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int)$jg, 'IsSpamSuspect' => (int)$gg, 'IsNew' => (int)$wg, 'Stamp' => (int)time (), 'LastModified' => (int)time (), 'IP' => rn (q2 ()), 'IsGIPUsed' => intval (!empty ($rg) && !empty ($tg)), 'GIP' => !empty ($rg)?rn ($rg):'', 'GIPAuthorID' => !empty ($tg)?rn ($tg):'', ); $q6 = yn ('Comments',$q6); $uh = $q6['ID']; $ug = array ( 'id' => $uh, 'md5' => md5 ($name . $k3 . $jv), ); @n3 (USER_FOLDER. 'last-comment.psa',serialize ($ug)); $q1 = (int)$uh; $ig = md5 ($q6['ID'].$q6['Stamp'].'x'); y ('commenter_ph',$ig); $n2 = mm ($sx); $oe = jv ('e2m_note', array ('*note' => $n2)); $gj['comment-time'] = array ($hg,ay ()); $gj['commenter']=$name; $gj['commenter-email']=$k3; $gj['comment-text']=$jv; $gj['note-title']=$n2['Title']; $gj['note-href']=$oe; $gj['comment-href']=$oe; $gj['comments-disable-href']=jv ('e2m_note_flag', array ( '*note' => $n2, 'flag' => 'IsCommentable', 'value' => 0 )); $gj['reply-href']=jv ( 'e2m_comment_reply', array ( '*note' => $n2, 'comment-number' => $uv ) ); if (isset ($settings['author_email']) and @$settings['notifications']['new_comments']) { $z8 = f1 ( 'comment-new-to-author',$gj ); $k8 = e2l_get_string ( 'em--comment-new-to-author-subject', $gj ); $x8 = $settings['author_email']; $e8 = 'From: '. d1 () ."\r\n". 'Reply-to: '. $name .' <'. $k3 .">"; s1 ($x8,$k8,$z8,$e8); } if (!$gg){ unset ($gj['commenter-email']); $e8 = 'From: '. d1 (); foreach (y2 ($n2,$k3) as $r8){ $t8 = $r8['AuthorEmail']; $j8 = md5 ($r8['ID'].$r8['Stamp'].'x'); $gj['unsubscribe-href']=jv ('e2m_unsubscribe', array ( '*note' => $n2, 'unsubscribe-email' => $t8, 'unsubscribe-key' => $j8 ) ); $x8 = $t8; $z8 = f1 ('comment-new-to-public',$gj); $k8 = e2l_get_string ( 'em--comment-new-to-public-subject', $gj ); s1 ($x8,$k8,$z8,$e8); } } } else { $og = array ( 'ID' => $uh, 'Text' => $jv, 'IsSubscriber' => ((int)$jg), 'LastModified' => time (), ); if (!empty ($name))$og['AuthorName']=$name; if (!empty ($k3))$og['AuthorEmail']=$k3; nn ('Comments',$og); $q1 = (int)$uh; } } return array ((int)$sx,$q1,$m8); } function e2m_most_commented ($parameters = []) { global$settings,$_strings,$_config; $ue = k2 (); $mostCommentedView = new AePageableNotesView ('e2m_most_commented',$parameters); $mostCommentedView -> setPortionSize ($settings['appearance']['notes_per_page']); $mostCommentedView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $mostCommentedView -> setWantNewCommentsCount ($ue); $mostCommentedView -> setWantReadHrefs ($_config['count_reads']); $mostCommentedView -> setWantControls ($ue and !@$_config['read_only']); $mostCommentedView -> setWantHiddenTags ($ue); $pg = $_config['hot_period']; $cw = time () - d2 ($_config['hot_period']); $mostCommentedView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm ($ue). "AND `ID` IN ( ". "SELECT `NoteID` FROM ( ". "SELECT `NoteID`, COUNT(*) CommentsCount ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND `Stamp` > ". $cw . " ". "GROUP BY `NoteID` ". "ORDER BY CommentsCount DESC ". ") As MostCommentedNotesIDs ". ")" ); $d = [ 'title' => e2l_get_string ('pt--most-commented', ['period' => $pg]), 'heading' => e2l_get_string ('pt--most-commented', ['period' => $pg]), 'notes' => $mostCommentedView -> getNotesCTree (), 'pages' => $mostCommentedView -> getPagesCTree (), ]; if($mostCommentedView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$mostCommentedView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function e2m_favourites ($parameters = []) { global$settings,$_config,$_strings; $ue = k2 (); $favouritesView = new AePageableNotesView ('e2m_favourites',$parameters); $favouritesView -> setPortionSize ($settings['appearance']['notes_per_page']); $favouritesView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $favouritesView -> setWantPaging (true); $favouritesView -> setWantNewCommentsCount ($ue); $favouritesView -> setWantReadHrefs ($_config['count_reads']); $favouritesView -> setWantControls ($ue and !@$_config['read_only']); $favouritesView -> setWantHiddenTags ($ue); $favouritesView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `IsFavourite`=1 ". tm ($ue). "ORDER BY `Stamp` DESC" ); $d = [ 'title' => $_strings['pt--favourites'], 'heading' => $_strings['pt--favourites'], 'notes' => $favouritesView -> getNotesCTree (), 'pages' => $favouritesView -> getPagesCTree (), ]; if($favouritesView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-favourites']; } elseif (!$favouritesView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function d2 ($pg){ if ('year' == $pg) return SECONDS_IN_A_YEAR; elseif ('month' == $pg) return SECONDS_IN_A_MONTH; elseif ('week' == $pg) return SECONDS_IN_A_DAY * 7; elseif ('day' == $pg) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function e2m_popular ($parameters = []) { global$settings,$_config,$_strings; $ue = k2 (); $popularView = new AePageableNotesView ('e2m_popular',$parameters); $popularView -> setPortionSize ($settings['appearance']['notes_per_page']); $popularView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $popularView -> setWantNewCommentsCount ($ue); $popularView -> setWantReadHrefs ($_config['count_reads']); $popularView -> setWantControls ($ue and !@$_config['read_only']); $popularView -> setWantHiddenTags ($ue); $pg = $_config['popular_period']; $cw = time () - d2 ($_config['popular_period']); $bj = ( "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND a.`Stamp` > ". $cw ." ". "AND n.`IsPublished` = 1 ". tm ($ue). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID`" ); $popularView -> setSQLCountRequest ( "SELECT COUNT(*) Total FROM (SELECT 1 ". $bj .") _" ); $popularView -> setLimitlessSQLRequest ( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". $bj ." ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC" ); $d = [ 'title' => e2l_get_string ('pt--most-read', ['period' => $pg]), 'heading' => e2l_get_string ('pt--most-read', ['period' => $pg]), 'notes' => $popularView -> getNotesCTree (), 'pages' => $popularView -> getPagesCTree (), ]; if($popularView -> isFirstPageOfEmptyView ()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$popularView -> isExistingPage ()) { return e2_error404_mode (); } return $d; } function s2 ($kj = false,$qx = []) { global$_config,$_current_url; $vw = $bw = ''; $mostReadNotesCollectionView = new AeArbitraryNotesCollectionView ('most read or most read by tag'); $mostReadNotesCollectionView -> setCurrentURL ($_current_url); $mostReadNotesCollectionView -> setFilterOutIDs ($qx); $cw = time () - d2 ($_config['popular_period']); $mostReadNotesCollectionView -> setSQLRequest ( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) `AggregateReadCount` ". "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". $vw. "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". $bw. "AND a.`Stamp` > ". $cw ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". tm (k2 ()). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, `AggregateReadCount` DESC ". "LIMIT 10" ); if ($kj === false){ if(CACHE_POPULAR){ $mostReadNotesCollectionView -> setViewExpiration (SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename (CACHE_FILENAME_POPULAR); $mostReadNotesCollectionView -> setCacheExpiresFilename (CACHE_FILENAME_POPULAR_EXPIRES); } } else { if(CACHE_POPULAR_WITH_TAG){ $mostReadNotesCollectionView -> setViewExpiration (SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename (e2_cache_filename_with_id_($kj,CACHE_FILENAMES_POPULAR_WITH_TAG)); $mostReadNotesCollectionView -> setCacheExpiresFilename ( e2_cache_filename_with_id_($kj,CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES) ); } } return$mostReadNotesCollectionView -> getNotesCTree (); } function a2 ($kj = false,$qx = []) { global$_strings; $yw = [ 'title' => $_strings['nm--most-read'], ]; $yw['each']=s2 ($kj,$qx); if ($kj){ $yw['seed']=$kj; } if(count ($yw['each']) < 7){ return []; } return $yw; } function e2m_password_reset () { global$_strings,$_superconfig,$settings; if (!is_file (USER_FOLDER. 'password-reset.psa')) { $rm = sha1 (rand ()); $sm = jv ('e2m_password', array ('recovery-key' => $rm)); @n3 (USER_FOLDER. 'password-reset.psa',$sm); } $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; $nw = (bool) ($x8 = $settings['author_email']); $d['form']='form-password-reset-email'; $d['form-password-reset-email'] = array ( 'form-action' => jv ('e2s_password_reset_email'), 'show-controls?' => $nw, 'submit-text' => $_strings['fb--send-link-by-email'], ); if (!@$_superconfig['user_has_no_access_to_files']) { $d['form-password-reset-email']['reset-info']=$_strings['gs--password-reset-link-saved']; } elseif (!$nw){ mv ($_strings['er--cannot-reset-password']); } return $d; } function e2s_password_reset_email () { global$_strings,$settings; if($_SERVER['REQUEST_METHOD']!='POST')c (); if(array_key_exists ('email',$_POST))$k3 = trim ($_POST['email']); if (!$k3){ mv ($_strings['er--cannot-send-link-email-empty']); c (jv ('e2m_password_reset')); } $mw = @file_get_contents (USER_FOLDER. 'password-reset.psa'); if(strlen ($mw)==0){ mv ($_strings['er--error-occurred']); c (jv ('e2m_password_reset')); } if ($x8 = $settings['author_email']) { if ($k3 == $x8){ $z8 = f1 ( 'password-reset', array ('reset-href' => $mw) ); $k8 = $_strings['em--password-reset-subject']; $e8 = 'From: '. d1 (); s1 ($x8,$k8,$z8,$e8); } mv ($_strings['gs--password-reset-link-sent-maybe'],E2E_MESSAGE); c (jv ('e2m_password_reset')); } die; } function e2m_password ($parameters){ global$settings,$_strings; $fw = false; $rm = ''; if(array_key_exists ('recovery-key',$parameters)) { $rm = $parameters['recovery-key']; $sm = jv ('e2m_password', array ('recovery-key' => $rm)); $mw = @file_get_contents (USER_FOLDER. 'password-reset.psa'); if(strlen ($mw)>0){ $fw = ($sm == $mw); } } if (k2 () or $fw){ $d['title']=$_strings['pt--password']; $d['heading']=$_strings['pt--password-for-blog']; if ($fw){ $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; } $d['form']='form-password'; $d['form-password'] = array ( 'form-action' => jv ('e2s_password_save'), '.recovery-key' => $rm, 'recovering?' => $fw, 'submit-text' => $_strings['fb--change'], ); return $d; } else { c (); } } function e2m_sessions () { global$settings,$_strings; $fk = x2 (); $d['title']=$_strings['pt--sessions']; $d['heading']=$_strings['pt--sessions']; $dw = array (); $rm = $_COOKIE[b ('key')]; foreach ($fk['sessions'] as $t => $xf){ $dw[] = array ( 'current?' => sha1 ($rm)===$xf['key_hash'], 'opened' => array ((int)$xf['stamp'],sy ()), 'ip-address' => $xf['remote_ip'], 'source' => ($xf['remote_ip']=='127.0.0.1')? $_strings['gs--locally']:$xf['remote_ip'], 'title' => j2 ($xf['ua']), 'user-agent' => $xf['ua']? $xf['ua']:$_strings['gs--unknown'], ); } $dw = array_reverse ($dw); $d['sessions']['each']=$dw; if(count ($dw)>1){ $d['form']='form-sessions'; $d['form-sessions'] = array ( 'form-action' => jv ('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $d; } function e2m_sign_in () { if (k2 ()) { c (jv ('e2m_frontpage', array ('page' => 1))); } else { return array (); } } function e2m_sign_out () { global$_strings; $fk = x2 (); $sw = -1; if(array_key_exists ('sessions',$fk) and is_array ($fk['sessions'])) { foreach ($fk['sessions'] as $t => $xf){ $rm = $_COOKIE[b ('key')]; if(sha1 ($rm)===$xf['key_hash']) { $sw = $t; break; } } } if ($sw > -1) unset ($fk['sessions'][$sw]); if (!e2_ ($fk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } y ('key',''); c (); } function e2s_password_save () { global$settings,$_strings; $fw = false; $aw = trim ($_POST['old-password']); if ($rm = trim ($_POST['recovery-key'])) { $sm = jv ('e2m_password', array ('recovery-key' => $rm)); $mw = @file_get_contents (USER_FOLDER. 'password-reset.psa'); if(strlen ($mw)>0){ $fw = ($sm == $mw); } } if (l2 ($aw) or $fw){ $mk = trim ($_POST['new-password']); if ($mk != ''){ if (@n3 (USER_FOLDER. '/password-hash.psa',serialize (sha1 ($mk)))) { @unlink (USER_FOLDER. 'password-reset.psa'); mv ($_strings['gs--password-changed'],E2E_MESSAGE); c (); } else { mv ($_strings['er--could-not-change-password'],E2E_PERMISSIONS_ERROR); c (jv ('e2m_password', array ('recovery-key' => ''))); } } else { mv ($_strings['er--no-password-entered'],E2E_USER_ERROR); c (jv ('e2m_password', array ('recovery-key' => ''))); } } else { mv ($_strings['er--wrong-password'],E2E_USER_ERROR); c (jv ('e2m_password', array ('recovery-key' => ''))); } die; } function q2 () { $wv = $_SERVER['REMOTE_ADDR']; if(array_key_exists ('HTTP_X_FORWARDED_FOR',$_SERVER)) { $wv = array_pop (explode (',',$_SERVER['HTTP_X_FORWARDED_FOR'])); } return $wv; } function e2s_sign_in () { global$_strings; $fk = x2 (); if($_SERVER['REQUEST_METHOD']=='POST'){ $qw = @$_POST['password']; $lw = @$_POST['is_public_pc']; } else { $qw = @$_GET['password']; $lw = false; } if (l2 ($qw)) { @unlink (USER_FOLDER. 'password-reset.psa'); $zw = array ( 'stamp' => time (), 'remote_ip' => q2 (), 'key_hash' => z2 ($lw), 'ua' => $_SERVER['HTTP_USER_AGENT'], ); $fk['sessions'][] = $zw; } elseif(strlen (trim ($qw)) > 0){ g2 (); mv ($_strings['er--wrong-password'],E2E_USER_ERROR); } if (!e2_ ($fk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); c (); } v (); } function e2s_drop_other_sessions () { global$_strings; $fk = x2 (); foreach ($fk['sessions'] as $t => $xf){ $rm = $_COOKIE[b ('key')]; if(sha1 ($rm)===$xf['key_hash']) { $zw = $xf; break; } } $fk['sessions'] = array ($zw); if (!e2_ ($fk)) { mv ($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } v (); die; } function l2 ($qw){ $kw = @unserialize (file_get_contents (USER_FOLDER. '/password-hash.psa')); return (sha1 ($qw)===$kw and trim ($qw)!=''); } function z2 ($xw = false){ global$settings; $rm = h2 (); $ew = sha1 ($rm); y ('key',$rm, !$xw); return $ew; } function k2 () { global $mn,$settings,$_auth_sessions; if (isset ($mn)) return $mn; $mn = false; if (isset ($_COOKIE[b ('key')])) { $rm = $_COOKIE[b ('key')]; $fk = x2 (); $rw = array (); if(array_key_exists ('sessions',$fk) and is_array ($fk['sessions'])) { foreach ($fk['sessions'] as $zw){ $rw[] = $zw['key_hash']; } $_auth_sessions['count']=count ($fk['sessions']); } if(1){ $mn = (bool)in_array (sha1 ($rm),$rw,true); } if (!$mn){ y ('key',''); } } return $mn; } function x2 () { if(is_file (USER_FOLDER . 'auth.psa')) { $fk = unserialize (@file_get_contents (USER_FOLDER . 'auth.psa')); if ($fk) return $fk; } return array (); } function e2_ ($fk){ return n3 (USER_FOLDER . 'auth.psa',serialize ($fk)); } function r2 () { if ($rm = $_COOKIE[b ('key')]) { return b ('key') .'='. $rm .""; } } function t2 () { if ($rm = $_COOKIE[b ('key')]) { return 'Cookie: '. b ('key') .'='. $rm ."\r\n"; } return "\r\n"; } function j2 ($ev){ global$_strings; if(strstr ($ev,'iPhone')) return$_strings['gs--ua-iphone']; if(strstr ($ev,'iPad')) return$_strings['gs--ua-ipad']; if(strstr ($ev,'Opera'))$d = $_strings['gs--ua-opera']; if(strstr ($ev,'Firefox'))$d = $_strings['gs--ua-firefox']; if(strstr ($ev,'Chrome'))$d = $_strings['gs--ua-chrome']; if(strstr ($ev,'Safari') and !strstr ($ev,'Chrome'))$d = $_strings['gs--ua-safari']; if (!$d)$d = $_strings['gs--ua-unknown']; if(strstr ($ev,'Macintosh')) { if ($d)$d .= ' '. $_strings['gs--ua-for-mac']; } return $d; } function e2j_check_password () { $kw = @unserialize (file_get_contents (USER_FOLDER. '/password-hash.psa')); $qw = ''; if(array_key_exists ('password',$_POST))$qw = $_POST['password']; g2 (); $kv = [ 'success' => true, 'data' => [ 'password-correct' => trim ($qw)!=='' and sha1 ($qw)===$kw ], ]; $kv = json_encode ($kv); die ($kv); } function h2 () { $tw = ''; $jw = '0123456789abcdef'; for ($r = 0; $r < 40; $r++)$tw .= $jw[mt_rand (0,15)]; $tw .= time (); $tw = sha1 ($tw); return $tw; } function g2 () { if(is_file (USER_FOLDER. 'password-wait.psa')) { $hw = unserialize ( file_get_contents (USER_FOLDER. '/password-wait.psa') ); if ($hw['delay']<5){ $hw['delay'] ++; } if(time () - $hw['time']>SECONDS_IN_A_MINUTE){ $hw['delay']=0; } $hw['time']=time (); } else { $hw = array ( 'time' => time (), 'delay' => 5, ); } n3 (USER_FOLDER . 'password-wait.psa',serialize ($hw)); sleep ($hw['delay']); } function w2 () { static $gw; if(empty($gw))$gw = md5 ('seсret'); return $gw; } function u2 ($x){ $rm = w2 (); $ww = strlen ($rm); $uw = strlen ($x); $d = ''; for ($r = 0; $r < $uw + rand (16,64); ++ $r){ if ($r > $uw){ $iw = rand (0,127); } elseif ($r == $uw){ $iw = 0; } else { $iw = ord ($x[$r]); } $ow = chr (($iw + ord ($rm[$r%$ww])) % 256); $d .= $ow; } $d = base64_encode ($d); return $d; } function i2 ($x){ $rm = w2 (); $ww = strlen ($rm); $x = base64_decode ($x); $uw = strlen ($x); $d = ''; for ($r = 0; $r < $uw; ++ $r){ $pw = (ord ($x[$r]) + 256 - ord ($rm[$r%$ww])) % 256; if ($pw === 0) break; $d .= chr ($pw); } return $d; } function o2 () { global$settings; if (k2 ()) { return null; } else { return [ 'form-action' => jv ('e2s_sign_in'), 'form-check-password-action' => jv ('e2j_check_password'), 'login-name' => @$settings['author'], 'public-pc?' => false, 'reset-href' => jv ('e2m_password_reset'), ]; } } $_candies_installer = array ( 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', 'e2s_update_perform', ); $_candies_public = array ( 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_tags', 'e2m_tag', 'e2m_untagged', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_sitemap_xml', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_retrieve', 'e2s_notify', 'e2s_dump', ); $_candies_to_disallow_in_read_only = array ( 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2m_note_flag_favourite', 'e2m_note_flag', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2m_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ); $_candies_public = array_merge ($_candies_public,$_candies_installer); $_candies_indexable = array ( 'e2m_note', ); $_candies_indexable_conditionally = array ( 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ); $_candies_ajax = array ( 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_userpic_remove', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2m_note_flag_favourite', 'e2m_comment_flag_ajax', 'e2m_tag_flag_ajax', ); function p2 () { global$settings,$_lang,$_config,$_strings,$c; if(Log::$vy)__log ('Blog information'); $cu['author']=htmlspecialchars (vd (), ENT_NOQUOTES,HSC_ENC); if(array_key_exists ('blog_subtitle',$settings)) { $z1 = i3 ($settings['blog_subtitle'],'full'); $a3 = $z1['text-final']; $cu['subtitle']=$a3; $cu['subtitle-format-info']=$z1['meta']; va (@$z1['meta']['links-required']); } $cu['title']=htmlspecialchars (cd (), ENT_NOQUOTES,HSC_ENC); $cu['userpic-set?']=false; $cu['userpic-changeable?']=k2 (); if ($cu['userpic-href']=bd ()) { $cu['userpic-set?']=true; $cu['userpic-large-href']=bd ('large'); $cu['userpic-square-href']=bd ('square'); $cu['userpic-changeable-href']=$cu['userpic-href']; } else { unset ($cu['userpic-href']); } if (k2 ()) { $cu['userpic-upload-action']=jv ('e2j_userpic_upload'); $cu['userpic-remove-action']=jv ('e2j_userpic_remove'); } $cu['href']=jv ('e2m_frontpage', array ('page' => 1)); $cu['rss-href']=jv ('e2m_rss'); $cu['jsonfeed-href']=jv ('e2m_json'); $cu['language']=$_lang; $cu['show-subscribe-button?']=false; $tb = array (time (), ay ()); $vu = xy ('Y',$tb[0]); $cu['now']=$tb; $bu = $vu; $yu = bs ('start'); if(array_key_exists ('stamp',$yu)) { $bu = xy ('Y',$yu['stamp']); $cu['start-time'] = array ((int)$yu['stamp'],$yu['timezone']); } $nu = false; $mu = xm (true,true); if ($mu !== null){ if (k2 ()) { $fu = xm (true,false); if ($fu !== null){ $nu = ($mu + $fu == 0); } } else { $nu = ($mu == 0); } } $cu['notes-count'] = (int)$mu; $cu['virgin?']=$nu; $du = $_config['years_range_separator']? $_config['years_range_separator']:$_strings['gs--range-separator']; $cu['years-range']=$bu . (($bu == $vu)? '':($du . $vu)); if ($c){ $cu['parent-site-href']=substr ($c, (int)strpos ('/',$c)); } return $cu; } function cd () { global$settings,$_strings; if ( array_key_exists ('blog_title',$settings) and trim ($settings['blog_title']) != '' ) { return trim ($settings['blog_title']); } else { return$_strings['e2--default-blog-title']; } } function vd () { global$settings,$_strings; if ( array_key_exists ('author',$settings) and trim ($settings['author']) != '' ) { return trim ($settings['author']); } else { return$_strings['e2--default-blog-author']; } } function bd ($size = ''){ global$full_blog_url; $su = false; if(is_file (USER_FOLDER .'userpic@2x.jpg')) { $db = USER_FOLDER .'userpic@2x.jpg'; $su = USER_FOLDER_URLPATH .'userpic@2x.jpg'; } elseif(is_file (USER_FOLDER .'userpic@2x.png')) { $db = USER_FOLDER .'userpic@2x.png'; $su = USER_FOLDER_URLPATH .'userpic@2x.png'; } if($size == 'large' and is_file (USER_FOLDER .'userpic-large@2x.jpg')) { $db = USER_FOLDER .'userpic-large@2x.jpg'; $su = USER_FOLDER_URLPATH .'userpic-large@2x.jpg'; } elseif($size == 'square' and is_file (USER_FOLDER .'userpic-square@2x.jpg')) { $db = USER_FOLDER .'userpic-square@2x.jpg'; $su = USER_FOLDER_URLPATH .'userpic-square@2x.jpg'; } if ($su === false) return false; $ty = stat ($db); if ($ty['mtime'])$su .= '?'. $ty['mtime']; $su = $full_blog_url .'/'. $su; return $su; } function yd () { global$_config,$_stopwatch,$cz; $au = round (w () - $_stopwatch,3); return [ 'show?' => ($_config['display_stat'] > (int) !k2 ()), 'generation-time' => str_replace ('.',',',$au), 'peak-memory-mb' => str_replace ('.',',',round ((memory_get_peak_usage () / 1024 / 1024)*100)/100), 'db-query-count' => (int) @$cz, ]; } function e2m_info () { global$settings,$_config,$v,$c,$_template; $gv = array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (fn_ () !== null), 'server_name' => $v, 'folder_on_server' => $c, '---', 'default formatter' => $_config['default_formatter'], '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba max_image_width' => $_template['max_image_width'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr (md5 (file_get_contents ('system/neasden/neasden.php')), 0,4), '---', ); echo '<pre>'; foreach ($gv as $t => $xf){ if ($xf == '---'){ echo "\n"; continue; } echo str_pad ($t,24); echo '\''; print_r ($xf); echo '\''; echo "\n"; } echo '</pre>'; die; } function e2s_notify () { global$_config; if($_config['holborn']) { $qu = @$_GET['src']; if ($qu == ''){ if(Log::$vy)__log ('Holborn: No src URL'); die; } $lu = file_get_contents ($qu); $lu = dd ($lu); $zu = json_decode ($lu,true); if (!$zu){ if(Log::$vy)__log ('Holborn: No meaningful info from '. $qu .' ('. json_last_error () .')'); if ($ku = md ($qu)) { if(Log::$vy)__log ('Holborn: Delete note with ID '. $ku['ID']); nm ($ku['ID']); } die; } nd ($zu,$qu); } die; } function e2m_sources ($parameters){ global$_config; $xu = $_GET['ord']; if (!$xu)$xu = 'ID'; $xu = "`". rn ($xu) ."`"; xn ( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix']."Sources` " . "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY ". $xu ); $q1 = en (); foreach ($q1 as $ym){ $eu = $ym['ID']; if ($ym['ID']!=$ym['TrueID'])$eu .= '<br />'. $ym['TrueID']; $w7 = array ( 'id' => $eu, 'userpic-href' => $ym['PictureURL'], 'href' => $ym['URL'], 'href-display' => str_replace ('/','/<wbr>',$ym['URL']), 'href-filtered' => str_replace ('/','/<wbr>',$ym['_URLX']), 'title' => $ym['Title'], 'author' => $ym['AuthorName'], 'true?' => $ym['ID']==$ym['TrueID'], 'whitelisted?' => (bool)$ym['IsWhiteListed'], 'trusted?' => (bool)$ym['IsTrusted'], ); if (!$ym['IsTrusted']) { $w7['trust-url']=jv ( 'e2m_source_trust', array ('source' => $ym['ID']) ); } if ($ym['IsTrusted']) { $w7['premoderate-url']=jv ( 'e2m_source_premoderate', array ('source' => $ym['ID']) ); } $w7['ban-url']=jv ( 'e2m_source_ban', array ('source' => $ym['ID']) ); $w7['forget-url']=jv ( 'e2m_source_forget', array ('source' => $ym['ID']) ); $ru[] = $w7; } $d = array ( 'title' => 'Sources', 'heading' => 'Sources', ); if(count ($ru)) { $d['sources']=$ru; } else { $d['nothing']='No sources'; } return $d; } function e2m_source_trust ($parameters){ global$_config; $tu = $parameters['source']; xn ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $tu, 'trust source' ); xn ( "UPDATE  ". $_config['db_table_prefix']."Notes ". "SET `IsPublished`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $tu, 'publish all notes from the just trusted source' ); aa (); ds (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c (); } function e2m_source_premoderate ($parameters){ global$_config; $tu = $parameters['source']; xn ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $tu, 'distrust source, set to premoderation' ); ds (); c (); } function e2m_source_ban ($parameters){ global$_config; $tu = $parameters['source']; xn ( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $tu, 'ban source' ); xn ( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $tu, 'delete all notes from the just banned source' ); ds (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c (); } function e2m_source_forget ($parameters){ global$_config; $tu = $parameters['source']; xn ( "DELETE FROM  ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $tu, 'forget source' ); xn ( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $tu, 'delete all notes from the just forgotten source' ); ds (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c (); } function nd ($ju,$qu){ global$_config; $hu = sd (array ( 'author' => $ju['author']['name'], 'title' => $ju['title'], 'href' => $ju['author']['url'], 'userpic-href' => $ju['author']['avatar'], )); if (!$hu['IsWhiteListed']) return; if(preg_match ('/\+(\d\d)\:(\d\d)/',$ju['items'][0]['date_published'],$n3)) { $nl = $n3[1]*SECONDS_IN_AN_HOUR + $n3[2]*SECONDS_IN_A_MINUTE; } $gu = @$ju['items'][0]['_e2_data'] or $gu = array (); $gu = json_encode ($gu); $wu = $hu['IsTrusted']; $n2 = array ( 'Title' => $ju['items'][0]['title'], 'Text' => $ju['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime ($ju['items'][0]['date_published']), 'Offset' => (int)$nl, 'IsDST' => 0, 'LastModified' => strtotime ($ju['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $wu, 'IsExternal' => 1, 'SourceID' => $hu['ID'], 'SourceNoteID' => $ju['items'][0]['id'], 'SourceNoteURL' => $ju['items'][0]['url'], 'SourceNoteJSONURL' => $qu, 'SourceNoteData' => $gu, ); $sx = $ju['items'][0]['id']; if ( $ku = fd ($hu['ID'],$sx) ) { $n2['ID']=$ku['ID']; nn ('Notes',$n2); } else { $n2 = yn ('Notes',$n2); } if ($wu){ if (la ($n2)) { $n2['IsIndexed']='1'; nn ('Notes',$n2); } } e2_drop_caches_for_note_($n2['ID'],$wu); if($_config['backup_automatically']) { tn (); } } function md ($qu){ global$_config; xn ( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceNoteJSONURL`='". rn ($qu) ."' ". "LIMIT 1", 'get note ID by source JSON URL' ); $q1 = en (); return $q1[0]; } function fd ($tu,$uu){ global$_config; xn ( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`= '". $tu ."' ". "AND `SourceNoteID`= '". $uu ."' ". "LIMIT 1", 'get note ID by source ID and source note ID' ); $q1 = en (); return $q1[0]; } function dd ($lu){ for ($r = 0; $r <= 31; ++$r){ $lu = str_replace (chr ($r),'',$lu); } $lu = str_replace (chr (127),'',$lu); if(0 === strpos (bin2hex ($lu),'efbbbf')) { $lu = substr ($lu,3); } return $lu; } function sd ($iu){ global$_config; $ou = false; xn ( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `URL`= '". $iu['href'] ."' ". "LIMIT 1", 'get source record by the URL from blog info' ); $q1 = en (); if(count ($q1)) { $ou = $q1[0]; if ($ou['ID']!=$ou['TrueID']) { xn ( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`= '". $ou['TrueID'] ."' ". "LIMIT 1", 'get true source record by using the TrueID of just found record' ); $q1 = en (); if(count ($q1)) { $ou = $q1[0]; } } } $hu = array ( 'Title' => $iu['title'], 'AuthorName' => $iu['author'], 'PictureURL' => $iu['userpic-href'], ); if ($ou !== false){ if ( $ou['Title']!==$iu['title'] or $ou['AuthorName']!==$iu['author'] or $ou['PictureURL']!==$iu['userpic-href'] ) { $hu['ID']=$ou['ID']; nn ('Sources',$hu); } return $ou; } else { $hu['URL']=$iu['href']; $hu['IsWhiteListed']=1; $hu['IsTrusted']=0; $hu = yn ('Sources',$hu); $hu['TrueID']=$hu['ID']; nn ('Sources',$hu); return $hu; } } function ad ($n2){ global$_config; $gj = array (); if (@$n2['IsExternal']) { if(array_key_exists ('SourceID',$n2)) { xn ( "SELECT * FROM `". $_config['db_table_prefix']."Sources` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $n2['SourceID'] ."'", 'get source by id' ); $ob = en (); $gj['source']=$ob[0]['Title']; $gj['source-id'] = (int)$n2['SourceID']; $gj['source-true-id'] = (int)$ob[0]['TrueID']; $gj['source-whitelisted?'] = (bool)$ob[0]['IsWhiteListed']; $gj['source-trusted?'] = (bool)$ob[0]['IsTrusted']; if (!$ob[0]['IsTrusted']) { $gj['source-trust-url']=jv ( 'e2m_source_trust', array ('source' => $n2['SourceID']) ); } if ($ob[0]['IsTrusted']) { $gj['source-premoderate-url']=jv ( 'e2m_source_premoderate', array ('source' => $n2['SourceID']) ); } $gj['source-ban-url']=jv ( 'e2m_source_ban', array ('source' => $n2['SourceID']) ); $gj['source-forget-url']=jv ( 'e2m_source_forget', array ('source' => $n2['SourceID']) ); $gj['author']=$ob[0]['AuthorName']; $gj['author-href']=$ob[0]['URL']; $gj['userpic-href']=$ob[0]['PictureURL']; } if(array_key_exists ('SourceNoteURL',$n2) and @$n2['SourceNoteURL']!=''){ $gj['href-external']=$n2['SourceNoteURL']; } } return $gj; } function e2m_frontpage ($parameters = []) { global$settings,$_strings,$_config; if(Log::$vy)__log ('Frontpage {'); $ue = k2 (); $frontpageView = new AePageableNotesView ('e2m_frontpage',$parameters); $frontpageView -> setPortionSize ($settings['appearance']['notes_per_page']); $frontpageView -> setNextPrevPageTitles ($_strings['gs--earlier'],$_strings['gs--later']); $frontpageView -> setWantPaging (true); $frontpageView -> setWantNewCommentsCount ($ue); $frontpageView -> setWantReadHrefs ($_config['count_reads']); $frontpageView -> setWantControls ($ue and !@$_config['read_only']); $frontpageView -> setWantHiddenTags ($ue); $frontpageView -> setWantRelatedNotes (true); if(CACHE_FRONTPAGE and $frontpageView -> isFirstPage ()) { if ($ue){ $frontpageView -> setCacheFilename (CACHE_FILENAME_FRONTPAGE_AUTHOR); } else { $frontpageView -> setCacheFilename (CACHE_FILENAME_FRONTPAGE); } } $frontpageView -> setLimitlessSQLRequest ( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm ($ue). "ORDER BY `Stamp` DESC" ); $d = [ 'title' => cd (), 'heading' => '', 'notes' => $frontpageView -> getNotesCTree (), 'pages' => $frontpageView -> getPagesCTree (), 'frontpage?' => $frontpageView -> isFirstPage (), ]; if ( !$frontpageView -> isExistingPage () and !$frontpageView -> isFirstPageOfEmptyView () ) { return e2_error404_mode (); } if(Log::$vy)__log ('} // Frontpage'); return $d; } function e2m_json ($parameters = array ()) { list ($pu,$hg)=ed (); $lu = json_encode ($pu,E2_JSON_STYLE); hd ($lu,$hg,'json'); } function e2m_rss ($parameters = array ()) { list ($pu,$hg)=ed (); $c0 = e2feeds__rss_using_jsonfeed_array_($pu); hd ($c0,$hg,'rss'); } function e2m_tag_json ($parameters = array ()) { if(array_key_exists ('*tag',$parameters)) { $q2 = $parameters['*tag']; } else { return e2_error404_mode (); } list ($pu,$hg)=rd ($q2); $lu = json_encode ($pu,E2_JSON_STYLE); hd ($lu,$hg,'json'); } function e2m_tag_rss ($parameters = array ()) { global$settings,$_config,$_strings; if(array_key_exists ('*tag',$parameters)) { $q2 = $parameters['*tag']; } else { return e2_error404_mode (); } list ($pu,$hg)=rd ($q2); $c0 = e2feeds__rss_using_jsonfeed_array_($pu); hd ($c0,$hg,'rss'); } function e2m_note_json ($parameters = array ()) { global$settings,$_current_url; $n2 = $parameters['*note']; if ($n2 == false) return e2_error404_mode (); $ue = k2 (); if (!( rm ($n2)==='public' or ($ue and $n2['IsPublished']) )) return e2_error404_mode (); $hg = $n2['Stamp']; $v0 = e2_jsonfeed_item_array_from_noterec_($n2); $b0 = array ($v0); $pu = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($b0); $pu['title']=cd (); $pu['_rss_description']=xd (); $pu['home_page_url']=jv ('e2m_frontpage', array ('page' => 1)); $pu['feed_url']=$_current_url; hd (json_encode ($pu,E2_JSON_STYLE),$hg,'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($b0){ global$_lang,$_config,$settings; $d = [ 'version' => 'https://jsonfeed.org/version/1', 'title' => null, '_rss_description' => null, '_rss_language' => $_lang, '_itunes_email' => '', '_itunes_categories_xml' => '', '_itunes_image' => '', '_itunes_explicit' => '', 'home_page_url' => null, 'feed_url' => null, 'icon' => bd (), 'author' => array ( 'name' => vd (), 'url' => jv ('e2m_frontpage', array ('page' => 1)), 'avatar' => bd (), ), 'items' => $b0, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ]; return $d; } function e2_jsonfeed_item_array_from_noterec_($n2){ global$settings; $sm = jv ('e2m_note', array ('*note' => $n2)); $y0 = ( xy ('Y-m-d\TH:i:s',$n2['Stamp']) . gy ($n2['Stamp'],':') ); $n0 = ( xy ('Y-m-d\TH:i:s',$n2['LastModified']) . gy ($n2['LastModified'],':') ); $m0 = ( xy ('D, d M Y H:i:s ',$n2['Stamp']) . gy ($n2['Stamp']) ); $z1 = u3 ($n2['FormatterID'], @$n2['Text'],'full-rss'); $fe = d3 ( sb ( $z1['meta']['resources-detected'], q3 ('note',$n2['ID']) ) ); $eq = array ( 'id' => (string)$n2['ID'], 'url' => $sm, 'title' => h3 ($n2['Title']), 'content_html' => $z1['text-final'], 'date_published' => $y0, 'date_modified' => $n0, ); if ($n2['IsExternal']) { $d0 = ad ($n2); $eq['url']=$d0['href-external']; $eq['author'] = array ( 'name' => $d0['author'], 'url' => $d0['author-href'], 'avatar' => $d0['userpic-href'], ); } if(count ($fe)>0){ $eq['image']=$fe[0]; } $eq['_date_published_rfc2822']=$m0; $eq['_rss_guid_is_permalink']='false'; $eq['_rss_guid'] = (string)$n2['ID']; $eq['_e2_data'] = array ( 'is_favourite' => (bool)$n2['IsFavourite'], 'links_required' => $z1['meta']['links-required'], 'og_images' => $fe, ); return $eq; } function zd ($s0,$t6,$tq){ global$_newsfeeds; if (!isset ($_newsfeeds))$_newsfeeds = []; $a0 = ''; if ($s0 == 'rss')$a0 = 'application/rss+xml'; if ($s0 == 'json')$a0 = 'application/json'; $_newsfeeds[] = [ 'type' => $a0, 'title' => htmlspecialchars ($t6,ENT_NOQUOTES,HSC_ENC), 'href' => $tq ]; } function kd () { global$_config; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm (). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get recent public noterecs for RSS or JSONFeed' ); return en (); } function xd () { global$settings; if (!empty ($settings['meta_description'])) { $q0 = strip_tags (h3 (htmlspecialchars ($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } elseif (!empty ($settings['blog_subtitle'])) { $z1 = i3 ($settings['blog_subtitle'],'full'); $q0 = $z1['text-final']; $q0 = em ($q0); } else { $q0 = cd (); } return $q0; } function ed () { global$settings,$_current_url; $hg = 0; $b0 = array (); $pu = array (); $ot = CACHE_FILENAME_FRONTPAGE_FEED; if(CACHE_FRONTPAGE_FEED and is_file ($ot)) { if(Log::$vy)__log ('Feed array (RSS, JSON): cached'); $pu = @unserialize (file_get_contents ($ot)); $hg = filemtime ($ot); } else { if(Log::$vy)__log ('Feed array (RSS, JSON): not cached, will need to build'); $yt = kd (); foreach ($yt as $n2){ $b0[] = e2_jsonfeed_item_array_from_noterec_($n2); $hg = max ($hg,$n2['Stamp']); } $pu = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($b0); $pu['title']=cd (); $pu['_rss_description']=xd (); $pu['home_page_url']=jv ('e2m_frontpage', array ('page' => 1)); $pu['feed_url']=$_current_url; if(CACHE_FRONTPAGE_FEED)n3 ($ot,serialize ($pu)); } return array ($pu,$hg); } function rd ($q2){ global$settings,$_config,$_strings,$_current_url; $hg = 0; $b0 = array (); xn ( "SELECT n.* ". "FROM `". $_config['db_table_prefix']."Notes` n ". "INNER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (nk.`KeywordID` = ". $q2['ID'] .") ". "AND n.`IsPublished` = 1 ". tm (k2 ()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get tag noterecs for RSS or JSONFeed' ); $yt = en (); foreach ($yt as $n2){ $b0[] = e2_jsonfeed_item_array_from_noterec_($n2); $hg = max ($hg,$n2['Stamp']); } if ((string)$q2['Summary']!==''){ $q0 = strip_tags (h3 (htmlspecialchars ($q2['Summary'],ENT_NOQUOTES,HSC_ENC))); } else if ((string)$q2['Description']!==''){ $z1 = i3 ($q2['Description'],'full'); $q0 = $z1['text-final']; $q0 = em ($q0); } else { $q0 = xd (); } $nj = htmlspecialchars ($q2['PageTitle'],ENT_COMPAT,HSC_ENC); if ((string)$nj !== ''){ $t6 = $nj; } else { $t6 = ( cd () .': '. $_strings['gs--posts-tagged'] .' '. htmlspecialchars ($q2['Keyword'],ENT_COMPAT,HSC_ENC) ); } $pu = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($b0); $pu['title']=$t6; $pu['_rss_description']=$q0; $pu['home_page_url']=jv ('e2m_tag', array ('*tag' => $q2)); $pu['feed_url']=$_current_url; return array ($pu,$hg); } function e2feeds__rss_using_jsonfeed_array_($content){ $l0 = USER_FOLDER . 'rss/rss.tmpl.php'; if (!is_file ($l0)) { $l0 = DEFAULTS_FOLDER . 'rss/rss.tmpl.php'; } if(is_file ($l0)) { ob_start (); include $l0; $c0 = ob_get_contents (); ob_end_clean (); } return $c0; } function jd ($c0){ $c0 = str_replace ("\x0",'',$c0); for ($r = 0; $r < strlen ($c0); ++$r){ if(ord ($c0[$r]) < 32 and !in_array (ord ($c0[$r]), array (10,13))) { $c0[$r]=''; } } return $c0; } function hd ($z0,$hg,$s0){ global$_config; $k0 = gmdate ('r',$hg); $x0 = md5 ($hg); if ($s0 == 'rss'){ if (@$_config['dev_xml_as_text']) { header ('Content-Type: text/plain'); } else { header ('Content-Type: application/xml; charset=utf-8'); } } elseif ($s0 == 'json'){ header ('Content-Type: application/json'); } else { header ('Content-Type: text/plain'); } header ('Last-modified: '. $k0); header ('Etag: '. $x0); header ('Cache-Control: public'); header ('Expires: '. date ('r',$hg + SECONDS_IN_A_DAY)); $e0 = isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes ($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $r0 = isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes ($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$e0 && !$r0 or $r0 && $r0 != $x0 or $e0 && $e0 != $k0 ) { if ($s0 == 'rss'){ $c0 = jd ($c0); } ini_set ('zlib.output_compression',0); echo $z0; ini_set ('zlib.output_compression',1); } else { header ('HTTP/1.1 304 Not Modified'); } die; } function e2m_year ($parameters = array ()) { global$_strings,$_config; $t0 = $parameters['year']; $j0 = e2l_get_string ('pt--nth-year', array ('year' => $t0)); if (!ud ($t0)) { return e2_error404_mode (); } $h0 = gmmktime (0,0,0,1,1,$t0 - 1); $g0 = gmmktime (0,0,0,1,1,$t0 + 1); list ($w0,$u0)=e2__fruitful_neighbours_with_ymd_($t0); $i0 = 'e2m_year'; if ($w0){ $o0['prev-href']=jv ( $i0,e2__parameters_with_timestamp_($w0) ); $o0['prev-jump?'] = (bool) (gmdate ('Y',$h0)!=gmdate ('Y',$w0)); $o0['prev-title']=gmdate ('Y',$w0); } if ($u0){ $o0['next-href']=jv ( $i0,e2__parameters_with_timestamp_($u0) ); $o0['next-jump?'] = (bool) (gmdate ('Y',$g0)!=gmdate ('Y',$u0)); $o0['next-title']=gmdate ('Y',$u0); } $o0['timeline?']=false; $o0['this']=$t0; $o0['this-title']=$t0; $p0 = bs ('start'); $c9 = bs ('end'); if ( $t0 == ky ('Y',$p0['stamp'],$p0['timezone']) ) { $v9 = ky ('m',$p0['stamp'],$p0['timezone']); } else { $v9 = 1; } if ( $t0 == xy ('Y',time ()) ) { $b9 = xy ('m',time ()); } else { $b9 = 12; } $y9 = cs ($t0); for ($n9 = 1; $n9 <= 12; ++ $n9){ $m9 = gmmktime (0,0,0,$n9,1,$t0); $f9[$n9] = array ( 'number' => $n9, 'start-time' => array ($m9,sy ()), 'href' => gmdate ('Y/m/',$m9), 'real?' => $n9 >= $v9 and $n9 <= $b9, 'fruitful?' => @in_array (gmdate ('n',$m9),$y9), ); } list ($ur,$ir)=jy ($t0); $d = [ 'title' => $j0, 'heading' => $j0, 'pages' => $o0, 'year' => (int)$t0, 'year-months' => $f9, ]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm (k2 ()). "AND `Stamp` BETWEEN ". $ur ." ". "AND ". $ir ." ". "ORDER BY `Stamp`", 'get all notes for the year' ); $q1 = en (); $l5 = pd ($q1,$t0); if(count ($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_month ($parameters = array ()) { global$_strings,$_config; $t0 = $parameters['year']; $n9 = $parameters['month']; $j0 = e2l_get_string ( 'pt--nth-month-of-nth-year', array ('year' => $t0,'month' => $n9) ); if (!ud ($t0,$n9)) { return e2_error404_mode (); } $h0 = gmmktime (0,0,0,$n9 - 1,1,$t0); $g0 = gmmktime (0,0,0,$n9 + 1,1,$t0); list ($w0,$u0)=e2__fruitful_neighbours_with_ymd_($t0,$n9); $i0 = 'e2m_month'; if ($w0){ $o0['prev-href']=jv ( $i0,e2__parameters_with_timestamp_($w0) ); $o0['prev-jump?'] = (bool) (gmdate ('Y/m',$h0)!=gmdate ('Y/m',$w0)); $o0['prev-title']=e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$w0),'month' => gmdate ('n',$w0) ) ); } if ($u0){ $o0['next-href']=jv ( $i0,e2__parameters_with_timestamp_($u0) ); $o0['next-jump?'] = (bool) (gmdate ('Y/m',$g0)!=gmdate ('Y/m',$u0)); $o0['next-title']=e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$u0),'month' => gmdate ('n',$u0) ) ); } $o0['timeline?']=false; $o0['this-title']=$j0; list ($ur,$ir)=jy ($t0,$n9); $d = [ 'title' => $j0, 'heading' => $j0, 'pages' => $o0, 'year' => (int)$t0, 'month' => (int)$n9, 'month-days' => e2_pack_month_days_with_ymd_($t0,$n9,false), ]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm (k2 ()). "AND `Stamp` BETWEEN ". $ur ." ". "AND ". $ir ." ". "ORDER BY `Stamp`", 'get all notes for the month' ); $q1 = en (); $l5 = pd ($q1,$t0,$n9); if(count ($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_day ($parameters = array ()) { global$_strings,$_config; $t0 = (int)$parameters['year']; $n9 = (int)$parameters['month']; $s9 = (int)$parameters['day']; if (!(ud ($t0,$n9,$s9))) { return e2_error404_mode (); } $j0 = e2l_get_string ( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $t0,'month' => $n9,'day' => $s9) ); $h0 = gmmktime (0,0,0,$n9,$s9 - 1,$t0); $g0 = gmmktime (0,0,0,$n9,$s9 + 1,$t0); list ($w0,$u0)=e2__fruitful_neighbours_with_ymd_($t0,$n9,$s9); $i0 = 'e2m_day'; if ($w0){ $o0['prev-href']=jv ( $i0,e2__parameters_with_timestamp_($w0) ); $o0['prev-jump?'] = (bool) (gmdate ('Y/m/d',$h0)!=gmdate ('Y/m/d',$w0)); $o0['prev-title']=e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$w0),'month' => gmdate ('n',$w0),'day' => gmdate ('j',$w0), ) ); } if ($u0){ $o0['next-href']=jv ( $i0,e2__parameters_with_timestamp_($u0) ); $o0['next-jump?'] = (bool) (gmdate ('Y/m/d',$g0)!=gmdate ('Y/m/d',$u0)); $o0['next-title']=e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y',$u0),'month' => gmdate ('n',$u0),'day' => gmdate ('j',$u0), ) ); } $o0['timeline?']=false; $o0['this-title']=$j0; $d = [ 'title' => $j0, 'heading' => $j0, 'pages' => $o0, 'month-days' => e2_pack_month_days_with_ymd_($t0,$n9,$s9), ]; $q1 = sm ($t0,$n9,$s9); $q1 = array_reverse ($q1); $ue = k2 (); $l5 = []; foreach ($q1 as $t => $n2){ if (!( rm ($n2)==='public' or ($ue and $n2['IsPublished']) )) continue; $noteView = new AeNoteView ($n2); $noteView -> setWantNewCommentsCount ($ue); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($ue and !@$_config['read_only']); $noteView -> setWantHiddenTags ($ue); $noteView -> setWantCommentsLink (true); $l5[] = $noteView -> getNoteCTree (); } if(count ($l5)) { $d['notes']=$l5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function gd () { global$_config; $l5 = null; if(CACHE_FULLLIST and is_file (CACHE_FILENAME_FULLLIST)) { $l5 = @unserialize (file_get_contents (CACHE_FILENAME_FULLLIST)); if(Log::$vy)__log ('Retrieving full notes list from cache...'); } if (!is_array ($l5)) { if(Log::$vy)__log ('Retrieving full notes list from database...'); xn ( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". tm (). "ORDER BY `Stamp`", 'get full notes list' ); $q1 = en (); $l5 = pd ($q1); if(CACHE_FULLLIST)n3 (CACHE_FILENAME_FULLLIST,serialize ($l5)); } return $l5; } function e2m_everything ($parameters = array ()) { global$_strings; $l5 = gd (); $a9 = count ($l5); $j0 = e2l_get_string ('pt--n-posts', array ('number' => $a9)); $d = [ 'title' => $j0, 'heading' => $j0, ]; if(count ($l5)) { $d['notes-list']=$l5; } else { $d['nothing']=$_strings['gs--no-notes']; } return $d; } function e2m_sitemap_xml ($parameters = array ()) { global$_config; $l5 = gd (); if (@$_config['dev_xml_as_text']) { header ('Content-Type: text/plain'); } else { header ('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; if(count ($l5)) { $hg = @$l5[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. jv ('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo gmdate ('Y-m-d\TH:i:s\Z',$hg[0]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($l5 as $l2){ echo '<url>'."\r\n"; echo '<loc>'; echo $l2['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo gmdate ('Y-m-d\TH:i:s\Z',$l2['last-modified'][0]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function e2_pack_month_days_with_ymd_($t0,$n9,$s9){ $q9 = ky ('t',gmmktime (0,0,0,$n9,1,$t0),sy ()); $p0 = bs ('start'); $c9 = bs ('end'); if ( $t0 .'/'. $n9 == ky ('Y/n',$p0['stamp'],$p0['timezone']) ) { $l9 = ky ('d',$p0['stamp'],$p0['timezone']); } else { $l9 = 1; } if ( $t0 .'/'. $n9 == xy ('Y/n',time ()) ) { $z9 = xy ('d',time ()); } else { $z9 = $q9; } $k9 = vs ($t0,$n9); for ($r = 1; $r <= $q9; ++ $r){ $m9 = gmmktime (0,0,0,$n9,$r,$t0); $x9[$r] = array ( 'number' => $r, 'start-time' => array ($m9,sy ()), 'href' => gmdate ('Y/m/d/',$m9), 'this?' => (bool) ($r == $s9), 'real?' => $r >= $l9 and $r <= $z9, 'fruitful?' => @in_array (gmdate ('d',$m9),$k9), ); } return $x9; } function ud ($t0,$n9 = false,$s9 = false){ $p0 = bs ('start'); if ($p0 === false){ return false; } $e9 = ky ('Y',$p0['stamp'],$p0['timezone']); $r9 = xy ('Y',time ()); if ($n9 === false){ return (bool) ( $t0 >= $e9 and $t0 <= $r9 ); } else { $t9 = ky ('n',$p0['stamp'],$p0['timezone']); $j9 = xy ('n',time ()); if ($s9 === false){ return (bool) ( $n9 >= 1 and $n9 <= 12 and ( ($t0 > $e9 and $t0 < $r9) or ($t0 == $e9 and $n9 >= $t9) or ($t0 == $r9 and $n9 <= $j9) ) ); } else { $h9 = ky ('j',$p0['stamp'],$p0['timezone']); $g9 = xy ('j',time ()); if(1){ return (bool) ( checkdate ($n9,$s9,$t0) and ( ($t0 > $e9 and $t0 < $r9) or ($t0 == $e9 and $n9 > $t9) or ($t0 == $e9 and $n9 == $t9 and $s9 >= $h9) or ($t0 == $r9 and $n9 < $j9) or ($t0 == $r9 and $n9 == $j9 and $s9 <= $g9) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($gb,$hb = false,$jb = false){ global$_db,$_config; list ($w9,$u9)=jy ($gb,$hb,$jb); $i9 = SECONDS_IN_A_DAY; if ($jb === false)$i9 = SECONDS_IN_A_MONTH; if ($hb === false)$i9 = SECONDS_IN_A_YEAR; $o9 = $p9 = null; xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` < '". ($u9 - $i9) ."' ". tm (k2 ()). "ORDER BY Stamp DESC", 'get previous fruitful neighbour with ymd' ); while ($i = mysqli_fetch_array ($_db['result'],MYSQLI_ASSOC)) { list ($t0,$n9,$s9)=explode ('/', ky ('Y/n/j',$i['Stamp'],dy ($i)) ); $ci = $gb * 10000 + ($hb? ($hb * 100):0) + ($jb? $jb : 0); $vi = $t0 * 10000 + ($hb? ($n9 * 100):0) + ($jb? $s9 : 0); if ($vi < $ci){ $o9 = gmmktime (0,0,0,$n9,$s9,$t0); break; } } xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` > '". ($w9 + $i9) ."' ". tm (k2 ()). "ORDER BY Stamp", 'get next fruitful neighbour with ymd' ); while ($i = mysqli_fetch_array ($_db['result'],MYSQLI_ASSOC)) { list ($t0,$n9,$s9)=explode ('/', ky ('Y/n/j',$i['Stamp'],dy ($i)) ); $ci = $gb * 10000 + ($hb? ($hb * 100):0) + ($jb? $jb : 0); $vi = $t0 * 10000 + ($hb? ($n9 * 100):0) + ($jb? $s9 : 0); if ($vi > $ci){ $p9 = gmmktime (0,0,0,$n9,$s9,$t0); break; } } return [$o9,$p9]; } function e2__parameters_with_timestamp_($m4){ list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode ('/',gmdate ('Y/m/d',$m4)); return$parameters; } function pd ($yt,$t0 = false,$n9 = false){ $bi = 0; $l5 = array (); $j7 = ''; $l5 = array (); $yi = array (); foreach ($yt as $t => $n2){ $l2['href'] = jv ('e2m_note', array ('*note' => $n2)); $l2['time'] = array ((int)min ($n2['Stamp'],time ()), dy ($n2)); $l2['last-modified'] = array ((int)min ($n2['LastModified'],time ()), dy ($n2)); $l2['favourite?'] = (bool) ($n2['IsFavourite'] && $n2['IsPublished']); $we = rm ($n2); $l2['draft?'] = $we === 'draft'; $l2['scheduled?'] = $we === 'scheduled'; $l2['public?'] = $we === 'public'; $l2['hidden?'] = $we === 'hidden'; if(array_key_exists ('SourceNoteURL',$n2) and @$n2['SourceNoteURL']!=''){ $l2['href']=$n2['SourceNoteURL']; $l2['href-original']=$n2['SourceNoteURL']; } if ( ($t0 and $n9 and ( ((int)$t0) .'/'. ((int)$n9) == ky ('Y/n',$n2['Stamp'],dy ($n2)) )) or ($t0 and !$n9 and ( (int)$t0 == ky ('Y',$n2['Stamp'],dy ($n2)) )) or (!$t0 and !$n9) ) { array_unshift ($l5,$l2); array_unshift ($yi,str_replace ("\n",' ',$n2['Title'])); } } if(Log::$vy)__log ('Will do typography'); $ni = implode ("\n",$yi); $ni = h3 (htmlspecialchars ($ni,ENT_NOQUOTES,HSC_ENC)); $yi = explode ("\n",$ni); foreach ($l5 as $t => $xf){ $l5[$t]['title']=$yi[$t]; } return $l5; } function cs ($gb){ global$_config; list ($mi,$fi)=jy ($gb); xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $mi. "' AND '". $fi ."' ". tm (k2 ()), 'get all notes for the year '. $gb .' to list months with notes' ); $q1 = en (); $di = array (); foreach ($q1 as $or_){ if ( ((int)$gb) == ky ('Y',$or_['Stamp'],dy ($or_)) ) { $di[] = (int)ky ('n',$or_['Stamp'],dy ($or_)); } } $di = @array_unique ($di); sort ($di); return $di; } function vs ($gb,$hb){ global$_config; list ($si,$ai)=jy ($gb,$hb); xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $si ."' AND '". $ai ."' ". tm (k2 ()), 'get all notes for the month '.$hb.' of the year '. $gb .' to list days with notes' ); $q1 = en (); $qi = array (); foreach ($q1 as $or_){ if ( ((int)$gb) .'/'. ((int)$hb) == ky ('Y/n',$or_['Stamp'],dy ($or_)) ) { $qi[] = (int)ky ('j',$or_['Stamp'],dy ($or_)); } } $qi = @array_unique ($qi); sort ($qi); return $qi; } function bs ($li){ global$_config; $zi = 'p1'; if (!k2 ()) { $zi = 'p1v1'; } $ot = CACHES_FOLDER . $li .'-stamp-'. $zi .'.e2time.psa'; if(CACHE_EDGE_TIMEINFO and is_file ($ot)) { $d = @unserialize (file_get_contents ($ot)); } if(is_array ($d)) { return $d; } else { $d = array ( 'stamp' => time (), 'timezone' => ay (), ); if ($li == 'start'){ xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm (k2 ()). "ORDER BY `Stamp` LIMIT 1", 'get blog start timestamp' ); } elseif ($li == 'end'){ xn ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". tm (k2 ()). "ORDER BY `Stamp` DESC LIMIT 1", 'get blog latest note timestamp' ); } $q1 = en (); if(count ($q1)) { $d = array ( 'stamp' => $q1[0]['Stamp'], 'timezone' => dy ($q1[0]), ); if(CACHE_EDGE_TIMEINFO)n3 ($ot,serialize ($d)); return $d; } return $d; } } define ('CACHE',true); define ('CACHE_ALIASMAP',CACHE and true); define ('CACHE_NOTES',CACHE and true); define ('CACHE_NOTES_RELATED',CACHE and true); define ('CACHE_NOTES_COMMENTS',CACHE and true); define ('CACHE_POPULAR',CACHE and true); define ('CACHE_POPULAR_WITH_TAG',CACHE and true); define ('CACHE_TAGS',CACHE and true); define ('CACHE_FAVTAGS',CACHE and true); define ('CACHE_NOTES_COUNTS',CACHE and true); define ('CACHE_EDGE_TIMEINFO',CACHE and true); define ('CACHE_FRONTPAGE',CACHE and true); define ('CACHE_FRONTPAGE_FEED',CACHE and true); define ('CACHE_TAG',CACHE and true); define ('CACHE_FULLLIST',CACHE and true); define ('CACHE_DRAFTS',CACHE and true); define ('CACHE_DRAFTS_ALIAS_USE_COUNTS',CACHE and true); define ('CACHE_LASTMODIFIEDS',CACHE and true); define ('CACHE_FILENAME_ALIASMAP',CACHES_FOLDER . 'aliasmap.psa'); define ('CACHE_FILENAMES_NOTES',CACHES_FOLDER . 'note-*.psa'); define ('CACHE_FILENAMES_NOTES_RELATED',CACHES_FOLDER . 'note-*-related.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS',CACHES_FOLDER . 'note-*-comments.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR',CACHES_FOLDER . 'note-*-comments-author.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COUNTS',CACHES_FOLDER . 'notes-count-*.txt'); define ('CACHE_FILENAMES_EDGE_TIMEINFO',CACHES_FOLDER . '*.e2time.psa'); define ('CACHE_FILENAME_POPULAR',CACHES_FOLDER . 'popular.ctree.psa'); define ('CACHE_FILENAME_POPULAR_EXPIRES',CACHES_FOLDER . 'popular-expires.txt'); define ('CACHE_FILENAMES_POPULAR_WITH_TAG',CACHES_FOLDER . 'popular-*.ctree.psa'); define ('CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES',CACHES_FOLDER . 'popular-*-expires.txt'); define ('CACHE_FILENAME_TAGS',CACHES_FOLDER . 'tags.ctree.psa'); define ('CACHE_FILENAME_TAGS_FULL',CACHES_FOLDER . 'tags-full.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR',CACHES_FOLDER . 'tags-author.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR_FULL',CACHES_FOLDER . 'tags-author-full.ctree.psa'); define ('CACHE_FILENAME_FAVTAGS',CACHES_FOLDER . 'favtags.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE',CACHES_FOLDER . 'frontpage.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_AUTHOR',CACHES_FOLDER . 'frontpage-author.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_FEED',CACHES_FOLDER . 'frontpage-feed.psa'); define ('CACHE_FILENAMES_TAG',CACHES_FOLDER . 'tag-*.ctree.psa'); define ('CACHE_FILENAMES_TAG_AUTHOR',CACHES_FOLDER . 'tag-*-author.ctree.psa'); define ('CACHE_FILENAME_FULLLIST',CACHES_FOLDER . 'notes-list.ctree.psa'); define ('CACHE_FILENAME_DRAFTS',CACHES_FOLDER . 'drafts.psa'); define ('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS',CACHES_FOLDER . 'drafts-auc.psa'); define ('CACHE_FILENAME_LASTMODIFIEDS',CACHES_FOLDER . 'last-modifieds-by-id.psa'); function e2_cache_filename_with_id_($xs,$zi){ return str_replace ('*',$xs,$zi); } function e2_note_cache_filename_with_id_($xs){ return e2_cache_filename_with_id_($xs,CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($sx,$zr){ if(is_numeric ($sx)) { if(Log::$vy)__log ('Caches: Drop caches for note id '. $sx); @unlink (e2_note_cache_filename_with_id_($sx)); @unlink (e2_note_cache_filename_with_id_($sx .'-comments')); @unlink (e2_note_cache_filename_with_id_($sx .'-comments-author')); } else { r (CACHE_FILENAMES_NOTES); r (CACHE_FILENAMES_NOTES_COMMENTS); r (CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } ss (); if ($zr !== false){ as_ (); r (CACHE_FILENAMES_NOTES_RELATED); r (CACHE_FILENAMES_POPULAR_WITH_TAG); r (CACHE_FILENAMES_TAG); r (CACHE_FILENAMES_TAG_AUTHOR); @unlink (CACHE_FILENAME_POPULAR); @unlink (CACHE_FILENAME_FRONTPAGE); @unlink (CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink (CACHE_FILENAME_FRONTPAGE_FEED); @unlink (CACHE_FILENAME_FULLLIST); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_FULL); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_TAGS_AUTHOR_FULL); } if ($zr !== true){ @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } @unlink (CACHE_FILENAME_LASTMODIFIEDS); } function e2_drop_caches_for_tag_($kj){ if(is_numeric ($kj)) { @unlink (e2_cache_filename_with_id_($kj,CACHE_FILENAMES_TAG)); @unlink (e2_cache_filename_with_id_($kj,CACHE_FILENAMES_TAG_AUTHOR)); } else { r (CACHE_FILENAMES_TAG); r (CACHE_FILENAMES_TAG_AUTHOR); } @unlink (CACHE_FILENAME_FAVTAGS); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_FULL); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_TAGS_AUTHOR_FULL); } function ds () { if(Log::$vy)__log ('Caches: Drop notes caches'); e2_drop_caches_for_note_(null,null); } function ss () { if(Log::$vy)__log ('Caches: Drop notes counts cache'); r (CACHE_FILENAMES_NOTES_COUNTS); } function as_ () { if(Log::$vy)__log ('Caches: Drop egde time info cache'); r (CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache () { if(Log::$vy)__log ('Caches: Drop all kinds of caches'); r (CACHES_FOLDER . '*'); return true; } define ('OLBA_SPECIAL_CHAR',"\x1"); define ('OLBA_SPECIAL_SEQUENCE_LENGTH',6); function qs ($ki = null){ global$_template,$_config,$settings; if ($ki === null)$ki = @$settings['template']; $xi = null; $ei = null; $ri = null; $ti = null; $ji = array (); $hi = $ki; if ($hi !== null){ while (1){ if(Log::$vy)__log ('Prepare theme "'. $hi .'"'); $gi = TEMPLATES_FOLDER . $hi .'/'; if ( !is_dir ($gi) or !is_file ($gi .'/theme-info.php') ) { if(Log::$vy)__log ('Theme "'. $hi .'" not found, using default theme "'. DEFAULT_TEMPLATE .'"'); $hi = DEFAULT_TEMPLATE; $gi = TEMPLATES_FOLDER . $hi .'/'; } array_push ($ji,$gi); $wi = include $gi .'/theme-info.php'; $ui[$gi]=$wi; if(array_key_exists ('max_image_width',$wi)) { if ($xi === null){ $xi = $wi['max_image_width']; } } if(array_key_exists ('meta_viewport',$wi)) { if ($ei === null){ $ei = $wi['meta_viewport']; } } if(array_key_exists ('supports_dark_mode',$wi)) { if ($ri === null){ $ri = $wi['supports_dark_mode']; } } if(array_key_exists ('use_likely_light',$wi)) { if ($ti === null){ $ti = $wi['use_likely_light']; } } if(array_key_exists ('based_on',$wi)) { $hi = $wi['based_on']; } else { break; } } } if ($xi === null){ $xi = $_config['max_image_width']; } if ($ei === null)$ei = ''; if ($ri === null)$ri = false; if ($ti === null)$ti = false; $gi = SYSTEM_TEMPLATE_FOLDER; array_push ($ji,$gi); $ui[$gi] = []; $_template['name']=$ki; $_template['max_image_width']=$xi; $_template['meta_viewport']=$ei; $_template['supports_dark_mode']=$ri; $_template['use_likely_light']=$ti; $_template['stack']=$ji; $_template['infos']=$ui; }; function ls ($ii){ global$content; if (!isset ($_olba_includes))$_olba_includes = 0; ++ $_olba_includes; if(Log::$vy)__log ('Eat "'. $ii .'"'); ob_start (); include $ii; return ob_get_clean (); } function zs ($qz){ return ( OLBA_SPECIAL_CHAR. str_pad ($qz,OLBA_SPECIAL_SEQUENCE_LENGTH,'0',STR_PAD_LEFT). OLBA_SPECIAL_CHAR ); } function ks ($name){ static $qz = 0; ba ($name,'_olba_placeholders'); return zs ($qz ++); } function xs ($oi){ global$_olba_placeholders; foreach($_olba_placeholders as $qz => $s){ $pi = zs ($qz); $co = strpos ($oi,$pi); $vo = rs ($s,true); if ($co !== false){ $oi = substr_replace ( $oi,$vo,$co,strlen ($pi) ); } else { break; } } return $oi; } function es ($bo){ if(is_dir (EXTRAS_FOLDER)) { $yo = EXTRAS_FOLDER . $bo .'.tmpl.php'; if(is_file ($yo)) { return ls ($yo); } } return ''; } function rs ($bo){ global$_template,$_olba_includes; $yo = 'templates/'. $bo .'.tmpl.php'; if ($ii = e2o__usable_file_with_basename_($yo)) { return ls ($ii); } else { ob_end_clean (); throw new AeOlbaTemplateMissingException ('Missing: '. $yo); } } function ts () { global$_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists ('raw',$_GET) ) { $no = 'raw'; } else { $no = 'main'; } return rs ($no,true); } function js ($mo){ ba ($mo .'.css','_olba_used_stylesheets'); } function hs ($fo){ ba ($fo .'.js','_olba_used_scripts'); } function gs ($do_){ foreach (array (SYSTEM_LIBRARY_FOLDER,USER_LIBRARY_FOLDER) as $so){ foreach(glob ($so . $do_ .'/*') as $dy){ $za = pathinfo ($dy,PATHINFO_EXTENSION); if ($za == 'js'){ ba ($dy,'_olba_used_scripts'); } if ($za == 'css'){ ba ($dy,'_olba_used_stylesheets'); } } } } function ws () { global$_template,$_config,$settings; if ($ao = @opendir (TEMPLATES_FOLDER)) { while (false !== ($qo = readdir ($ao))) { if(is_dir (TEMPLATES_FOLDER. $qo) and $qo != '.' and $qo != '..'){ if(is_file (TEMPLATES_FOLDER . $qo .'/theme-info.php')) { $lo[$qo]=TEMPLATES_FOLDER . $qo .'/'; } } } closedir ($ao); } $ua = array (); $zo = 1000; foreach ($lo as$name => $ta){ $wi = include $ta .'theme-info.php'; $m3 = @$wi['display_name']; if (!$m3) continue; if(is_array ($m3)) { if(array_key_exists ($settings['language'],$m3)) { $m3 = $m3[$settings['language']]; } else { $m3 = array_shift ($m3); } } $qz = @$wi['index'] or $qz = $zo ++; $ko = @$wi['colors']; if (!$ko)$ko = array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $xo = (bool) ($name == $_template['name']); if ($xo){ $eo = jv ('e2m_theme_preview', array ('theme' => '')); } else { $eo = jv ('e2m_theme_preview', array ('theme' => $name)); } $ua[$qz] = array ( 'name' => $name, 'display-name' => $m3, 'colors' => $ko, 'current?' => $xo, 'preview-url' => $eo, 'supports-dark-mode?' => $wi['supports_dark_mode'], ); } ksort ($ua); return $ua; } function us ($db){ return e2o__usable_file_with_basename_('images/'. $db); } function is ($ro){ $to = e2o__usable_file_with_basename_('images/'. $ro .'.svg'); if(is_file ($to)) { return file_get_contents ($to); } return ''; } function os ($mo){ global$_template; $ea = 'styles/'. $mo .'.css'; $jo = array (); foreach($_template['stack'] as $gi){ if(is_file ($db = $gi . $ea)) { $jo[] = $db; } if ( array_key_exists ('reset_styles',$_template['infos'][$gi]) and in_array ($mo,$_template['infos'][$gi]['reset_styles']) ) { break; } } $jo = array_reverse ($jo); } function ps () { global$_olba_used_stylesheets,$_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets = array_unique ($_olba_used_stylesheets); $ho = array (); foreach($_olba_used_stylesheets as $mo){ if(is_file ($mo)) { $ho[] = $mo; continue; } if(is_file ($db = USER_FOLDER .'js/'. $mo)) { $ho[] = $db; } $ea = 'styles/'. $mo; $jo = array (); foreach($_template['stack'] as $gi){ if(is_file ($db = $gi . $ea)) { $jo[] = $db; } if ( array_key_exists ('reset_styles',$_template['infos'][$gi]) and in_array ($mo,$_template['infos'][$gi]['reset_styles']) ) { break; } } $jo = array_reverse ($jo); $ho = array_merge ($ho,$jo); } foreach ($ho as $t => $xf){ $ty = stat ($xf); $ho[$t].='?'. $ty['mtime']; } return $ho; } function ca () { global$_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts = array_unique ($_olba_used_scripts); $go = array (); foreach($_olba_used_scripts as $fo){ if ( substr ($fo,0,7)=='http://' or substr ($fo,0,8)=='https://' or substr ($fo,0,2)=='//' ) { $go[] = $fo; continue; } if(is_file ($fo)) { $go[] = $fo; continue; } if(is_file ($wo = USER_FOLDER .'js/'. $fo)) { $go[] = $wo; } $ea = 'js/'. $fo; if ($wo = e2o__usable_file_with_basename_($ea)) { $go[] = $wo; } } foreach ($go as $t => $xf){ $ty = stat ($xf); if ($ty['mtime']) { $go[$t].='?'. $ty['mtime']; } } return $go; } function va ($uo){ if (!is_array ($uo)) return; foreach ($uo as $yz){ if(substr ($yz, -3)=='.js'){ hs (substr ($yz,0, -3)); } if(substr ($yz, -4)=='.css'){ js (substr ($yz,0, -4)); } } } function ba ($s,$gv){ if (!isset ($GLOBALS[$gv])) { $GLOBALS[$gv] = array ($s); } else { $GLOBALS[$gv][] = $s; } } function e2o__usable_file_with_basename_($ea){ global$_template; if (!isset ($_template))qs (); foreach($_template['stack'] as $gi){ if(is_file ($db = $gi . $ea)) { return $db; } } return ''; } function e2m_theme_preview ($parameters){ global$_lang,$_strings,$_superconfig,$_template; if (@$_superconfig['disallow_themes_preview']) { return e2_error404_mode (); } if($parameters['theme']==$_template['name']) { c (jv ('e2m_theme_preview', array ('theme' => ''))); } if($parameters['theme']) { qs ($parameters['theme']); } $io = $_lang; if (!is_file ($dy = 'system/preview/'. $io .'.php')) { $io = $_strings['--secondary-language']; $dy = 'system/preview/'. $io .'.php'; } if (!is_file ($dy = 'system/preview/'. $io .'.php')) { $dy = 'system/preview/'. DEFAULT_LANGUAGE .'.php'; } $eq = include $dy; return $eq; } define ('SEARCH_EXTRA_PREFIX','Rose'); define ('SEARCH_LIMIT',20); define ('SEARCH_SNIPPETS_LIMIT',20); define ('SEARCH_USE_ROSE',1); define ('SEARCH_USE_MYSQL',1); define ('BSI_SELECT_PORTION',10); define ('BSI_GIVE_UP_TIMEOUT',10); define ('BSI_UNLOCK_TIMEOUT',10); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Storage\Database\MysqlRepository; use S2\Rose\Stemmer\PorterStemmerEnglish; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Entity\ExternalContent; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found ($parameters = array ()) { global$_db,$_strings,$_config; $parameters['query']=trim ($parameters['query']); $bf = $parameters['query']; if (!$bf){ return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $mvv = false; $yj = []; try { if (k2 ()) { $fvv = ''; } else { $fvv = 'AND `IsVisible` = 1 '; } xn ( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". $fvv . "AND `Keyword`='". rn ($bf) ."'", 'get tags matching the search query' ); $ob = en (); if (isset ($ob[0]['ID'])) { $mvv = [ 'href' => jv ('e2m_tag', array ('*tag' => $ob[0])), 'name' => htmlspecialchars ($bf,ENT_NOQUOTES,HSC_ENC), 'visible?' => (bool)$ob[0]['IsVisible'], ]; $yj = nf ($ob[0]['ID'],4); array_unshift ($yj,$mvv); } } catch (AeMySQLException $e){ kv ($e,'Could not get tags matching the search query'); } $dvv = n (' ',$parameters['query']); if(SEARCH_USE_ROSE){ $svv = new PorterStemmerRussian (new PorterStemmerEnglish ()); foreach ($dvv as $t => $xf){ $dvv[$t]=$svv -> stemWord ($dvv[$t]); } } $avv = array (); $ue = k2 (); if(SEARCH_USE_ROSE){ try { $cy = ea (); $qvv = new Finder ($cy,$svv); $qvv -> setHighlightTemplate ('<mark>%s</mark>'); $lvv = new Query ($bf); $lvv -> setInstanceId ($_config['db_table_subset']); $lvv -> setLimit (SEARCH_LIMIT); $resultSet = $qvv -> find ($lvv); foreach($resultSet -> getFoundExternalIds () as $zvv){ $kvv = $zvv -> getId (); if ($kvv[0]=='n'){ $sx = substr ($kvv,1); $n2 = mm ($sx); if (!empty ($_config['search_favourites_boost'])) { if ($n2['IsFavourite']) { $resultSet->setRelevanceRatio ( $kvv, $_config['search_favourites_boost'] ); } } } } $snippetBuilder = new SnippetBuilder ($svv); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets ( $resultSet, static function (array $evv) use ($ue,$_config){ $q1 = new ExternalContent (); foreach ( array_slice ($evv,0,SEARCH_SNIPPETS_LIMIT) as $zvv ) { $kvv = $zvv -> getId (); if ($kvv[0]=='n'){ $sx = substr ($kvv,1); $n2 = mm ($sx); if ($n2){ $noteView = new AeNoteView ($n2); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($ue and !@$_config['read_only']); $noteView -> setWantHiddenTags ($ue); $kx = $noteView -> getNoteCTree (); $rvv[$n2['ID']] = $kx; $q1 -> attach ($zvv,$kx['text']); } } } return $q1; } ); foreach($resultSet -> getItems () as $tvv){ $jvv = $tvv -> getId (); if ($jvv[0]=='n'){ $sx = substr ($jvv,1); $n2 = mm ($sx); if (!( rm ($n2)==='public' or ($ue and $n2['IsPublished']) )) continue; $n2['_']['_srprovider']='Rose'; $n2['_']['_rose_relevance']=$tvv -> getRelevance (); $n2['_']['_rose_title']=$tvv -> getHighlightedTitle ($svv); $n2['_']['_rose_snippet']=$tvv -> getSnippet (); $avv[] = $n2; } } if (@$_config['dev_rose_info']) { $hvv = print_r ($resultSet -> getTrace (), true); } } catch (EmptyIndexException $e){ sa (); } catch (AeMySQLException $e){ kv ($e,'Could not do something with the database while working on Rose search results'); } } if(SEARCH_USE_MYSQL){ $gvv = rn (preg_quote ($bf)); if($_db['innodb-fulltext?']) { $wvv = "MATCH (`Title`, `Text`) AGAINST ('". $gvv ."')"; $uvv = 'MySQL FT'; } else { $wvv = "`Title` LIKE '%". $gvv ."%' OR `Text` LIKE '%". $gvv ."%'"; $uvv = 'MySQL Like'; } $ivv = ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 AND (". $wvv. ") ". tm ($ue). "LIMIT ". SEARCH_LIMIT ); try { xn ( $ivv, 'search using MySQL fulltext search' ); $q1 = en (); foreach ($q1 as $t => $n2){ $n2['_']['_srprovider']=$uvv; $avv[] = $n2; } } catch (AeMySQLException $e){ kv ($e,'Could not search using MySQL fulltext search'); } } $ovv = array (); $l5 = array (); $r = 0; foreach ($avv as $n2){ if (!in_array ($n2['ID'],$ovv)) { if (!empty ($rvv[$n2['ID']])) { $l2 = $rvv[$n2['ID']]; } else { $noteView = new AeNoteView ($n2); $noteView -> setWantReadHref ($_config['count_reads']); $noteView -> setWantControls ($ue and !@$_config['read_only']); $l2 = $noteView -> getNoteCTree (); } $l2['search-result-provider']=$n2['_']['_srprovider']; if ($n2['_']['_srprovider']=='Rose'){ $l2['search-rose'] = [ 'relevance' => $n2['_']['_rose_relevance'], 'title' => $n2['_']['_rose_title'], 'snippet' => $n2['_']['_rose_snippet'], ]; } if (@$n2['_']['_rose_title']) { $l2['title']=$n2['_']['_rose_title']; } else { $l2['title']=ra ($l2['title'],$dvv); } $l2['title']=h3 ($l2['title']); if (!empty ($n2['_']['_rose_snippet'])) { $l2['snippet-text']=$n2['_']['_rose_snippet']; } else { $jv = $l2['text']; $jv = preg_replace ('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i','',$jv); $jv = preg_replace ('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i','',$jv); $jv = str_replace ( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $jv ); $jv = strip_tags ($jv); $pvv = array (); $cbv = preg_split ('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis',$jv); $vbv = 0; $bbv = ''; foreach ($cbv as $ybv){ $ybv = trim ($ybv); if (!$ybv) continue; if (!$bbv)$bbv = $ybv; $nbv = $ybv; $nbv = ra ($nbv,$dvv); if ($nbv != $ybv){ $pvv[] = ta ($nbv); $vbv ++; if ($vbv > 3) break; } } if(count ($pvv)) { $l2['snippet-text']=implode (' · ',$pvv); } else { $l2['snippet-text']=$bbv; } } $l2['has-highlighed-thumbs?']=false; if ($gs = @$l2['format-info']['resources-detected']) { $mbv = qb ( db ($gs) ); foreach ($mbv as $t => $xf){ $mbv[$t]['highlighted?'] = ( strstr ($xf['original-filename'],$bf)!==false ); if ($mbv[$t]['highlighted?']) { $l2['has-highlighted-thumbs?']=true; } } $l2['thumbs']=$mbv; } $l5[] = $l2; $ovv[] = $n2['ID']; $r ++; if ($r >= SEARCH_LIMIT) break; } } $dj = count ($l5); if ($dj){ $fbv = e2l_get_string ( 'pt--n-posts', array ('number' => $dj) ); } else { $fbv = $_strings['pt--no-posts']; $d['nothing']=$_strings['gs--nothing-found']; } if ($r >= SEARCH_LIMIT){ $fbv = $_strings['gs--many-posts']; } if ($yj){ $d['search-related-tags']=$yj; } $d['notes']=$l5; $d['pages'] = array (); $d['title']=$fbv .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars ($bf,ENT_NOQUOTES,HSC_ENC); $d['heading']=$bf; if (@$hvv){ $d['rose-debug-info']=$hvv; } return $d; } function fa ($parameters){ if(Log::$vy)__log ('Search form'); $bf = trim ((string) @$parameters['query']); return [ 'form-action' => jv ('e2s_search'), 'query' => htmlspecialchars ($bf,ENT_COMPAT,HSC_ENC), ]; } function e2s_search () { $bf = @$_POST['query']; $bf = str_replace ('?',urlencode ('?'),$bf); $bf = str_replace ('/',' ',$bf); $bf = trim ($bf); $bf = str_replace (' ','+',$bf); c (jv ('e2m_found', array ('query' => $bf))); } function da () { global$_config; $dbv = @unserialize (file_get_contents (USER_FOLDER . 'indexing.psa')); if (!is_array ($dbv))$dbv = array ('spent' => '?'); $sbv = $abv = $sv = '?'; try { xn ( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ", 'count total published notes' ); $ay = en (); $sbv = $ay[0]['c']; xn ( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=1 AND `IsPublished`=1 ", 'count indexed published notes' ); $ay = en (); $abv = $ay[0]['c']; } catch (AeMySQLException $e){ kv ($e,'Could not count some notes'); return false; } $qbv = true; foreach (xa () as $lbv){ if (!cn (SEARCH_EXTRA_PREFIX. $lbv)) { $qbv = false; break; } } if (!$qbv){ $abv = 0; $dbv['spent']=false; } return [ 'indexed_count' => $abv, 'total_count' => $sbv, 'time_spent' => $dbv['spent']? $dbv['spent']:false, ]; } function e2s_bsi_step () { global$_db,$_config,$_strings; echo '<pre>'; if($_config['log_bsi']) { Log::$vy = true; if(Log::$vy)bv ('bsi'); } if(Log::$vy)__log ('BSI step'); if (!qa ()) { if(Log::$vy)__log ('Not indexing'); die ('Not indexing</pre>'); } $dbv = @unserialize (file_get_contents (USER_FOLDER . 'indexing.psa')); if (!is_array ($dbv))$dbv = array ('spent' => '?'); if ( !isset ($dbv['lock']) or $dbv['lock']<time () - (BSI_GIVE_UP_TIMEOUT + BSI_UNLOCK_TIMEOUT) ) { if (isset ($dbv['lock'])) { if(Log::$vy)__log ('Indexer: old lock is '. $dbv['lock']); echo 'Old lock is '. $dbv['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $dbv['lock']=time (); if (!@n3 (USER_FOLDER . 'indexing.psa',serialize ($dbv))) { if(Log::$vy)__log ('Indexer: can’t get a new lock'); die ('Can’t get a new lock<br />'); } if(Log::$vy)__log ('Indexer: new lock is '. $dbv['lock']); echo 'New lock is '. $dbv['lock'] .'<br /><br />'; try { $r = 0; $zbv = 0; $kbv = w (); $xbv = false; $an = false; while ($zbv < BSI_GIVE_UP_TIMEOUT){ xn ( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION, 'get portion of unindexed notes for indexing' ); $ay = en (); if(count ($ay)) { ++ $r; if(Log::$vy)__log ('Indexer: portion '. $r); echo 'Portion '. $r .'<br />'; foreach ($ay as $cl){ if(Log::$vy)__log ('Indexer: indexing "'. $cl['Title'].'"'); echo 'Indexing: '. $cl['Title'] .'<br />'; if (la ($cl)) { $cl['IsIndexed']='1'; nn ('Notes',$cl); } else { $an = true; break 2; } if($_config['broadcast_on_indexing']) { by ($cl); } } $zbv = round (w () - $kbv,3); if(Log::$vy)__log ('Indexer: step done '. count ($ay) .', spent '. $zbv .' ms so far'); echo 'Step done '. count ($ay) .', spent '. $zbv .' ms so far<br /><br />'; } else { $xbv = true; break; } } if ($xbv){ if(Log::$vy)__log ('Indexer: indexing complete'); echo 'Indexing complete<br /><br />'; @unlink (USER_FOLDER . 'indexing.psa'); } elseif ($an){ if(Log::$vy)__log ('Indexer: indexing failed'); echo 'Indexing failed<br /><br />'; } else { echo 'Time out<br />'; unset ($dbv['lock']); $dbv['done']=count ($ay); if ($dbv['spent']!='?')$dbv['spent']+=$zbv; @n3 (USER_FOLDER . 'indexing.psa',serialize ($dbv)); } } catch (AeMySQLException $e){ kv ($e,'Could not index notes'); if(Log::$vy)__log ('Indexer: DB unaccessible'); echo 'DB unaccessible<br />'; } } else { if(Log::$vy)__log ('Indexer: locked'); echo 'Locked<br />'; } die ('</pre>'); } function e2s_bsi_drop () { if($_SERVER['REQUEST_METHOD']=='POST'){ sa (true); } c (jv ('e2m_underhood')); } function sa ($ebv = false){ global$_db,$_config; try { ja (); if ($ebv)mv ('Notes marked for reindexing',E2E_MESSAGE); $cy = ea (); try { $cy -> erase (); if ($ebv)mv ('Indexes erased',E2E_MESSAGE); } catch (\S2\Rose\Exception\RuntimeException $e){ kv ($e,'Rose threw RuntimeException'); } aa (); } catch (AeMySQLException $e){ kv ($e,'Could not mark all notes for reindexing'); } } function aa () { $dbv = array (); @n3 (USER_FOLDER . 'indexing.psa',serialize ($dbv)); } function qa () { return (is_file (USER_FOLDER . 'indexing.psa')); } function la ($n2){ global$_config; if(Log::$vy)__log ('Indexer: index noterec'); static $rbv = null; try { if ($rbv === null){ $svv = new PorterStemmerRussian (new PorterStemmerEnglish ()); $rbv = new Indexer (ea (), $svv); } $z1 = u3 ($n2['FormatterID'], @$n2['Text'],'full-rss'); f3 ( 'note',$n2, $z1['meta']['resources-detected'] ); $jv = strip_tags ($z1['text-final']); $tbv = new Indexable ( 'n'. $n2['ID'], $n2['Title'], $jv, $_config['db_table_subset'] ); $rbv -> index ($tbv); return true; } catch (EmptyIndexException $e){ sa (); } catch (\Exception $e){ kv ($e,'Could not index note'); return false; } } function za ($xs){ global$_config; static $rbv = null; try { if ($rbv === null){ $svv = new PorterStemmerRussian (new PorterStemmerEnglish ()); $rbv = new Indexer (ea (), $svv); } return $rbv -> removeById ('n'. $xs,$_config['db_table_subset']); } catch (EmptyIndexException $e){ sa (); } catch (\Exception $e){ kv ($e,'Could not index note'); return false; } } function ka ($jbv){ $dz = 'S2\\Rose\\'; $hbv = __DIR__ . '/library/rose/'; $e2_ = strlen ($dz); if(strncmp ($dz,$jbv,$e2_)!==0) return; $gbv = substr ($jbv,$e2_); $dy = $hbv . str_replace ('\\','/',$gbv).'.php'; if(file_exists ($dy)) require $dy; } function xa () { return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function ea () { global$_config,$settings; static $wbv = null; if ($wbv === null and SEARCH_USE_ROSE){ list ($vz,$bz)=wn ($settings['db']['server']); $ubv = new \PDO ( 'mysql:'. 'host='. $vz .';'. 'dbname='. $settings['db']['name'].';'. 'port='. $bz, $settings['db']['user_name'], i2 ($settings['db']['passw']) ); $bk = $ubv -> getAttribute(\PDO::ATTR_SERVER_VERSION); $ibv = version_compare ($bk,'5.5.3','>=')?'utf8mb4' : 'utf8'; $ubv -> exec ('SET NAMES '. $ibv); $ubv -> setAttribute (\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); $obv = xa (); $wbv = new PdoStorage ( $ubv, $_config['db_table_prefix'].SEARCH_EXTRA_PREFIX, array ( MysqlRepository::TOC => $obv['TOC'], MysqlRepository::WORD => $obv['WORD'], MysqlRepository::FULLTEXT_INDEX => $obv['FULLTEXT_INDEX'], MysqlRepository::KEYWORD_INDEX => $obv['KEYWORD_INDEX'], MysqlRepository::KEYWORD_MULTIPLE_INDEX => $obv['KEYWORD_MULTIPLE_INDEX'], ) ); } return $wbv; } function ra ($jv,$dvv){ foreach ($dvv as $v4){ if ($v4 == '-') continue; $v4 = preg_quote ($v4,'/'); $v4 = str_replace ('е','[её]',$v4); $v4 = str_replace ('Е','[ЕЁ]',$v4); $jv = preg_replace ('/(?<=^|\W)('.$v4.'[\w\p{M}]*)/iu','<mark>$1</mark>',$jv); } $jv = str_replace ('</mark> <mark>',' ',$jv); $jv = str_replace ('</mark> <mark>',' ',$jv); return $jv; } function ta ($o2){ $pbv = mb_strtoupper (mb_substr ($o2,0,1)); return $pbv . mb_substr ($o2,1); } function ja () { global$_config; xn ( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `IsIndexed`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'mark all notes for reindexing' ); } function e2_check_timeout(){ static $c3v; if(is_null($c3v)) { $v3v = ini_get('max_execution_time'); if ($v3v){ $c3v = time()+$v3v - 5; } else { $c3v = 0; } } return ($c3v == 0)?true : $c3v >= time(); } function e2_write_dump_header($dy){ $pq = ( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($dy,$pq); return true; } function e2_write_dump_footer($dy){ $b3v = 'COMMIT;' .PHP_EOL; $b3v .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" . PHP_EOL . "/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" . PHP_EOL . "/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;" . PHP_EOL . "/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" . PHP_EOL; fwrite($dy,$b3v); return true; } function e2_get_table_definition($y3v,$fz){ $n3v = null; $q1 = mysqli_query($y3v,"SHOW CREATE TABLE `{$fz}`"); if ($q1){ $m3v = mysqli_fetch_array($q1); $n3v = $m3v['Create Table']; } return $n3v; } function e2_write_table_definition($dy,$y3v,$fz){ $f3v = e2_get_table_definition($y3v,$fz); if(e2_check_timeout() && $f3v){ fwrite($dy,$f3v); fwrite($dy,';'); fwrite($dy,PHP_EOL . PHP_EOL); return true; } return false; } function e2_get_table_data($y3v,$fz,$nl,$limit){ $bf = "SELECT * FROM `{$fz}` LIMIT {$nl}, {$limit}"; $q1 = mysqli_query($y3v,$bf); if (!$q1){ return false; } $d3v = ''; $s3v = "INSERT INTO `{$fz}` VALUES"; while ($u4 = mysqli_fetch_row($q1)) { $pcv = array(); foreach($u4 as $s){ $pcv[] = is_null($s)?"NULL" : "'" . mysqli_real_escape_string($y3v,$s)."'"; } $d3v .= $s3v . '(' . join(', ',$pcv).');' . PHP_EOL; } return $d3v; } function e2_table_disable_keys($fz){ return "ALTER TABLE `{$fz}` DISABLE KEYS;" . PHP_EOL; } function e2_table_enable_keys($fz){ return "ALTER TABLE `{$fz}` ENABLE KEYS;" . PHP_EOL; } function e2_get_total_records($y3v,$fz){ $t = mysqli_fetch_row(mysqli_query($y3v,"SELECT COUNT(*) FROM `{$fz}`")); return $t[0]; } function e2_backup_select_chuck_size_for_table_($fz){ $limit = 5000; if(substr ($fz, -7)==='Actions')$limit = 50000; if(substr ($fz, -7)==='Aliases')$limit = 20000; if(substr ($fz, -7)==='NotesKeywords')$limit = 50000; if(Log::$vy)__log ('Backup: chunk size '. (int)$limit); return$limit; } function e2_write_table_data($dy,$y3v,$fz){ $dj = e2_get_total_records($y3v,$fz); $nl = 0; $limit = e2_backup_select_chuck_size_for_table_($fz); $q1 = true; $a3v = 20000; $q3v = 30; if ($dj){ $l3v = e2_table_disable_keys($fz); fwrite($dy,$l3v); } $d3v = "INSERT INTO `{$fz}` VALUES"; $z3v = $dj; while ($z3v > 0){ $bf = "SELECT * FROM `{$fz}` ORDER BY `ID` LIMIT {$nl}, {$limit}"; $q1 = mysqli_query($y3v,$bf); $k3v = mysqli_num_rows($q1); if (!$q1 || !e2_check_timeout()) { $q1 = false; break; } $x3v = array(); $e3v = 0; $r3v = 0; while ($u4 = mysqli_fetch_row($q1)) { if (!e2_check_timeout()) { $q1 = false; break; } $k3v--; $lz = array(); foreach($u4 as $s){ $lz[] = is_null($s)?"NULL" : "'" . mysqli_real_escape_string($y3v,$s)."'"; } $zv = '(' . join(', ',$lz).')'; $e3v += strlen($zv); $x3v[] = $zv; $r3v++; if ( ($e3v >= $a3v) || ($r3v >= $q3v) || ($k3v == 0)) { $bf = $d3v . join(', ',$x3v).';'; fwrite($dy,$bf); fwrite($dy,PHP_EOL); $e3v = 0; $r3v = 0; $x3v = array(); } } $nl += $limit; $z3v -= $limit; } if ($dj){ $t3v = e2_table_enable_keys($fz); fwrite($dy,$t3v); } return $q1; } function e2_backup($y3v,$z7,$j3v,$vb = array()) { $h3v = tmpfile(); e2_write_dump_header($h3v); if(Log::$vy)__log ('Backup: wrote header'); $g3v = true; foreach($z7 as $fz){ if(Log::$vy)__log ('Backup: table '. $fz); $w3v = e2_write_table_definition($h3v,$y3v,$fz); if(Log::$vy)__log ('Backup: wrote table definition with result '. (int)$w3v); $u3v = e2_write_table_data($h3v,$y3v,$fz); if(Log::$vy)__log ('Backup: wrote table data with result '. (int)$u3v); $g3v = $w3v && $u3v; if ($g3v === false){ break; } } if(Log::$vy)__log ('Backup: wrote data with running == '. (int)$g3v); if ($g3v){ e2_write_dump_footer($h3v); fseek($h3v,0); $dy = fopen($j3v,'w+'); while ($g3v && ($zv = fread($h3v,1024))) { if(e2_check_timeout()) { fwrite($dy,$zv); } else { $g3v = false; } } fclose($dy); } fclose($h3v); return $g3v; } function f1 ($i3v,$content){ $o3v = MTMPL_FOLDER . $i3v .'.mtmpl.php'; if(is_file ($o3v)) { ob_start (); include $o3v; $z8 = ob_get_contents (); ob_end_clean (); return trim ($z8); } } function d1 () { global$_config,$_superconfig; $p3v = $_config['mail_from']; if (@$_superconfig['mail_from']) { $p3v = $_superconfig['mail_from']; } if ($p3v[strlen ($p3v)-1]=='@'){ $p3v .= $_SERVER['HTTP_HOST']; } return $p3v; } function s1 ($u,$subject,$en,$cyv = ''){ global$_superconfig; if (@$_superconfig['mail_debug']) { $ta = 'mail-debug'; $sn = basename (tempnam ($ta,'m-')); $jv = ( 'To:       '.$u ."\n". 'Subject:  '.$subject ."\n". $cyv ."\n". "--------------------------------------------------\n". $en ); n3 ($ta .'/'. $sn,$jv); chmod ($ta .'/'. $sn,E2_NEW_FILES_RIGHTS); rename ($ta .'/'. $sn,$ta .'/'. $sn.'.txt'); } $subject = '=?UTF-8?B?'. base64_encode ($subject) .'?='; $cyv .= "\r\nContent-Type: text/plain; charset=utf-8"; if(MAIL_ENABLED){ mail ($u,$subject,$en,trim ($cyv)); } } function _A ($jv){ global$_candy,$_protocol,$v,$c,$_current_url; if ( preg_match ('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si',$jv,$n3) and ( $n3[1]==='' or $n3[1]===$_current_url or $_protocol .'://'. $v . $n3[1]===$_current_url or $_protocol .'://'. $v . $c .'/'. $n3[1]===$_current_url or $_candy == 'e2m_install' ) ) { return $n3[2]; } else { return $jv; } } function _AT ($tq){ global$_candy,$v,$c,$_current_url; return ( $tq === '' or $tq === $_current_url or $_protocol .'://'. $v . $tq === $_current_url or $_protocol .'://'. $v . $c .'/'. $tq === $_current_url ); } function _READS ($kx){ if (!empty ($kx['read-count'])) return $kx['read-count']; return AeNoteReadCountsProvider :: getReadCountForNoteID ($kx['id']); } function _IMGSRC ($db){ return us ($db); } function _SVG ($db){ return is ($db); } function _COLOR ($ex,$rx,$vyv,$byv = 1){ if(strlen ($ex)!=3 and strlen ($ex)!=6) return 'f0f'; if(strlen ($rx)!=3 and strlen ($rx)!=6) return 'f0f'; if(strlen ($ex)==3)$ex = $ex[0].$ex[0].$ex[1].$ex[1].$ex[2].$ex[2]; if(strlen ($rx)==3)$rx = $rx[0].$rx[0].$rx[1].$rx[1].$rx[2].$rx[2]; $jz = array ( $ex[0].$ex[1],$ex[2].$ex[3],$ex[4].$ex[5], $rx[0].$rx[1],$rx[2].$rx[3],$rx[4].$rx[5], ); foreach ($jz as $t => $xf){ $jz[$t]=hexdec ($xf); } $jy = array ( $jz[0]+pow ($vyv,$byv) * ($jz[3]-$jz[0]), $jz[1]+pow ($vyv,$byv) * ($jz[4]-$jz[1]), $jz[2]+pow ($vyv,$byv) * ($jz[5]-$jz[2]), ); $yyv = ''; foreach ($jy as $t => $xf){ $yyv .= str_pad (dechex ($xf),2,'0',STR_PAD_LEFT); } return $yyv; } function _DT ($hl,$nyv){ if (!$nyv) return ''; list ($m4,$zl)=$nyv; $d = $hl; $n9 = ky ('m',$m4,$zl); $d = str_replace ('{zone}',e2__escape_all (my ($zl['offset'])), $d); $d = str_replace ('{month}',e2__escape_all (e2l_get_string ('um--month', array ('month' => $n9))), $d); $d = str_replace ('{month-short}',e2__escape_all (e2l_get_string ('um--month-short', array ('month' => $n9))), $d); $d = str_replace ('{month-g}',e2__escape_all (e2l_get_string ('um--month-g', array ('month' => $n9))), $d); $d = ky ($d,$m4,$zl); return $d; } function _AGO ($nyv){ return oy ($nyv[0], array ('offset' => $nyv[1]['offset'],'is_dst' => $nyv[1]['is_dst']) ); } function _NUM ($jv){ return e2_decline_for_number ($jv); } function _CSS ($myv){ return js ($myv); } function _CSS_HREF ($myv){ return os ($myv); } function _JS ($fyv){ return hs ($fyv); } function _LIB ($do_){ return gs ($do_); } function _T ($bo){ echo rs ($bo); } function _T_DEFER ($name){ echo ks ($name); } function _X ($bo){ echo es ($bo); } function _T_FOR ($bo,$dyv = null){ global$content; if ($dyv === null)$dyv = $bo; if(array_key_exists ($dyv,$content)) { echo rs ($bo); } else { echo ''; } } function _FIT ($cp,$vp){ } function _GUIDES ($syv = false){ global$_olba_guides; if(is_array ($syv))$_olba_guides = $syv; if (!is_array ($_olba_guides)) return; $ayv = '<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $qyv = 0; $lyv = $_olba_guides; $lyv[] = 100; foreach ($lyv as $r => $pk){ if ($pk == 100) break; $qyv += $pk; $ayv .= '<div style="position: fixed; left: '. $pk .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $zyv = 'position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($lyv[$r+1]-$lyv[$r]<4){ $ayv .= '<div style="'. $zyv.'; right: '. (100 - $pk) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $pk .'%</div>'; } else { $ayv .= '<div style="'. $zyv.'; left: '. $pk .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $pk .'%</div>'; } } $ayv .= '</div>'; $_olba_current_col = 0; return $ayv; } function _S ($x){ global$_strings; return$_strings[$x]; } function _SHORTCUT ($name){ return a ($name); } function e2__escape_all ($x){ $d = ''; for ($r = 0; $r < mb_strlen ($x); ++ $r){ $d .= '\\'. mb_substr ($x,$r,1); } return $d; } abstract class E2GIP { protected $gip_cookie_name = 'gip'; protected $gip_token_cookie_name = 'gip_access_token'; protected $gip_token = null; abstract public function get_auth_url(); abstract public static function get_profile_url($xs,$yz); abstract public function callback(); const PHP_VERSION_VK_FEATURE = 70100; public static function set_session_data($rm,$s){ if(session_status()==PHP_SESSION_NONE){ session_start(); } $_SESSION[$rm]=$s; } public static function get_session_data($rm,$kyv = false){ if(session_status()==PHP_SESSION_NONE){ session_start(); } if(!isset($_SESSION[$rm])) { return null; } $s = $_SESSION[$rm]; if($kyv){ unset($_SESSION[$rm]); } return $s; } public static function get_gips_order(){ return [ 'twitter' => 0, 'facebook' => 1, 'vk' => 2, 'telegram' => 3 ]; } public function get_config($rm){ $xyv = 'gips/'. $this->type .'.json'; if(is_file (USER_FOLDER . $xyv)) { $lu = @file_get_contents (USER_FOLDER . $xyv); } else { $lu = @file_get_contents (SYSTEM_FOLDER . $xyv); } if ($lu !== false){ $d = json_decode ($lu,true,512,JSON_BIGINT_AS_STRING)[$rm]; if ($d) return $d; } return null; } public function get_callback_url(){ return jv('e2m_gip_sign_in_callback', array('provider' => $this->type)); } protected function get_proxy_param(){ global$settings; $io = DEFAULT_LANGUAGE; if(array_key_exists ('language',$settings))$io = $settings['language']; return '?language=' . $io . '&type=' . $this->type . '&callback_url=' . urlencode($this->get_callback_url()); } public function get_gip_session_data(){ global$_config; $eyv = $this->gip_token ? $this->gip_token : $_COOKIE[b($this->gip_token_cookie_name)]; xn ( "SELECT * FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '". $this->type ."' ". "AND `SessionToken` = '" . rn($eyv)."' ". "ORDER BY `ID` DESC LIMIT 1", 'get GIP session data' ); $q1 = en (); return $q1 ? $q1[0] : array(); } public function is_logged_in(){ if(empty($_COOKIE[b($this->gip_cookie_name)]) || !in_array($_COOKIE[b($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[b($this->gip_cookie_name)] != $this->type || empty($_COOKIE[b($this->gip_token_cookie_name)])) { return false; } $zv = $this->get_gip_session_data(); return (bool)$zv; } protected function save_session($xs,$name,$accessToken,$ryv = '',$userEmail = '',$userLink = ''){ $m4 = time(); yn ( 'GIPsSessions', [ 'GIP' => $this->type, 'GIPAuthorID' => $xs, 'AuthorName' => $name, 'AuthorEmail' => $userEmail, 'AuthorProfileLink' => $userLink, 'SessionToken' => $accessToken, 'Stamp' => $m4, ], 'INSERT', 'ON DUPLICATE KEY UPDATE '. '`SessionToken` = "' . rn($accessToken).'", '. '`AuthorName` = "' . rn($name).'", '. '`Stamp` = "' . $m4 . '"' ); y($this->gip_cookie_name,$this->type); y($this->gip_token_cookie_name,$accessToken); if(isset($userEmail) && !empty($userEmail))y('commenter_email',$userEmail); $this->gip_token = $accessToken; } public static function get_logout_key(){ if ($tyv = self::get_session_data('logout_key')) { return $tyv; } $tyv = md5(microtime()); self::set_session_data('logout_key',$tyv); return $tyv; } public static function is_valid_logout_key($rm){ $jyv = self::get_session_data('logout_key',true); if (empty($jyv) || empty($rm) || $jyv != $rm){ return false; } return true; } public function logout(){ global$_config; y($this->gip_cookie_name); y($this->gip_token_cookie_name); xn ( "DELETE FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '" . $this->type . "' ". "AND `SessionToken` = '" . rn($_COOKIE[b($this->gip_token_cookie_name)]) . "'", 'logout' ); } public function get_avatar_width(){ return USERPIC_WIDTH; } public function get_avatar_height(){ return USERPIC_HEIGHT; } public function save_avatar($xs,$hyv){ global$_config; if (!preg_match ('/^https?\:\/\//i',$hyv)) return; $hyv = str_replace ("\0",'',$hyv); @j (MEDIA_ROOT_FOLDER . AVATARS_FOLDER); @chmod (MEDIA_ROOT_FOLDER . AVATARS_FOLDER,$_config['uploaded_files_mode']); $db = MEDIA_ROOT_FOLDER . AVATARS_FOLDER . $this->type .'-'. $xs .'.jpg'; if ($gyv = file_get_contents ($hyv)) { file_put_contents ($db,$gyv); } return $db; } } function e2m_gip_sign_in($zv){ global$_config,$settings; $type = $zv['provider']; $vk = e2_get_gip_instance($type); if (!$vk)v (); header('Location: ' . $vk->get_auth_url()); die; } function e2m_gip_sign_in_callback($zv){ global$_config; $type = $zv['provider']; $vk = e2_get_gip_instance($type); if (!$vk){ die ('Unknown provider'); } $wyv = $vk->callback(); echo '<script>'; if ($wyv === true){ $dg = $vk->get_gip_session_data(); $uyv = [ 'name' => $dg['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized(' . json_encode($uyv).');'; } else { echo 'alert (\''. $wyv. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($zv){ global$_config; $tyv = $zv['provider']; if (!E2GIP::is_valid_logout_key($tyv)) { die('invalid logout key'); } $vk = e2_get_logged_gip(); if($vk){ $vk->logout(); } v(); } function e2_list_gips(){ static $iyv = null; if(!is_null($iyv)) { return $iyv; } $oyv = SYSTEM_FOLDER. 'gips/'; $pyv = opendir($oyv); $iyv = []; $cnv = E2GIP::get_gips_order(); $vnv = count($cnv); while (($dy = readdir($pyv)) !== false){ if(pathinfo($dy,PATHINFO_EXTENSION)!='php') continue; $bnv = pathinfo($dy,PATHINFO_FILENAME); if ($bnv == 'vk'){ if(PHP_VERSION_ID < E2GIP::PHP_VERSION_VK_FEATURE) continue; } $rm = isset($cnv[$bnv]) ? $cnv[$bnv] : ++$vnv; $iyv[$rm]=$bnv; } closedir($pyv); ksort($iyv); return $iyv; } function e2_get_gip_class_name($type){ return "E2GIP" . ucfirst($type); } function e2_get_gip_instance($type){ if (!in_array($type,e2_list_gips())) { return false; } $ynv = e2_get_gip_class_name($type); $vk = new $ynv; return $vk; } function e2_get_gip_auth_url($type){ return jv('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type = ''){ $nnv = !$type ? e2_list_gips() : array($type); foreach($nnv as$type){ $vk = e2_get_gip_instance($type); if ($vk && $vk->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip(){ foreach(e2_list_gips() as$type){ $vk = e2_get_gip_instance($type); if ($vk && $vk->is_logged_in()) { return $vk; } } return false; } function e2_get_logged_gip_name(){ foreach(e2_list_gips() as$type){ $vk = e2_get_gip_instance($type); if ($vk && $vk->is_logged_in()) { return$type; } } return false; } function e2_get_user_profile_url($type,$xs,$yz){ $ynv = e2_get_gip_class_name($type); return $ynv::get_profile_url($xs,$yz); } function e2_get_gip_session($type){ $vk = e2_get_gip_instance($type); if (!$vk || !$vk->is_logged_in()) { return false; } return $vk->get_gip_session_data(); } foreach(e2_list_gips() as $mg){ require_once 'system/gips/' . $mg . '.php'; } define ('__DEV', (@$_config['dev_verbose'] > (int) !k2 ())); $_stopwatch = w ($_stopwatch); spl_autoload_register ('ka'); vv (); o (); $_strings = cv (); if (!BUILT) @include 'builder.php'; function e2 () { global$settings,$content, $_candy, $_lang, $_config, $_strings, $_candies_installer, $_candies_public, $_candies_ajax, $_candies_to_disallow_in_read_only, $_template, $_diagnose; k (); set_error_handler ('dv'); set_exception_handler ('ev'); header ('X-Powered-By: E2 Aegea v'. E2_VERSION); header ('Content-type: text/html; charset=UTF-8'); list ($candy,$parameters)=hv (); try { $content = []; $_candy = $candy; if ( @$_config['dev_slow_ajax'] and ( in_array ($candy,$_candies_ajax) ) ) { sleep (1 + 2 * (rand () / getrandmax ())); } if (!in_array ($candy,$_candies_installer)) { an (); } if (@$_config['read_only'] and in_array ($candy,$_candies_to_disallow_in_read_only)) { $candy = 'e2m_error404'; } $mnv = (bool)k2 (); $fnv = !in_array ($candy,$_candies_public); if(Log::$vy)__log ('User signed in? '. ($mnv? 'Yes' : 'No')); $_newsfeeds = []; zd ('rss',cd (), jv ('e2m_rss')); zd ('json',cd (), jv ('e2m_json')); if(substr ($candy,0,4)=='e2m_'){ qs (); } if(is_callable ($candy)) { if ($fnv && !$mnv){ if(substr ($candy,0,4)=='e2s_'){ c (jv ('e2m_sign_in')); } else { $content['title']=$_strings['pt--sign-in']; } } else { if(Log::$vy)__log ('Candy call {'); $content = call_user_func ($candy,$parameters); if(Log::$vy)__log ('}'); } } else { $fnv = false; $content = e2_error404_mode (); } } catch (AeMySQLException $e){ if(substr ($candy,0,4)=='e2s_'){ xv ($e); } else { kv ($e); $parameters = array (); $content['unavailable?']=true; } } if (!is_array ($content))$content = array (); $content['template']['respond-to-dark-mode?'] = ( $_template['supports_dark_mode'] and (bool) @$settings['appearance']['respond_to_dark_mode'] ); $content['template']['use-likely-light?']=$_template['use_likely_light']; if (!array_key_exists ('class',$content)) { $content['class']=str_replace ('_','-',str_replace ('e2m_','',$candy)); } if (!array_key_exists ('notes',$content))$content['notes'] = array (); if (!array_key_exists ('drafts',$content))$content['drafts'] = array (); if (!array_key_exists ('comments',$content))$content['comments'] = array (); if (!array_key_exists ('notes-list',$content))$content['notes-list'] = array (); if (fn_ () !== null){ if(Log::$vy)__log ('Stuff for installed engine {'); $content['sign-in'] = [ 'done?' => $mnv, 'required?' => $fnv, 'necessary?' => $fnv && !$mnv, 'href' => jv ('e2m_sign_in'), 'prompt' => $_strings['gs--need-password'], ]; $content['hrefs'] = array ( 'everything' => jv ('e2m_everything'), ); if (!array_key_exists ('tags',$content)) $content['tags']=ff ($parameters); $content['blog']=p2 (); $content['form-search']=fa ($parameters); $content['engine']=im (); $content['form-login']=o2 (); if($content['form-login']===null) unset($content['form-login']); if (!array_key_exists ('summary',$content)) { if (!empty ($settings['meta_description'])) { $content['summary']=strip_tags (h3 (htmlspecialchars ($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } else { $content['summary']=trim (strip_tags ($content['blog']['subtitle'])); } } if (k2 ()) { $content['admin']=pm (); $content['last-modifieds-by-id']='{}'; if (@$_COOKIE[b ('local_copies')]) { $content['last-modifieds-by-id'] = ( dm ($_COOKIE[b ('local_copies')]) ); } } if(Log::$vy)__log ('}'); } $content['title']=strip_tags (h3 (htmlspecialchars ($content['title'],ENT_NOQUOTES,HSC_ENC))); if (@$content['heading']) { $content['heading']=strip_tags (h3 (htmlspecialchars ($content['heading'],ENT_NOQUOTES,HSC_ENC))); } $content['language']=$_lang; if (!@isset ($_diagnose['ok?'])) { if (@$_COOKIE[b ('diagnose')] or @$_diagnose['need?']) { fv (); } } if (fn_ () !== null){ if ( $settings['appearance']['show_view_counts'] ) { AeNoteReadCountsProvider :: setSQLRequestTemplateToMapIDsToReadCounts ( "SELECT `ID`, `ReadCount` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } foreach($content['notes'] as $l2){ va ($l2['format-info']['links-required']); } } $content['message']=av (); $oi = ts (); $content['meta']=om ( $candy, $content['notes'], $content['tag'], $content['blog'], $content['pages'] ); $content['stat']=yd (); $oi = xs ($oi); if (fn_ () !== null){ $dnv = false; if (fn_ () !== null and qa ()) { if(is_writable (USER_FOLDER . 'indexing.psa')) { $dnv = true; } else { $_diagnose['need?']=true; y ('diagnose','1'); } } } echo $oi; if (fn_ () !== null){ if ($dnv){ if(Log::$vy)__log ('Spawn BSI step'); p3 (jv ('e2s_bsi_step', array ())); } } if (@$_config['dev_dump_ctree'])yv ($content); } ?>