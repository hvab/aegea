<?php $_stopwatch=microtime(); define('E2_VERSION',3733); define('E2_RELEASE','2.10a'); define('E2_EDITION',1); define('E2_UA_STRING','E2 (v'. E2_VERSION .'; Aegea)'); define('E2_MINIMUM_PHP','5.6'); define('E2_MINIMUM_MYSQL',4.1); define('BUILDER_OBFUSCATE',1); define('BUILDER_FLATTEN',1); define('E2_NEW_FILES_RIGHTS',0777); define('E2_JSON_STYLE',JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); define('E2_RUN_ID',chr(rand(65,90))); define('HSC_ENC','UTF-8'); define('SECONDS_IN_A_MINUTE',60); define('SECONDS_IN_AN_HOUR',3600); define('SECONDS_IN_A_DAY',86400); define('SECONDS_IN_A_WEEK',604800); define('SECONDS_IN_A_MONTH',2592000); define('SECONDS_IN_A_YEAR',31536000); if(version_compare(PHP_VERSION,E2_MINIMUM_PHP) < 0){ die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } if(!function_exists('getimagesize')) { die ('Function getimagesize is not defined, php_gd not installed?'); } if(!function_exists('mb_internal_encoding')) { die ('Function mb_internal_encoding is not defined, php_mbstring not installed?'); } error_reporting(E_ALL); setlocale(LC_CTYPE,'ru_RU.UTF'); mb_internal_encoding('UTF-8'); date_default_timezone_set('GMT'); if(version_compare(PHP_VERSION,'7.0') < 0){ error_reporting(E_ALL & ~E_STRICT); } if(is_file('superconfig.php')) { include 'superconfig.php'; } $_protocol=( !empty ($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off' or $_SERVER['SERVER_PORT']==443 or isset ($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO']=='https' or isset ($_SERVER['HTTP_X_HTTPS']) && ($_SERVER['HTTP_X_HTTPS']) ) ? 'https':'http'; if(is_file('force-https')) { $_protocol='https'; } $c=substr( $_SERVER['PHP_SELF'],0,strpos($_SERVER['PHP_SELF'],'/index.php') ); list ($v, ) = explode(':',$_SERVER['HTTP_HOST']); $full_blog_url=$_protocol. '://'. $v.$c; $_user_folder_name=str_replace('/','--',$v.$c); if(substr($_user_folder_name,0,4)=='www.'){ $_user_folder_name=substr($_user_folder_name,4); } if(is_file('multiuser')) { if ( !empty ($_superconfig) and array_key_exists('rewrites',$_superconfig) and array_key_exists($_user_folder_name,$_superconfig['rewrites']) ) { $_user_folder_name=$_superconfig['rewrites'][$_user_folder_name]; } define('USER_FOLDER','users/'. $_user_folder_name .'/'); } else { define('USER_FOLDER','user/'); } if( !empty ($_superconfig) and array_key_exists('store_files_by_users',$_superconfig) and $_superconfig['store_files_by_users'] ) { define('MEDIA_ROOT_FOLDER',USER_FOLDER .'files/'); } else { define('MEDIA_ROOT_FOLDER',''); } if(in_array('mail',explode(',',ini_get('disable_functions')))) { define('MAIL_ENABLED',false); } else { define('MAIL_ENABLED',true); } define('EXTRAS_FOLDER',USER_FOLDER.'extras/'); define('BACKUP_FOLDER',USER_FOLDER.'backup/'); define('CACHES_FOLDER',USER_FOLDER.'caches/'); define('USER_LIBRARY_FOLDER',USER_FOLDER.'library/'); define('LOG_FOLDER',USER_FOLDER.'logs/'); define('LICENSE_FILE',USER_FOLDER.'license.psa'); define('PICTURES_FOLDER','pictures/'); define('THUMBNAILS_FOLDER','pictures/thumbs/'); define('AVATARS_FOLDER','pictures/avatars/'); define('VIDEO_FOLDER','video/'); define('AUDIO_FOLDER','audio/'); define('TEMPLATES_FOLDER','themes/'); define('SYSTEM_FOLDER','system/'); define('SCRIPTS_FOLDER','system/js/'); define('SYSTEM_LIBRARY_FOLDER','system/library/'); define('SYSTEM_TEMPLATE_FOLDER','system/theme/'); define('VIDEO_ICON_IMAGE','system/theme/images/video.svg'); define('VIDEO_ICON_WIDTH',180); define('VIDEO_ICON_HEIGHT',120); define('AUDIO_ICON_IMAGE','system/theme/images/audio.svg'); define('AUDIO_ICON_WIDTH',120); define('AUDIO_ICON_HEIGHT',120); define('LANGUAGES_FOLDER','system/languages/'); define('DEFAULTS_FOLDER','system/default/'); define('MTMPL_FOLDER','system/default/mail/'); define('DEFAULT_TEMPLATE','acute'); if(!is_file(DEFAULTS_FOLDER. 'config.php')) die ('System config missing'); include DEFAULTS_FOLDER.'config.php'; $_default_config=$_config; if(is_file(USER_FOLDER. 'config.php')) { include USER_FOLDER.'config.php'; $_config=array_merge($_default_config,$_config); } define('E2E_STRANGE_ERROR',10); define('E2E_USER_ERROR',20); define('E2E_PERMISSIONS_ERROR',30); define('E2E_MESSAGE',100); define('E2E_DIAGNOSTICS_MESSAGE',110); define('DEFAULT_ITEMS_PER_PAGE',10); define('MAX_ITEMS_PER_PAGE',100); define('FP_NO_ID_OR_NEW', -1); define('FP_INSERT_ERROR', -10); define('FP_UPDATE_ERROR', -11); define('FP_EMPTY_FIELD', -20); define('FP_TITLE_OR_TEXT_EMPTY', -21); define('FP_NOT_COMMENTABLE', -30); define('FP_COMMENT_DOUBLE_POST', -101); define('FP_COMMENT_TOO_LONG', -102); define('FP_COMMENT_SPAM_SUSPECT', -103); define('NOTE_COMMENTABLE_NOW', -1); define('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define('THUMB_WIDTH',180); define('THUMB_HEIGHT',120); define('THUMB_JPG_QUALITY',50); define('SCALED_IMAGE_JPG_QUALITY',80); define('USERPIC_WIDTH',80); define('USERPIC_HEIGHT',80); define('USERPIC_JPG_QUALITY',80); $_fp_error=false; if(strstr(__FILE__,'all.php')) { define('BUILT',0); } else { define('BUILT',1); } function c($b=''){ global$_protocol,$errors,$v,$c; @session_start(); $_SESSION['errors']=$errors; if(substr($b,0,strlen($_protocol)+3)!=$_protocol .'://'){ header('Location: '. $_protocol .'://'. $v.$c .'/'. $b); } else { header('Location: '. $b); } flush(); die; } function v(){ $y=$_SERVER['HTTP_REFERER']; c($y); } function b($n=''){ global $c; $m=str_replace('/','--',trim($c,'/')); if ($m!=='')$m.='-'; $f=substr_count($_SERVER['HTTP_HOST'],'.'); $d=$m . @str_repeat('_',$f).$n; return $d; } function y($n,$s='',$a=true){ $q=$a? (time()+3600*24*365) : (0); $l=$_SERVER['HTTP_HOST']; $z=substr_count($l,'.'); if ($z < 3)$l=str_repeat('.',3-$z).$l; $f=setcookie(b($n),$s,$q,'/'); } function n($k,$x,$e_=''){ if(trim($x)!=''){ $x=explode($k,$x); foreach ($x as $r => $t)$x[$r]=trim($t); foreach ($x as $r => $t) if ($t=='') unset ($x[$r]); $j=array_unique($x); if ('sort'==$e_)sort($j); return $j; } else return array (); } function m($x){ $h=array(); if(is_file(DEFAULTS_FOLDER.'romanize.txt')) { $h=file(DEFAULTS_FOLDER.'romanize.txt'); } $g=$w=''; foreach ($h as $r => $u){ if (!($r%2))$g.=rtrim($u) .' '; else $w.=rtrim($u) .' '; if ($r%2){ while (mb_strlen($w) < mb_strlen($g))$w.=' '; while (mb_strlen($w) > mb_strlen($g))$g.=' '; } } $i=''; $o=-1; for ($r=0; $r < mb_strlen($g); ++ $r){ $p=mb_substr($g,$r,1); if ($p!=' '){ $i.=$p; if ($o == -1)$o=$r; } elseif ($i){ $cv=trim(mb_substr($w,$o,mb_strpos($w,' ',$o+1)-$o)); $vv=array ($i,$cv); $bv[mb_strlen($i)][] = $vv; $i=''; $o=-1; } } $yv=array(); for ($r=count($bv); $r > 0; -- $r){ foreach ($bv[$r] as $vv)$yv[$vv[0]] = $vv[1]; } return strtr($x,$yv); } function f($nv,$mv,$fv=0){ if ($mv==0) return 0; $dv=round($nv/$mv*100,$fv); $sv=pow(10, -$fv); if ($nv > 0 and $dv==0)$dv=$sv; if ($nv < $mv and $dv==100)$dv=100-$sv; return $dv; } function d($av,$action,$qv){ if (!is_array($av))$av=array(); if($action=='add'){ $av=array_unique(array_merge($av,$qv)); } if($action=='remove'){ unset ($av[array_search($qv,$av)]); } if (!is_array($av))$av=array(); return $av; } function s($lv){ $parameters=$lv['parameters']; $zv=[ 'success' => false ]; try { $lv['flipping-function'] ($parameters); $kv=$parameters; $kv['value'] = !$parameters['value']; $zv=[ 'success' => true, 'data' => [ 'flag-now-on' => ($parameters['value']==1), 'new-href' => jv($lv['candy-name'],$kv), ] ]; } catch (AeMySQLException $e){ kv($e,'Could not set '. $lv['flag-name'] .' flag'); } if(array_key_exists('result',$_POST) and ($_POST['result']=='ajaxresult')) { $zv=json_encode($zv); die ($zv); } else { c(jv('e2m_tag',$parameters)); } } function a($x){ $xv=@$_SERVER['HTTP_USER_AGENT'] or $xv=''; $ev=strstr($xv,'iPhone') || strstr($xv,'iPad'); $rv=strstr($xv,'Macintosh'); if ($ev) return ''; if ($x=='submit'){ if ($rv){ return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($x=='livesave'){ if ($rv){ return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($x=='navigation'){ if ($rv){ return '&#x2325;'; } else { return 'Ctrl'; } } if ($x=='navigation-later'){ if ($rv){ return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($x=='navigation-earlier'){ if ($rv){ return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function q($tv){ $tv=str_replace('<','&lt;',$tv); $tv=str_replace('>','&gt;',$tv); return $tv; } function l($tv){ $tv=str_replace('"','&quot;',$tv); return $tv; } function z($s,$jv){ return str_replace('.',',',round($s,$jv)); } function e2_stripslashes_array($hv){ return is_array($hv)?array_map('e2_stripslashes_array',$hv):stripslashes($hv); } function k(){ if(version_compare(PHP_VERSION,'7.4') >= 0) return; if(get_magic_quotes_runtime()) { set_magic_quotes_runtime(0); } if(get_magic_quotes_gpc()) { $_GET=e2_stripslashes_array($_GET); $_POST=e2_stripslashes_array($_POST); $_COOKIE=e2_stripslashes_array($_COOKIE); $_REQUEST=e2_stripslashes_array($_REQUEST); } } function x($gv){ return sprintf('%u',ip2long($gv)); } function e_($wv){ return long2ip(sprintf('%d',$wv)); } function e2_decline_for_number($tv,$wv=null){ $uv=$tv; if ($wv===null){ $wv=substr($tv,0,strpos($tv,' ')); $uv=substr($tv,strpos($tv,' ')+1); } $iv=strpos($uv,'('); $ov=strpos($uv,')'); if ($ov > $iv)$pv=substr($uv,$iv,$ov-$iv+1); $cb=explode(',',trim(@$pv,'()')); if(count($cb)==2)array_unshift($cb,''); $vb=array (2,0,1,1,1,2,2,2,2,2); if ($wv%100 > 10 and $wv%100 < 20)$bb=2; else $bb=$vb[$wv%10]; $yb=$cb[$bb]; $tv=str_replace($pv,$yb,$tv); if(strstr($tv,'(') and strstr($tv,')')) { return e2_decline_for_number($tv,$wv); } else { return $tv; } } function r($nb){ $mb=glob($nb,GLOB_NOSORT); if(is_array($mb)) { foreach ($mb as $fb){ @unlink($fb); } } } function t($db){ $mb=glob($db .'*',GLOB_NOSORT); if(is_array($mb)) { foreach ($mb as $fb){ if(basename($fb)!='.' and basename($fb)!='..'){ if(is_dir($fb)) { if (t($fb .'/')) { if (!rmdir($fb)) { return false; } } else { return false; } } else { @unlink($fb); } } } return true; } else { return false; } } function j($sb){ $sb=trim($sb,'/'); $sb=explode('/',$sb); $db=''; foreach ($sb as $ab){ $db=$db.$ab; if (!is_dir($db)) { if (@mkdir($db)) { @chmod($db,E2_NEW_FILES_RIGHTS); } else { return false; } } $db=$db.'/'; } return true; } function h($sb){ return preg_replace('/\/([^\/]+?)\/\.\./','',$sb); } function g($x){ $qb=get_html_translation_table(HTML_ENTITIES); $qb=array_flip($qb); return strtr($x,$qb); } function w($lb=NULL){ if(NULL==$lb)$lb=microtime(); list ($zb,$kb)=explode(' ',$lb); return ((float)$zb + (float)$kb); } if(E2_EDITION){ function u($xb=false){ global$_config,$v; static $eb=null; if(is_array($eb)) return $eb; $eb=@unserialize(file_get_contents(LICENSE_FILE)); $rb=time(); if(is_array($eb)) { if (@$eb['checked-stamp'] >= $rb-SECONDS_IN_A_DAY){ return $eb; } } if (!$xb) return false; $eb=file_get_contents($_config['license_url'].$v); $eb=json_decode($eb,true); list ($tb,$jb,$hb)=explode('.',$eb['until']); $gb=gmmktime(23,59,59,$jb,$tb,$hb); $gb -= qy(sy(),$rb); $eb['checked-stamp']=time(); $eb['until-stamp']=$gb; @n3(LICENSE_FILE,serialize($eb)); return $eb; } function i(){ if (!u()) { o3(jv('e2s_post_service', ['service' => 'verify']), true); } } } function o(){ global$settings; if (!isset ($settings))$settings=array(); $ib=array(); if(is_file(USER_FOLDER.'settings.json')) { $ib=json_decode(file_get_contents(USER_FOLDER.'settings.json'),true); $ob=13; } elseif(is_file(USER_FOLDER.'settings.psa')) { $ib=unserialize(file_get_contents(USER_FOLDER.'settings.psa')); } if (!is_array($ib))$ib=array(); $settings=array_merge($settings,$ib); if ( !array_key_exists('appearance',$settings) or !array_key_exists('notes_per_page',$settings['appearance']) or !is_numeric($settings['appearance']['notes_per_page']) or $settings['appearance']['notes_per_page'] < 1 ){ $settings['appearance']['notes_per_page']=DEFAULT_ITEMS_PER_PAGE; } if($settings['appearance']['notes_per_page'] > MAX_ITEMS_PER_PAGE){ $settings['appearance']['notes_per_page']=MAX_ITEMS_PER_PAGE; } if ( !array_key_exists('comments',$settings) or !array_key_exists('default_on', @$settings['comments']) ) { $settings['comments']['default_on']=false; } if (!array_key_exists('respond_to_dark_mode',$settings)) { $settings['appearance']['respond_to_dark_mode']=true; } return true; } function e2m_settings(){ global$settings,$_template,$_strings,$_config; $pb=array(); $c3=DEFAULT_LANGUAGE; if(array_key_exists('language',$settings)) { $c3=$settings['language']; } foreach(glob(LANGUAGES_FOLDER. '*.php') as $fb){ $v3=substr(basename($fb),0,2); $b3=file_get_contents($fb); if(preg_match( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu',$b3,$y3 )) { $n3=$y3[1]; } else { $n3=$v3; } $pb[$v3] = array ( 'selected?' => (bool) ($c3==$v3), 'display-name' => $n3, ); } $eb=$m3=false; if(E2_EDITION){ $eb=u(); $m3=true; } $d['title']=$_strings['pt--settings']; $d['heading']=$_strings['pt--settings']; $d['form']='form-preferences'; $d['form-preferences'] = array ( 'blog-title-default' => htmlspecialchars($_strings['e2--default-blog-title'],ENT_COMPAT,HSC_ENC), 'blog-title' => htmlspecialchars(bd(),ENT_COMPAT,HSC_ENC), 'blog-subtitle' => htmlspecialchars(@$settings['blog_subtitle'],ENT_COMPAT,HSC_ENC), 'blog-meta-description' => htmlspecialchars(@$settings['meta_description'],ENT_COMPAT,HSC_ENC), 'blog-author-default' => htmlspecialchars($_strings['e2--default-blog-author'],ENT_COMPAT,HSC_ENC), 'blog-author' => htmlspecialchars(@$settings['author'],ENT_COMPAT,HSC_ENC), 'languages' => $pb, 'language' => $c3, 'form-action' => jv('e2s_settings_save'), 'userpic-href' => nd('square'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'emailing-possible?' => MAIL_ENABLED, 'email-notify?' => (bool) @$settings['notificatons']['new_comments'], 'email' => htmlspecialchars(@$settings['author_email'],ENT_NOQUOTES,HSC_ENC), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-view-counts?' => (bool)$settings['appearance']['show_view_counts'], 'show-sharing-buttons?' => (bool)$settings['appearance']['show_sharing_buttons'], 'includes-google-analytics?' => false, 'includes-yandex-metrika?' => false, 'template-name' => $_template['name'], 'templates' => is(), 'respond-to-dark-mode?' => (bool) @$settings['appearance']['respond_to_dark_mode'], 'submit-text' => $_strings['fb--save-changes'], 'show-payment-info?' => $m3 and ($eb!==false), 'paid-period' => $eb['licensed?'] ? (time() <= $eb['until-stamp']) : false, 'paid-period-ended' => $eb['licensed?'] ? (time() > $eb['until-stamp']) : false, 'paid-until' => $eb['licensed?'] ? ([$eb['until-stamp'],sy()]) : false, 'pay-href' => (string) @$eb['pay-href'], 'space-usage' => j3(r3(),true), ); if(E2_EDITION){ $d['form-preferences']['includes-google-analytics?']=true; $d['form-preferences']['google-analytics'] = ( htmlspecialchars( @$settings['embed']['google-analytics'],ENT_COMPAT,HSC_ENC ) ); $d['form-preferences']['includes-yandex-metrika?']=true; $d['form-preferences']['yandex-metrika'] = ( htmlspecialchars( @$settings['embed']['yandex-metrika'],ENT_COMPAT,HSC_ENC ) ); } return $d; } function e2s_settings_save(){ global$settings,$_strings; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_settings')); } $f3=$d3=''; if(array_key_exists('blog-title',$_POST)) { $f3=trim($_POST['blog-title']); } if(array_key_exists('blog-subtitle',$_POST)) { $d3=trim($_POST['blog-subtitle']); } if(array_key_exists('blog-meta-description',$_POST)) { $s3=trim($_POST['blog-meta-description']); } if(array_key_exists('blog-author',$_POST)) { $a3=trim($_POST['blog-author']); } if(array_key_exists('language',$_POST)) $q3=$_POST['language']; if(array_key_exists('email',$_POST)) $l3=trim($_POST['email']); $z3=(int)$_POST['notes-per-page']; $settings['blog_title']=$f3; $settings['blog_title']=bd(); $settings['author']=$a3; $settings['author_email']=$l3; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if(array_key_exists('template',$_POST)) { $settings['template']=trim($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); $settings['appearance']['show_view_counts'] = isset ($_POST['show-view-counts']); if ( !array_key_exists('language',$settings) or $settings['language']!=$q3 ){ e2_drop_all_kinds_of_cache(); $settings['language']=$q3; } if ( $settings['blog_subtitle']!=$d3 or $settings['meta_description']!=$s3 or $settings['appearance']['notes_per_page']!=$z3 or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['appearance']['respond_to_dark_mode'] != isset ($_POST['respond-to-dark-mode']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink(CACHE_FILENAME_FRONTPAGE); @unlink(CACHE_FILENAME_FRONTPAGE_FEED); @unlink(CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['blog_subtitle']=$d3; $settings['meta_description']=$s3; $settings['appearance']['notes_per_page']=$z3; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['appearance']['respond_to_dark_mode'] = isset ($_POST['respond-to-dark-mode']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } if(E2_EDITION){ if(array_key_exists('google-analytics',$_POST)) { $settings['embed']['google-analytics']=trim($_POST['google-analytics']); } if(array_key_exists('yandex-metrika',$_POST)) { $settings['embed']['yandex-metrika']=trim($_POST['yandex-metrika']); } } r(CACHE_FILENAMES_NOTES_COMMENTS); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_settings')); } c(jv('e2m_frontpage', array ('page' => 1))); } function e2m_underhood(){ global$_db; $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['title']='Underhood'; $d['heading']='Underhood'; kn('check version'); $k3=$x3=0; foreach(glob(CACHES_FOLDER .'/*') as $fb){ $k3 ++; $x3+=stat($fb)['size']; } $e3=$r3=0; foreach(glob(LOG_FOLDER .'*') as $fb){ $e3 ++; $r3+=stat($fb)['size']; } $t3=aa(); $j3=f($t3['indexed_count'],$t3['total_count']); $h3=false; if ($t3['time_spent']) { $h3=floor($t3['time_spent']); if ($h3 >= 60){ $h3=( floor($h3/60) .'min '. str_pad($h3 % 60,2,'0',STR_PAD_LEFT). 's' ); } elseif ($h3 > 0){ $h3.='s'; } else { $h3=false; } } $g3=array_keys(jn()); $d['form']='form-underhood'; $d['form-underhood'] = [ 'mysql-version' => $_db['version'], 'form-action-engine-rebuild' => BUILT? false:jv('e2s_post_service', ['service' => 'build']), 'cache-files-count' => $k3, 'cache-files-size' => $x3, 'form-action-cache-invalidate' => jv('e2s_post_service', ['service' => 'sync']), 'search-index-items-count' => $t3['indexed_count'], 'search-index-total-items-count' => $t3['total_count'], 'search-index-time-spent' => $h3, 'search-index-percentage' => $j3, 'form-action-search-index-continue' => la()? jv('e2s_bsi_step'):false, 'form-action-search-index-rebuild' => jv('e2s_bsi_drop'), 'log-files-count' => $e3, 'log-files-size' => $r3, 'form-action-logs-enable' => jv('e2s_post_service', ['service' => 'log']), 'backup-last' => count($g3)? ky('D, M d, Y \a\t H:i:s',$g3[0]) : false, 'form-action-backup' => jv('e2s_dump'), 'form-action-database-migrate' => jv( 'e2s_post_service', ['service' => 'migrate'] ), ]; return $d; } function e2m_database(){ global$settings,$_strings,$_superconfig; if (@$_superconfig['disallow_db_config']) { return e2_error404_mode(); } $d['title']=$_strings['pt--database']; $d['heading']=$_strings['pt--database']; $d['form']='form-database'; $d['form-database'] = array ( 'form-action' => jv('e2s_database_save'), 'db-server' => htmlspecialchars(@$settings['db']['server']? $settings['db']['server']:'localhost'), 'db-user' => htmlspecialchars(@$settings['db']['user_name']? $settings['db']['user_name']:'root'), 'db-password' => htmlspecialchars(p2(@$settings['db']['passw'])), 'db-database' => htmlspecialchars(@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $d; } function e2s_database_save(){ global$settings,$_db,$_superconfig,$_strings,$_config; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_database')); } if (@$_superconfig['disallow_db_config']) { return e2_error404_mode(); } $w3['server'] = @$_POST['db-server']; $w3['user_name'] = @$_POST['db-user']; $w3['passw'] = o2(@$_POST['db-password']); $w3['name'] = @$_POST['db-database']; $u3=false; try { kn('check database from HTTP post',$w3); $i3=e2_model_data_check($w3['name']); if (!$i3['occupied'] or !$i3['migrateable']) { mv($_strings['er--db-data-incomplete']); c(jv('e2m_database')); } an(); $u3=true; } catch (AeMySQLCannotConnectException $e){ mv( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error() .' ('. mysqli_connect_errno() .')' ); } catch (AeMySQLTooOldException $e){ mv(e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv($_strings['er--cannot-find-db'] .' '. $w3['name']); } if (!$u3){ c(jv('e2m_database')); } $settings['db']=$w3; if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_database')); } e2_drop_all_kinds_of_cache(); if (!$_config['retain_search_indexes_on_db_switch']) { $o3=ra(); try { $o3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$p3)__log('Rose not available'); } qa(); } o3(jv('e2s_bsi_step')); c(jv('e2m_settings')); } function p(){ return class_exists('ZipArchive'); } function e2m_get_backup(){ if (p()) { $cy=new ZipArchive(); $vy=BACKUP_FOLDER .'backup.zip'; if ($cy -> open($vy,ZIPARCHIVE::CREATE)) { @ $cy -> addEmptyDir('backup'); @ $cy -> addEmptyDir('backup/db'); @ $cy -> addFile(USER_FOLDER.'userpic@2x.jpg','backup/files/userpic@2x.jpg'); @ $cy -> addFile(USER_FOLDER.'userpic@2x.png','backup/files/userpic@2x.png'); foreach(glob(BACKUP_FOLDER .'backup-*.sql') as $by); $cy -> addFile($by,'backup/db/'. basename($by)); $cy -> close(); } if(is_file($vy)) { header('Content-Type: application/zip'); header('Content-Disposition: attachment; filename="backup.zip"'); readfile($vy); unlink($vy); } else { die ('Cannot get backup'); } die; } else { die ('Cannot get backup'); } } if(substr(@$_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2)=='ru'){ define('DEFAULT_LANGUAGE','ru'); } else { define('DEFAULT_LANGUAGE','en'); } function e2l_get_string($ny,$lv){ global$_strings; $name=$_strings[$ny]; if(preg_match_all('/\$\[(.+?)\]/u',$name,$y3,PREG_SET_ORDER)) { foreach ($y3 as $my){ $n=$my[1]; $fy=''; if(strstr($n,'.')) list ($n,$fy)=explode('.',$n,2); if(array_key_exists($n,$lv)) { if ($fy){ $name=str_replace($my[0],e2l__format_value($fy,$lv[$n],$ny),$name); } else { $name=str_replace($my[0],$lv[$n],$name); } } } } return$name; } function e2l__format_value($fy,$s,$ny){ list ($fy,$dy)=explode('.',$fy,2); $sy='e2lstr_'. $fy; if(function_exists($sy)) { return call_user_func($sy,$s,$dy,$ny); } else { return $s; } return $s; } function cv(){ global$_lang,$settings; if ( array_key_exists('language',$settings) and is_file($ay=LANGUAGES_FOLDER.$settings['language'] .'.php') ) { $_lang=$settings['language']; include $ay; } elseif(is_file($ay=LANGUAGES_FOLDER.DEFAULT_LANGUAGE .'.php')) { $_lang=DEFAULT_LANGUAGE; include $ay; } else { die ('Language file missing: '. $ay); } return e2l_load_strings(); } define('LOG_FILE',LOG_FOLDER.'main.log'); define('LOG_DEBUG_FILE',LOG_FOLDER.'debug.log'); class Log { public static $p3=false; public static $qy=false; } function vv(){ global$_config; if ( $_config['write_log'] and ($_config['write_log_create'] or is_file(LOG_FILE)) ) { Log::$p3=true; Log::$qy=true; } else { Log::$p3=false; Log::$qy=false; } if (!Log::$p3) return; @j(LOG_FOLDER); if($_config['write_log_reset']) { @file_put_contents(LOG_FILE,''); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } if (@$_config['write_log_limit'] and is_file(LOG_FILE)) { $ly=@stat(LOG_FILE); $ly=$ly['size']; if ($ly > $_config['write_log_limit']) { @rename(LOG_FILE,LOG_FILE .'.bak'); @chmod(LOG_FILE .'.bak',E2_NEW_FILES_RIGHTS); @file_put_contents(LOG_FILE,''); } } __log('────────────────────────────────────────────────────────────────────────────────'); } function bv($zy=false) { static $ky=false; if ($zy===false) return $ky; if ($zy==='') return $ky=false; $fb=str_replace( '$',gmdate('Y-m-d-\a\t-H-i-s'),$zy ); return $ky= $fb; } function __log($tv){ static $ey; global$_stopwatch; $ry=bv(); $ty=''; $jy=str_pad(round(w()-$_stopwatch,5),10,' ',STR_PAD_RIGHT); if ($tv[0]=='}'){ -- $ey; if ($ey < 0)$ey=0; } $hy=( E2_RUN_ID .' '. $ty .''. $jy .' '. str_repeat(' ',$ey*2). $tv."\n" ); if ($tv[strlen($tv)-1]=='{'){ ++ $ey; } $gy=FILE_APPEND; if(Log::$qy){ @file_put_contents(LOG_FILE,$hy,$gy); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } if ($ry!==false){ $fb=LOG_FOLDER.$ry .'.log'; @j(LOG_FOLDER); @file_put_contents($fb,$hy,$gy); @chmod($ry,E2_NEW_FILES_RIGHTS); } if ($tv[0]=='#'){ @j(dirname(LOG_DEBUG_FILE). '/'); @file_put_contents(LOG_DEBUG_FILE,$hy,$gy); @chmod(LOG_DEBUG_FILE,E2_NEW_FILES_RIGHTS); } } function yv($wy){ @n3( USER_FOLDER .'ctree.php', "<?php\r\n\r\n". var_export($wy,true). "\r\n\r\n?>php" ); } function nv(){ @j(LOG_FOLDER); @file_put_contents(LOG_FILE,''); @chmod(LOG_FILE,E2_NEW_FILES_RIGHTS); } function mv($uy,$type=E2E_STRANGE_ERROR){ global$errors,$settings, $_config, $_strings, $_diagnose; if (!isset ($errors))$errors=[]; $iy=(!e2_()+1 <= (int)$_config['show_call_stack']); if ($uy){ if ($uy[0]!='<')$uy='<p>'.$uy .'</p>'; $oy=array ( 'description' => $uy, 'type' => $type, ); if($type==E2E_STRANGE_ERROR and $iy){ $oy['backtrace']=debug_backtrace(); } $errors[] = $oy; } if($type==E2E_PERMISSIONS_ERROR){ $_diagnose['need?']=true; y('diagnose','1'); } return true; } function fv(){ global$errors,$py,$_strings,$_diagnose; $cn=y3(); if(count($cn)==0){ y('diagnose',''); unset($_COOKIE['diagnose']); $_diagnose['need?']=false; $_diagnose['ok?']=true; return true; } else { $vn=''; $vn.='<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $vn.='<ul>'; foreach ($cn as $bn){ if ($bn=='.')$bn=''; $vn.='<li><tt>./'. $bn .'</tt></li>'; if(Log::$p3)__log('Diagnostics: cannot write <'. $bn .'>'); } $vn.='</ul>'; $oy=array ( 'title' => $_strings['et--fix-permissions-on-server'], 'description' => $vn, 'type' => E2E_DIAGNOSTICS_MESSAGE, 'class' => 'serious', ); $errors[] = $oy; $_diagnose['ok?']=false; return false; } } function dv($nn,$uy,$mn,$fn_,$dn){ global$errors; if(0==error_reporting() or ($nn & 8)) return; $mn=str_replace(__DIR__,'',$mn); mv($mn .', line '. $fn_ .'<br />Error '. $nn .': '. $uy); $errors[count($errors)-1]['phpcode']=$nn; } function sv($sn,$an,$by,$u){ if (!(error_reporting() & $sn)) return; throw new ErrorException($an,0,$sn,$by,$u); } function av(){ global$errors,$settings,$_config; if (!isset ($errors))$errors=[]; @session_start(); if(is_array(@$_SESSION['errors'])) { $e=array_merge(@$_SESSION['errors'],$errors); } else { $e=$errors; } $iy=(!e2_()+1 <= (int)$_config['show_call_stack']); if (@$_config['store_backtrace'] and $iy and $e!=NULL){ @n3('backtrace.psa',serialize($e)); } else { @unlink('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset($_SESSION['errors']); $d=array(); $qn=false; if(count($e) > 0){ foreach($e as $r => $ln){ if ($ln['type']==E2E_STRANGE_ERROR){ $ln['class']='serious'; $qn=true; if ($iy){ $ln['backtrace']=lv($ln['backtrace']); } } if ($ln['type']==E2E_MESSAGE){ $ln['class']='info'; } $e[$r]=$ln; } $d['each']=$e; if ( $qn and @$_config['store_backtrace'] and $iy and is_file('debug.php') ) { $d['debug-link']='debug.php'; } } return $d; } function qv(){ $errors=av(); foreach($errors['each'] as $zn){ echo '<p>'. $zn['description'] .'</p>'; } die; } function lv($kn){ global $c; if (!is_array($kn)) return 'No backtrace info'; $kn=array_reverse($kn); $kn=array_splice($kn,0,count($kn)-1); $e='<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($kn as $r => $h){ $xn=@$h['args'] or $xn=array(); $en=array(); foreach ($xn as $rn){ $en[] = var_export($rn,true); } $by=@$h['file']; $by=str_replace($_SERVER['DOCUMENT_ROOT'],'',$by); $u=(@$h['line']? (' #'. $h['line']) : '?'); $e.='<div style="margin: .25em 0 .5em '. $r*3 .'em">'; $e.='<span style="float: right; color: #666"> '. $by.$u .'</span>'; $e.='<tt><b>'. @$h['function'] .' (</b>'; if(count($en)) { $tn=str_replace("array (\n)",'array ()',$en); $tn=implode(', ',$tn); if(0){ $tn=highlight_string('<?'. $tn .'?'.'>',true); $tn=substr($tn,77, -28); } $tn=str_replace('&nbsp;',' ',$tn); $tn=nl2br($tn); $e.='<div style="margin: 0 0 0 1.12em">'. $tn .'</div>'; } $e.='<b>)</b> &rarr;</tt></div>'; } $e.='</p>'; return$e; } class AeException extends \Exception {} class AeMySQLException extends AeException {} class AeMySQLNotFoundException extends AeMySQLException {} class AeMySQLTooOldException extends AeMySQLException {} class AeMySQLCannotConnectException extends AeMySQLException {} class AeMySQLAccessDeniedException extends AeMySQLCannotConnectException {} class AeMySQLQueryException extends AeMySQLException {} class AeMySQLCorruptedUpdateRecordCallException extends AeMySQLException {} class AeInstallException extends AeException {} class AeInstallAlreadyInstalledException extends AeInstallException {} class AeInstallDatabaseOccupiedException extends AeInstallException {} class AeNotSavedException extends AeException {} class AePasswordHashNotSavedException extends AeNotSavedException {} class AeSettingsNotSavedException extends AeNotSavedException {} class AeModelUnknownTableException extends AeException {} class AeOlbaException extends AeException {} class AeOlbaTemplateMissingException extends AeOlbaException {} class AeNotAndCannotBeInstalledException extends AeException {} class AeUpdateAlreadyInProcess extends AeException {} class AeUpdateCannotLock extends AeException {} function zv($jn,$hn=false){ $gn=substr(__DIR__,0,strrpos(__DIR__,'/')); $wn=''; $un=[]; foreach(array_reverse($jn -> getTrace()) as $in){ $on['where']=str_replace( $gn .'/','',$in['file'] ) .':'. $in['line']; $pn=[]; foreach ($in['args'] as $cm){ $pn[] = htmlspecialchars( str_replace("\n","\n  ",var_export($cm,true)), ENT_NOQUOTES,HSC_ENC ); } $vm=''; if(count($pn)) { $vm=("\n". '  '. implode(",\n  ",$pn). "\n" ); } $on['call']=$in['function'] .' ('. $vm .')'; $un[] = $on; } do { if ((string)$jn -> getMessage()!==''){ $wn.=$jn -> getMessage() ."\n"; } $wn.="\n";; $wn .= ( get_class($jn) .' in '. str_replace( $gn .'/','',$jn -> getFile() ) .':'. $jn -> getLine(). "\n" ); if ($jn -> getCode()) { $wn.='Code: '. $jn -> getCode() ."\n"; } $bm=''; $r=1; foreach ($un as $u){ $bm.=$r++ .'. '. $u['where'] .' '. $u['call']. "\n"; if (!$hn)$bm.="\n";; } $wn.="\n";; } while ($jn=$jn -> getPrevious()); if ($hn){ $bm=preg_replace('/^.*?$/smu','│            $0',$bm); $wn.='┌─'. "\n"; $wn.=$bm; $wn.='└─'; } else { $wn.=$bm; } return $wn; } function kv($jn,$an=''){ global$_config; if(__DEV)mv('<pre>'. zv($jn) .'</pre>'); if($_config['log_errors']) { Log::$p3=true; if(Log::$p3)bv('error-$'); } if(Log::$p3)__log('Exception caught: '. zv($jn,true)); if(Log::$p3)bv(''); if ((string)$an!==''){ if(Log::$p3)__log($an); } } function xv($jn){ global$_config,$content,$c; $content['title']=':-('; $content['exception-message']=$jn -> getMessage(); if(__DEV)$content['exception-string']=zv($jn); if($_config['log_errors']) { Log::$p3=true; if(Log::$p3)bv('error-$'); } if(Log::$p3)__log('Panic: '. zv($jn,true)); $d=js('panic',true); if(Log::$p3)__log(':-('); echo $d; die; } function ev($jn){ xv($jn); } $_url_map=array ( '@log' => 'e2://e2s_log', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note?is_published=1&preview-key=0', ':note/:preview' => 'e2://e2m_note?is_published=1', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts?page=1', 'drafts-:page' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_note?is_published=0&preview-key=0', 'drafts/:draft/:preview' => 'e2://e2m_note?is_published=0', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/show' => 'e2://e2m_note_flag?is_published=0&flag=IsVisible&value=1', 'drafts/:draft/hide' => 'e2://e2m_note_flag?is_published=0&flag=IsVisible&value=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=0', 'hot' => 'e2://e2m_most_commented?page=1', 'hot/:page' => 'e2://e2m_most_commented', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'untagged' => 'e2://e2m_untagged?page=1', 'untagged/:page' => 'e2://e2m_untagged', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'install' => 'e2://e2m_install', 'settings' => 'e2://e2m_settings', 'settings/underhood' => 'e2://e2m_underhood', 'settings/underhood/build' => 'e2://e2s_post_service?service=build', 'settings/underhood/sync' => 'e2://e2s_post_service?service=sync', 'settings/underhood/log' => 'e2://e2s_post_service?service=log', 'settings/underhood/migrate' => 'e2://e2s_post_service?service=migrate', 'settings/underhood/verify' => 'e2://e2s_post_service?service=verify', 'settings/underhood/backup' => 'e2://e2s_dump', 'settings/underhood/index' => 'e2://e2s_bsi_step', 'settings/underhood/reindex' => 'e2://e2s_bsi_drop', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', ); $_url_chunks=array ( '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => array ( 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ), '\:draft' => array ( '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ), '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9,]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9\=\\\+]+)', ); $_url_autoredirects=array ( '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ); function rv($ym){ global$_url_autoredirects,$c; $ym=preg_replace(array_keys($_url_autoredirects),array_values($_url_autoredirects),$ym); if(preg_match('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/',$ym,$y3)) { if(2==strlen($y3[3]))$y3[3]='20'.$y3[3]; return ($y3[3].'/'.$y3[2].'/'.$y3[1].$y3[4]); } if(preg_match('/^tags\-rss\/(.*?)\/?$/',$ym,$y3)) { $nm=substr($y3[1],strrpos($y3[1],'/')+1); return ('tags/'. $nm.'/rss/'); } return $ym; } function tv(){ static $mm=false; global$__synthetic_urls,$_config,$_superconfig; if ($mm) return; $fm=$_config['url_composition']; if (!empty ($_superconfig) and array_key_exists('url_composition',$_superconfig)) { $fm=$_superconfig['url_composition']; } $__synthetic_urls=false; if ($fm=='synthetic'){ $__synthetic_urls=true; } if ($fm=='auto'){ if(function_exists('apache_get_modules')) { if(in_array('mod_rewrite',apache_get_modules())) { $__synthetic_urls=true; } } } $mm=true; } function jv($candy,$parameters=array ()) { global$_url_map,$_url_chunks,$_config,$__synthetic_urls,$_protocol,$v,$c; $dm=array_flip($_url_map); if ( @$_config['preferred_domain_name'] and $_SERVER['HTTP_HOST']!=$_config['preferred_domain_name'] ) { $v=$_config['preferred_domain_name']; } $ym=$_protocol .'://'. $v.$c .'/'; $sm='e2://'. $candy; if(array_key_exists('page',$parameters)) { $page=$parameters['page']; } else { $page=1; } if($parameters){ $sm.='?'; $am=array(); $qm=array(); foreach($parameters as $lm => $s){ if ($lm=='*note'){ $qm[] = $lm; $am[] = wv($s); } if ($lm=='*tags'){ $qm[] = $lm; $am[] = uv($s); } if ($lm=='*tag'){ $qm[] = $lm; $am[] = uv([$s]); } } foreach ($qm as $lm) unset($parameters[$lm]); foreach ($am as $zm){ $parameters=array_merge($parameters,$zm); } foreach($parameters as $lm => $s){ if (@$lm[0]!='_'){ $sm.=$lm .'='. urlencode($s) .'&'; } } $sm=substr($sm,0, -1); } if(array_key_exists($sm,$dm)) { if ($dm[$sm]!=='')$ym.=$dm[$sm] .'/'; return $ym; } else { $em=false; foreach ($dm as $rm => $tm){ $jm=$rm; $jm=preg_quote($jm,'/'); $hm=parse_url($rm); $gm=$hm['host']; $wm=parse_url($sm); if(strstr($rm,'::')) { $um=$wm['scheme'] .'://'. $wm['host']; $jm=str_replace('\:\:','(.*)',$jm); $jm='/^'. $jm .'$/s'; if(preg_match($jm,$um,$y3)) { $sb=str_replace('::',$y3[1],$tm); $sb=str_replace('_','-',$sb); $im=$wm['query']; if($__synthetic_urls and $im){ $ym.=$sb .'/?'. $im; } elseif($__synthetic_urls){ $ym.=$sb .'/'; } elseif ($im){ $ym.='?go='. $sb .'/?'. $im; } else { $ym.='?go='. $sb .'/'; } return $ym; } } $om=false; if($candy===$gm){ $em=true; if ($hm['query']) { $pm=explode('&',$hm['query']); foreach ($pm as $cf){ list ($lm,$s)=explode('=',$cf); $s=urldecode($s); $lm=str_replace('_','-',$lm); if ( array_key_exists($lm,$parameters) and $parameters[$lm]!=$s ){ $om=true; break; } } } if (!$om){ if(preg_match_all('/\:[\-a-z]+/i',$tm,$y3)) { foreach ($y3[0] as $vf){ $bf=$_url_chunks['\\'. $vf]; if (!is_array($bf)) { $bf=array ($bf); } $yf=$bf[0]; foreach ($bf as $yf){ $nf='/\(\?P\<(.*?)\>.*?\)/'; $mf=true; if (@preg_match_all($nf,$yf,$y3)) { $y3=$y3[1]; $mf=true; for ($r=0; $r < count($y3); ++ $r){ if ( !array_key_exists(str_replace("_","-",$y3[$r]), $parameters) or $parameters[str_replace("_","-",$y3[$r])] === '' ){ $mf=false; break; } } } if (!$mf) continue; $ff=@preg_replace_callback( $nf, function ($y3) use ($parameters){ return$parameters[str_replace("_","-",$y3[1])]; }, $yf ); $ff=stripslashes($ff); $df=str_replace($vf,$ff,$tm); break; } $tm=$df; } } $sf=array(); if ($tm){ if($__synthetic_urls){ $ym.=$tm .'/'; } else { $sf[] = 'go='. $tm .'/'; } } foreach($_GET as $t => $af) if(in_array($t, array ('result','themeless'))) { $sf[] = $t . ($af? ('='. urlencode($af)) : ''); } if(count($sf)) { $ym.='?'. implode('&',$sf); } return $ym; } } } if ($em){ return $ym; } else { die ('Cannot compose url for candy '. $candy); } } } function hv($ym=null){ global$_url_map,$_url_chunks,$_config,$_current_url,$__synthetic_urls,$_protocol,$v,$c; if ($ym===null) $ym=urldecode($_GET['go']); if(Log::$p3)__log('Resolve "'. $ym .'" {'); tv(); $qf=$ym; $ym=trim($ym,'/'); $ym=rv($ym); $parameters=array(); foreach($_url_map as $lf => $rm){ $zf=$lf; $zf=preg_quote($zf,'/'); if(strstr($lf,'::')) { $zf=str_replace('\:\:','(.*)',$zf); $zf='/^'. $zf .'$/s'; if(preg_match($zf,$ym,$y3)) { $kf=str_replace('-','_',$y3[1]); $sm=str_replace('::',$kf,$rm); } } elseif(strstr($lf,':')) { $xf=array(); foreach($_url_chunks as $t => $af){ if(is_array($af)) { $xf[$t]='(?:(?:'. implode(')|(?:',$af) .'))'; } else { $xf[$t]=$af; } } $zf=str_replace( array_keys($xf), array_values($xf), $zf ); $zf='/^'. $zf .'$/s'; if(preg_match($zf,$ym,$y3)) { $sm=$rm; foreach ($y3 as $lm => $s) if (!is_numeric($lm)) { $lm=str_replace('_','-',$lm); $parameters[$lm]=$s; } } } else { if ($lf==$ym){ $sm=$rm; break; } } } $ef=(bool)$sm; if (!$sm)$sm='e2://e2_error404_mode'; $wm=parse_url($sm); $candy=$wm['host']; if ($wm['query']) { $pm=explode('&',$wm['query']); foreach ($pm as $cf){ list ($lm,$s)=explode('=',$cf); $s=urldecode($s); $lm=str_replace('_','-',$lm); $parameters[$lm]=$s; } } $d=false; $parameters=iv($parameters); if ($ef){ if($_config['force_canonical_urls']) { foreach (['draft2','oalias2'] as $rf){ if(array_key_exists($rf,$parameters)) { unset($parameters[$rf]); } } $tf=jv($candy,$parameters); list ($jf,$hf)=explode('?',$_SERVER['REQUEST_URI'],2); $gf=$_protocol .'://'. $_SERVER['HTTP_HOST'].$jf; $wf=$_protocol .'://'. $_SERVER['HTTP_HOST'].urldecode($jf); $hf=explode('&',$hf); foreach ($hf as $uf){ list ($if_, ) = explode('=',$uf); if ($if_=='go'){ $gf.='?'. $uf; $wf.='?'. urldecode($uf); } } $_current_url=$gf; if ( $gf!=$tf and $wf!=$tf and $gf!=$_protocol .'://'. $_SERVER['HTTP_HOST'].$c.'/@notify' ){ if(Log::$p3)__log('Used URL "'. $gf .'" or "'. $_2used_url .'"'); if(Log::$p3)__log('Redirecting to canonical URL "'. $tf .'"'); if(Log::$p3)__log('}'); c($tf); } } if(is_callable($candy)) { $d=array ($candy,$parameters); } else { $d=array (null, array ()); } } else { $d=array (null, array ()); } foreach($_GET as $lm => $s){ if ($lm!=='go')$d[1][$lm]=$s; } if(Log::$p3){ if(count($d[1]) > 0){ $of=print_r($d[1],true); $of=substr($of,8, -2); $of='    '. trim($of); $of=preg_replace('/^.*?$/smu','         $0',$of); $of=' with parameters:'."\r\n". $of; } __log( 'Resolved to candy "'. $d[0] .'"'. $of ); } if(Log::$p3)__log('}'); return $d; } function wv($pf){ global $c,$_config; if (!isset ($pf['IsPublished'])) { return []; } if (!$pf['IsPublished']) { $parameters['is-published']=0; if ($pf['OriginalAlias']===''){ $parameters['draft']=$pf['ID']; } elseif (um($pf['OriginalAlias']) == 1){ $parameters['oalias']=$pf['OriginalAlias']; } else { $parameters['draft2']=$pf['ID']; $parameters['oalias2']=$pf['OriginalAlias']; } return$parameters; } $parameters['is-published']=1; $c2=wn(); $v2='n'. $pf['ID']; $b2=$c2[$v2]; if (isset ($pf['__force_ymdn']) and ((string)$pf['OriginalAlias']==='')) { $v2='n'. $pf['ID'] .'-ymdn'; if(array_key_exists($v2,$c2)) { $b2=$c2[$v2]; } } if(preg_match( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', $b2,$y3 )) { $parameters['year']=$y3['year']; $parameters['month']=$y3['month']; $parameters['day']=$y3['day']; $parameters['day-number']=$y3['day_number']; } else { $parameters['alias']=$b2; } return$parameters; } function uv($y2){ $n2=$parameters=[]; foreach ($y2 as $m2){ $n2[] = wn() ['t'. $m2['ID']]; } if(count($n2)) { $parameters['tag-alias']=implode(',',$n2); } return$parameters; } function iv($parameters){ if ( (string) @$parameters['alias']!=='' or ( (string) @$parameters['year']!=='' and (string) @$parameters['month']!=='' and (string) @$parameters['day']!=='' and (string) @$parameters['day-number']!=='' ) ) { if ($f2=e2_published_noterec_with_parameters_($parameters)) { $parameters['*note']=$f2; } } if ( (string) @$parameters['oalias']!=='' or (string) @$parameters['draft']!=='' or (string) @$parameters['oalias2']!=='' or (string) @$parameters['draft2']!=='' ){ if ($f2=e2_noterec_with_parameters_($parameters)) { $parameters['*note']=$f2; } } if ( (string) @$parameters['tag-alias']!=='' ){ $parameters['*tags']=e2_tagrecs_with_parameters_($parameters); if(count($parameters['*tags']) == 1){ $parameters['*tag']=$parameters['*tags'][0]; } } return$parameters; } function ov($f){ global$_e2utf8__unformat_htmlentity_neasden; if($_e2utf8__unformat_htmlentity_neasden){ return $f; } else { return '((html '. $f .'))'; } } function pv($d2,$s2=false){ $a2=''; $q2=strlen($d2); for ($r=0; $r < 256; ++ $r){ $l2[$r]=0; $z2=$r; while ($z2 & 0x00000080){ $z2 <<= 1; ++ $l2[$r]; } } for ($r=0xd090; $r <= 0xd0bf; $r++)$k2[$r]=chr(($r & 0x000000ff)+48); for ($r=0xd180; $r <= 0xd18f; $r++)$k2[$r]=chr(($r & 0x000000ff)+112); $k2[0xd081]="\xa8"; $k2[0xd191]="\xb8"; $k2[0xc299]="\x99"; $k2[0xc2a9]="\xa9"; $k2[0xc2ae]="\xae"; $k2[0xc2ab]="\xab"; $k2[0xc2bb]="\xbb"; $k2[0xc2a0]="\xa0"; $r=0; while ($r < $q2){ $x2=$d2[$r]; $e2_=ord($x2); if ($l2[$e2_]==0){ $a2.=$x2; ++ $r; } elseif ($l2[$e2_]==2){ $r2=$k2[($e2_ << 8) | ord($d2[$r+1])]; $a2 .= ($r2!=null)? $r2 : ( $s2? (ov( cb(substr($d2,$r,2)) )) : '?' ); $r+=2; } else { $t2=substr($d2,$r,$l2[$e2_]); if ($t2=="\xe2\x84\x96")$a2.="\xb9"; elseif ($t2=="\xe2\x80\x93")$a2.="\x96"; elseif ($t2=="\xe2\x80\x94")$a2.="\x97"; elseif ($t2=="\xe2\x80\x98")$a2.="\x91"; elseif ($t2=="\xe2\x80\x99")$a2.="\x92"; elseif ($t2=="\xe2\x80\x9a")$a2.="\x82"; elseif ($t2=="\xe2\x80\x9c")$a2.="\x93"; elseif ($t2=="\xe2\x80\x9d")$a2.="\x94"; elseif ($t2=="\xe2\x80\x9e")$a2.="\x84"; elseif ($t2=="\xe2\x80\xa6")$a2.="\x85"; elseif ($t2=="\xe2\x80\xb9")$a2.="\x8b"; elseif ($t2=="\xe2\x80\xba")$a2.="\x9b"; elseif ($t2=="\xe2\x82\xac")$a2.="\x88"; elseif ($t2=="\xe2\x84\xa2")$a2.="\x99"; else $a2.=$s2? (ov( cb($t2) )) : '?'; $r+=$l2[$e2_]; } } return $a2; } function cb($p){ $j2=''; $q2=strlen($p); for ($r=0; $r < $q2; ++ $r){ $j2.=preg_replace('/^1*0/','',decbin(ord($p[$r]))); } return '&#'. bindec($j2) .';'; } function vb($h2) { $d=$h2; $d=preg_replace_callback('/([\x80-\xFF])/','e2_utf_from_windows_1251_char',$d); return $d; } function e2_utf_from_windows_1251_char($p){ list (, $p)=$p; if ($p=="\xa8") return "\xd0\x81"; if ($p=="\xb8") return "\xd1\x91"; if ($p >= "\xc0" && $p <= "\xef") return "\xd0".chr(ord($p)-48); if ($p >= "\xf0") return "\xd1".chr(ord($p)-112); if ($p=="\x85") return "\xe2\x80\xa6"; if ($p=="\x96") return "\xe2\x80\x93"; if ($p=="\x97") return "\xe2\x80\x94"; if ($p=="\xab") return "\xc2\xab"; if ($p=="\xbb") return "\xc2\xbb"; if ($p=="\x91") return "\xe2\x80\x98"; if ($p=="\x92") return "\xe2\x80\x99"; if ($p=="\x93") return "\xe2\x80\x9c"; if ($p=="\x94") return "\xe2\x80\x9d"; if ($p=="\x84") return "\xe2\x80\x9e"; if ($p=="\x99") return "\xe2\x84\xa2"; if ($p=="\xb9") return "\xe2\x84\x96"; if ($p=="\xa0") return "\xc2\xa0"; return '?'; }; function e2_utf8_version_of_array_($hv){ foreach ($hv as $t => $af){ if (!array_key_exists($t.'.u?',$hv)) { if(is_string($hv[$t])) { $hv[$t]=vb($hv[$t]); } elseif(is_array($hv[$t])) { $hv[$t]=e2_utf8_version_of_array_($hv[$t]); } } } return $hv; } function yb($jb){ return mb_convert_encoding($jb[0],'HTML-ENTITIES','UTF-8'); } function nb($h2,$g2=false){ if ($g2){ return preg_replace_callback( '/[\x{10000}-\x{fffff}]/u','e2_question_long_utf8_chars_helper',$h2 ); } else { return preg_replace('/[\x{10000}-\x{fffff}]/u','?',$h2); } } function e2img_filename_by_processing( $w2,$u2, $i2,$o2,$p2 ){ global$_config; if(Log::$p3)__log('Process image: "'. $w2 .'" -> "'. $u2 .'"'); if (!is_file($w2)) return false; $cd=stat($w2)['size']; if (!wb($w2)) { if(Log::$p3)__log('Process image: SVG, no processing'); return $w2; } if(is_file($u2) and !b3($w2,$u2)) { if(Log::$p3)__log('Process image: Already exists'); return $u2; } if (!extension_loaded('gd')) return false; $vd=pathinfo($u2); if (!@j($vd['dirname'])) { if(Log::$p3)__log( 'Process image: Can’t create directory <'. $vd['dirname'] .'>' ); return false; } if(Log::$p3)__log('Process image: Detecting image type'); $type=e2img__type_of_file($w2); if (!$type) return false; $bd='imagecreatefrom'. $type; if (!function_exists($bd)) return false; if(Log::$p3)__log('Process image: Opening original image ('. $bd .')'); $yd=call_user_func($bd,$w2); if (!$yd) return false; if ($nd=e2img__orientation_of_file($w2)) { if(Log::$p3)__log('Process image: Needs orientation fix'); $yd=e2img__res_rotate($yd, -$nd); } $md=[imagesx($yd),imagesy($yd)]; $fd=$md; $dd=[0,0,0,0]; if ($o2==CROP_SQUARE){ if(Log::$p3)__log('Process image: Needs crop'); list ($fd,$dd) = ( e2img__crop_metrics_to_square($fd) ); } $fd=e2_fit_metrics_to_constraints( $fd,$i2 ); if ( $nd===0 and $fd===$md ){ if(Log::$p3)__log('Process image: No changes necessary, leaving original'); return $w2; } if(Log::$p3)__log(var_export($fd,true)); if(Log::$p3)__log(var_export($dd,true)); $sd=e2img__create_copy_resampled( $yd, $fd, $dd, $type ); imagejpeg($sd,$u2,$p2); if (!is_file($u2)) { if(Log::$p3)__log('Process image: File not created by imagejpeg'); return false; } if ($nd===0){ $ad=stat($u2)['size']; if ($ad >= $cd){ if(Log::$p3)__log('Process image: Conversion to JPEG made file bigger, back up'); unlink($u2); $u2=$w2; } } @chmod($u2,$_config['uploaded_files_mode']); if(Log::$p3)__log('Process image: Done'); return $u2; } function e2img__create_copy_resampled( $yd,$fd,$dd,$type ){ list ($qd,$ld)=$fd; list ($zd,$kd,$xd,$ed)=$dd; $sd=imagecreatetruecolor($qd,$ld); if($type==='png'){ imagefill($sd,0,0,imagecolorallocate($sd,255,255,255)); imagealphablending($sd,true); } $rd=imagesx($yd); $td=imagesy($yd); imagecopyresampled( $sd, $yd, 0,0, 0+$zd,0+$kd, $qd,$ld, $rd-$xd,$td-$ed ); imageinterlace($sd,1); return $sd; } function e2img__type_of_file($fb){ $jd=@getimagesize($fb); if (!$jd or $jd[2] > 3) return false; if ($jd[2]==IMAGETYPE_GIF) return 'gif'; if ($jd[2]==IMAGETYPE_JPEG) return 'jpeg'; if ($jd[2]==IMAGETYPE_PNG) return 'png'; return false; } function e2img__orientation_of_file($fb){ if (!function_exists('exif_read_data')) return 0; if (($hd=@exif_read_data($fb)) === false) return 0; if ($hd['Orientation']==3) return -180; if ($hd['Orientation']==6) return -270; if ($hd['Orientation']==8) return -90; return 0; } function e2img__res_rotate($yy,$nd){ $gd=imagerotate($yy,$nd,0); if ($gd!==false){ imagedestroy($yy); $yy=$gd; } return $yy; } function e2_fit_metrics_to_constraints( $wd,$i2 ){ if ($i2===false)$i2=[0,0]; list ($ud,$id)=$wd; list ($od,$pd)=$i2; $cs=[1]; if ($od)$cs[] = $od/$ud; if ($pd)$cs[] = $pd/$id; $vs=min($cs); if ($vs < 1){ $ud=(int)round($ud*$vs); $id=(int)round($id*$vs); } return [$ud,$id]; } function e2img__crop_metrics_to_square($wd){ $bs=$ys=$ns=$ms=0; list ($ud,$id)=$wd; if ($ud > $id){ $ns=$ud-$id; $bs=floor($ns/2); $id=$ud; } elseif ($ud < $id){ $ms=$id-$ud; $ys=floor($ns/2); $ud=$id; } $dd=[$bs,$ys,$ns,$ms]; $fs=[$ud,$id]; return [$fs,$dd]; } define('PROVIDE_MEDIA_ASYNC',10); define('PROVIDE_MEDIA_NOW',20); function mb($ds){ global$full_blog_url; $ss=parse_url($ds); if (isset ($ss['host'])) { $ym=$ds; if ($ss['host']=='www.youtube.com'){ $as_=basename($ss['path']); $qs='remote/youtube-'. $as_ .'-cover.jpg'; return [ 'url' => $ym, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'youtube', 'video-id' => $as_, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER.$qs, 'local-relative-filename' => $qs, 'local-full-filename' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$qs, 'local-full-failname' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$qs.'.failed', ]; } elseif ($ss['host']=='player.vimeo.com'){ $as_=basename($ss['path']); $qs='remote/vimeo-'. $as_ .'-cover.jpg'; return [ 'url' => $ym, 'type' => 'online-video', 'is-local?' => false, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => true, 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'video-service' => 'vimeo', 'video-id' => $as_, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER.$qs, 'local-relative-filename' => $qs, 'local-full-filename' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$qs, 'local-full-failname' => MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$qs.'.failed', ]; } elseif (gb($ss['path'])) { return [ 'url' => $ym, 'type' => 'remote-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => false, 'mime-type' => v3($ss['path']), 'length' => '', ]; } else { return [ 'url' => $ym, 'type' => 'remote-non-image', 'is-local?' => false, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => false, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($ss['path']), 'length' => '', ]; } } else { if (gb($ss['path'])) { $ym=$full_blog_url .'/'. PICTURES_FOLDER.$ss['path']; $ls=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$ss['path']; return [ 'url' => $ym, 'type' => 'local-image', 'is-local?' => true, 'is-usable-as-cover?' => true, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => wb($ss['path']), 'is-snippetable?' => true, 'is-rss-enclosure?' => false, 'mime-type' => v3($ss['path']), 'length' => @stat($ls)['size'], 'local-href' => $ym, 'local-cover-href' => $ym, 'local-relative-filename' => $ss['path'], 'local-full-filename' => $ls, 'thumb-full-filename' => $ls, ]; } elseif (ib($ss['path'])) { $ym=$full_blog_url .'/'. VIDEO_FOLDER.$ss['path']; $ls=MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$ss['path']; return [ 'url' => $ym, 'type' => 'local-video', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($ss['path']), 'length' => @stat($ls)['size'], 'local-href' => $ym, 'local-relative-filename' => $ss['path'], 'local-full-filename' => $ls, 'thumb-full-filename' => VIDEO_ICON_IMAGE, ]; } else { $ym=$full_blog_url .'/'. AUDIO_FOLDER.$ss['path']; $ls=MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$ss['path']; return [ 'url' => $ym, 'type' => 'local-non-image', 'is-local?' => true, 'is-usable-as-cover?' => false, 'is-using-thumbnails?' => true, 'is-generating-thumbnail?' => false, 'is-snippetable?' => false, 'is-rss-enclosure?' => true, 'mime-type' => v3($ss['path']), 'length' => @stat($ls)['size'], 'local-href' => $ym, 'local-full-filename' => $ls, 'thumb-full-filename' => AUDIO_ICON_IMAGE, ]; } } } function fb($zs){ $ks=[]; foreach ($zs as $ds){ $xs=mb($ds); if ($xs['is-local?'])$ks[] = $ds; } return $ks; } function db($zs){ $ks=[]; foreach ($zs as $ds){ $xs=mb($ds); if ($xs['is-snippetable?'])$ks[] = $ds; } return $ks; } function sb( $es,$rs ){ if (!is_array($es))$es=[]; if (!is_array($rs))$rs=[]; $zs=array_merge($rs,$es); $zs=array_reverse($zs); $zs=array_unique($zs); $zs=array_reverse($zs); return $zs; } function ab($zs){ global$full_blog_url; if (!is_array($zs) or !count($zs)) return []; rb($zs); $ts=[]; foreach ($zs as $ds){ if (!empty ($js[$ds])) continue; $xs=mb($ds); if (!$xs['is-usable-as-cover?']) continue; if (!is_file($xs['local-full-filename'])) continue; $size=m3($xs['local-full-filename']); list ($ud,$id,$hs,$gs)=$size; $ts[] = [ 'src' => $xs['local-cover-href'], 'width' => $ud, 'height' => $id, 'horizontality' => $hs, 'verticality' => $gs, ]; $js[$ds]=true; } return $ts; } function qb($zs){ global$full_blog_url,$_strings; if (!is_array($zs) or !count($zs)) return []; rb($zs); $ws=[]; foreach ($zs as $ds){ if (!empty ($js[$ds])) continue; $xs=mb($ds); if (!$xs['is-using-thumbnails?']) continue; if (!is_file($xs['local-full-filename'])) continue; $us=[ 'is-available?' => true, 'src' => '', 'width' => '', 'height' => '', 'original-filename' => '', 'original-filesize' => '', ]; if (!$xs['is-local?'] or is_file($xs['local-full-filename'])) { if ($xs['is-generating-thumbnail?']) { $is=tb( $xs ); } else { $is=$xs['thumb-full-filename']; } } if (empty ($is)) { $us['is-available?']=false; $is=jb( $xs['local-relative-filename'] ); } $us['src']=x3($is); if ($us['is-available?']) { $size=m3($is); list ($ud,$id)=$size; } else { $ud=$id=''; } if (!$ud)$ud=THUMB_WIDTH/2; if (!$id)$id=THUMB_HEIGHT/2; list ($ud,$id)=e2_fit_metrics_to_constraints( [$ud,$id], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $us['width']=$ud; $us['height']=$id; if ($xs['is-local?']) { $us['original-filename']=$ds; if(is_file($xs['local-full-filename'])) { $os=stat($xs['local-full-filename'])[7]; $os=round($os/1024) .' '. $_strings['gs--kb']; $us['original-filesize']=$os; } } $ws[] = $us; $js[$ds]=true; } return $ws; } function lb($ps){ foreach ( ['maxresdefault','hqdefault','mqdefault','sddefault','default'] as $fb ){ $ym='http://img.youtube.com/vi/'. $ps .'/'. $fb .'.jpg'; if(Log::$p3)__log('Trying '. $ym .'...'); $ca=@file_get_contents($ym); if ($ca!==false) return $ca; } return false; } function zb($va){ $ba=@unserialize( file_get_contents('http://vimeo.com/api/v2/video/'. $va .'.php') ); if (!empty ($ba[0]['thumbnail_large'])) { return @file_get_contents($ba[0]['thumbnail_large']); } return false; } function kb($xs,$ya){ if(is_file($xs['local-full-filename'])) { if(Log::$p3)__log('Already exists: '. $xs['local-full-filename']); } elseif(is_file($xs['local-full-failname'])) { if(Log::$p3)__log('Already tried and failed: '. $xs['local-full-filename']); } else { if(Log::$p3)__log('Resource '. $xs['url'].' is missing a cover, retrieving'); if ($ya==PROVIDE_MEDIA_ASYNC){ o3(jv('e2s_retrieve', [ 'url' => urlencode(base64_encode($xs['url'])), ])); } if ($ya==PROVIDE_MEDIA_NOW){ if(Log::$p3)__log('Downloading "'. $xs['video-service'] .'" cover as '. $xs['local-full-filename'] .'...'); if ($xs['video-service']=='youtube'){ $ca=lb($xs['video-id']); } if ($xs['video-service']=='vimeo') { $ca=zb($xs['video-id']); } if ($ca!==false){ n3($xs['local-full-filename'],$ca); } else { n3($xs['local-full-failname'],''); } } } } function xb($ds,$ya){ $xs=mb($ds); if(Log::$p3)__log('Resource '. $ds .' is of type '. $xs['type']); if ($xs['type']=='local-image'){ tb($xs); } if ($xs['type']=='online-video'){ kb($xs,$ya); if ($ya==PROVIDE_MEDIA_NOW and is_file($xs['local-full-filename'])) { tb($xs); } } if ($xs['type']=='remote-image'){ } } function eb($zs){ foreach ($zs as $ds){ $xs=mb($ds); if (empty ($xs['local-full-failname'])) continue; if(is_file($xs['local-full-failname'])) { if(Log::$p3)__log('Deleting '. $xs['local-full-failname'] .' to try again'); unlink($xs['local-full-failname']); } } } function rb($zs){ if (!is_array($zs)) return; if(Log::$p3)__log('Asynchronously provide data for resnames {'); foreach ($zs as $ds){ xb($ds,PROVIDE_MEDIA_ASYNC); } if(Log::$p3)__log('}'); } function tb($xs){ if (!$xs['is-generating-thumbnail?']) return false; return e2img_filename_by_processing( $xs['local-full-filename'], jb($xs['local-relative-filename']), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); } function jb($na){ return pb( MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER.$na, 'thumb@2x' ); } if(E2_EDITION){ function hb($zs){ $ma=[]; foreach ($zs as $ds){ $xs=mb($ds); if ($xs['is-rss-enclosure?']) { $ma[] = [ 'url' => $xs['url'], 'type' => $xs['mime-type'], 'length' => $xs['length'], ]; } } return $ma; } } function gb($ds){ $fa=pathinfo($ds); $da=$fa['extension']; return (in_array(strtolower($da), ['jpg','jpeg','gif','png','svg'])); } function wb($ds){ $fa=pathinfo($ds); $da=$fa['extension']; return (in_array(strtolower($da), ['jpg','jpeg','gif','png'])); } function ub($ds){ $fa=pathinfo($ds); $da=$fa['extension']; return (in_array(strtolower($da), ['svg'])); } function ib($ds){ $fa=pathinfo($ds); $da=$fa['extension']; return (in_array(strtolower($da), ['mp4','mov'])); } function ob($ds){ $fa=pathinfo($ds); $da=$fa['extension']; return (in_array(strtolower($da), ['mp3'])); } function pb($ds,$sa){ if (!empty ($sa)) { $aa=explode('/',$ds); $qa=array_pop($aa); $la=explode('.',$qa); if(count($la) < 2)$la[] = ''; $da=array_pop($la); $la[] = $sa; if ($da)$la[] = $da; $qa=implode('.',$la); $aa[] = $qa; $ds=implode('/',$aa); } return $ds; } function c3($za,$qa){ if (!is_file($za.$qa)) return $qa; $ka=strrpos($qa,'.'); $xa=substr($qa,0,$ka); $da=substr($qa,$ka); $r=0; while (is_file($za.$xa .'-'. (++ $r).$da)); $qa=$xa .'-'. $r.$da; return $qa; } function v3($ds){ $fa=pathinfo($ds); $da=$fa['extension']; if ($da=='png') return 'image/png'; if ($da=='gif') return 'image/gif'; if ($da=='jpg' or $da=='jpeg') return 'image/jpeg'; if ($da=='mp3') return 'audio/mpeg'; if ($da=='svg') return 'image/svg+xml'; if ($da=='mp4') return 'video/mp4'; if ($da=='mov') return 'video/quicktime'; } function b3($ea,$ra){ return strcasecmp($ea,$ra)===0; } $_folders_written=[ '.', USER_FOLDER, CACHES_FOLDER, BACKUP_FOLDER, LOG_FOLDER, MEDIA_ROOT_FOLDER.PICTURES_FOLDER, MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER, MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'remote/', MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER .'remote/', MEDIA_ROOT_FOLDER.VIDEO_FOLDER, MEDIA_ROOT_FOLDER.AUDIO_FOLDER, MEDIA_ROOT_FOLDER.AVATARS_FOLDER, ]; $_files_written=[ USER_FOLDER.'password-hash.psa', USER_FOLDER.'password-wait.psa', USER_FOLDER.'last-comment.psa', USER_FOLDER.'new-uploads.psa', USER_FOLDER.'settings.json', USER_FOLDER.'indexing.psa', USER_FOLDER.'auth.psa', USER_FOLDER.'scheduled.psa', ]; define('CROP_NONE',0); define('CROP_SQUARE',1); function y3(){ global$_folders_written,$_files_written; clearstatcache(); $ta=[]; foreach($_folders_written as $bn){ if(is_dir($bn) and !is_writable($bn)) { $ta[] = $bn; } } foreach($_files_written as $bn){ if(is_file($bn) and !is_writable($bn)) { $ta[] = $bn; } } return $ta; } function n3($by,$x){ @j(dirname($by)); if (!@file_put_contents($by,$x,LOCK_EX)) { return false; } @chmod($by,E2_NEW_FILES_RIGHTS); return true; } function m3($fb){ $ud=$id=0; if (wb($fb)) { list ($ud,$id)=getimagesize($fb); } elseif (ib($fb)) { try { require_once SYSTEM_LIBRARY_FOLDER .'getid3/getid3.php'; $jd=new getid3(); $jd=$jd->analyze($fb); $ud=$jd['video']['resolution_x']; $id=$jd['video']['resolution_y']; } catch (\Exception $e){} } elseif (ub($fb)) { if(function_exists('simplexml_load_string')) { $ja=simplexml_load_string(file_get_contents($fb)); if ($ja){ $ha=$ja->attributes(); list ($ud,$id) = [(string)$ha -> width, (string)$ha -> height]; } } } if(substr($fb,strrpos($fb,'.')-3,3)=='@2x'){ $ud=(int)floor($ud/2); $id=(int)floor($id/2); } $hs=round(($id > 0) ? ($ud/$id):1,2); $gs=round(($ud > 0) ? ($id/$ud):1,2); return [$ud,$id,$hs,$gs]; } function e2s_retrieve($parameters){ $ym=urldecode(base64_decode($parameters['url'])); if(Log::$p3)__log('Retrieve: '. $ym); xb($ym,PROVIDE_MEDIA_NOW); die; } function f3( $ga,$wa,$es ){ $ua=[]; if(is_array($es)) { $ua=fb($es); } $ia=@unserialize( $wa['Uploads'] ) or $ia=[]; $oa=array_diff($ua,$ia); if(count($oa) > 0){ z3($ga,$wa['ID'],'add',$oa); } return $oa; } function d3($zs){ $ta=[]; foreach (ab($zs) as $pa){ $ta[] = $pa['src']; } return $ta; } function s3($name,$c1){ $name=m($name); if(preg_match('//u',$name))$name=pv($name,false); if ($c1=='image'){ $za=MEDIA_ROOT_FOLDER.PICTURES_FOLDER; } elseif ($c1=='video'){ $za=MEDIA_ROOT_FOLDER.VIDEO_FOLDER; } elseif ($c1=='audio'){ $za=MEDIA_ROOT_FOLDER.AUDIO_FOLDER; } else { return false; } $v1=''; for ($r=0; $r < strlen($name); $r++) { if($name[$r]=='?'){ $v1.=''; } elseif($name[$r]==' '){ $v1.='-'; } elseif(ord($name[$r]) <= 127){ $v1.=$name[$r]; } } if ($v1=='')$v1=$c1; if ($v1[0]=='.')$v1=$c1.$v1; return $v1; } function a3($b1){ global$_config; if(Log::$p3)__log('Count references for upload <'. $b1 .'>'); if(is_file(USER_FOLDER.'new-uploads.psa')) { $y1=@unserialize(file_get_contents(USER_FOLDER.'new-uploads.psa')); } $n1='%'. str_replace('%','#%',$b1) .'%'; xn( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Text` LIKE '". $n1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $n1 ."' ESCAPE '#')", 'get notes where uploads may be referenced' ); $m1=en(); $f1=@unserialize($m1[0]['Uploads']); if (!is_array($f1)) { foreach ($m1 as $pf){ $d1=w3( $pf['FormatterID'], @$pf['Text'],'full-rss' ); $f1=f3( 'note',$pf, $d1['meta']['resources-detected'] ); } } xn( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (`Description` LIKE '". $n1 ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $n1 ."' ESCAPE '#')", 'get tags where uploads may be referenced' ); $m1=en(); $s1=@unserialize($m1[0]['Uploads']); if (!is_array($s1)) { foreach ($m1 as $m2){ $d1=u3( @$m2['Description'],'full-rss' ); $s1=f3( 'tag',$m2, $d1['meta']['resources-detected'] ); } } if (!is_array($y1))$y1=[]; if (!is_array($f1))$f1=[]; if (!is_array($s1))$s1=[]; $a1=array_merge($y1,$f1,$s1); if(Log::$p3)__log('References found in relevant entries: '. var_export($a1,true)); if(in_array($b1,$a1)) { if(Log::$p3)__log('Still referenced, do not delete file'); return true; } return false; } function q3($q1,$as_){ global$_config; if ($q1=='note' and $as_=='new'){ if(is_file(USER_FOLDER.'new-uploads.psa')) { $a1=@unserialize(file_get_contents(USER_FOLDER.'new-uploads.psa')); } } elseif ($q1=='note'){ xn( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $as_ ); $m1=en(); $a1=@unserialize($m1[0]['Uploads']); } elseif ($q1=='tag'){ xn( "SELECT `Uploads` FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $as_ ); $m1=en(); $a1=@unserialize($m1[0]['Uploads']); } if (!is_array($a1))$a1=array(); return $a1; } function l3($q1,$as_,$a1){ global$_config; if ($q1=='note' and $as_=='new'){ if (!@n3(USER_FOLDER.'new-uploads.psa',serialize($a1))) { mv('ERROR',E2E_PERMISSIONS_ERROR); } } elseif ($q1=='note'){ xn( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `Uploads`='". serialize($a1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $as_ ); } elseif ($q1=='tag'){ xn( "UPDATE `". $_config['db_table_prefix']."Keywords` ". "SET `Uploads`='". serialize($a1) ."' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $as_ ); } else { return false; } if (!is_array($a1))$a1=array(); return $a1; } function z3($q1,$as_,$action,$qv){ global$_config; $a1=array(); if(Log::$p3)__log('Register upload: <'. $q1.', '. $as_.', '. $action.', '. $qv .'>'); $a1=q3($q1,$as_); $a1=d($a1,$action,$qv); l3($q1,$as_,$a1); } function k3($l1,$z1,$es){ $ia=@unserialize($z1['Uploads']) or $ia=array(); $k1=fb($es); $a1=d($ia,'add',$k1); $a1=serialize($a1); if ($a1!=$z1['Uploads']) { $z1['Uploads']=$a1; yn($l1,$z1); } } function e2j_file_upload($parameters=array ()) { global$_config,$full_blog_url,$_strings; @j(MEDIA_ROOT_FOLDER.PICTURES_FOLDER); @chmod(MEDIA_ROOT_FOLDER.PICTURES_FOLDER,$_config['uploaded_files_mode']); @j(MEDIA_ROOT_FOLDER.VIDEO_FOLDER); @chmod(MEDIA_ROOT_FOLDER.VIDEO_FOLDER,$_config['uploaded_files_mode']); @j(MEDIA_ROOT_FOLDER.AUDIO_FOLDER); @chmod(MEDIA_ROOT_FOLDER.AUDIO_FOLDER,$_config['uploaded_files_mode']); $zv=[ 'success' => false ]; if(count($_FILES) > 0){ foreach($_FILES as $by){ if (!$by['error']) { if(Log::$p3)__log('Ajax file upload: <'. $by['name'].'>'); $zv['data']['file-kind']='image'; $za=MEDIA_ROOT_FOLDER.PICTURES_FOLDER; if (ib($by['name'])) { $zv['data']['file-kind']='video'; $za=MEDIA_ROOT_FOLDER.VIDEO_FOLDER; } elseif (ob($by['name'])) { $zv['data']['file-kind']='audio'; $za=MEDIA_ROOT_FOLDER.AUDIO_FOLDER; } $x1=( array_key_exists('overwrite',$_GET) and is_file($za.$by['name']) ); $e1=false; $zv['data']['overwrite'] = (int)$x1; if(Log::$p3)__log('Ajax file upload: Overwrite is resolved to <'. (int)$x1.'>'); $v1=s3($by['name'],$zv['data']['file-kind']); if(Log::$p3)__log('Ajax file upload: Safe name is <'. $v1.'>'); if(is_file($za.$v1)) { if(file_get_contents($za.$v1)==file_get_contents($by['tmp_name'])) { if(Log::$p3)__log('Ajax file upload: Existing file is the same'); $e1=true; } elseif (!$x1){ $v1=c3($za,$v1); } } if (!$e1){ move_uploaded_file($by['tmp_name'],$za.$v1); @chmod($za.$v1,$_config['uploaded_files_mode']); } if(Log::$p3)__log('Ajax file upload: File kind is <'. $zv['data']['file-kind'].'>'); if ($zv['data']['file-kind']=='image'){ $da=pathinfo($v1,PATHINFO_EXTENSION); if (b3($da,'jpg')) { $r1=$v1; } else { $r1=$v1 .'.jpg'; $r1=c3( MEDIA_ROOT_FOLDER.PICTURES_FOLDER,$r1 ); } $t1=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$v1; $j1=MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$r1; if(Log::$p3)__log('Ajax file upload: Process uploaded image <'. $t1.'>'. ' to possibly <'. $j1.'>'); $j1=e2img_filename_by_processing( $t1, $j1, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); $os=$by['size']; if (!b3($j1,$t1)) { @unlink($t1); $v1=$r1; $os=stat($j1)['size']; } if ($x1){ @unlink(jb($v1)); } if ($h1=e2img_filename_by_processing( $t1, jb($v1), [THUMB_WIDTH,THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY )) { if(Log::$p3)__log('Ajax file upload: thumbnail, done as '. $h1); list ($ud,$id)=m3($h1); if(Log::$p3)__log('Ajax file upload: image size '. $ud .'×'. $id); if (!$ud)$ud=THUMB_WIDTH/2; if (!$id)$id=THUMB_HEIGHT/2; list ($ud,$id)=e2_fit_metrics_to_constraints( [$ud,$id], [THUMB_WIDTH/2,THUMB_HEIGHT/2] ); $zv['success']=true; $zv['data']['new-name']=$v1; $zv['data']['filesize']=round($os/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=x3($h1); $zv['data']['width']=$ud; $zv['data']['height']=$id; z3($parameters['entity'],$parameters['entity-id'],'add', array ($v1)); } else { if(Log::$p3)__log('Ajax file upload: couldn’t create thumbnail'); @unlink($za.$v1); $zv['error']['message']=_S('er--cannot-create-thumbnail'); } } if ($zv['data']['file-kind']=='video'){ if(Log::$p3)__log('Ajax file upload: video, done'); $zv['success']=true; $zv['data']['new-name']=$v1; $zv['data']['filesize']=round($by['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=VIDEO_ICON_IMAGE; $zv['data']['width']=VIDEO_ICON_WIDTH/2; $zv['data']['height']=VIDEO_ICON_HEIGHT/2; z3($parameters['entity'],$parameters['entity-id'],'add', array ($v1)); } if ($zv['data']['file-kind']=='audio'){ if(Log::$p3)__log('Ajax file upload: audio, done'); $zv['success']=true; $zv['data']['new-name']=$v1; $zv['data']['filesize']=round($by['size']/1024) .' '. $_strings['gs--kb']; $zv['data']['thumb']=AUDIO_ICON_IMAGE; $zv['data']['width']=AUDIO_ICON_WIDTH/2; $zv['data']['height']=AUDIO_ICON_HEIGHT/2; z3($parameters['entity'],$parameters['entity-id'],'add', array ($v1)); } } elseif(4!=$by['error']) { if ($by['error']==1){ $zv['error']['message']='too-big'; } elseif ($by['error']==2){ $zv['error']['message']='too-big'; } elseif ($by['error']==3){ $zv['error']['message']='partial'; } else { $zv['error']=$by['error']; } } } } else { if(Log::$p3)__log('Ajax file upload error: no files'); $zv['error']['message']='no-files'; } $zv=json_encode($zv); die ($zv); } function x3($g1){ global$full_blog_url; $q2=strlen(MEDIA_ROOT_FOLDER); if ($q2 and substr($g1,0,$q2)==MEDIA_ROOT_FOLDER){ return substr($g1,$q2); } else { return$full_blog_url .'/'. $g1; } } function e3(){ @unlink(USER_FOLDER.'userpic@2x.png'); @unlink(USER_FOLDER.'userpic@2x.jpg'); @unlink(USER_FOLDER.'userpic-large@2x.jpg'); @unlink(USER_FOLDER.'userpic-square@2x.jpg'); } function e2j_userpic_remove(){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_settings')); } e3(); $zv=json_encode([ 'success' => true ]); die ($zv); } function e2j_userpic_upload(){ global$_config; $zv=[ 'success' => false ]; if(count($_FILES)!=1){ if(Log::$p3)__log('Ajax userpic upload error: no or too many files'); $zv['error']['message']='No or too many files'; $zv=json_encode($zv); die ($zv); } $by=array_pop($_FILES); if (!$by['error']) { if(Log::$p3)__log('Ajax userpic upload: <'. $by['name'].'>'); $w1=pathinfo($by['name']); $da=strtolower($w1['extension']); if ($da!='png')$da='jpg'; $fb='userpic.original.'. $da; move_uploaded_file($by['tmp_name'],USER_FOLDER.$fb); @chmod(USER_FOLDER.$fb,$_config['uploaded_files_mode']); e3(); copy( USER_FOLDER.$fb, USER_FOLDER .'userpic-large@2x.jpg' ); $u1=e2img_filename_by_processing( USER_FOLDER .'userpic-large@2x.jpg', USER_FOLDER .'userpic-large@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_NONE, USERPIC_JPG_QUALITY ); copy( USER_FOLDER.$fb, USER_FOLDER .'userpic-square@2x.jpg' ); $i1=e2img_filename_by_processing( USER_FOLDER .'userpic-square@2x.jpg', USER_FOLDER .'userpic-square@2x.jpg', [$_config['max_image_width'],$_config['max_image_width']], CROP_SQUARE, USERPIC_JPG_QUALITY ); $o1=e2img_filename_by_processing( USER_FOLDER.$fb, USER_FOLDER .'userpic@2x.jpg', [USERPIC_WIDTH,USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); if ($i1){ $zv=[ 'success' => true, 'data' => [ 'new-image-src' => $i1, ] ]; } else { $zv['error']['message']=_S('er--supported-only-png-jpg-gif'); } } elseif(4!=$by['error']) { if ($by['error']==1){ $zv['error']['message']='File too big'; } elseif ($by['error']==2){ $zv['error']['message']='File too big'; } elseif ($by['error']==3){ $zv['error']['message']='File upload is partial'; } else { $zv['error']['message']='File upload error '. $by['error']; } } $zv=json_encode($zv); die ($zv); } function e2j_file_remove($parameters){ if (!array_key_exists('file',$_POST)) { $zv=[ 'success' => false ]; $zv=json_encode($zv); die ($zv); } $by=$_POST['file']; $zv=[ 'success' => true ]; $zv=json_encode($zv); z3($parameters['entity'],$parameters['entity-id'],'remove',$by); if (!a3($by)) { if (ob($by)) { if(Log::$p3)__log('Not referenced, deleting '. MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$by); @unlink(MEDIA_ROOT_FOLDER.AUDIO_FOLDER.$by); } elseif (ib($by)) { if(Log::$p3)__log('Not referenced, deleting '. MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$by); @unlink(MEDIA_ROOT_FOLDER.VIDEO_FOLDER.$by); } else { $o1=pb($by,'thumb@2x'); $p1=@unlink(MEDIA_ROOT_FOLDER.PICTURES_FOLDER.$by); $cq=@unlink(MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER.$o1); } } die ($zv); } function r3(){ global$_config; if (!$_config['files_total_size_limit']) return false; $vq=0; foreach(glob(MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'/*') as $by){ $f=stat($by); $vq+=$f['size']; } foreach(glob(MEDIA_ROOT_FOLDER.VIDEO_FOLDER .'/*') as $by){ $f=stat($by); $vq+=$f['size']; } foreach(glob(MEDIA_ROOT_FOLDER.AUDIO_FOLDER .'/*') as $by){ $f=stat($by); $vq+=$f['size']; } $bq=$_config['files_total_size_limit']; $yq=f($vq,$bq); return array ($vq,$bq,$yq); } function t3($nq){ $mq=true; if (list ($vq,$bq,$yq)=$nq){ $mq=($bq-$vq) > 0; } return $mq; } function j3($nq,$fq=false){ $dq=''; if (list ($vq,$bq,$yq)=$nq){ $nq=array ( 'used' => round($vq/1024/1024), 'total' => round($bq/1024/1024), 'percent' => $yq ); if ($fq or ($bq-$vq) < 1024*1024*10){ if ($vq < $bq){ $dq=e2l_get_string('gs--used',$nq); } else { $dq=e2l_get_string('gs--used-all',$nq); } } } return $dq; } function e2_error404_mode(){ global$_config,$_strings; if($_config['try_redirect_to_all']) { $sq='all/'. urldecode($_GET['go']); hv($sq); } header('HTTP/1.1 404 Not found'); $aq['class']='404'; $aq['heading']=$_strings['pt--page-not-found']; $aq['title']=$_strings['pt--page-not-found']; return $aq; } function e2s_post_service($parameters){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } if($parameters['service']==='build'){ e2_build(); mv('Engine core built',E2E_MESSAGE); } if($parameters['service']==='sync'){ e2_drop_all_kinds_of_cache(); mv('Caches invalidated',E2E_MESSAGE); } if($parameters['service']==='log'){ nv(); mv('Logs enabled',E2E_MESSAGE); } if($parameters['service']==='backup'){ } if($parameters['service']==='migrate'){ an(); mv('Database structure up to date',E2E_MESSAGE); } if(E2_EDITION){ if($parameters['service']==='verify'){ u(true); } } c(jv('e2m_underhood')); } function h3($tv){ include_once 'neasden/neasden.php'; $Nn=new Neasden; $Nn->profile_name='kavychki'; return$Nn->format($tv); } function g3($fy,$tv,$qq){ include_once 'neasden/neasden.php'; if ($tv==='') return array (); if ($fy=='calliope'){ preg_match_all('/\(\(([^ ]*)( |\)\))/',$tv,$y3); return $y3[1]; } elseif ($fy=='neasden'){ $Nn=new Neasden; $Nn->profile_name=$qq; $Nn->format($tv); return$Nn->resources_detected; } else { return array (); } } function w3($fy,$tv,$qq){ include_once 'neasden/neasden.php'; if(Log::$p3)__log('Format: format with formatter "'. $fy .'" in context "'. $qq.'"'); if ($fy=='calliope'){ $tv=pv($tv); $tv=i3($tv,$qq); $meta=array(); $tv=vb($tv); $tv='<div class="e2-text-calliope-formatted">'. h3($tv) .'</div>'; } elseif ($fy=='neasden'){ $Nn=new Neasden; $Nn->profile_name=$qq; $tv=$Nn->format($tv); $meta=array ( 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ); } return array ( 'text-final' => $tv, 'meta' => $meta, ); } function u3($tv,$qq){ global$_config; return w3($_config['default_formatter'],$tv,$qq); } function i3($tv,$qq){ global$_config,$settings,$full_blog_url,$_template; @ (list ($qq,$lq)=explode('|',$qq)); if (!is_file(USER_FOLDER.'calliope/WikiFormatter.php')) { return '<div style="color: var(--errorColor); font-style: italic"><div class="foot">This text was created with a very old version of Aegea that used a formatter called Calliope. It is no longer included with Aegea&nbsp;2.10.</div><div class="foot">Edit this note to switch it and its comments to the current formatter, Neasden. If anything breaks, edit again to fix.</div><div class="foot">To temporarily install Calliope, get the directory <tt>/system/calliope/</tt> from Aegea&nbsp;2.9 and copy it to your <tt>/user/calliope/</tt>. This will not work with Aegea&nbsp;2.11. See release notes for Aegea&nbsp;2.10 for details.</div></div>'; } require_once USER_FOLDER.'calliope/WikiFormatter.php'; if ('full'==$qq)$zq=WF_FULL_MODE; elseif ('full-rss'==$qq)$zq=WF_FULL_MODE; elseif ('simple'==$qq)$zq=WF_SIMPLE_MODE; elseif ('simple-rss'==$qq)$zq=WF_SIMPLE_MODE; else return $tv; $kq=new WikiFormatter(); $kq -> replace=array ( '/' => 'i', '+' => 'small', '-' => 's', '*' => 'b', '^' => 'sup', 'v' => 'sub', '#' => 'tt', '!' => 'blockquote', ); $kq -> settings=array ( 'hrefSize' => 100, 'localImgDir' => $full_blog_url .'/'. PICTURES_FOLDER, 'maxImgWidth' => $_template['max_image_width'], 'mode' => $zq, 'enableShrinkLongHref' => 1, 'enableHr' => 0, 'enableBr' => 1, 'enableHeaders' => 1, 'headersStartWith' => 1, 'enableTables' => 1, 'simpleTableCSSClass' => 'e2-text-table', 'enableAutoAcronymEngine' => 0, 'enableAcronym' => 0, 'acronymBase' => '', 'enableList' => 1, 'mailSafe' => "<a href=\"\" onmouseover=\"this.href='mailto:'+{email}\">{icon}<script language=\"JavaScript\">document.write({name});</script></a>", 'ljUserTag' => '<a href="http://livejournal.com/users/{name}/">{name}</a>', 'fullVersionURL' => $lq, 'enableTagIcons' => 0, 'outerUrlInNewWindow' => 0, 'lineBreak' => "\n", 'extLinkHrefPrefix' => '', ); $tv=$kq -> Wiki2HTML($tv); return $tv; } function o3($ym,$xq=false){ if(Log::$p3)__log('Spawn: Curl '. $ym .' using '. ($xq? 'post':'get') .'...'); if(function_exists('curl_init')) { $eq=curl_init(); $rq=!ini_get('open_basedir'); curl_setopt_array($eq, array ( CURLOPT_URL => $ym, CURLOPT_POST => $xq, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => j2(), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $rq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content=curl_exec($eq); $tq=curl_errno($eq); $jq=curl_error($eq); $hq=curl_getinfo($eq); curl_close($eq); if(Log::$p3)__log('Spawn: Curl returns: ['. print_r($hq,true) .'] ['. $content .'], (errno='. $tq .', errstr='. $jq .')...'); } else { if(Log::$p3)__log('Spawn: Curl functions are not available'); } } function p3($gq){ global$_config; if (@$_config['broadcast_url'] and !$gq['IsExternal']) { if($_config['log_broadcast']) { Log::$p3=true; if(Log::$p3)bv('broadcast'); } if(Log::$p3)__log('Broadcast-async note: '. $gq['Title']); $ym=jv('e2m_note_broadcast', array ('*note' => $gq)); if(Log::$p3)__log('Broadcast will spawn url: '. $ym); o3($ym); } } function cy($wq){ global$_config; if (!$wq) return false; $ym=$_config['broadcast_url']; $ym.='?src='. urlencode($wq); if($_config['log_broadcast']) { Log::$p3=true; if(Log::$p3)bv('broadcast'); } if(Log::$p3)__log('Broadcast: Curl '. $ym .'...'); if(function_exists('curl_init')) { $eq=curl_init(); $rq=!ini_get('open_basedir'); curl_setopt_array($eq, array ( CURLOPT_URL => $ym, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => j2(), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $rq, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content=curl_exec($eq); $tq=curl_errno($eq); $jq=curl_error($eq); $hq=curl_getinfo($eq); curl_close($eq); if(Log::$p3)__log('Broadcast: Curl returns: ['. print_r($hq,true) .'] ['. $content .'], (errno='. $tq .', errstr='. $jq .')...'); if ($tq===0) return true; } else { if(Log::$p3)__log('Spawn: Curl functions are not available'); } return false; } function vy($gq){ if (!$gq) return false; $wq=jv('e2m_note_json', array ('*note' => $gq)); return cy($wq); } function e2m_note_broadcast($parameters=array ()) { global$_config; if (@$_config['broadcast_url']) { if(array_key_exists('*note',$parameters)) { $wq=jv('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif(array_key_exists('alias',$parameters)) { $wq=jv('e2m_note_json', array ('alias' => $parameters['alias'])); } if (cy($wq)) { die ('Broadcasted.'); } else { die ('Could not broadcast.'); } } else { return e2_error404_mode(); } } function e2m_timezone(){ global$_strings,$settings; $uq=array ( 'form-action' => jv('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => my($settings['timezone']['offset'],1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $uq, ); } function by(){ global$_strings; $iq=array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $iq; } function yy($oq){ $iq=by(); return @$iq[(int)$oq/SECONDS_IN_A_MINUTE]; } function ny($oq){ $pq='+'; if ($oq < 0)$pq='&ndash;'; $cl=str_pad((int) (abs($oq)/3600),2,'0',STR_PAD_LEFT); $vl=str_pad(abs($oq)/60 % 60,2,'0',STR_PAD_LEFT); return 'GMT'. $pq.$cl .':'. $vl; } function my($bl,$yl=''){ global$_strings; $iq=by(); $d=''; if (!$yl)$yl=count($iq); $d.='<select class="e2-select" name="offset" size="'. $yl .'">'; foreach ($iq as $oq => $nl){ $ml=''; if ($oq*SECONDS_IN_A_MINUTE==$bl)$ml=' selected="selected"'; $d.='<option'. $ml .' value="'.$oq.'">'; $pq=''; if ($oq < 0)$pq='−'; if ($oq > 0)$pq='+'; $cl=(int) (abs($oq*SECONDS_IN_A_MINUTE)/3600); $vl=(int) (abs($oq*SECONDS_IN_A_MINUTE)/60 % 60); if ($cl){ $d .= ( $pq .' '. $cl .' '. $_strings['gs--timezone-offset-hours'] .' '. ($vl? ($vl .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($nl){ $d .= ' ('. $nl. ')'; } } else { $d .= $nl; } $d.='</option>'; } $d.='</select>'; return $d; } function e2s_select_timezone(){ global$settings,$_strings; if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780){ $settings['timezone']['offset'] = @$_POST['offset']*SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); c(jv('e2m_timezone')); } c(jv('e2m_settings')); } function fy($f2){ return array ( 'offset' => (int)$f2['Offset'], 'is_dst' => (bool)$f2['IsDST'], ); } function dy(){ return array ( 'offset' => 0, 'is_dst' => false, ); } function sy(){ global$settings; if(array_key_exists('timezone',$settings)) { return$settings['timezone']; } else { return dy(); } } function ay($fl,$dl){ if (@$fl['is_dst']) { $sl=(int)date('I',$dl); $al=date('Z',$dl)-$sl*SECONDS_IN_AN_HOUR; $ql=$fl['offset']; $ll=$ql-$al; $zl=date('I',$dl+$ll); return $zl; } else { return 0; } } function qy($fl,$dl){ global$settings; if ($fl and is_array($fl)) { return ( $fl['offset'] + ay($fl,$dl)*SECONDS_IN_AN_HOUR ); } } function ly($dl){ return qy(sy(),$dl); } function zy($kl,$qv,$fl){ return gmdate($kl,$qv+qy($fl,$qv)); } function ky($kl,$qv){ return zy($kl,$qv,sy()); } function xy($hb,$jb=false,$tb=false){ if(is_numeric($tb)) { $xl=gmmktime(0,0,0,$jb,$tb,$hb); $el=gmmktime(0,0,0,$jb,$tb+1,$hb)-1; } elseif(is_numeric($jb)) { $xl=gmmktime(0,0,0,$jb,1,$hb); $el=gmmktime(0,0,0,$jb+1,1,$hb)-1; } else { $xl=gmmktime(0,0,0,1,1,$hb); $el=gmmktime(0,0,0,1,1,$hb+1)-1; } return array ($xl,$el); } function ey($fl,$hb,$jb=false,$tb=false){ list ($xl,$el)=xy($hb,$jb,$tb); $xl -= qy($fl,$xl); $el -= qy($fl,$el); return array ($xl,$el); } function ry($hb,$jb=false,$tb=false){ return ey(sy(),$hb,$jb,$tb); } function ty($hb,$jb=false,$tb=false){ $rl=13; $tl=-12; $rl+=1; $tl -= 1; list ($xl,$el)=xy($hb,$jb,$tb); $xl -= $rl*3600; $el -= $tl*3600; return array ($xl,$el); } function jy($oq){ if ((int) @$oq > 0) return (string)'+'.abs(@$oq); elseif ((int) @$oq < 0) return (string)'-'.abs(@$oq); else return ''; } function hy($dl,$jl=''){ $hl=ly($dl); $pq=($hl >= 0)?'+':'-'; $hl=abs($hl); $gl=$hl % 60; $hl -= $gl; $jb=$hl % 3600/60; $hl -= $jb*60; $wl=$hl/3600; if ($wl < 10)$wl='0'.$wl; if ($jb < 10)$jb='0'.$jb; return $pq.$wl.$jl.$jb; } function gy($ul){ global$settings; if(is_numeric($ul)) { $m1['offset']=SECONDS_IN_A_MINUTE*$ul; $m1['is_dst']=false; $il=SECONDS_IN_A_MINUTE*$ul-SECONDS_IN_AN_HOUR; $ol=array ('offset' => $il,'is_dst' => true); $ol=(int)qy($ol,time()); if ($m1['offset']==$ol){ $m1['offset']=$il; $m1['is_dst']=true; } } else { if(array_key_exists('timezone',$settings)) { $m1=$settings['timezone']; } else { $m1['offset']=0; $m1['is_dst']=false; } } return $m1; } function wy($pl){ $wl=ky('H',$pl); if ($wl <= 4) return 4; elseif ($wl <= 10) return 1; elseif ($wl <= 16) return 2; elseif ($wl <= 22) return 3; else return 4; } function uy($c4,$v4=null){ global$_strings; if ($v4===null)$v4=sy(); $b4=zy('d.m.Y',$rb,$v4); $y4=zy('d.m.Y',$c4,$v4); $n4=SECONDS_IN_A_MINUTE; $m4=SECONDS_IN_AN_HOUR; $rb=time(); $f4=wy($rb); $d4=wy($c4); $kb=$rb-$c4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb >= 0 and $kb < 54) return$_strings['tt--just-now']; if ($kb >= 54 and $kb < 108) return$_strings['tt--one-minute-ago']; $s4=$kb+12; $a4=floor($s4/$n4); if ($kb >= 108 and $kb < 54*$n4) return e2l_get_string( 'tt--minutes-ago', array ('minutes' => $a4) ); if ($kb >= 54*$n4 and $kb < 108*$n4) return$_strings['tt--one-hour-ago']; $s4=$kb+12*$n4; $q4=floor($s4/$m4); if ($kb >= 108*$n4 and $kb < 4*$m4) return e2l_get_string( 'tt--hours-ago', array ('hours' => $q4) ); $l4=zy('G:i',$c4,$v4); if ($kb >= 4*$m4 and $f4 > $d4 and $b4==$y4){ return$_strings['tt--today']; } if ((($rb-$c4) <= 7884000)) { return e2l_get_string( 'tt--date', array ( 'day' => zy('j',$c4,$v4), 'month' => zy('m',$c4,$v4), ) ); } return zy('Y',$c4,$v4); } function iy($c4,$v4=null){ global$_strings; $kb=time()-$c4; if ($kb < 0) return$_strings['tt--from-the-future']; if ($kb==0) return$_strings['tt--now']; $z4=array ( array (1,'tt--seconds-short'), array (SECONDS_IN_A_MINUTE,'tt--minutes-short'), array (SECONDS_IN_AN_HOUR,'tt--hours-short'), array (SECONDS_IN_A_DAY,'tt--days-short'), array (SECONDS_IN_A_MONTH,'tt--months-short'), array (SECONDS_IN_A_YEAR,'tt--years-short'), array (SECONDS_IN_A_YEAR+SECONDS_IN_A_MONTH,''), ); for ($r=0; $r < count($z4); ++ $r){ if ($kb >= $z4[$r][0] and $kb < $z4[$r+1][0]) { return e2l_get_string( $z4[$r][1], array ('value' => floor($kb/$z4[$r][0])) ); } } if ($v4===null)$v4=sy(); return zy('Y',$c4,$v4); } $_model_contractions=[ 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'pkey1' => "INT UNSIGNED DEFAULT '1' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v39' => "VARCHAR(39) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". $_config['default_formatter'] ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ]; $_model=[ 'Actions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityID', 'pkey'], ['Stamp', 'time'], ['ReadCount', 'int'], ], 'Aliases' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['EntityType', 'v1'], ['EntityID', 'pkey'], ['Alias', 'v64'], ['Stamp', 'time'], ], 'Comments' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['Text', 'text'], ['Reply', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ['IsReplyVisible', '0'], ['IsReplyFavourite', '0'], ['IsAnswerAware', '1'], ['IsSubscriber', '0'], ['IsSpamSuspect', '0'], ['IsNew', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['ReplyStamp', 'time'], ['ReplyLastModified', 'time'], ['IP', 'v39'], ['IsGIPUsed', '0'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ], 'GIPsSessions' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['GIP', 'v15'], ['GIPAuthorID', 'v64'], ['AuthorName', 'v255'], ['AuthorEmail', 'v255'], ['AuthorProfileLink', 'v255'], ['SessionToken', 'v255'], ['Stamp', 'time'], ], 'Keywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Keyword', 'v255'], ['OriginalAlias', 'v64'], ['PageTitle', 'v255'], ['Description', 'text'], ['Summary', 'text'], ['Uploads', 'text'], ['IsVisible', '1'], ['IsFavourite', '0'], ], 'Notes' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['Title', 'v255'], ['Text', 'text'], ['Summary', 'text'], ['FormatterID', 'fid'], ['OriginalAlias', 'v64'], ['Uploads', 'text'], ['IsPublished', '0'], ['IsCommentable', '0'], ['IsVisible', '1'], ['IsFavourite', '0'], ['Stamp', 'time'], ['LastModified', 'time'], ['Offset', 'int'], ['IsDST', '0'], ['IsIndexed', '0'], ['IsExternal', '0'], ['SourceID', 'pkey'], ['SourceNoteID', 'pkey'], ['SourceNoteURL', 'v255'], ['SourceNoteJSONURL', 'v255'], ['SourceNoteData', 'text'], ], 'NotesKeywords' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['NoteID', 'pkey'], ['KeywordID', 'pkey'], ], 'Sources' => [ ['ID', 'key'], ['SubsetID', 'pkey1'], ['TrueID', 'pkey'], ['Title', 'v255'], ['AuthorName', 'v255'], ['URL', 'v255'], ['PictureURL', 'v255'], ['IsWhiteListed', '0'], ['IsTrusted', '0'], ], ]; $_model_indexes_create_sql=[ 'index' => 'INDEX', 'unique' => 'UNIQUE INDEX', 'fulltext' => 'FULLTEXT', ]; $_model_indexes_check_sql=[ 'index' => 'KEY', 'unique' => 'UNIQUE KEY', 'fulltext' => 'FULLTEXT KEY', ]; $_model_indexes=[ 'Actions' => [ ['unique', ['EntityID','Stamp']], ['index', ['SubsetID']], ], 'Aliases' => [ ['index', ['SubsetID']], ['index', ['Alias']], ['index', ['EntityID']], ], 'Comments' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'GIPsSessions' => [ ['unique', ['GIP','GIPAuthorID']], ['index', ['SubsetID']], ], 'Keywords' => [ ['index', ['SubsetID']], ], 'Notes' => [ ['fulltext', ['Title','Text']], ['index', ['SubsetID']], ['index', ['Stamp']], ['index', ['SourceID']], ['index', ['SourceNoteID']], ], 'NotesKeywords' => [ ['index', ['SubsetID']], ['index', ['NoteID']], ], 'Sources' => [ ['index', ['SubsetID']], ], ]; $_model_minimal_table_list=[ 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ]; function e2_model_data_check($k4){ global$_db,$_model,$_model_minimal_table_list,$_config; $x4=false; $e4=array(); $sql='SHOW TABLES FROM `'. mysqli_real_escape_string($_db['link'],$k4). '`'; $m1=mysqli_query($_db['link'],$sql); if ($m1){ while ($r4=mysqli_fetch_row($m1)) { foreach(array_keys($_model) as $t4){ if(strcasecmp($r4[0],$_config['db_table_prefix'].$t4)===0){ $x4=true; $e4[] = $t4; } } } } $j4=true; foreach(array_keys($_model) as $t4){ if (!in_array($t4,$e4)) { $j4=false; } } $h4=true; foreach($_model_minimal_table_list as $t4){ if (!in_array($t4,$e4)) { $h4=false; } } return array ( 'occupied' => $x4, 'complete' => $j4, 'migrateable' => $h4, ); } function oy($g4,$w4,$u4){ global $i4; if (($o4=mysqli_connect($g4,$w4,$u4)) === false) return []; $p4=[]; $cz=[ 'information_schema', 'performance_schema', 'sys', 'mysql' ]; @$i4 ++; $im='SHOW DATABASES'; if(Log::$p3)__log('DB ['. $i4 .']: '. $im); $m1=mysqli_query($o4,$im); while ($r4=mysqli_fetch_row($m1)) { if(mysqli_select_db($o4,$r4[0]) and !in_array($r4[0],$cz)) { $p4[] = $r4[0]; } } return $p4; } function py($vz){ global$_config; xn( "SHOW TABLES LIKE '". $_config['db_table_prefix'].$vz . "'" ); $yy=en(); return count($yy) > 0; } function cn($vz,$bz=null){ global$_config; if ($bz===null){ $bz=$_config['db_table_prefix']; } xn( "SHOW TABLE STATUS LIKE '". $bz.$vz . "'" ); $m1=en(); return $m1?$m1[0] : []; } function vn($vz){ global $_model, $_model_contractions, $_model_indexes, $_model_indexes_check_sql, $_config, $_db; if (!array_key_exists($vz,$_model)) throw new AeModelUnknownTableException(); if (py($vz)) return; $bz=$_config['db_table_prefix']; $yz=[]; foreach($_model[$vz] as $nz){ list ($name,$type)=$nz; $yz[] = "`". $name ."` ". $_model_contractions[$type]; } if(is_array(@$_model_indexes[$vz])) { foreach($_model_indexes[$vz] as $mz){ $fz=$_model_indexes_check_sql[$mz[0]] . ' (`'. implode('`, `',$mz[1]) .'`)'; $yz[] = $fz; } } $sql=( "CREATE TABLE `". $bz.$vz ."` ". "(". implode(", ",$yz) .") ". "ENGINE=InnoDB DEFAULT CHARSET=". $_db['charset'] ); xn($sql); } function bn($vz,$z1,$dz='INSERT',$sz=''){ global$_config,$_db; $az['SubsetID']=$_config['db_table_subset']; foreach ($z1 as $t => $af){ $az[$t]="'". rn($af) ."'"; } $qz="`". implode("`, `",array_keys($az)). "`"; $lz=implode(", ",array_values($az)); xn( $dz ." INTO `". $_config['db_table_prefix'].$vz ."` ". "(".$qz .") VALUES (". $lz .")". ($sz? (' '. $sz):'') ); $z1['ID']=mysqli_insert_id($_db['link']); return $z1; } function yn($vz,$z1,$zz=false,$kz=false){ global$_config; if(Log::$p3)__log('Model: update record in table '. $vz .' {'); $xz=array(); foreach(e2model__soft_fields_for_table_($vz) as $ez){ if(array_key_exists($ez,$z1)) { $xz[] = '`'. $ez .'`'."='". rn($z1[$ez]) ."'"; } } $rz=array(); if(is_array($zz)) { foreach(e2model__soft_fields_for_table_($vz) as $ez){ if(array_key_exists($ez,$zz)) { $rz[] = '`'. $ez .'`'."='". rn($zz[$ez]) ."'"; } } } if(count($rz)) { $b=implode(" AND ",$rz); } else { if (!array_key_exists('ID',$z1) or !is_numeric($z1['ID'])) { if(Log::$p3)__log('Error: e2_update_record must be called with an ID field in $record when updating single row'); return false; } $b="`ID`=". $z1['ID']; } if(count($xz) > 0){ $tz=$kz? 'LOW_PRIORITY ':''; xn( "UPDATE ". $tz ."`". $_config['db_table_prefix'].$vz ."` ". "SET ". implode(', ',$xz) ." ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")" ); } if(Log::$p3)__log('}'); return true; } function e2model__soft_fields_for_table_($vz){ global$_model; $d=array(); if(array_key_exists($vz,$_model)) { foreach($_model[$vz] as $ez){ if (!in_array($ez[1], array ('key'))) { $d[] = $ez[0]; } } } return $d; } function e2m_install(){ global$_strings,$_superconfig,$_files_written,$_diagnose; if (mn()!==null)c(); zs(DEFAULT_TEMPLATE); $d=array(); if($_superconfig['disallow_installer']) { die ('Installer disabled by superconfig'); } if(Log::$p3)__log('Installer: not installed, present user with form'); $jz=true; $hz['server'] = @$_COOKIE[b('install_db_server')]; $hz['user_name'] = @$_COOKIE[b('install_db_user_name')]; $hz['passw']=p2(@$_COOKIE[b('install_db_passw')]); $hz['name'] = @$_COOKIE[b('install_db_name')]; if (!@isset ($_diagnose['ok?']))fv(); if (!$_diagnose['ok?']) { if(Log::$p3)__log('Installer: problems, tell user'); $jz=false; } $d=[ 'title' => $_strings['pt--install'], 'heading' => $_strings['pt--install'], 'form-install' => [ 'form-action' => jv('e2s_install'), 'form-check-db-config-action' => jv('e2j_check_db_config'), 'form-list-databases-action' => jv('e2j_list_databases'), 'installation-possible?' => $jz, 'submit-text' => $_strings['fb--begin'], 'retry-href' => jv('e2m_install'), 'retry-text' => $_strings['fb--retry'], 'db-server' => htmlspecialchars(@$hz['server']? $hz['server']:'localhost'), 'db-user' => htmlspecialchars(@$hz['user_name']? $hz['user_name']:'root'), 'db-password' => '', 'db-database' => htmlspecialchars(@$hz['name']), ] ]; return $d; } function mn(){ static $gz=null; if ($gz===null){ $gz=@unserialize( @file_get_contents(USER_FOLDER.'instance.psa') ) or $gz=null; } return $gz; } function fn_($wz){ static $gz=null; $gz=mn(); $gz['version']=$wz; if (n3(USER_FOLDER. '/instance.psa',serialize($gz))) { return $gz; } else { die ('Cannot instantiate v'. $wz .': probably permission denied'); } } function e2s_instantiate($parameters){ global$_strings; if (mn()!==null){ die ('Remove the file "'. USER_FOLDER .'instance.psa" first'); } else { if(is_numeric($parameters['version'])) { if (fn_($parameters['version'])) { mv($_strings['gs--instantiated-version'] .' v'. $parameters['version'],E2E_MESSAGE); c(jv('e2m_frontpage', array ('page' => 1))); } } } die ('Could not create instance of engine'); } function e2_install($lv){ global$_folders_written,$_model,$_strings,$_config,$settings; if (mn()!==null){ throw new AeInstallAlreadyInstalledException('Instance already created'); } if($_config['log_installs']) { Log::$p3=true; if(Log::$p3)bv('install-$'); } if(Log::$p3)__log('Installer: force directories'); foreach($_folders_written as $uz){ @j($uz); } if(Log::$p3)__log('Installer: write password hash'); if (!@n3(USER_FOLDER.'password-hash.psa',serialize(sha1($lv['password'])))) { throw new AePasswordHashNotSavedException; } if(array_key_exists('plain_password',$lv['db_params'])) { $lv['db_params']['passw']=o2($lv['db_params']['plain_password']); unset ($lv['db_params']['plain_password']); } $settings['db']=$lv['db_params']; $settings['template']=DEFAULT_TEMPLATE; $settings['language']=DEFAULT_LANGUAGE; kn('check database during installation',$lv['db_params']); $i3=e2_model_data_check($lv['db_params']['name']); $iz=false; if ($i3['occupied']) { if ($i3['migrateable'] and $lv['allow_migration']) { $iz=true; if(Log::$p3)__log('Installer: data exists and migrateable'); } else { if(Log::$p3)__log('Installer: incomplete data in the database'); throw new AeInstallDatabaseOccupiedException('Database already has some data'); } } if ($iz){ if(Log::$p3)__log('Installer: no need to create tables, will migrate'); try { an(); } catch (AeMySQLException $e){ kv($e,'Could not migrate'); mv($_strings['er--double-check-db-params']); } } else { if(Log::$p3)__log('Installer: create tables'); foreach(array_keys($_model) as $vz){ vn($vz); } } if(Log::$p3)__log('Installer: write settings'); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { throw new AeSettingsNotSavedException; } e2_drop_all_kinds_of_cache(); if(Log::$p3)__log('Installer: search index'); $o3=ra(); try { $o3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$p3)__log('Installer: Rose not available'); } qa(); if(Log::$p3)__log('Installer: instantiate'); fn_(E2_VERSION); if(Log::$p3)__log('Installer: complete'); } function dn(){ $w3['server']=$w3['user_name'] = $w3['passw']=$w3['name']=''; if(array_key_exists('db-server',$_POST)) $w3['server']=$_POST['db-server']; if(array_key_exists('db-user',$_POST)) $w3['user_name']=$_POST['db-user']; if(array_key_exists('db-password',$_POST))$w3['passw']=$_POST['db-password']; if(array_key_exists('db-database',$_POST))$w3['name']=$_POST['db-database']; return $w3; } function e2s_install(){ global$_strings,$_config,$_db; if (mn()!==null)c(); $w3=dn(); foreach ($w3 as $t => $af){ y('install_db_'. $t,$af); } if (!array_key_exists('password',$_POST) or trim($_POST['password']) == ''){ mv($_strings['er--no-password-entered'],E2E_USER_ERROR); c(jv('e2m_install')); } $oz=trim($_POST['password']); @session_start(); $u3=false; try { e2_install([ 'allow_migration' => true, 'password' => $oz, 'db_params' => $w3, ]); $u3=true; } catch (AeMySQLCannotConnectException $e){ mv( $_strings['er--cannot-connect-to-db']. ':<br />'. mysqli_connect_error() .' ('. mysqli_connect_errno() .')' ); } catch (AeMySQLTooOldException $e){ mv(e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ])); } catch (AeMySQLException $e){ mv($_strings['er--cannot-find-db'] .' '. $w3['name']); } catch (AeInstallDatabaseOccupiedException $e){ mv($_strings['er--db-data-incomplete-install']); } catch (AeNotSavedException $e){ mv($_strings['er--settings-not-saved'],E2E_PERMISSIONS_ERROR); } catch (AeInstallException $e){ } if (!$u3)c(jv('e2m_install')); $pz['sessions'] = [[ 'stamp' => time(), 'remote_ip' => z2(), 'key_hash' => x2(true), 'ua' => $_SERVER['HTTP_USER_AGENT'], ]]; if (!t2($pz)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } o3(jv('e2s_bsi_step', array ())); c(); } function sn(){ global $v,$c,$_superconfig,$_config; $gz=mn(); if (mn()!==null){ if(E2_VERSION < $gz ['version']) { if (@$_config['dev_ignore_version_mismatch']) return; if(Log::$p3)__log('Installer: cannot downdate'); header('HTTP/1.1 503 Service Unavailable'); die ('E2 does not support automatic downgrade.'); } elseif(E2_VERSION > $gz ['version']) { if(Log::$p3)__log('Installer: need to update'); header('Location: http://'. $v.$c .'/perform_update/'); header('Location: '. jv('e2s_update_perform')); die; } else { return; } } if(Log::$p3)__log('Installer: not installed {'); if ((strpos($_SERVER['SERVER_SOFTWARE'],'Apache')===0)) { if(Log::$p3)__log('Installer: running on Apache'); $ck=DEFAULTS_FOLDER.'default.htaccess'; $vk=false; if (!is_file($ck)) { echo 'File not found: '.$ck. '. Please use the full E2 installation package.'; die; } if(is_file('.htaccess')) { if(Log::$p3)__log('Installer: there is a .htaccess file in the installation directory'); $bk=file_get_contents($ck); $yk=file_get_contents('.htaccess'); if ($yk!=$bk){ $vk=true; $nk=$mk='.htaccess.old'; $fk=1; while (is_file($mk)) { $mk=$nk .'.'. $fk ++; } if(Log::$p3)__log('Installer: existing .htaccess wrong, backing up as <'. $mk .'>'); if (!@rename('.htaccess',$mk)) { if(Log::$p3)__log('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $vk=true; } if ($vk){ if(Log::$p3)__log('Installer: writing a correct .htaccess file'); if (!@copy($ck,'.htaccess')) { if(Log::$p3)__log('Installer: fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } } } if($_superconfig['disallow_installer']) { if(Log::$p3)__log('Installer: disallowed in superconfig'); xv(new AeNotAndCannotBeInstalledException); } else { $dk=jv('e2m_install'); if(Log::$p3)__log('Installer: will need to install, going to '. $dk); if(Log::$p3)__log('}'); c($dk); } } function e2j_check_db_config(){ global$_db,$_strings; $w3=dn(); $zv=[ 'success' => true, 'data' => [ 'message' => '', 'db-responding' => false, 'db-connected' => false, 'db-compatible' => false, 'db-occupied' => false, 'db-migrateable' => false, ] ]; try { $w3['passw']=o2($w3['passw']); kn('connect to check DB config (try 1)',$w3); } catch (AeMySQLAccessDeniedException $e){ $zv['data']['db-responding']=true; $zv=json_encode($zv); die ($zv); } catch (AeMySQLCannotConnectException $e){ $zv['data']['message']='no-connect'; $zv=json_encode($zv); die ($zv); } catch (AeMySQLTooOldException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['message']=e2l_get_string('er--mysql-version-too-old', [ 'v1' => $_db['version'], 'v2' => E2_MINIMUM_MYSQL, ]); $zv=json_encode($zv); die ($zv); } catch (AeMySQLNotFoundException $e){ $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; if (!$w3['name']) { $p4=oy( $w3['server'],$w3['user_name'],$w3['passw'] ); if(count($p4) > 0){ $w3['name']=$p4[0]; } else { $zv['data']['db-responding']=true; $zv=json_encode($zv); die ($zv); } } } $zv['data']['db-responding']=true; $zv['data']['db-connected']=true; $zv['data']['db-compatible']=true; try { kn('connect to check DB config (try 2)',$w3); } catch (AeMySQLException $e){ $zv=json_encode($zv); die ($zv); } $zv['data']['db-good']=true; $i3=e2_model_data_check($w3['name']); if ($i3['occupied']) { if ($i3['migrateable']) { $zv['data']['message']=$_strings['gs--data-exists']; } else { $zv['data']['db-good']=false; $zv['data']['message']=$_strings['er--db-data-incomplete-install']; } } $zv=json_encode($zv); die ($zv); } function e2j_list_databases(){ $w3=dn(); $p4=oy( $w3['server'],$w3['user_name'],$w3['passw'] ); $zv=[ 'success' => true, 'data' => [ 'databases-list' => $p4, ] ]; $zv=json_encode($zv); die ($zv); } function an(){ global $_db, $_config, $_model, $_model_indexes, $_model_indexes_create_sql, $_model_indexes_check_sql; $bz=$_config['db_table_prefix']; xn('SET sql_quote_show_create=1'); if($_db['charset']==='utf8mb4'){ if(Log::$p3)__log('Convert tables to utf8mb4 {'); zn($bz); if(Log::$p3)__log('}'); } else { if(Log::$p3)__log('Convert tables to utf8 {'); qn($bz); if(Log::$p3)__log('}'); } if(Log::$p3)__log('Get existing table information {'); foreach(array_keys($_model) as $vz){ vn($vz); try { xn("SHOW CREATE TABLE `". $bz.$vz ."`"); $sk[$vz]=en(); $sk[$vz]=$sk[$vz][0]['Create Table']; } catch (AeMySQLException $e){ kv($e); die ('Database table "'. $bz .$vz .'" not accessible during migration. Check your database availability'); } xn("SHOW INDEX FROM `". $bz.$vz ."`"); $ak=en(); $qk=array(); foreach ($ak as $mz){ $mz=$mz['Key_name']; if(preg_match('/\_[0-9]+$/',$mz)) { $lk[] = $mz; $qk[] = 'DROP INDEX `'. $mz. '`'; } } if(count($qk)) { $qk=implode(', ',array_unique($qk)); $lk=implode(', ',array_unique($lk)); if(Log::$p3)__log( 'Drop erroneous index "'. $lk .'" on "'. $bz.$vz .'"' ); xn( "ALTER TABLE `". $bz.$vz ."` ". $qk ); } if (!strstr($sk[$vz],'InnoDB')) { xn( "ALTER TABLE `". $bz.$vz ."` ". "ENGINE = InnoDB" ); } if (!strstr($sk[$vz],'`SubsetID`')) { xn( "ALTER TABLE `". $bz.$vz."` ". "ADD `SubsetID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); } if($_config['db_table_subset'] > 0){ xn( "UPDATE `". $bz.$vz ."` ". "SET `SubsetID` = ". $_config['db_table_subset'] ." ". "WHERE `SubsetID` = 0" ); } else { die ('db_table_subset must be greater than 0'); } } if(Log::$p3)__log('}'); if (!strstr($sk['Actions'],'`ReadCount`')) { xn( "ALTER TABLE `". $bz."Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if(strstr($sk['Actions'],'`HitCount`')) { xn( "ALTER TABLE `". $bz."Actions` ". "DROP `HitCount`" ); xn( "DELETE FROM `". $bz."Actions` ". "WHERE `ReadCount` = 0" ); } if (!strstr($sk['Aliases'],'`EntityType`')) { xn( "ALTER TABLE `". $bz."Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } xn( "UPDATE `". $bz."Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); xn( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `ID` IN (". "SELECT `ID` FROM (". "SELECT a.`ID` FROM `". $_config['db_table_prefix']."Aliases` a ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."Keywords` e ". "ON a.`EntityID` = e.`ID` ". "WHERE a.`EntityType` = 't' ". "AND e.`ID` IS NULL". ") AS temp". ")", 'clean up “leaked” tag aliases' ); if (!stristr($sk['Comments'],'`Text` MEDIUMTEXT')) { xn( "ALTER TABLE `". $bz."Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!stristr($sk['Comments'],'`Reply` MEDIUMTEXT')) { xn( "ALTER TABLE `". $bz."Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); } if (!stristr($sk['Comments'],'`IP` VARCHAR(39)')) { xn( "ALTER TABLE `". $bz."Comments` ". "CHANGE `IP` `IP` VARCHAR(39)  DEFAULT '' NOT NULL" ); } if (!strstr($sk['Comments'],'`IsGIPUsed`')) { xn( "ALTER TABLE `". $bz."Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr($sk['Comments'],'`GIP`')) { xn( "ALTER TABLE `". $bz."Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr($sk['Comments'],'`GIPAuthorID`')) { xn( "ALTER TABLE `". $bz."Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if(strstr($sk['Comments'],'`SocialType`')) { xn( "ALTER TABLE `". $bz."Comments` ". "DROP `SocialType`" ); } if(strstr($sk['Comments'],'`SocialID`')) { xn( "ALTER TABLE `". $bz."Comments` ". "DROP `SocialID`" ); } if (!strstr($sk['GIPsSessions'],'`AuthorEmail`')) { xn( "ALTER TABLE `". $bz."GIPsSessions` ". "ADD `AuthorEmail` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorName`" ); } if (!strstr($sk['GIPsSessions'],'`AuthorProfileLink`')) { xn( "ALTER TABLE `". $bz."GIPsSessions` ". "ADD `AuthorProfileLink` VARCHAR(255) DEFAULT '' NOT NULL AFTER `AuthorEmail`" ); } if(strstr($sk['Keywords'],'`ParentKeywordID`')) { xn( "ALTER TABLE `". $bz."Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr($sk['Keywords'],'`OriginalAlias`')) { xn( "ALTER TABLE `". $bz."Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } if (!strstr($sk['Keywords'],'`PageTitle`')) { xn( "ALTER TABLE `". $bz."Keywords` ". "ADD `PageTitle` VARCHAR(255) DEFAULT '' NOT NULL AFTER `OriginalAlias`" ); } if (!stristr($sk['Keywords'],'`Description` MEDIUMTEXT')) { xn( "ALTER TABLE `". $bz."Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); } if (!strstr($sk['Keywords'],'`Summary`')) { xn( "ALTER TABLE `". $bz."Keywords` ". "ADD `Summary` MEDIUMTEXT AFTER `Description`" ); } if (!strstr($sk['Keywords'],'`Uploads`')) { xn( "ALTER TABLE `". $bz."Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Summary`" ); } if (!stristr($sk['Keywords'],'`Uploads` MEDIUMTEXT')) { xn( "ALTER TABLE `". $bz."Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr($sk['Keywords'],'`IsVisible`')) { xn( "ALTER TABLE `". $bz."Keywords` ". "ADD `IsVisible` TINYINT(1) DEFAULT '1' NOT NULL AFTER `Uploads`" ); } if (!strstr($sk['Notes'],'`FormatterID`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL AFTER `Text`" ); } if (!strstr($sk['Notes'],"DEFAULT 'calliope'")) { xn( "ALTER TABLE `". $bz."Notes` ". "CHANGE `FormatterID` `FormatterID` VARCHAR( 32 ) DEFAULT '". $_config['default_formatter'] ."' NOT NULL" ); } if (!strstr($sk['Notes'],'`OriginalAlias`')) { xn( "ALTER TABLE `". $bz."Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if(strstr($sk['Notes'],'`IP`')) { xn( "ALTER TABLE `". $bz."Notes` ". "DROP `IP`" ); } if (!stristr($sk['Notes'],'`Text` MEDIUMTEXT')) { xn( "ALTER TABLE `". $bz."Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); } if (!strstr($sk['Notes'],'`Summary`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `Summary` MEDIUMTEXT AFTER `Text`" ); } if (!strstr($sk['Notes'],'`IsIndexed`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr($sk['Notes'],'`Uploads`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } if (!stristr($sk['Notes'],'`Uploads` MEDIUMTEXT')) { xn( "ALTER TABLE `". $bz."Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); } if (!strstr($sk['Notes'],'`IsExternal`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr($sk['Notes'],'`SourceID`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr($sk['Notes'],'`SourceNoteID`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr($sk['Notes'],'`SourceNoteURL`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr($sk['Notes'],'`SourceNoteData`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr($sk['Notes'],'`SourceNoteJSONURL`')) { xn( "ALTER TABLE `". $bz."Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if(strstr($sk['Notes'],'`SourceMainImageURL`')) { xn( "ALTER TABLE `". $bz."Notes` ". "DROP `SourceMainImageURL`" ); } if(strstr($sk['Notes'],'`IsIssue`')) { xn( "ALTER TABLE `". $bz."Notes` ". "DROP `IsIssue`" ); } if (!strstr($sk['Sources'],'`TrueID`')) { xn( "ALTER TABLE `". $bz."Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); xn( "UPDATE `". $bz."Sources` ". "SET `TrueID` = `ID`" ); } if(Log::$p3)__log('Ensure indexes {'); if(strstr($sk['Notes'],'`Title` (`Title`(191))')) { if(Log::$p3)__log('Drop erroneous index on "'. $bz .'Notes.Title"'); xn( "ALTER TABLE `". $bz ."Notes` ". "DROP INDEX `Title`" ); } foreach(array_keys($_model) as $vz){ foreach($_model_indexes[$vz] as $mz){ list ($type,$yz)=$mz; $zk=$_model_indexes_check_sql[$type].' `'.$yz[0].'` (`'. implode('`,`',$yz) .'`)'; $kk=$_model_indexes_create_sql[$type].' (`'. implode('`, `',$yz) .'`)'; if (!strstr($sk[$vz],$zk)) { if(Log::$p3)__log( 'Table "'. $bz.$vz .'" is missing "'. $_model_indexes_check_sql[$type] .'" on columns "'. implode('", "',$yz) .'"' ); xn( "ALTER TABLE `". $bz.$vz ."` ". "ADD ". $kk ); } } } if(Log::$p3)__log('}'); return true; } function qn($bz){ global$_model; foreach(array_keys($_model) as $t4){ $xk=cn($t4,$bz); if ($xk){ $ek=$xk['Collation']; if ($ek!='utf8_general_ci'){ if(Log::$p3)__log('Migrate: Convert table '. $t4. ' to utf8'); xn( "ALTER TABLE `". $bz.$t4 ."` ". "CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci" ); } } } } function e2mig__queries_to_recreate_indexes_for_table_($vz){ $rk=$tk=[]; $jk=( "SELECT s.column_name, s.table_name, s.index_name, s.non_unique, engine ". "FROM information_schema.statistics s ". "JOIN information_schema.columns USING (table_name, table_schema, column_name) ". "JOIN information_schema.tables USING (table_name, table_schema) ". "WHERE engine = 'InnoDB' ". "AND character_set_name <> 'utf8mb4' ". "AND index_type = 'BTREE' ". "AND column_type LIKE '%varchar%' ". "AND s.table_schema = DATABASE() ". "AND table_name='".$vz."'" ); xn($jk); foreach (en() as $r4){ $rk[] = sprintf( "DROP INDEX %s ON %s", $r4['index_name'], $r4['table_name'] ); $hk=191; $tk[] = sprintf( "CREATE %s INDEX %s ON %s(%s($hk))", $r4['non_unique']?'':'UNIQUE', $r4['index_name'], $r4['table_name'], $r4['column_name'] ); } return array ($rk,$tk); } function zn($bz){ global$_model,$_db; $gk=ea(); foreach ($gk as $t => $af){ $gk[$t]=SEARCH_EXTRA_PREFIX. $af; } $wk=array_merge( array_keys($_model), array_values($gk) ); $rk=$tk=null; foreach ($wk as $t4){ if(Log::$p3)__log('Migrate: Convert table '. $t4. ' to utf8mb4?'); $xk=cn($t4,$bz); if ($xk){ $ek=$xk['Collation']; if(stripos($ek,'utf8mb4')!==0){ list ( $rk, $tk )=e2mig__queries_to_recreate_indexes_for_table_($bz.$t4); if ($rk!==null){ if(Log::$p3){ __log('Migrate: Drop indexes of table '. $t4); } foreach ($rk as $uk){ xn($uk); } } if(Log::$p3){ __log('Migrate: Convert table '. $t4. ' to UTF8MB4'); } xn( "ALTER TABLE `". $bz.$t4 ."` ". "CONVERT TO CHARACTER SET utf8mb4" ); if ($tk!==null){ if(Log::$p3){ __log('Migrate: Recreate indexes of table '.$t4); } foreach ($tk as $ik){ xn($ik); } } } } } } function e2s_update_perform(){ global$_model,$settings,$_config,$_diagnose; if(1){ $ok=ini_get('max_execution_time')+5; $pk=@unserialize(file_get_contents(USER_FOLDER.'updating.psa')); if (!is_array($pk))$pk=[]; if ( isset ($pk['lock']) and $pk['lock'] >= time()-$ok ){ throw new AeUpdateAlreadyInProcess('Update already in process'); } $pk['lock']=time(); if (!@n3(USER_FOLDER.'updating.psa',serialize($pk))) { throw new AeUpdateCannotLock('Update can’t get a new lock'); } } $gz=mn(); $g=max((int) ($gz['version']), 2285); if ($gz['version']==E2_VERSION)v(); if($_config['log_updates']) { Log::$p3=true; if(Log::$p3)bv('update-$'); } if($_config['backup_before_update']) { if(Log::$p3)__log('Backup before update {'); if (!gn()) { die ('Could not make backup before update. Try again?'); } if(Log::$p3)__log('}'); } if(Log::$p3)__log('Update from v'. $g .' to v'. E2_VERSION.' {'); if ($g < 2587){ r('caches/*'); rmdir('caches'); } if ($g < 2691){ $settings=e2_utf8_version_of_array_($settings); if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); qv(); } } if ($g < 2921){ $settings['template']='plain'; } if ($g < 3223){ $settings['v3223_rss_permalinks_before_stamp']=time(); } if ($g < 3354){ @rename('pictures/userpics/',AVATARS_FOLDER); @unlink(USER_FOLDER. 'password-reset.txt'); } if ($g < 3496){ $settings['appearance']['respond_to_dark_mode']=true; } @unlink(USER_FOLDER. 'last-update.psa'); @unlink(CACHES_FOLDER.'index.xml'); @j(CACHES_FOLDER); @j(BACKUP_FOLDER); @j(MEDIA_ROOT_FOLDER.PICTURES_FOLDER .'remote/'); @j(MEDIA_ROOT_FOLDER.THUMBNAILS_FOLDER .'remote/'); @j(MEDIA_ROOT_FOLDER.VIDEO_FOLDER); if (@$settings['template']=='')$settings['template']=DEFAULT_TEMPLATE; if (isset ($settings['appearance']['hot_frontpage'])) { unset($settings['appearance']['hot_frontpage']); } if (!isset ($settings['blog_subtitle'])) { if (isset ($settings['description'])) { $settings['blog_subtitle']=$settings['description']; unset($settings['description']); } } if (!isset ($settings['blog_title'])) { if (isset ($settings['site_title'])) { $settings['blog_title']=$settings['site_title']; unset($settings['site_title']); } } if (!isset ($settings['author_email'])) { if (isset ($settings['user']['email'])) { $settings['author_email']=$settings['user']['email']; unset($settings['user']); } } if (isset ($settings['db']['table_prefix'])) { if($settings['db']['table_prefix'] != @$_config['db_table_prefix']) { die ('You’ve been using a database with a table prefix “'. $settings['db']['table_prefix'] .'”. Now this should be set in the configuration. Please add the following line to the file user/config.php:<br /><br />$_config[\'db_table_prefix\'] = \''. $settings['db']['table_prefix'] .'\';<br /><br />Then refresh this page.'); } else { unset($settings['db']['table_prefix']); } } if (isset ($settings['comments']['on'])) { if (!$settings['comments']['on']) { try { xn( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix']."Notes` ". "SET `IsCommentable`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ); } catch (AeMySQLException $e){} } $settings['comments']['default_on'] = (bool)$settings['comments']['on']; unset($settings['comments']['on']); } if ( is_file(USER_FOLDER.'settings.json') and is_file(USER_FOLDER.'settings.psa') ) { @unlink(USER_FOLDER.'settings.psa'); } if (!@n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE))) { mv($_strings['er--cannot-save-data'],E2E_PERMISSIONS_ERROR); } e2_drop_all_kinds_of_cache(); an(); if ($g < 3601){ ha(); $o3=ra(); try { $o3 -> erase(); } catch (\S2\Rose\Exception\RuntimeException $e){ if(Log::$p3)__log('Rose not available'); } qa(); } $_diagnose['need?']=true; y('diagnose','1'); $gz=fn_(E2_VERSION); if(Log::$p3)__log('}'); @unlink(USER_FOLDER.'updating.psa'); if (e2_()) { mv(e2l_get_string('gs--updated-successfully', array ( 'from' => 'v'. $g, 'to' => 'v'. $gz['version'], )), E2E_MESSAGE); } c(); } define('E2_MYSQL_CONNECT_TIMEOUT',5); function kn($c7='',$w3=null){ static $v7=false; global$settings,$_db,$i4,$_config; if ($v7) return; if ($w3===null)$w3=$settings['db']; $b7=mysqli_init(); $b7 -> options(MYSQLI_OPT_CONNECT_TIMEOUT,E2_MYSQL_CONNECT_TIMEOUT); if($_config['dev_chaos'] and !rand(0, (1/$_config['dev_chaos']) - 1)) { throw new AeMySQLCannotConnectException('Could not '. $c7 ."\n\nChaos in e2_mysql_ensure"); } $y7=@mysqli_real_connect( $b7, 'p:'. $w3['server'], $w3['user_name'], p2($w3['passw']) ); if (!$y7){ $tq=mysqli_connect_errno(); if ($tq==1045){ $y7=@mysqli_real_connect( $b7, 'p:'. $w3['server'], $w3['user_name'], $w3['passw'] ); if ($y7){ $w3['passw']=o2($w3['passw']); $settings['db']=$w3; if(Log::$p3)__log('Storing encrypted password'); @n3(USER_FOLDER.'settings.json',json_encode($settings,E2_JSON_STYLE)); } else { throw new AeMySQLAccessDeniedException('Could not '. $c7); } } else { throw new AeMySQLCannotConnectException('Could not '. $c7); } } $_db['version']=mysqli_get_server_info($b7); if(version_compare($_db['version'],E2_MINIMUM_MYSQL,'<')) { throw new AeMySQLTooOldException('Could not '. $c7); } if (!@mysqli_select_db($b7,$w3['name'])) { throw new AeMySQLNotFoundException('Could not '. $c7); } $_db['link']=$b7; $_db['charset']=version_compare($_db['version'],'5.5.3','>=')?'utf8mb4':'utf8'; $im='SET NAMES '. $_db['charset']; mysqli_query($b7,$im); @$i4 ++; if(Log::$p3)__log('DB ['. $i4 .']: '. $im); $v7=true; } function xn($im,$c7='run some query'){ global $i4,$_db,$_strings,$_config; kn($c7); if($_config['dev_chaos'] and !rand(0, (1/$_config['dev_chaos']) - 1)) { throw new AeMySQLQueryException('Could not '. $c7 ."\n\nChaos in e2_mysql_query"); } @$i4 ++; if(Log::$p3) if ($c7)__log('Will '. $c7); if(Log::$p3)__log('DB ['. $i4 .']: '. $im); $_db['result'] = @mysqli_query($_db['link'],$im); if($_config['backup_tail']) { if ( stripos($im,"SELECT")!==0 and stripos($im,"SHOW")!==0 ){ $fb=BACKUP_FOLDER .'backup-tail.sql'; @file_put_contents($fb,$im .";\r\n\r\n",FILE_APPEND | LOCK_EX); @chmod($fb,E2_NEW_FILES_RIGHTS); } } if (!$_db['result']) { throw new AeMySQLQueryException('Could not '. $c7 ."\n\nMySQL says:\n". mysqli_error($_db['link'])); } } function en($type=MYSQLI_ASSOC){ global$_db; $d=array(); while ($nv=@mysqli_fetch_array($_db['result'],$type)) { foreach ($nv as $r => $n7){ if(is_string($n7)) { $nv[$r]=$n7; } } $d[] = $nv; } return $d; } function rn($x){ global$_db; kn('escape string'); return mysqli_real_escape_string($_db['link'],$x); } function tn(){ global$_config; $ta=array_keys(jn()); if(Log::$p3)__log('Backup: Found '. count($ta) .' backups'); if(count($ta)) { $m7=time()-$ta[0]; $f7=($m7 >= $_config['backup_rebase_interval']); if(Log::$p3)__log('Backup: '. $m7 .' seconds since last backup'); } else { $f7=true; } if ($f7){ if(Log::$p3)__log('Backup: Will rebuild backup'); o3(jv('e2s_dump', []), true); } } function jn(){ $ta=[]; foreach(glob(BACKUP_FOLDER. '*.sql') as $by){ if(preg_match('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is',basename($by),$y3)) { list (, $hb,$jb,$tb,$wl,$r,$gl)=$y3; $pl=gmmktime($wl,$r,$gl,$jb,$tb,$hb); $ta[$pl]=$by; } } krsort($ta); return $ta; } function hn(){ $ta=jn(); if(count($ta) > 3){ $s7=-1; $a7=array (SECONDS_IN_A_MINUTE,SECONDS_IN_AN_HOUR,SECONDS_IN_A_DAY, -1); $r=0; foreach ($ta as $pl => $by){ if ($s7 == -1){ $s7=$pl; } elseif ($a7[$r] == -1){ unlink($by); } else { if ($s7-$pl < $a7[$r]) { unlink($by); } else { $r ++; $s7=$pl; } } } } else { } return; } function gn(){ global$_model,$_db,$_config; try { kn('make backup'); if($_db['link']) { $q7=time() - (SECONDS_IN_A_DAY); if($_config['sift_read_counts_on_backup']) { xn( "DELETE FROM `". $_config['db_table_prefix']."Actions` ". "WHERE (`Stamp` < ". (time() - (SECONDS_IN_A_MONTH)) ." AND `ReadCount` <= 1) ". "OR (`Stamp` < ". (time() - (SECONDS_IN_A_YEAR)) ." AND `ReadCount` <= 5)" ); } $l7=[]; foreach(array_keys($_model) as $vz){ $l7[] = $_config['db_table_prefix'].$vz; } $l4=time(); $fb=BACKUP_FOLDER .'backup-'.gmdate('Y-m-d-\a\t-H-i-s',$l4).'.sql'; e2_backup( $_db['link'], $l7, $fb ); @unlink(BACKUP_FOLDER .'backup-tail.sql'); hn(); return true; } } catch (AeMySQLException $e){ kv($e,'Could not do backup'); return false; } } function e2s_dump(){ if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } if (gn())mv('Backed up',E2E_MESSAGE); c(jv('e2m_underhood')); } define('ALIAS_MAX_LENGTH',64); function wn($k7=false){ global$_config; static $c2=null; if ($k7){ if(Log::$p3)__log('Reset aliasmap'); @unlink(CACHE_FILENAME_ALIASMAP); $c2=null; return; } if(is_array($c2)) return $c2; if(CACHE_ALIASMAP and is_file(CACHE_FILENAME_ALIASMAP)) { $c2=@unserialize(file_get_contents(CACHE_FILENAME_ALIASMAP)); } if(is_array($c2)) return $c2; if(Log::$p3)__log('Build aliasmap {'); $c2=[]; xn( "SELECT `EntityType`, `EntityID`, `Alias` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Stamp` IN (". "SELECT MAX(`Stamp`) `MaxStamp` ". "FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "GROUP BY `EntityType`, `EntityID`". ")", 'get all active aliases' ); foreach (en() as $x7){ $v2=$x7['EntityType'].$x7['EntityID']; $c2[$v2]=$x7['Alias']; } xn( "SELECT `ID`, `Stamp`, `Offset`, `IsDST`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". "ORDER BY `Stamp`", 'get all notes to cache y/d/m/n urls' ); $e7=0; $r7=false; foreach (en() as $pf){ $v2='n'. $pf['ID']; $t7=zy( 'Y/m/d',$pf['Stamp'],fy($pf) ); if ($t7!==$r7)$e7=0; $e7 ++; $j7=$t7 .'/'. $e7; if (empty ($c2[$v2])) { $c2[$v2]=$j7; } else { if ((string)$pf['OriginalAlias']===''){ $c2[$v2.'-ymdn']=$j7; } } $r7=$t7; } xn( "SELECT `ID`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'get original active aliases for tags' ); foreach (en() as $m2){ $v2='t'. $m2['ID']; if (empty ($c2[$v2])) { $c2[$v2]=$m2['OriginalAlias']; } } if(CACHE_ALIASMAP)n3(CACHE_FILENAME_ALIASMAP,serialize($c2)); if(Log::$p3)__log('}'); return $c2; } function e2ali__alias_from_title_($h7){ global$_config; $g7=$h7; if(array_key_exists('autoreplace_for_aliases',$_config)) { $g7=strtr( $g7, $_config['autoreplace_for_aliases'] ); } $g7=m($g7); $g7=str_replace('\'','',$g7); $g7=str_replace('’','',$g7); $g7=str_replace(chr(146),'',$g7); $w7=''; for ($r=0; $r < strlen($g7); ++ $r){ if ( (ord($g7[$r]) >= 48 and ord($g7[$r]) <= 57) or (ord($g7[$r]) >= 65 and ord($g7[$r]) <= 90) or (ord($g7[$r]) >= 97 and ord($g7[$r]) <= 122) or 0 ){ $w7.=$g7[$r]; } else { $w7.='-'; } } $w7=preg_replace('/\-+/','-',$w7); $w7=trim($w7,'-'); $w7=strtolower($w7); if ($w7=='-')$w7=''; $w7=substr($w7,0,ALIAS_MAX_LENGTH); return $w7; } function in($u7){ global$_config; if ((string)$u7==='') return false; xn( "SELECT * FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Alias` = '". $u7 ."' ". "ORDER BY `Stamp` LIMIT 1", 'get alias record for alias "'. $u7 .'"' ); $m1=en(); if(count($m1)==1){ return $m1[0]; } else { return false; } } function on($u7){ global$_config; if ((string)$u7==='') return false; if(Log::$p3)__log('Get entity type and id from alias "'. $u7 .'"'); $i7=@array_flip(wn()); $v2=$i7[$u7]; if ($v2[0]=='n' or $v2[0]=='t'){ $vv=[ 'type' => $v2[0], 'id' => (int)substr($v2,1) ]; return $vv; } $x7=in($u7); if (!$x7) return false; $vv=[ 'type' => $x7['EntityType'], 'id' => (int)$x7['EntityID'], ]; if(Log::$p3)__log('Got entity type "'. $vv['type'] .'" and id "'. $vv['id'] .'"'); return $vv; } function pn($gy,$ga,$o7,$h7,$p7=1){ if(Log::$p3)__log('Aliases: "'. $gy .'" available alias for source "'. $h7. '"'); if ($gy=='set' and (!$ga or !$o7)) return false; $w7=e2ali__alias_from_title_($h7); if ($h7!=='' and $w7===''){ $w7=(string)$p7; } elseif ($p7 > 1){ $cx='-'. $p7; $w7=substr($w7,0,ALIAS_MAX_LENGTH-strlen($cx)) . $cx; } if ($x7=in($w7)) { $vx=$x7['EntityType']; $bx=$x7['EntityID']; if ( (($o7 and $bx==$o7) and ($ga and $vx==$ga)) or $w7!=wn() [$vx.$bx] ) { if ($gy=='find'){ return $w7; } if ($gy=='set'){ if(Log::$p3)__log('Aliases: update alias timestamp'); yn('Aliases', array ( 'ID' => $x7['ID'], 'EntityType' => $ga, 'EntityID' => $o7, 'Alias' => $w7, 'Stamp' => time(), )); wn(true); return $w7; } } else { return pn($gy,$ga,$o7,$h7,$p7+1); } } else { if ($ga and $o7 and $w7==''){ if(preg_match( '/(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)/', wn() [$ga.$o7] )) { if(Log::$p3)__log('Aliases: d/m/y/n was already used for this entity'); return ''; } } if(Log::$p3)__log('Aliases: it’s an empty alias, and it was not being used for this entity'); if ( $ga=='t' and $yx=af($w7) ) { if ($yx['ID']!=$o7){ return pn($gy,$ga,$o7,$h7,$p7+1); } } if ($gy=='find'){ return $w7; } if ($gy=='set'){ bn('Aliases', array ( 'EntityType' => $ga, 'EntityID' => $o7, 'Alias' => $w7, 'Stamp' => time(), )); wn(true); return $w7; } } return ''; } class AePageableNotesView { private $candy; private $parameters; private $pageExists=false; private $isCached=false; private $hasRun=false; private $sql=null; private $sql_count=null; private $highlightedTags=null; private $cacheFilename=null; private $prevPageTitle=null; private $nextPageTitle=null; private $totalNotes=null; private $totalPages=null; private $notesCTree=null; private $pagesCTree=null; private $wantNewCommentsCount=false; private $wantReadHrefs=false; private $wantControls=false; private $wantRelatedNotes=false; private $useLocalHrefs=false; private $page=1; private $limit=10; public function __construct($candy,$parameters){ $this->candy=$candy; $this->parameters=$parameters; if (empty ($parameters['page'])) { $this->page=1; } else { $this->page=(int)$parameters['page']; } } public function setSQLCountRequest($sql_count){ if(strpos($sql_count,"SELECT COUNT(*) Total FROM ")!==0){ die ('AePageableNotesView: Count request must start with "SELECT COUNT(*) Total FROM "'); } $this->sql_count=$sql_count; } public function setLimitlessSQLRequest($sql){ if(strstr($sql,"LIMIT")) { die ('AePageableNotesView: Request must not contain "LIMIT"'); } $this->sql=$sql; if($this->sql_count===null){ if(strpos($sql,"SELECT * ")===0){ $this->sql_count="SELECT COUNT(*) Total ". substr($sql,9); } else { die ('AePageableNotesView: setSQLCountRequest () must be used'); } } } public function setPortionSize($limit){ $this->limit=abs((int)$limit); } public function setNextPrevPageTitles($nextPageTitle,$prevPageTitle){ $this->nextPageTitle=$nextPageTitle; $this->prevPageTitle=$prevPageTitle; } public function setHighlightedTags($highlightedTags){ $this->highlightedTags=$highlightedTags; } public function setCacheFilename($cacheFilename){ $this->isCached=true; $this->cacheFilename=$cacheFilename; } public function setWantNewCommentsCount($wantNewCommentsCount){ $this->wantNewCommentsCount=$wantNewCommentsCount; } public function setWantReadHrefs($wantReadHrefs){ $this->wantReadHrefs=$wantReadHrefs; } public function setWantControls($wantControls){ $this->wantControls=$wantControls; } public function setWantRelatedNotes($wantRelatedNotes){ $this->wantRelatedNotes=$wantRelatedNotes; } public function setUseLocalHrefs($useLocalHrefs){ $this->useLocalHrefs=$useLocalHrefs; } public function isExistingPage(){ if (!$this->hasRun)$this -> run(); return$this->pageExists; } public function isFirstPage(){ return$this->page===1; } public function isFirstPageOfEmptyView(){ if (!$this->hasRun)$this -> run(); return$this->page===1 and $this->totalPages===0; } public function getTotalNotes(){ if (!$this->hasRun)$this -> run(); return$this->totalNotes; } public function getTotalPages(){ if (!$this->hasRun)$this -> run(); return$this->totalPages; } public function getNotesCTree(){ if (!$this->hasRun)$this -> run(); return$this->notesCTree; } public function getPagesCTree(){ if (!$this->hasRun)$this -> run(); return$this->pagesCTree; } private function prepareCacheableData(){ $this->totalNotes=0; if($this->limit){ $oq=($this->page-1)*$this->limit; $this->sql.=' LIMIT '. $oq .', '. $this->limit; } xn($this->sql_count,'count total notes of "'. $this->candy .'" list'); $nx=en(); $this->totalNotes=$nx ? (int)$nx[0]['Total']:0; xn($this->sql,'get limited full notes "'. $this->candy .'" list'); $m1=en(); $this->notesCTree=[]; foreach ($m1 as $t => $gq){ $noteView=new AeNoteView($gq); $noteView -> setWantNewCommentsCount($this->wantNewCommentsCount); $noteView -> setWantReadHref($this->wantReadHrefs); $noteView -> setWantControls($this->wantControls); $noteView -> setWantCommentsLink(true); $noteView -> setWantRelatedNotes($this->wantRelatedNotes); $noteView -> setHighlightedTags($this->highlightedTags); $noteView -> setUseLocalHref($this->useLocalHrefs); $this->notesCTree[] = $noteView -> getNoteCTree(); } $this->pagesCTree=[]; if ( $this->limit and $this->totalPages=(int)ceil($this->totalNotes/$this->limit) ) { $this->pagesCTree['timeline?']=true; $this->pagesCTree['count'] = (int)$this->totalPages; $this->pagesCTree['this'] = (int)$this->page; $this->pagesCTree['earlier-title']=$this->nextPageTitle; $this->pagesCTree['later-title']=$this->prevPageTitle; $mx=$this->parameters; if($this->page < $this->totalPages){ $mx['page']=$this->page+1; $this->pagesCTree['earlier-href']=jv($this->candy,$mx); } if($this->page > 1){ $mx['page']=$this->page-1; $this->pagesCTree['later-href']=jv($this->candy,$mx); } } } private function run(){ $this->hasRun=true; if($this->isCached and is_file($this->cacheFilename)) { $fx=@unserialize(file_get_contents($this->cacheFilename)); $this->totalNotes=@$fx['notes_total']; $this->notesCTree=@$fx['notes_ctree']; $this->pagesCTree=@$fx['pages_ctree']; $this->totalPages=$this->pagesCTree['count']; } if ( is_int($this->totalNotes) and is_array($this->notesCTree) and is_array($this->pagesCTree) and is_int($this->totalPages) ) { if(Log::$p3)__log('Retrieved cached CTree'); } else { $this -> prepareCacheableData(); if($this->isCached){ n3($this->cacheFilename,serialize([ 'notes_total' => $this->totalNotes, 'notes_ctree' => $this->notesCTree, 'pages_ctree' => $this->pagesCTree, ])); } } $this->pageExists=( $this->totalPages > 0 and $this->page >= 1 and $this->page <= $this->totalPages ); } } class AeArbitraryNotesCollectionView { private $name=''; private $isCached=false; private $hasRun=false; private $sql=null; private $currentURL=null; private $cacheFilename=null; private $cacheExpiresFilename=null; private $cacheable=[]; private $viewExpiration=null; private $notesCTree=null; public function __construct($name){ $this->name=$name; } public function setSQLRequest($sql){ $this->sql=$sql; } public function setCurrentURL($currentURL){ $this->currentURL=$currentURL; } public function setCacheFilename($cacheFilename){ $this->isCached=true; $this->cacheFilename=$cacheFilename; } public function setCacheExpiresFilename($cacheExpiresFilename){ $this->cacheExpiresFilename=$cacheExpiresFilename; } public function setViewExpiration($viewExpiration){ $this->viewExpiration=$viewExpiration; } public function orderNotesCTreeByVerticality(){ if (!$this->hasRun)$this -> run(); usort($this->notesCTree, function ($dx,$sx){ if (empty ($dx['images'][0]['verticality']))$ax=0; else $ax=$dx['images'][0]['verticality']; if (empty ($sx['images'][0]['verticality']))$qx=0; else $qx=$sx['images'][0]['verticality']; return (int)round(($qx-$ax)*10000); }); } public function getNotesCTree(){ if (!$this->hasRun)$this -> run(); return$this->notesCTree; } private function prepareCacheableData(){ $lx=[ 'notes-records' => function () { $zx=[]; try { xn($this->sql,'get "'. $this->name .'" list'); foreach (en() as $gq){ if (em($gq)==='public'){ $zx[] = $gq; } } } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not get list from database'); } return $zx; }, ]; if($this->isCached and is_file($this->cacheFilename)) { $this->cacheable=@unserialize(file_get_contents($this->cacheFilename)) or $this->cacheable=[]; } $kx=true; if (!empty ($this->cacheExpiresFilename)) { if($this->isCached and is_file($this->cacheExpiresFilename)) { $l4=time(); $xx=(int) @file_get_contents($this->cacheExpiresFilename); if(Log::$p3)__log('List expires '. date('r',$xx) .', now '. date('r',$l4)); $kx=($l4 < $xx); } } $ex=false; foreach ($lx as $ez => $rx){ if (!array_key_exists($ez,$this->cacheable) or !$kx){ if(Log::$p3)__log('Build cache: "'. $ez .'"'); $this->cacheable[$ez]=$rx(); $ex=true; } else { if(Log::$p3)__log('Retrieved from cache: "'. $ez .'"'); } } if ($ex){ n3($this->cacheFilename,serialize($this->cacheable)); if($this->cacheExpiresFilename){ @n3($this->cacheExpiresFilename,time()+$this->viewExpiration); } } } private function run(){ $this->hasRun=true; if(Log::$p3)__log('AeArbitraryNotesCollectionView "'. $this->name .'" run {'); if(Log::$p3)__log('Cacheable data {'); $this -> prepareCacheableData(); if(Log::$p3)__log('}'); if(Log::$p3)__log('Uncacheable data {'); $this->notesCTree=[]; foreach($this->cacheable['notes-records'] as $gq){ $noteView=new AeNoteView($gq); $f2=$noteView -> getNoteCTree(); $f2['current?'] = ($f2['href']==$this->currentURL); $this->notesCTree[] = $f2; } if(Log::$p3)__log('}'); if(Log::$p3)__log('}'); } } class AeNoteView { private $noteRecord=[]; private $isCached=false; private $hasRun=false; private $cacheFilename=null; private $noteCTree=null; private $highlightedTags=null; private $cacheable=[]; private $OGImages=[]; private $wantRichText=false; private $wantCommentsLink=false; private $wantNewCommentsCount=false; private $wantReadHref=false; private $wantControls=false; private $wantSharingButtons=false; private $wantRelatedNotes=false; private $useLocalHref=false; public function __construct($noteRecord){ $this->noteRecord=$noteRecord; if(CACHE_NOTES){ $this->isCached=true; $this->cacheFilename=e2_note_cache_filename_with_id_($noteRecord['ID']); } } public function setHighlightedTags($highlightedTags){ $this->highlightedTags=$highlightedTags; } public function setWantRichText($wantRichText){ $this->wantRichText=$wantRichText; } public function setWantCommentsLink($wantCommentsLink){ $this->wantCommentsLink=$wantCommentsLink; } public function setWantNewCommentsCount($wantNewCommentsCount){ $this->wantNewCommentsCount=$wantNewCommentsCount; } public function setWantReadHref($wantReadHref){ $this->wantReadHref=$wantReadHref; } public function setWantControls($wantControls){ $this->wantControls=$wantControls; } public function setWantSharingButtons($wantSharingButtons){ $this->wantSharingButtons=$wantSharingButtons; } public function setWantRelatedNotes($wantRelatedNotes){ $this->wantRelatedNotes=$wantRelatedNotes; } public function setUseLocalHref($useLocalHref){ $this->useLocalHref=$useLocalHref; } public function getNoteCTree(){ if (!$this->hasRun)$this -> run(); return$this->noteCTree; } private function prepareCacheableData(){ $lx=[ 'title' => function () { return h3( htmlspecialchars($this->noteRecord['Title'],ENT_NOQUOTES,HSC_ENC) ); }, 'text-format-info' => function () { return w3( $this->noteRecord['FormatterID'], $this->noteRecord['Text'], 'full' ); }, 'summary' => function () { if ((string)$this->noteRecord['Summary']!==''){ return h3(htmlspecialchars($this->noteRecord['Summary'],ENT_NOQUOTES,HSC_ENC)); } else { return xm($this->cacheable['text-format-info']['text-final']); } }, 'comments-count' => function () { if (!$this->noteRecord['IsPublished']) { return false; } else { return v2($this->noteRecord['ID']); } }, 'tags-data' => function () { $y2=bf($this->noteRecord['ID']); $tx['ctree'] = []; $tx['all-resnames-uploads'] = []; foreach ($y2 as $r => $m2){ $tx['ctree'][] = [ 'visible?' => (bool)$m2['IsVisible'], 'name' => htmlspecialchars($m2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag', array ('*tag' => $m2)), ]; $tx['all-resnames-uploads']=array_merge( $tx['all-resnames-uploads'], q3('tag',$m2['ID']) ); } $tx['all-resnames-uploads']=array_unique( $tx['all-resnames-uploads'] ); return $tx; }, ]; if($this->isCached and is_file($this->cacheFilename)) { $this->cacheable=@unserialize(file_get_contents($this->cacheFilename)) or $this->cacheable=[]; } $ex=false; foreach ($lx as $ez => $rx){ if (!array_key_exists($ez,$this->cacheable)) { if(Log::$p3)__log('Build cache: "'. $ez .'"'); $this->cacheable[$ez]=$rx(); $ex=true; } else { if(Log::$p3)__log('Retrieved from cache: "'. $ez .'"'); } } if ($ex){ n3($this->cacheFilename,serialize($this->cacheable)); } } private function run(){ $this->hasRun=true; if(Log::$p3)__log('AeNoteView run {'); if(Log::$p3)__log('Cacheable data {'); $this -> prepareCacheableData(); if(Log::$p3)__log('}'); if(Log::$p3)__log('Uncacheable data {'); $jx=false; if($this->noteRecord['IsPublished']) { if ((string)$this->noteRecord['OriginalAlias']!==''){ $jx=jv('e2m_note', ['alias' => $this->noteRecord['OriginalAlias']]); } else { $hx=$this->noteRecord; $hx['__force_ymdn']=true; $jx=jv('e2m_note', ['*note' => $hx]); } } $fl=fy($this->noteRecord); $gx=[(int)$this->noteRecord['LastModified'],$fl]; $l4=( $this->noteRecord['IsPublished'] ? [(int)$this->noteRecord['Stamp'],$fl]:$gx ); $wx=em($this->noteRecord); $es=$this->cacheable['text-format-info']['meta']['resources-detected']; if (!is_array($es))$es=[]; if(count($es)) { rb($es); } $ux=db($es); $rs=@unserialize($this->noteRecord['Uploads']) or $rs=[]; $ix=array_merge( sb( $es,$rs ), $this->cacheable['tags-data']['all-resnames-uploads'] ); $ox=d3($ix); $px=db($ix); $ce=$this->noteRecord['SourceNoteData']; $ce=@json_decode($ce,true); $ve=@$ce['og_images'][0] or $ve=''; if($this->noteRecord['IsExternal']) { $be=ld($this->noteRecord); } else { $be=[]; } $ye=false; if(E2_EDITION){ if($this->wantRelatedNotes){ $ye=wm($this->noteRecord['ID']); } } $ne=$this->cacheable['tags-data']['ctree']; if($this->highlightedTags!==null){ foreach ($ne as $t => $af){ $ne[$t]['current?']=in_array($ne[$t]['name'],$this->highlightedTags); } } if($this->wantSharingButtons and $this->noteRecord['IsPublished'] and !$this->scheduled){ $me=cm($ox); } else { $me=false; } if($this->wantNewCommentsCount){ $fe=c2($this->noteRecord['ID']); } else { $fe=false; } $this->noteCTree=[ 'id' => (int)$this->noteRecord['ID'], 'title' => (string)$this->cacheable['title'], 'href' => jv('e2m_note', ['*note' => $this->noteRecord]), 'href-original' => $jx, 'time' => $l4, 'last-modified' => $gx, 'text' => (string)$this->cacheable['text-format-info']['text-final'], 'format-info' => $this->cacheable['text-format-info']['meta'], 'summary' => (string)$this->cacheable['summary'], 'snippet-text' => (string)$this->cacheable['summary'], 'draft?' => $wx==='draft', 'scheduled?' => $wx==='scheduled', 'public?' => $wx==='public', 'hidden?' => $wx==='hidden', 'current?' => false, 'favourite?' => (bool) ($this->noteRecord['IsFavourite'] and $wx!=='draft'), 'images' => ab($ux), 'thumbs' => qb($ux), 'source-main-image-url' => (string)$ve, 'og-images' => $ox, 'og-images-thumbs' => qb($px), 'tags' => $ne, 'sharing-buttons' => $me, 'related' => $ye, 'read-href' => ($this->wantReadHref and $this->noteRecord['IsPublished'])? jv('e2m_note_read', ['*note' => $this->noteRecord]) : false, 'comments-count' => $this->cacheable['comments-count'], 'comments-count-text' => is_int($this->cacheable['comments-count'])? e2l_get_string('gs--n-comments', [ 'number' => $this->cacheable['comments-count'] ]) : '', 'new-comments-count' => $fe, 'new-comments-count-text' => is_int($fe)? e2l_get_string('gs--comments-n-new', [ 'number' => $fe ]) : '', 'comments-link?' => (bool) ( $this->wantCommentsLink and $this->noteRecord['IsPublished'] and ( f2($this->noteRecord) or ($this->cacheable['comments-count'] > 0) ) ), ]; if($this->noteRecord['IsExternal']) { $this->noteCTree=array_merge($this->noteCTree,$be); $this->noteCTree['href-original']=$this->noteCTree['href-external']; if (!$this->useLocalHref){ $this->noteCTree['href']=$this->noteCTree['href-external']; } } if($this->wantControls){ $this->noteCTree['edit-href']=jv( 'e2m_note_edit', array ('*note' => $this->noteRecord) ); if($this->noteRecord['IsPublished']) { $this->noteCTree['favourite-toggle-href']=jv( 'e2m_note_flag_favourite', array ('*note' => $this->noteRecord,'value' => !$this->noteRecord['IsFavourite']) ); } } if(Log::$p3)__log('}'); if(Log::$p3)__log('}'); } } function cm($ox){ global$_config; $de=$_config['share_to']; $se='|twitter|facebook|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $lv['twitter']['via']=$_config['share_to_twitter_via']; } if(count($ox) > 0){ $ae=$ox[0]; $se.='pinterest|'; $lv['pinterest']['media']=$ae; } $qe=[]; foreach(explode(',',$de) as $le){ $le=trim($le); if(strstr($se,'|'. $le. '|')) { $qe[$le]['share?']=true; if ($lv[$le]) { $qe[$le]['data']=$lv[$le]; } } } return $qe; } function e2m_note($parameters=[]) { global$settings,$_config,$_strings; if(Log::$p3)__log('Note {'); $pf=$parameters['*note']; if ($pf==false) return e2_error404_mode(); $ze=jm($pf); $ke=em($pf); $xe=e2_(); $ee=($parameters['preview-key']==$ze); if (!empty ($parameters['preview-key']) and !$ee) return e2_error404_mode(); if (!$xe and !$ee and $ke!=='public') return e2_error404_mode(); if (!empty ($parameters['preview-key']) and $ke==='public'){ unset($parameters['preview-key']); $re=jv('e2m_note',$parameters); c($re); } $re=jv('e2m_note',$parameters); $noteView=new AeNoteView($pf); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($xe and !@$_config['read_only']); if ($ke==='draft'){ if (!$ee){ $te=[ '.note-id' => $pf['ID'], 'form-action' => jv('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-note'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], ]; if(E2_EDITION){ $te['can-schedule?']=true; $te['stamp-formatted']=zy( 'd.m.Y H:i:s',time(),fy($pf) ); $te['submit-schedule-text']=$_strings['fb--publish-note-at-this-time']; } } } $je=[]; if ($ke==='public'){ $noteView -> setWantNewCommentsCount($xe); $noteView -> setWantSharingButtons($settings['appearance']['show_sharing_buttons']); $noteView -> setWantRelatedNotes(true); if(Log::$p3)__log('Navigation {'); $he=mm($pf,'prev'); $ge=mm($pf,'next'); if ($he){ $je['prev-href']=jv('e2m_note', array ('*note' => $he)); $je['prev-title']=h3(htmlspecialchars($he['Title'],ENT_NOQUOTES,HSC_ENC)); } if ($ge){ $je['next-href']=jv('e2m_note', array ('*note' => $ge)); $je['next-title']=h3(htmlspecialchars($ge['Title'],ENT_NOQUOTES,HSC_ENC)); } $je['title']=$_strings['nm--posts']; $je['timeline?']=false; $je['this-title']=h3(htmlspecialchars($pf['Title'],ENT_NOQUOTES,HSC_ENC)); if(Log::$p3)__log('}'); if(Log::$p3)__log('Comments {'); $we=''; $ue=false; $ie=false; $oe=array(); if ($xe){ $pe=e2_note_cache_filename_with_id_($pf['ID'] .'-comments-author'); } else { $pe=e2_note_cache_filename_with_id_($pf['ID'] .'-comments'); } $c6=null; if(CACHE_NOTES_COMMENTS and is_file($pe)) { $c6=@unserialize(file_get_contents($pe)); } if(is_array($c6)) { if(Log::$p3)__log('retrieve cached ctree'); $we=$c6; } else { if(Log::$p3)__log('assemble ctree...'); $v6=n2($pf['ID']); $b6=array(); $y6=true; foreach ($v6 as $t => $n6){ if ($n6['IsVisible']) { $m6=wf( $pf, $n6, $t+1 ); if ($m6['new?'] and $y6){ $m6['first-new?']=true; $y6=false; } $b6[] = $m6; } } $we=$b6; if(CACHE_NOTES_COMMENTS)n3($pe,serialize($we)); } if (!@$_config['read_only'] and f2($pf)) { $f6=pf($pf); $f6['.comment-number']=count($we)+1; } if(Log::$p3)__log('} // Comments'); } $d6=$noteView -> getNoteCTree(); if(E2_EDITION){ if ($ee){ unset ($d6['href']); $je=[]; } elseif ($ke!=='public'){ $d6['preview-href']=jv( 'e2m_note', [ '*note' => $pf, 'preview-key' => jm($pf) ] ); } } if ($xe and f2($pf,NOTE_COMMENTABLE_NOW_CONDITIONALLY)) { if ($pf['IsCommentable']) { $oe['href']=jv('e2m_note_flag', array ( '*note' => $pf, 'flag' => 'IsCommentable', 'value' => 0, )); $oe['text']=$_strings['bt--close-comments-to-post']; } else { $oe['href']=jv('e2m_note_flag', array ( '*note' => $pf, 'flag' => 'IsCommentable', 'value' => 1, )); $oe['text']=$_strings['bt--open-comments-to-post']; } } if ($xe and $d6['new-comments-count'] > 0){ if(Log::$p3)__log('mark comments as not new'); e2_drop_caches_for_note_($s6,true); yn('Comments', array ('IsNew' => 0), array ('NoteID' => $pf['ID'])); } $d=[ 'title' => $pf['Title'], 'notes' => ['only' => $d6], 'pages' => $je, 'summary' => $d6['summary'], ]; if ($we) $d['comments']['each']=$we; if ($oe) $d['comments']['toggle']=$oe; $d['comments']['count']=$d6['comments-count']; $d['comments']['count-text']=$d6['comments-count-text']; $d['comments']['new-count']=$d6['new-comments-count']; $d['comments']['new-count-text']=$d6['new-comments-count-text']; $d['comments']['display-form?']=f2($pf); if (!empty ($f6)) { $d['form']='form-comment'; $d['form-comment']=$f6; } if (!empty ($te)) { $d['form']='form-note-publish'; $d['form-note-publish']=$te; } if(Log::$p3)__log('} // Note'); return $d; } function e2m_note_read($parameters=array ()) { global$_config; if (!$_config['count_reads']) { die ('Read counting disabled'); } if(Log::$p3)__log('Note read {'); $pf=$parameters['*note']; $a6=time(); $a6=$a6 - ($a6 % SECONDS_IN_AN_HOUR); bn( 'Actions', array ( 'EntityID' => $pf['ID'], 'Stamp' => $a6, 'ReadCount' => 1, ), 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); if(Log::$p3)__log('}'); c(jv('e2m_note',$parameters)); } function e2m_note_withdraw($parameters=array ()) { global$_strings; $gq=$parameters['*note']; if (!$gq) return e2_error404_mode(); if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_note', array ('*note' => $gq))); } $q6=jv('e2m_note_broadcast', array ('*note' => $gq)); $gq['IsPublished']=0; $gq['IsCommentable']=0; $gq['IsVisible']=1; $gq['Stamp']=time(); $gq['IP']=z2(); if($parameters['alias']) { $gq['OriginalAlias']=$parameters['alias']; } else { $gq['OriginalAlias']=pn( 'find','n',$gq['ID'],$gq['Title'] ); } e2_drop_caches_for_note_($gq['ID'],null); if ($gq['IsFavourite']) { @unlink(CACHE_FILENAME_FAVS); } yn('Notes',$gq); ka($gq['ID']); o3($q6); pn('set','n',$gq['ID'],''); c(jv('e2m_note', ['*note' => $gq])); } function e2m_note_delete($parameters=array()) { global$_strings; $gq=$parameters['*note']; if (!$gq) return e2_error404_mode(); $l6=!$gq['IsPublished']; if ($l6){ $z6=e2l_get_string('gs--draft-will-be-deleted', array ( 'draft' => htmlspecialchars($gq['Title'],ENT_NOQUOTES,HSC_ENC), )); } else { $z6=e2l_get_string('gs--post-will-be-deleted', array ( 'post' => htmlspecialchars($gq['Title'],ENT_NOQUOTES,HSC_ENC), )); } $k6=$l6? $_strings['pt--draft-deletion']:$_strings['pt--post-deletion']; $x6=array ( '.note-id' => $gq['ID'], '.is-draft' => (int)$l6, 'note-title' => htmlspecialchars($gq['Title'],ENT_COMPAT,HSC_ENC), 'caution-text' => $z6, 'form-action' => jv('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int)$l6, ); if ($gq['IsPublished']) { $x6['withdraw-href']=jv( 'e2m_note_withdraw',$parameters ); } $d=array ( 'title' => $k6. ': '. htmlspecialchars($gq['Title'],ENT_NOQUOTES,HSC_ENC), 'heading' => $k6, 'form' => 'form-note-delete', 'form-note-delete' => $x6, ); return $d; } function e2m_note_flag_favourite($parameters){ global$_config; $parameters['flag']='IsFavourite'; s([ 'flag-name' => 'favourite', 'candy-name' => 'e2m_note_flag_favourite', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ vm($parameters); }, ]); } function e2m_note_flag($parameters){ vm($parameters); c(jv('e2m_note',$parameters)); } function vm($parameters){ $s6=$parameters['*note']['ID']; if (!is_numeric($s6)) { return e2_error404_mode(); } e2_drop_caches_for_note_($s6,$parameters['*note']['IsPublished']); if($parameters['flag']=='IsFavourite'){ @unlink(CACHE_FILENAME_FAVS); } if($parameters['flag']=='IsVisible'){ as_(); } yn('Notes', array ( 'ID' => $s6, $parameters['flag'] => (int) ($parameters['value']==1), )); try { p3(nm($s6)); } catch (AeMySQLException $e){ kv($e,'Could not broadcast note flag change'); } return true; } function e2m_note_use_formatter($parameters){ $s6=$parameters['*note']['ID']; if (!is_numeric($s6)) { return e2_error404_mode(); } e2_drop_caches_for_note_($s6,$parameters['*note']['IsPublished']); if(in_array($parameters['formatter'], array ('calliope','raw','neasden'))) { yn('Notes', array ( 'ID' => $s6, 'FormatterID' => $parameters['formatter'], )); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function bm($e6,$parameters=array ()) { global$full_blog_url,$_strings,$_config; $k6=$_strings['pt--new-post']; $r6=$_strings['pt--new-post']; $s6='new'; $t6=$_config['default_formatter']; if ($e6=='edit'){ $gq=$parameters['*note']; if (!$gq) return e2_error404_mode(); if ($gq){ $j6=(string)$gq['Summary']; if ($gq['IsPublished']) { $r6=$_strings['pt--edit-post']; $h6=''; $u7=$parameters['alias']; } else { $r6=$_strings['pt--edit-draft']; $h6=pn( 'find','n',$gq['ID'],$gq['Title'] ); if (@$gq['OriginalAlias']) { $u7=$gq['OriginalAlias']; } else { $u7=$h6; } } } $s6=$gq['ID']; $t6=$gq['FormatterID']; $k6=$gq['Title']; } $g6=df(); $w6=array(); if ($g6!==null) foreach ($g6 as $u6){ $w6[] = $u6['tag']; } $i6=array(); if ($e6=='edit' and count($w6)) { $g6=bf($gq['ID']); foreach ($g6 as $u6){ $i6[] = htmlspecialchars($u6['Keyword'],ENT_NOQUOTES,HSC_ENC); } } $o6=array(); foreach ($w6 as $u6){ $p6['name']=$u6; $p6['selected?']=in_array($u6,$i6); $o6[] = $p6; } $cr=''; $i6=implode(', ',$i6); if ($i6)$cr=$i6; if ($e6=='write'){ $vr=$_strings['fb--save-and-preview']; } if ($e6=='edit'){ if(array_key_exists('draft',$parameters)) { $vr=$_strings['fb--save-and-preview']; } else { $vr=$_strings['fb--save-changes']; } } $es=[]; if ($e6=='edit'){ $es=g3( $gq['FormatterID'],$gq['Text'],'full' ); } $rs=@unserialize( $gq['Uploads'] ) or $rs=[]; $br=qb( fb( sb( $es,$rs ) ) ); if ($e6=='edit'){ k3( 'Notes', $gq, $es ); } $pl=min($gq['Stamp'],time()); if(E2_EDITION){ $pl=$gq['Stamp']; } $nq=r3(); $mq=t3($nq); $fl=fy($gq); $ke=em($gq); $d['title']=$k6; $d['heading']=$r6; $d['form']='form-note'; $d['uploads'] = [ 'enabled?' => $mq, 'each' => $br, 'upload-action' => jv('e2j_file_upload'), 'remove-action' => jv('e2j_file_remove'), ]; $d['form-note'] = [ '.note-id' => $s6, '.formatter-id' => $t6, '.last-modified-stamp' => (int)$gq['LastModified'], '.published?' => (bool)$gq['IsPublished'], '.old-tags-hash' => md5($cr), '.action' => $e6, 'form-action' => jv('e2s_note_process'), 'form-note-livesave-action' => jv('e2j_note_livesave'), 'create:edit?' => (bool) ($e6=='write'), 'title' => htmlspecialchars($gq['Title'],ENT_COMPAT,HSC_ENC), 'tags' => $cr, 'tags-info' => $o6, 'text' => htmlspecialchars($gq['Text'],ENT_NOQUOTES,HSC_ENC), 'all-tags' => $w6, 'stamp-formatted' => zy('d.m.Y H:i:s',$pl,$fl), 'time' => $gq['IsPublished']? [(int)$pl,$fl]:false, 'draft?' => $ke==='draft', 'uploads-enabled?' => $mq, 'summary' => $j6, 'alias-autogenerated' => $h6, 'alias' => $u7, 'submit-text' => $vr, 'space-usage' => j3($nq), ]; if ($e6=='edit'){ $d['related-delete-href']=jv( 'e2m_note_delete', array ('*note' => $gq) ); } return $d; } function e2m_note_edit($parameters=array ()) { return bm('edit',$parameters); } function e2m_write(){ return bm('write'); } function e2s_note_process(){ global$_fp_error,$_strings; $s6=zm(); if (!$s6){ if($_fp_error==FP_TITLE_OR_TEXT_EMPTY){ mv($_strings['er--post-must-have-title-and-text'],E2E_USER_ERROR); } elseif($_fp_error==FP_NO_ID_OR_NEW){ } else { mv($_strings['er--error-occurred']); } c(jv('e2m_write')); } try { $pf=nm($s6); c(jv('e2m_note', ['*note' => $pf])); } catch (AeMySQLException $e){ kv($e,'Could not get note by ID'); c(); } die; } function e2s_note_publish(){ global$_strings,$_config,$settings; $s6=false; if(array_key_exists('note-id',$_POST)) { $s6=$_POST['note-id']; $yr=false; $gq=nm($s6); $nr=$gq['OriginalAlias']; $mr=$gq['Stamp']; $fr=!$gq['IsExternal']; if(E2_EDITION){ if (@$_POST['submit-button']=='schedule'){ $yr=@$_POST['stamp']; } if ( (is_dir(USER_FOLDER) and !is_writable(USER_FOLDER)) or ( is_file(USER_FOLDER.'scheduled.psa') and !is_writable(USER_FOLDER.'scheduled.psa') ) ) { fv(); c(jv('e2m_note', ['*note' => $gq])); } } $gq['ID']=$s6; $gq['IsVisible']=1; $gq['IsPublished']=1; $gq['IsCommentable'] = (int)$settings['comments']['default_on']; $gq['IsFavourite']=0; if(array_key_exists('browser-offset',$_POST)) { $fl=gy(@$_POST['browser-offset']); } else { $fl=sy(); } if ($yr and $pl=lm($yr,$fl)) { $gq['Stamp']=$pl; if(E2_EDITION){ if ($pl > time())gm($gq); } } elseif ($fr){ $gq['Stamp']=time(); } else { $gq['Stamp']=$mr; } if (za($gq)) { $gq['IsIndexed']='1'; } if ($fl){ $gq['Offset'] = (int)$fl['offset']; $gq['IsDST'] = (int)$fl['is_dst']; } e2_drop_caches_for_note_($s6,null); yn('Notes',$gq); $u7=''; if ($nr or $nr==='0'){ $u7=pn('set','n',$s6,$nr); $gq['OriginalAlias']=$u7; } if ($u7!=$nr){ yn('Notes',$gq); } if ($ke==='public'){ p3($gq); } c(jv('e2m_note', array ('*note' => $gq))); } c(); } function ym($s6,$dr=-1){ global$_config; $sr=true; if ($dr){ $sr=false; } if ($dr === -1){ $sr=null; } e2_drop_caches_for_note_($s6,$sr); if (!$dr or $dr === -1) { @unlink(CACHE_FILENAME_FAVS); } xn( "DELETE FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$s6) ."'", 'delete note by ID' ); ka($s6); xn( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 'n' ". "AND `EntityID`=". ((int)$s6), 'delete aliases after deleting note' ); xn( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". ((int)$s6), 'delete tag bindings after deleting note' ); } function e2s_note_delete(){ global$_strings,$_config; $s6=$_POST['note-id']; $dr=(bool)$_POST['is-draft']; $gq=nm($s6); $q6=jv('e2m_note_broadcast', array ('*note' => $gq)); ym($s6,$dr); o3($q6); if ($dr){ c(jv('e2m_drafts', ['page' => 1])); } else { c(); } die; } function e2j_note_livesave(){ die (zm('ajaxresult')); } function nm($as_){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $as_ ."'" ); $ib=en(); if(count($ib) > 0){ return $ib[0]; } else { return false; } } function mm($pf,$ar,$qr=1){ global$_strings,$_config; $lr=($ar=='next')?'>':'<'; $zr=($ar=='next')?'':'DESC '; try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". $qr ." ". "AND `Stamp` ". $lr ." '". $pf['Stamp'] ."' ". rm(e2_()). "ORDER BY `Stamp` ". $zr . "LIMIT 1", 'get '. $ar .' note' ); $ib=en(); if(count($ib) > 0) return $ib[0]; else return false; } catch (AeMySQLException $e){ kv($e,'Could not get '. $ar .' note'); return null; } } function fm($kr){ global$_config; if(Log::$p3)__log('Lastmodifieds for Local Copier'); if(CACHE_LASTMODIFIEDS and is_file(CACHE_FILENAME_LASTMODIFIEDS)) { $xr=@unserialize(file_get_contents(CACHE_FILENAME_LASTMODIFIEDS)); if ($xr['ids_csv']==$kr){ if(Log::$p3)__log('Returned from cache'); return $xr['lastmodifieds_json']; } } $b='`ID`='. str_replace(',',' OR `ID`=',$kr); $er=array(); xn( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $b .")", 'get lastmodifieds for Local Copier' ); if(Log::$p3)__log('Requested from DB'); $m1=en(); foreach ($m1 as $t => $af){ $er[(int)$af['ID']] = (int)$af['LastModified']; } $rr=json_encode($er); if ($rr=='[]')$rr='{}'; $xr=array ( 'ids_csv' => $kr, 'lastmodifieds_json' => $rr, ); if(CACHE_LASTMODIFIEDS){ n3(CACHE_FILENAME_LASTMODIFIEDS,serialize($xr)); } return $rr; } function dm($hb,$jb,$tb=false){ global$_config; list ($jr,$hr)=ty($hb,$jb,$tb); xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` AND (`Stamp` BETWEEN " .$jr. " AND " .$hr. ") ". "ORDER BY Stamp", 'get all notes for the date '. $tb .'.'. $jb .'.'. $hb ); $d=[]; foreach (en() as $gr){ if(is_numeric($tb)) { $wr=((int)$hb) .'/'. ((int)$jb) .'/'. ((int)$tb) == zy('Y/n/j',$gr['Stamp'],fy($gr)); } elseif(is_numeric($jb)) { $wr=((int)$hb) .'/'. ((int)$jb) == zy('Y/n',$gr['Stamp'],fy($gr)); } else { $wr=((int)$hb) == zy('Y',$gr['Stamp'],fy($gr)); } if ($wr)$d[] = $gr; } return $d; } function e2_published_noterec_with_parameters_($parameters=array ()) { $pf=e2_noterec_with_parameters_($parameters); if ($pf['IsPublished']) return $pf; } function e2_noterec_with_parameters_($parameters=array ()) { global$_config; $pf=false; $ur=false; if ((string) @$parameters['oalias']!=='')$ur=$parameters['oalias']; if ((string)$ur!==''){ xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias` = '". $ur ."' ". "AND `IsPublished` = 0", 'get note record by original alias' ); $pf=en(); if(count($pf)===1) { $pf=@$pf[0]; if ($pf) return $pf; } } $ir=false; if (@$parameters['draft']!=='') $ir=$parameters['draft']; if (@$parameters['draft2']!=='')$ir=$parameters['draft2']; if ($ir){ $pf=nm($ir); return $pf; } if ((string)$ur!==''){ $parameters['alias']=$ur; } if ((string) @$parameters['alias']!==''){ if ($or_=on(@$parameters['alias'])) { if ($or_['type']=='n'){ $pf=nm($or_['id']); if ($pf['IsPublished']) return $pf; } } } $pr=dm($parameters['year'],$parameters['month'],$parameters['day']); if (@$pr[$parameters['day-number']-1]) { return $pr[$parameters['day-number']-1]; } } function qm($k6,$tv,$fl,$ct){ global$_config; qs(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $pf=array ( 'Title' => $k6, 'Text' => $tv, 'FormatterID' => $_config['default_formatter'], 'OriginalAlias' => pn('find','','',$k6), 'Uploads' => $ct, 'Stamp' => (int)time(), 'LastModified' => (int)time(), ); if ($fl and is_array($fl)) { $pf['Offset'] = (int)$fl['offset']; $pf['IsDST'] = (int)$fl['is_dst']; } $pf=bn('Notes',$pf); return $pf['ID']; } function lm($vt,$fl){ $bt='/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if(preg_match($bt,$vt,$jb)) { $pl=gmmktime($jb[4],$jb[5],$jb[6],$jb[2],$jb[1],$jb[3]); $pl -= qy($fl,$pl); return $pl; } else { return false; } } function zm($yt=''){ global$_fp_error,$_config,$_e2utf8__unformat_htmlentity_neasden,$_db; if(Log::$p3)__log('Process note form'); try { $_fp_error=false; $s6=$k6=$nt=$tv=$mt=''; if(array_key_exists('note-id',$_POST)) $s6=$_POST['note-id']; if(array_key_exists('title',$_POST)) $k6=trim($_POST['title']); if(array_key_exists('tags',$_POST)) $nt=$_POST['tags']; if(array_key_exists('text',$_POST)) $tv=trim($_POST['text'],"\r\n"); if(array_key_exists('summary',$_POST)) $j6=trim($_POST['summary'],"\r\n"); if(array_key_exists('old-tags-hash',$_POST)) $mt=$_POST['old-tags-hash']; if(is_array($nt))$nt=implode(', ',$nt); $nt=trim($nt); if ($s6=='new'){ $_e2utf8__unformat_htmlentity_neasden=($_config['default_formatter']=='neasden'); } else { $_e2utf8__unformat_htmlentity_neasden=($_POST['formatter-id']=='neasden'); } $ft=cn('Notes'); if(stripos($ft['Collation'],'utf8mb4')!==0){ $k6=nb($k6); $nt=nb($nt); $tv=nb($tv,true); } $dt=$tv; $dt=str_replace("\n",'\n'."\n",$dt); $dt=str_replace("\r",'\r'."\r",$dt); $st=n(',',$nt,'sort'); $nt=implode(', ',$st); $at=md5($nt); if(array_key_exists('browser-offset',$_POST)) { $fl=gy(@$_POST['browser-offset']); } else { $fl=sy(); } $qt=@$_POST['old-stamp']; $yr=@$_POST['stamp']; $u7=@$_POST['alias']; if ($s6!='new'){ $lt=nm($s6); } else { $lt=array(); } if ($s6){ if ((string)$k6!=='' and (string)$tv!==''){ if ($s6=='new'){ $ct=''; if(is_file(USER_FOLDER.'new-uploads.psa')) { $ct=@file_get_contents(USER_FOLDER.'new-uploads.psa'); } try { $s6=qm($k6,$tv,$fl,$ct); @unlink(USER_FOLDER.'new-uploads.psa'); $zt=array ( '*note' => nm($s6), ); $kt=[ 'success' => true, 'data' => [ 'status' => 'created', 'id' => $s6, 'note-url' => jv('e2m_note',$zt), 'note-edit-url' => jv('e2m_note_edit',$zt) ] ]; $m1=(int)$s6; } catch (AeMySQLException $e){ kv($e,'Could not insert note'); $kt=[ 'success' => false, 'error' => [ 'message' => 'Cannot create record' ] ]; $m1=false; } } else { e2_drop_caches_for_note_($s6,$lt['IsPublished']); $xt=$lt; $xt['ID']=$s6; $xt['Title']=$k6; $xt['Summary']=$j6; $xt['Text']=$tv; $xt['FormatterID']=$lt['FormatterID']; $xt['LastModified']=time(); $xt['IsIndexed']='0'; if ($xt['FormatterID']==='calliope'){ $xt['FormatterID']=$_config['default_formatter']; } if ($qt!=$yr){ if ($pl=lm($yr,$fl)) { $xt['Stamp']=min($pl,time()); if(E2_EDITION){ $xt['Stamp']=$pl; if ($pl > time())gm($xt); } } } $w7=$u7; if ((string)$u7!==''){ $et=$u7; } elseif (!$lt['IsPublished']) { $et=$k6; } else { $et=''; } if ($lt['IsPublished']) { $w7=pn( 'set','n',$s6,$et ); $zt=array ( '*note' => $xt, 'alias' => $w7, ); } else { $rt=true; $w7=pn('find','n',$s6,$et); $xt['OriginalAlias']=$w7; $zt=array ( '*note' => $xt, 'alias' => $w7, ); } $es=g3( $xt['FormatterID'],$xt['Text'],'full' ); if(count($es) > 0){ eb($es); rb($es); } try { yn('Notes',$xt); if ($xt['IsPublished']) { if (za($xt)) { $xt['IsIndexed']='1'; yn('Notes',$xt); } if ($qt!=$yr){ wn(true); } p3($xt); } $kt=[ 'success' => true, 'data' => [ 'status' => 'saved', 'new-alias' => $w7, 'note-url' => jv('e2m_note',$zt), 'note-edit-url' => jv('e2m_note_edit',$zt) ] ]; $m1=(int)$s6; } catch (AeMySQLException $e){ kv($e,'Could not update record'); $kt=[ 'success' => false, 'error' => [ 'message' => 'Cannot update record ('. mysqli_error(). ')' ] ]; $m1=false; } } if ($at!=$mt){ yf(array ('NoteID' => $s6)); foreach ($st as $nm){ $tt=sf($nm); if (!$tt){ $tt['ID']=mf($nm); } xn( "INSERT INTO `". $_config['db_table_prefix']."NotesKeywords` ". "(`SubsetID`, `NoteID`, `KeywordID`) ". "VALUES (". ((int)$_config['db_table_subset']) .", ". ((int)$s6) .", ". ((int)$tt['ID']). ")", 'add new tag bindings' ); } } if ( $yt!='ajaxresult' and $m1 and $_POST['instant-publish']=='yes' ){ $_POST['note-id']=$s6; e2s_note_publish(); } } else { $kt=[ 'success' => false, 'error' => [ 'message' => 'Title or text is empty' ] ]; $_fp_error=FP_TITLE_OR_TEXT_EMPTY; $m1=false; } } else { $kt=[ 'success' => false, 'error' => [ 'message' => 'No note id/new specified' ] ]; $_fp_error=FP_NO_ID_OR_NEW; $m1=false; } if($_config['backup_automatically']) { tn(); } } catch (AeMySQLException $e){ kv($e); $kt=[ 'success' => false, 'error' => [ 'message' => 'Database error' ] ]; $m1=false; } if ($yt=='ajaxresult') return json_encode($kt); else return $m1; } function km($jt,$ht){ global$_config; if (!($jt and $ht) and !e2_()) { if(Log::$p3)__log('Error: e2_notes_count_generic called for invisible items unsecurely'); return null; } if (!is_bool($jt) or !is_bool($ht)) { if(Log::$p3)__log ('Error: e2_notes_count_generic called with non-bool params'); return null; } if (!$jt and !$ht){ if(Log::$p3)__log ('Error: e2_notes_count_generic called with nonsensical parameters'); return null; } $gt=( CACHES_FOLDER . 'notes-count-p'. (int)$jt . ($jt ? ('v'. (int)$ht):'') . '.txt' ); $m1=false; if(CACHE_NOTES_COUNTS and is_file($gt)) { $m1=@file_get_contents($gt); } if(is_numeric($m1) and $m1 > 0){ return $m1; } else { $m1=null; try { xn( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=". (int)$jt. " ". ($jt ? ( "AND `IsVisible`=". (int)$ht ):""), 'count notes with flags p'. (int)$jt . ($jt ? ('v'. (int)$ht):'') ); $m1=en(); $m1=$m1[0]['NotesCount']; if(CACHE_NOTES_COUNTS)n3($gt,$m1); } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not count notes'); } return $m1; } } function xm($tv){ $j6=$tv; $j6=preg_match( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/mu', $j6, $y3 ); $j6=$y3[3]; if (!$j6)$j6=$tv; if(mb_strlen($j6) <= 50)$j6=$tv; $j6=str_replace(array ( '<p>','<blockquote>','<ul>','<ol>','<br />', ), "\n",$j6); $j6=trim(strip_tags($j6)); if(mb_strlen($j6) > 50){ $wt=mb_strpos($j6,"\n",50); } else { $wt=mb_strrpos($j6,"\n"); } if ($wt!==false){ $j6=mb_substr($j6,0,$wt); $j6=trim($j6,' :.()'."\n"); } if(preg_match('/^(.{100,}?)(?:[:.!?()]|'."\n".')/su',$j6,$y3)) { $j6=trim($y3[0],' :.()'."\n"); } if(preg_match('/^(.{150,}?)[:.!?(),]/su',$j6,$y3)) { $j6=trim($y3[0],' :.(),'."\n"); } if(preg_match('/^(.{200,}?)[:.!?(), ]/su',$j6,$y3)) { $j6=trim($y3[0],' :.()'."\n"); } $j6=preg_replace('/[ \n\r\t]+/su',' ',$j6); if(mb_substr($j6, -1)==='.')$j6=mb_substr($j6,0, -1); if(mb_substr($j6, -1)===':')$j6=mb_substr($j6,0, -1); if(mb_substr($j6, -1)==='!')$j6=mb_substr($j6,0, -1); if(in_array($j6[mb_strlen($j6)-1], array (',',' '))) { $j6=trim($j6,', '). '...'; } if(mb_strlen($j6) > 250){ $j6=trim(mb_substr($j6,0,250)). '...'; } return $j6; } function em($pf){ $ut=false; if(E2_EDITION){ $ut=($pf['Stamp'] > time()); } if ($pf['IsPublished']) { if ($ut){ return 'scheduled'; } else { if ($pf['IsVisible']) { return 'public'; } else { return 'hidden'; } } } else { return 'draft'; } } function rm($xe=false){ if ($xe){ return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time() .') '; } } function e2_populate_read_counts_in_notes_ctree_($it){ global$_config; $ot=array(); foreach ($it as $t => $d6){ if (@$d6['id']) { $ot[] = "(`EntityID` = ". $d6['id'].")"; } } if(count($ot)) { $ot=implode(' OR ',$ot); try { xn( "SELECT `EntityID`, SUM(`ReadCount`) ReadCount ". "FROM `". $_config['db_table_prefix']."Actions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND (". $ot .") ". "GROUP BY `EntityID`", 'get read counts to populate notes CTree' ); $ib=en(); foreach ($ib as $vv){ $pt[$vv['EntityID']] = $vv['ReadCount']; } foreach ($it as $t => $d6){ $it[$t]['read-count']=$pt[$d6['id']]; } } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not populate read counts in notes ctree'); } } return $it; } function jm($pf){ if(E2_EDITION){ return md5($pf['Text'].$pf['LastModified']); } return ''; } if(E2_EDITION){ function hm(){ $fb=USER_FOLDER.'scheduled.psa'; if (!is_file($fb)) return; if(Log::$p3)__log('Check notes schedule'); $scheduled=(array) @unserialize(file_get_contents($fb)); $c5=array(); $v5=array(); $b5=false; foreach($scheduled as $y5){ if(time() >= @$y5['stamp']) { if (!$b5)as_(); $b5=true; if ($n5[$y5['id']]) continue; $n5[$y5['id']] = true; try { cy(jv( 'e2m_note_json', array ('*note' => nm($y5['id'])) )); } catch (AeMySQLException $e){ kv($e,'Could not broadcast a note published by schedule'); } } else { $c5[] = $y5; } } foreach ($c5 as $y5){ if (!@$n5[$y5['id']]) { $v5[] = $y5; } } if ($b5){ if(count($v5)) { @n3($fb,serialize($v5)); } else { @unlink($fb); } } } function gm($gq){ $fb=USER_FOLDER.'scheduled.psa'; $scheduled=@unserialize(file_get_contents($fb)); if (!is_array($scheduled))$scheduled=array(); $scheduled[] = array ( 'id' => $gq['ID'], 'stamp' => $gq['Stamp'], ); @n3($fb,serialize($scheduled)); } function wm($s6){ global$_config,$_strings,$_current_url; $xe=e2_(); $relatedNotesCollectionView=new AeArbitraryNotesCollectionView('related notes'); $relatedNotesCollectionView -> setCurrentURL($_current_url); if(CACHE_NOTES_RELATED){ $relatedNotesCollectionView -> setCacheFilename(CACHES_FOLDER.'note-'. $s6 .'-related.psa'); } $relatedNotesCollectionView -> setSQLRequest( "SELECT * FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". rm($xe). "AND `ID` IN (". "SELECT `NoteID` FROM (". "SELECT `NoteID`, COUNT(`KeywordID`) `KeywordsCount` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID` IN (". "SELECT `KeywordID` FROM `". $_config['db_table_prefix'] ."NotesKeywords`". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID` = ". $s6 ."". ") ". "AND `NoteID` != ". $s6 ." ". "GROUP BY `NoteID` ". "ORDER BY `KeywordsCount` DESC ". ") As RelatedNotesIDs". ") ". "ORDER BY MD5(`ID`+". ($s6*2) .") DESC ". "LIMIT 7" ); $m5=$relatedNotesCollectionView -> getNotesCTree(); if(count($m5)) { $ye=[ 'each' => $m5, 'seed' => $s6, 'title' => $_strings['nm--read-next'], ]; } else { $ye=[]; } return $ye; } } function e2m_drafts($parameters){ global$_strings,$_config; $xe=e2_(); $draftsView=new AePageableNotesView('e2m_drafts',$parameters); $draftsView -> setPortionSize((int)$_config['drafts_per_page']); $draftsView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $draftsView -> setUseLocalHrefs(true); if($draftsView -> isFirstPage() and CACHE_DRAFTS){ $draftsView -> setCacheFilename(CACHE_FILENAME_DRAFTS); } $draftsView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `LastModified` DESC" ); $f5=$draftsView -> getNotesCTree(); if(count($f5)) { if(Log::$p3)__log('Thumbnails {'); foreach ($f5 as $t => $af){ $f5[$t]['thumbs']=qb(@$af['format-info']['resources-detected']); } if(Log::$p3)__log('}'); } $d=[ 'title' => $_strings['pt--drafts'], 'heading' => $_strings['pt--drafts'], 'notes' => $f5, 'pages' => $draftsView -> getPagesCTree(), ]; if($draftsView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-drafts']; } elseif (!$draftsView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function um($d5){ global$_config; if(Log::$p3)__log('Drafts: find duplicate OriginalAliases...'); if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $s5=@unserialize(file_get_contents(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if(CACHE_DRAFTS_ALIAS_USE_COUNTS and is_array($s5)) { if(Log::$p3)__log('Drafts: retrieve cached'); } else { if(Log::$p3)__log('Drafts: assemle cacheable...'); $s5=array(); xn( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=0 ". "ORDER BY `ID`", 'get original aliases of drafts to calculate use counts' ); $m1=en(); $a5=array(); foreach ($m1 as $t => $pf){ @$s5[$pf['OriginalAlias']] ++; } if(CACHE_DRAFTS_ALIAS_USE_COUNTS){ n3(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS,serialize($s5)); } } return $s5[$d5]; } function im(){ global$_strings,$_user_folder_name; $q5='http://'. $_strings['e2--website-host'] .'/'; $l5='('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; return [ 'built?' => BUILT, 'installed?' => (mn()!==null), 'version' => 'v'. E2_VERSION, 'version-description' => $_strings['e2--vname-aegea'] .' '. $l5, 'user-folder-name' => $_user_folder_name, 'cookie-prefix' => b(), 'href' => $q5, 'about' => ( '<span title="E2 '.$l5 .'">'. $_strings['e2--powered-by'] .' '. '<a href="'. $q5 .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> '. '<span class="e2-svgi">'. ps('aegea') .'</span></a></span>' ), ]; } function om($candy,$it,$z5,$k5,$je){ global$full_blog_url,$content, $_config, $_candies_indexable, $_candies_indexable_conditionally, $_template, $_newsfeeds, $_current_url; $meta['base-href']=$full_blog_url. '/'; $meta['current-href']=$_current_url; $meta['stylesheets']=va(); $meta['scripts']=ba(); $meta['newsfeeds']=$_newsfeeds; $meta['favicon-type']='image/x-icon'; $meta['favicon-href']='favicon.ico'; if ($x5=nd()) { $meta['favicon-type']=v3($x5); $meta['favicon-href']=$x5; $meta['apple-touch-icon-href']=nd('square'); } $meta['navigation-links'] = [[ 'rel' => 'index', 'href' => jv('e2m_frontpage', ['page' => 1]), 'id' => 'link-index', ]]; if (!empty ($je)) { foreach (['prev','next','earlier','later'] as $e5){ if(array_key_exists($e5 .'-href',$je)) { $lr=$e5; if ($e5=='earlier')$lr='prev'; if ($e5=='later')$lr='next'; $meta['navigation-links'][] = [ 'rel' => $lr, 'href' => $je[$e5 .'-href'], 'id' => 'link-'. $e5, ]; } } } $r5='noindex, follow'; if (@$_config['index_follow_everything']) { $r5='index, follow'; } if(in_array($candy,$_candies_indexable)) { $meta['robots']='index, follow'; } if(in_array($candy,$_candies_indexable_conditionally)) { $meta['robots']=$r5; } $meta['viewport']=$_template['meta_viewport']; if(is_file(MEDIA_ROOT_FOLDER.'manifest.json')) { $meta['manifest-href']=$full_blog_url. '/manifest.json'; } $meta['og-images'] = []; if(is_array($it['only']['og-images'])) { $meta['og-images']=$it['only']['og-images']; $meta['twitter-card']='summary_large_image'; } if(is_array($z5['og-images'])) { $meta['og-images']=$z5['og-images']; $meta['twitter-card']='summary_large_image'; } if (!count($meta['og-images'])) { $meta['og-images'] = array ($k5['userpic-large-href']); $meta['twitter-card']='summary'; } return$meta; } function pm(){ global$_superconfig,$_config; $t5=[ 'new-note-href' => jv('e2m_write'), 'drafts-href' => jv('e2m_drafts', ['page' => 1]), 'drafts-count' => (int)km(false,true), 'settings-href' => jv('e2m_settings'), 'theme-preview-href' => jv('e2m_theme_preview', array ('theme' => '')), 'password-href' => jv('e2m_password', array ('recovery-key' => '')), 'database-href' => jv('e2m_database'), 'timezone-href' => jv('e2m_timezone'), 'sessions-href' => jv('e2m_sessions'), 'sign-out-href' => jv('e2m_sign_out'), ]; if (p()) { $t5['get-backup-href']=jv('e2m_get_backup'); } if (@$_config['read_only']) { unset ($t5['new-note-href']); unset ($t5['settings-href']); unset ($t5['timezone-href']); } if (@$_superconfig['disallow_themes_preview']) { unset ($t5['theme-preview-href']); } if (@$_superconfig['disallow_db_config']) { unset ($t5['database-href']); } list ($fe,$j5,$h5)=y2(); if ($fe){ $t5['new-comments-count']=$fe; $t5['new-comments-href']=$h5; } return $t5; } function e2m_tags(){ global$_strings; $d['title']=$_strings['pt--tags']; $d['heading']=$_strings['pt--tags']; $d['tags']=ff([]); $g5=df(true); if ($g5===null){ $d['unavailable?']=true; } else { $d['tags']['each']=$g5; if(count($g5)==0){ $d['nothing']=$_strings['gs--no-tags']; } } return $d; } function e2m_tag($parameters=[]) { global $settings, $_config, $_current_tags, $_strings, $page, $full_blog_url; if(Log::$p3)__log('Tag {'); $xe=e2_(); $tagNotesView=new AePageableNotesView('e2m_tag',$parameters); $tagNotesView -> setPortionSize($settings['appearance']['notes_per_page']); $tagNotesView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $tagNotesView -> setWantNewCommentsCount($xe); $tagNotesView -> setWantReadHrefs($_config['count_reads']); $tagNotesView -> setWantControls($xe and !@$_config['read_only']); $w5=[]; if(array_key_exists('*tags',$parameters)) { foreach($parameters['*tags'] as $m2){ if ($xe or $m2['IsVisible']) { $w5[] = $m2; } } } if (!$w5[0]) return e2_error404_mode(); $u5=count($w5); $u6=$w5[0]; $i5=$parameters['tag-alias']; $_current_tags=[]; foreach ($w5 as $u6)$_current_tags[] = $u6['Keyword']; $tagNotesView -> setHighlightedTags($_current_tags); if(CACHE_TAG and $tagNotesView -> isFirstPage() and $u5===1){ if ($xe){ $tagNotesView -> setCacheFilename(e2_cache_filename_with_id_($u6['ID'],CACHE_FILENAMES_TAG_AUTHOR)); } else { $tagNotesView -> setCacheFilename(e2_cache_filename_with_id_($u6['ID'],CACHE_FILENAMES_TAG)); } } foreach ($w5 as $u6) if ($u6)$o5[] = "nk.`KeywordID`=". $u6['ID']; $p5=( "FROM `". $_config['db_table_prefix'] ."Notes` n ". "JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (". implode(" OR ",$o5).") ". "AND IsPublished=1 ". rm($xe). "GROUP BY n.`ID` ". "HAVING COUNT(*)>=". $u5 ); $tagNotesView -> setSQLCountRequest( "SELECT COUNT(*) Total FROM (SELECT 1 ". $p5 .") _" ); $tagNotesView -> setLimitlessSQLRequest( "SELECT n.*, COUNT(*) ". $p5 ." ". "ORDER BY n.`Stamp` DESC" ); $cj=nf($u6['ID'],5); $vj=''; $z5['description']=''; $z5['summary']=''; if ($u5==1){ if ($xe){ $z5['edit-href']=jv( 'e2m_tag_edit', array ('tag-alias' => $i5) ); } if ((string)$u6['Description']!==''){ $d1=u3($u6['Description'],'full'); $uy=$d1['text-final']; $z5['description']=$uy; $z5['description-format-info']=$d1['meta']; ya(@$d1['meta']['links-required']); } if ((string)$u6['Summary']!==''){ $z5['summary']=h3(htmlspecialchars($u6['Summary'],ENT_NOQUOTES,HSC_ENC)); } elseif ((string)$z5['description']!==''){ $z5['summary']=xm($z5['description']); }; $bj=jv('e2m_tag_rss', array ('tag-alias' => $i5)); $yj=jv('e2m_tag_json', array ('tag-alias' => $i5)); xd( 'rss', bd() .': '. $u6['Keyword'], $bj ); xd( 'json', bd() .': '. $u6['Keyword'], $yj ); $z5['og-images']=d3( sb( $z5['description-format-info']['resources-detected'], q3('tag',$u6['ID']) ) ); $z5['name']=htmlspecialchars($u6['Keyword'],ENT_COMPAT,HSC_ENC); if(E2_EDITION){ $z5['popular']=l2($u6['ID']); $z5['related']=$cj; } $vj=htmlspecialchars($u6['PageTitle'],ENT_COMPAT,HSC_ENC); } $nj=$tagNotesView -> getTotalNotes(); $z5['notes-count']=$nj; $z5['notes-count-text']=e2l_get_string('pt--n-posts', array ('number' => $nj)); $mj=$z5['notes-count-text'] .' '. $_strings['gs--tagged']; $fj=[]; foreach ($w5 as $af){ $fj[] = htmlspecialchars($af['Keyword'],ENT_COMPAT,HSC_ENC); } $fj=implode(', ',$fj); if ((string)$vj!==''){ $k6=$vj; $r6=$vj; } else { $k6=bd() .': '. $mj .' '. $fj; if(count($w5) > 1){ $r6=$_strings['pt--tags'] .': '. $fj; } else { $r6=$_strings['pt--tag'] .': '. $fj; } } $ne=ff($parameters); $d=[ 'title' => $k6, 'heading' => htmlspecialchars_decode($r6,ENT_COMPAT), 'notes' => $tagNotesView -> getNotesCTree(), 'pages' => $tagNotesView -> getPagesCTree(), 'tags' => $ne, ]; if ( !$tagNotesView -> isExistingPage() and !$tagNotesView -> isFirstPageOfEmptyView() ) { return e2_error404_mode(); } if ( $tagNotesView -> isFirstPageOfEmptyView() and !$xe ){ return e2_error404_mode(); } if($tagNotesView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } if ((string)$z5['summary']!==''){ $d['summary']=$z5['summary']; } if(count($w5)==1){ $d['tag']=$z5; if (e2_()) { $d['related-edit-href']=$z5['edit-href']; $d['related-edit-title']=$_strings['tt--edit-tag']; } } if(Log::$p3)__log('} // Tag'); return $d; } function e2m_tag_edit($parameters=array()) { global$_strings; if(array_key_exists('*tag',$parameters)) { $u6=$parameters['*tag']; } if (!$u6) return e2_error404_mode(); $es=g3( 'neasden',$u6['Description'],'full' ); $rs=@unserialize( $u6['Uploads'] ) or $rs=[]; $br=qb( fb( sb( $es,$rs ) ) ); k3( 'Keywords', $u6, $es ); $nq=r3(); $dj=[ 'enabled?' => t3($nq), 'each' => $br, 'upload-action' => jv('e2j_file_upload'), 'remove-action' => jv('e2j_file_remove'), ]; $sj=array ( '.tag-id' => $u6['ID'], '.formatter-id' => 'neasden', 'form-action' => jv('e2s_tag_edit'), 'submit-text' => $_strings['fb--save-changes'], 'tag' => htmlspecialchars($u6['Keyword'],ENT_COMPAT,HSC_ENC), 'page-title' => htmlspecialchars($u6['PageTitle'],ENT_COMPAT,HSC_ENC), 'page-title-placeholder' => htmlspecialchars($u6['Keyword'],ENT_COMPAT,HSC_ENC), 'urlname' => htmlspecialchars($parameters['tag-alias'],ENT_COMPAT,HSC_ENC), 'description' => htmlspecialchars($u6['Description'],ENT_COMPAT,HSC_ENC), 'summary' => (string)$u6['Summary'], 'favourite?' => (bool)$u6['IsFavourite'], 'space-usage' => j3($nq), ); $sj['.cache-sensitive-hash']=md5( $sj['tag'] . $sj['uploads'] . $sj['urlname'] ); $d=array ( 'body-uploads-enabled?' => t3($nq), 'title' => $_strings['pt--tag-edit'] .': '. $u6['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $sj, 'uploads' => $dj, 'related-delete-href' => jv('e2m_tag_delete', array ('*tag' => $u6)), ); return $d; } function e2m_tag_flag_ajax($parameters){ s([ 'flag-name' => 'tag', 'candy-name' => 'e2m_tag_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ cf($parameters); }, ]); } function cf($parameters){ if(array_key_exists('*tag',$parameters)) { $u6=$parameters['*tag']; } if (!$u6) return e2_error404_mode(); e2_drop_caches_for_tag_($u6['ID']); yn('Keywords', array ( 'ID' => $u6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); return true; } function e2m_tag_delete($parameters=array()) { global$_strings; if(array_key_exists('*tag',$parameters)) { $u6=$parameters['*tag']; } if (!$u6) return e2_error404_mode(); $aj=array ( '.tag-id' => $u6['ID'], 'caution-text' => e2l_get_string('gs--tag-will-be-deleted-notes-remain', array ( 'tag' => htmlspecialchars($u6['Keyword'],ENT_COMPAT,HSC_ENC) )), 'tag' => htmlspecialchars($u6['Keyword'],ENT_COMPAT,HSC_ENC), 'form-action' => jv('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ); $d=array ( 'title' => $_strings['pt--tag-delete'] .': '. $u6['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $aj, ); return $d; } function e2m_untagged($parameters=[]) { global$settings,$_strings,$_config; $xe=e2_(); $untaggedView=new AePageableNotesView('e2m_untagged',$parameters); $untaggedView -> setPortionSize($settings['appearance']['notes_per_page']); $untaggedView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $untaggedView -> setWantNewCommentsCount($xe); $untaggedView -> setWantReadHrefs($_config['count_reads']); $untaggedView -> setWantControls($xe and !@$_config['read_only']); $p5=( "FROM `". $_config['db_table_prefix']."Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished`=1 ". "AND nk.`SubsetID` IS NULL ". rm($xe) ); $untaggedView -> setSQLCountRequest( "SELECT COUNT(*) Total ". $p5 ); $untaggedView -> setLimitlessSQLRequest( "SELECT n.* ". $p5 ." ORDER BY n.`Stamp` DESC" ); $d=[ 'title' => $_strings['pt--posts-without-tags'], 'heading' => $_strings['pt--posts-without-tags'], 'notes' => $untaggedView -> getNotesCTree(), 'pages' => $untaggedView -> getPagesCTree(), ]; if($untaggedView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-posts-without-tags']; } elseif (!$untaggedView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function e2s_tag_edit(){ global$_strings,$_config; $qj=$nm=$uy=$et=''; if(array_key_exists('tag-id',$_POST)) $qj=$_POST['tag-id']; if(array_key_exists('tag',$_POST)) $nm=$_POST['tag']; if(array_key_exists('page-title',$_POST)) $vj=trim($_POST['page-title'],"\r\n"); if(array_key_exists('description',$_POST)) $uy=trim($_POST['description'],"\r\n"); if(array_key_exists('summary',$_POST)) $j6=trim($_POST['summary'],"\r\n"); if(array_key_exists('urlname',$_POST)) $et=trim($_POST['urlname'],"\r\n"); if(array_key_exists('cache-sensitive-hash',$_POST)) { $lj=$_POST['cache-sensitive-hash']; $zj=md5($nm.$et); } $ft=cn('Notes'); if(stripos($ft['Collation'],'utf8mb4')!==0){ $nm=nb($nm); $vj=nb($vj); $uy=nb($uy,true); } xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = ".((int)$qj)."", 'get tag record to update' ); $kj=en(); if(count($kj)!=1) die; $m2=$kj[0]; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword` = '". rn($nm) ."' ". "AND (`ID` != ".((int)$qj).")", 'make sure new tag name does not conflict with existing ones' ); $kj=en(); if(count($kj)==0){ if ($zj!=$lj){ as_(); } e2_drop_caches_for_tag_($qj); $m2['ID'] = ((int)$qj); $m2['Keyword']=$nm; $m2['PageTitle']=$vj; $m2['Description']=$uy; $m2['Summary']=$j6; $es=g3( 'neasden',$m2['Description'],'full' ); if(count($es) > 0){ eb($es); rb($es); } yn('Keywords',$m2); $w7=pn( 'set','t',$m2['ID'],$et ); c(jv('e2m_tag', array ('tag-alias' => $w7))); } else { mv($_strings['er--cannot-rename-tag'],E2E_USER_ERROR); v(); } die; } function e2s_tag_delete(){ global$_strings,$_config; $qj=((int)$_POST['tag-id']); as_(); e2_drop_caches_for_tag_($qj); xn( "DELETE FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $qj, 'delete note by ID' ); xn( "DELETE FROM `". $_config['db_table_prefix']."Aliases` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `EntityType` = 't' ". "AND `EntityID` = ". ((int)$qj), 'delete aliases after deleting note' ); xn( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `KeywordID`=". $qj, 'delete tag bindings after deleting tag' ); c(jv('e2m_tags')); } function vf($xj){ global$_current_tags,$_config; $ej=null; if(CACHE_FAVTAGS and is_file(CACHE_FILENAME_FAVTAGS)) { $ej=@unserialize(file_get_contents(CACHE_FILENAME_FAVTAGS)); } if (!is_array($ej)) { try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsFavourite`=1 ORDER BY `Keyword`", 'get favorite tags for tags menu' ); $rj=en(); $ej=array(); foreach ($rj as $m2){ $tj['tag']=htmlspecialchars($m2['Keyword'],ENT_NOQUOTES,HSC_ENC); $tj['href']=jv( 'e2m_tag', array ('*tag' => $m2) ); $tj['visible?'] = (bool)$m2['IsVisible']; $ej[] = $tj; } if(CACHE_FAVTAGS)n3(CACHE_FILENAME_FAVTAGS,serialize($ej)); } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Count not get tags menu from database'); } } if (!is_array($ej)) return null; if (!empty ($_current_tags)) { $jj=false; foreach ($ej as $t => $af){ $ej[$t]['current?']=in_array($ej[$t]['tag'],$_current_tags); if ($ej[$t]['current?']) { $jj=true; $hj=$xj; $hj['flag']='IsFavourite'; $hj['value']=0; if (e2_()) { $ej[$t]['pinnable?']=true; $ej[$t]['pinned?']=true; $ej[$t]['pinned-toggle-href'] = ( jv('e2m_tag_flag_ajax',$hj) ); } } } } if (e2_()) { if (!$jj and array_key_exists('*tag',$xj)) { $gj=$xj; $gj['flag']='IsFavourite'; $gj['value']=1; $wj=array ( 'tag' => htmlspecialchars($xj['*tag']['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag',$xj), 'current?' => true, 'pinnable?' => true, 'pinned?' => false, 'pinned-toggle-href' => jv('e2m_tag_flag_ajax',$gj), ); $ej[] = $wj; } } return $ej; } function bf($s6){ global$_config; $y2=array(); xn( "SELECT k.* ". "FROM `". $_config['db_table_prefix']."Keywords` k, ". "`". $_config['db_table_prefix']."NotesKeywords` nk ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID`=". ((int)$s6) ." ". "AND k.`ID`=nk.`KeywordID` ". "ORDER BY `Keyword`", 'get tag records for note by id' ); $y2=en(); return $y2; } function yf($uj){ global$_config; $ij=array(); foreach (array ( 'ID', 'NoteID', 'KeywordID', ) as $ez) if(array_key_exists($ez,$uj)) { $xz[] = '`'. $ez .'`'."='". rn($uj[$ez]) ."'"; if ($ez=='ID')$oj='tagbinging-id'; if ($ez=='NoteID')$oj='tagbinging-note-id'; if ($ez=='KeywordID')$oj='tagbinging-tag-id'; $ij[$oj]=$uj[$ez]; } $im=( "DELETE FROM `". $_config['db_table_prefix']."NotesKeywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND ". implode(' AND ',$xz) ); xn($im); } function nf($qj,$pj){ global$_config; xn( "SELECT `ID`, `Keyword`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] ."Keywords` k ". "WHERE k.`SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible`=1 ". "AND k.`ID` IN (". "SELECT `KeywordID` FROM (". "SELECT COUNT(`NoteID`) NotesCount, `KeywordID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`NoteID` IN (". "SELECT nk2.`NoteID` ". "FROM `". $_config['db_table_prefix'] ."NotesKeywords` nk2 ". "WHERE nk2.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk2.`KeywordID`=". $qj. ") ". "GROUP BY nk.`KeywordID` ". "HAVING NotesCount > 1 ". "ORDER BY NotesCount DESC ". "LIMIT 1, ". $pj. ") k_ids". ")", 'find related tags' ); $cj=[]; foreach (en() as $m2){ if ($m2['ID']===$qj) continue; $cj[] = [ 'name' => htmlspecialchars($m2['Keyword'],ENT_NOQUOTES,HSC_ENC), 'href' => jv('e2m_tag', array ('*tag' => $m2)), ]; } return $cj; } function mf($nm){ @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); wn(true); $m2=array ( 'Keyword' => $nm, 'OriginalAlias' => pn('find','','',$nm), 'Description' => '', ); $m2=bn('Keywords',$m2); $ch=pn( 'set','t',$m2['ID'],$nm ); if ($ch!=$m2['OriginalAlias']) { $m2['OriginalAlias']=$ch; yn('Keywords',$m2); } return $m2['ID']; } function ff($parameters){ if (($vh=df()) === null) return []; $ne['each']=$vh; if(count($ne['each']) > 0){ $ne['href']=jv('e2m_tags'); } if (($bh=vf($parameters)) !== null){ $ne['menu-each']=$bh; } return $ne; } function df($yh=false){ global$_config; $xe=e2_(); $gt=CACHE_FILENAME_TAGS; if ($xe)$gt=CACHE_FILENAME_TAGS_AUTHOR; if ($yh){ $gt=CACHE_FILENAME_TAGS_FULL; if ($xe)$gt=CACHE_FILENAME_TAGS_AUTHOR_FULL; } $nh=null; if(CACHE_TAGS and is_file($gt)) { $nh=@unserialize(file_get_contents($gt)); } if (!is_array($nh)) { try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY `Keyword`", 'get all tags' ); $mh=array(); foreach (en() as $m2){ $nm['id'] = (int)$m2['ID']; $nm['tag']=htmlspecialchars($m2['Keyword'],ENT_NOQUOTES,HSC_ENC); $nm['favourite?'] = (bool)$m2['IsFavourite']; $nm['visible?'] = (bool)$m2['IsVisible']; $nm['notes-count']=0; $nm['last-used']=0; $nm['freshness']=0; $nm['weight']=0; if ($yh){ $nm['href']=jv('e2m_tag', array ('*tag' => $m2)); } $mh[$m2['ID']] = $nm; } xn( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix']."NotesKeywords` nk, ". "`". $_config['db_table_prefix']."Notes` n ". "WHERE nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`IsPublished` = 1 ". rm($xe). "AND nk.`NoteID` = n.`ID` ". "GROUP BY nk.KeywordID", 'get tags ordering info' ); $fh=0; $dh=0; $sh=0; foreach (en() as $ah){ $tj =& $mh[$ah['KeywordID']]; $tj['notes-count']=$ah['Count']; if (@$tj['last-used'] < $ah['LastUsed']) { $tj['last-used']=$ah['LastUsed']; $qh=(time()-$tj['last-used']) / SECONDS_IN_A_YEAR; $tj['freshness']=pow(1/2,$qh); } $fh=max($fh,$tj['notes-count']); $dh=max($dh,$tj['freshness']); $sh=max($sh,$tj['notes-count']*$tj['freshness']); } $nh=array(); foreach ($mh as $r => $af){ if (!$xe and $af['notes-count']==0) continue; $lh=mb_strtolower($af['tag']); $nh[$lh]=$af; if ($dh!=0){ $nh[$lh]['freshness']=$af['freshness']/$dh; } else { $nh[$lh]['freshness']=0; } if ($sh!=0){ $nh[$lh]['weight'] = ( $af['freshness']*$af['notes-count']/$sh ); } else { $nh[$lh]['weight']=0; } if ($nh[$lh]['favourite?'])$nh[$lh]['weight']=1; } if(CACHE_TAGS)n3($gt,serialize($nh)); } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not get tags from database'); } } return $nh; } function sf($u6){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". rn($u6) ."'", 'get tag by name' ); $t=en(); if (isset ($t[0])) { return $t[0]; } else { return null; } } function af($zh){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `OriginalAlias`='".rn($zh)."'", 'get tag by legacy urlname name' ); $ib=en(); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function qf($as_){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`='".((int)$as_)."'", 'get tag by id' ); $ib=en(); if (isset ($ib[0])) { return $ib[0]; } else { return null; } } function e2_tagrecs_with_parameters_($parameters){ $kh=array(); if (@$parameters['tag-alias'] or $parameters['tag-alias']==='0'){ $kh=explode(',',$parameters['tag-alias']); } $y2=array(); foreach ($kh as $zh) if ($zh or $zh==='0'){ if ( $or_=on(@$zh) and ($or_['type']=='t') and ($m2=qf($or_['id'])) ) { $y2[] = $m2; } else { if ($xh=af($zh)) { $y2[] = $xh; } } } return $y2; } function zf(){ global$full_blog_url; static $eh; $lm=i2(); if (empty ($eh)) { $eh=md5($full_blog_url .'email'. $lm); } return $eh; } function kf(){ global$full_blog_url; static $rh; $lm=i2(); if (empty ($rh)) { $rh=md5($full_blog_url .'nospam'. $lm.date('n-Y')); } return $rh; } function xf(){ global$full_blog_url; static $th; $lm=i2(); if(empty($th)) { $th=md5($full_blog_url .'nospam'. $lm.date('n-Y',strtotime('-1 month'))); } return $th; } function ef($s6){ global$full_blog_url; $lm=i2(); return b('comment_'. md5($full_blog_url .'nospam_cookie'. $lm.$s6)); } function rf(){ global$full_blog_url; $jh=$_SERVER['HTTP_USER_AGENT']; $lm=i2(); return md5($full_blog_url .'nospam_cookie'. $lm.$jh); } function tf(){ if ( array_key_exists('email',$_POST) and $_POST['email']!=='' ) return true; $rh=kf(); $th=xf(); if ( !array_key_exists($rh,$_POST) and !array_key_exists($th,$_POST) ) return true; if ( ( array_key_exists($rh,$_POST) and $_POST[$rh]!=='' ) or ( array_key_exists($th,$_POST) and $_POST[$th]!=='' ) ) return true; if ( !array_key_exists('comment',$_POST) or (strlen($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($s6){ if ( !array_key_exists(ef($s6),$_COOKIE) or ($_COOKIE[ef($s6)] !== rf()) ) return true; return false; } function e2m_comment($parameters=array ()) { c(jv('e2m_note',$parameters)); } function e2m_comment_edit($parameters=array ()) { return hf('edit',$parameters); } function hf($e6,$parameters=array ()) { global$_config,$_strings,$full_blog_url; $k6=$r6=$_strings['pt--new-comment']; $hh='new'; if ($e6=='edit'){ $n6=e2_commentrec_with_parameters_($parameters); $vr=$_strings['fb--save-changes']; $pf=$n6['noterec']; $k6=$r6=$_strings['pt--edit-comment']; $gh=wf($pf,$n6,$parameters['comment-number']); $hh=$wh['ID']; if (!$n6){ return e2_error404_mode(); } $uh=array ( '.note-id' => $n6['NoteID'], '.comment-id' => $n6['ID'], '.comment-number' => $parameters['comment-number'], '.already-subscribed?' => false, '.gip' => $n6['GIP'], 'create:edit?' => false, 'form-action' => jv('e2s_comment_process'), 'submit-text' => $vr, 'show-subscribe?' => true, 'subscribe?' => (bool)$n6['IsSubscriber'], 'name' => htmlspecialchars($n6['AuthorName'],ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars($n6['AuthorEmail'],ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars($n6['Text'],ENT_COMPAT,HSC_ENC), 'email-field-name' => zf(), ); if (''!=trim($n6['IP'])) { $uh['ip']=$n6['IP']; } } $d=array ( 'title' => $k6, 'heading' => $r6, 'form' => 'form-comment', 'form-comment' => $uh, ); if (!empty ($gh)) { $d['comments'] = array ('each' => array ('only' => $gh)); } return $d; } function e2m_comment_reply($parameters=array ()) { global$_strings; $n6=e2_commentrec_with_parameters_($parameters); if (!$n6){ return e2_error404_mode(); } $pf=$n6['noterec']; $gh=wf($pf,$n6,$parameters['comment-number']); $gh['replying?'] = (bool)true; $ih=($n6['Reply']=='' or !$n6['IsReplyVisible']); $k6=$ih? $_strings['pt--reply-to-comment']:$_strings['pt--edit-reply-to-comment']; $oh=array ( '.note-id' => $pf['ID'], '.comment-id' => $n6['ID'], '.reply-action' => $ih? 'new':'edit', 'form-action' => jv('e2s_comment_edit_reply'), 'submit-text' => $ih? $_strings['fb--publish']:$_strings['fb--save-changes'], 'create:edit?' => (bool) ($ih), 'reply-text' => htmlspecialchars($n6['Reply'],ENT_COMPAT,HSC_ENC), 'emailing-possible?' => MAIL_ENABLED, 'mail-back?' => (bool) ($ih), ); return array ( 'title' => $k6, 'heading' => $k6, 'comments' => array ('each' => array ('only' => $gh)), 'form' => 'form-comment-reply', 'form-comment-reply' => $oh, ); } function e2m_comment_delete($parameters=array ()) { global$_strings,$settings,$ph,$_config; $n6=e2_commentrec_with_parameters_($parameters); $s6=$n6['NoteID']; if (!$n6){ return e2_error404_mode(); } e2_drop_caches_for_note_($s6,true); @unlink(USER_FOLDER. '/last-comment.psa'); xn( "DELETE FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". ((int)$n6['ID']). "'" ); v(); } function e2m_comment_reply_delete($parameters=array ()) { global$_strings,$settings,$_config; $n6=e2_commentrec_with_parameters_($parameters); if (!$n6){ return e2_error404_mode(); } xn( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$n6['ID']) ); v(); } function e2m_unsubscribe($parameters){ global$_strings,$_config; $c8="ORDER BY `ID` DESC"; $v8=false; $pf=$parameters['*note']; $s6=$pf['ID']; $l3=$parameters['unsubscribe-email']; $b8=$parameters['unsubscribe-key']; $l3=str_replace(' ','+',$l3); if ($s6){ xn( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $s6 ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`='". $l3 ."' ". $c8, 'get subscriber’s comments ids' ); $m1=en(); if(count($m1) < 1) { $d['unsubscribe']['error-message']=$_strings['gs--you-are-not-subscribed']; } else { $m6=@$m1[0]; $y8=md5($m6['ID'].$m6['Stamp'] .'x'); if ($b8==$y8){ xn( "UPDATE `". $_config['db_table_prefix']."Comments` ". "SET `IsSubscriber`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $s6 ." ". "AND `AuthorEmail` = '". rn($l3). "'", 'unsubscribe' ); $v8=true; $d['unsubscribe']['note-title']=h3( htmlspecialchars($pf['Title'],ENT_COMPAT,HSC_ENC) ); $d['unsubscribe']['note-href']=jv( 'e2m_note', array ('*note' => $pf) ); } if (!$v8){ $d['unsubscribe']['error-message']=$_strings['gs--unsubscription-didnt-work']; } } } else { $d['unsubscribe']['error-message']=$_strings['gs--post-not-found']; } if ($v8){ $k6=$_strings['pt--unsubscription-done']; } else { $k6=$_strings['pt--unsubscription-failed']; } $d['unsubscribe']['success?']=$v8; $d['title']=$k6; $d['heading']=$k6; return $d; } function e2m_comment_flag($parameters){ gf($parameters); c(jv('e2m_note',$parameters)); } function e2m_comment_flag_ajax($parameters){ s([ 'flag-name' => 'comment', 'candy-name' => 'e2m_comment_flag_ajax', 'parameters' => $parameters, 'flipping-function' => function () use ($parameters){ gf($parameters); }, ]); } function gf($parameters){ $n6=e2_commentrec_with_parameters_($parameters); $s6=$n6['NoteID']; if ($n6){ yn('Comments', array ( 'ID' => $n6['ID'], $parameters['flag'] => (int) ($parameters['value']==1), )); e2_drop_caches_for_note_($s6,true); } } function e2s_comment_process(){ global$_strings,$_fp_error; list ($s6,$hh,$n8)=s2(); if(Log::$p3)__log('Comments: processed, noteid <'. $s6 .'>, commentid <'. $hh .'>'); if (!$hh){ $m8=''; if($_fp_error==FP_NOT_COMMENTABLE){ mv($_strings['er--post-not-commentable'],E2E_USER_ERROR); } elseif($_fp_error==FP_EMPTY_FIELD){ mv($_strings['er--name-email-text-required'],E2E_USER_ERROR); } elseif($_fp_error==FP_COMMENT_TOO_LONG){ $f8=$_strings['gs--comment-too-long']; $m8=$_strings['gs--comment-too-long-description']; } elseif($_fp_error==FP_COMMENT_DOUBLE_POST){ $f8=$_strings['gs--comment-double-post']; $m8=$_strings['gs--comment-double-post-description']; } elseif($_fp_error==FP_COMMENT_SPAM_SUSPECT){ $f8=$_strings['gs--comment-spam-suspect']; $m8=$_strings['gs--comment-spam-suspect-description']; } elseif($_fp_error==FP_NO_ID_OR_NEW){ mv($_strings['er--error-occurred'].' (FP_NO_ID_OR_NEW)'); } else { mv($_strings['er--error-occurred'].' (FP '. $_fp_error .')'); } if ($m8){ $d['title']=$f8; $d['heading']=$f8; $d['form']='form-unaccepted-comment'; $d['form-unaccepted-comment'] = array ( 'reason' => $m8, 'text' => @htmlspecialchars($n8['text'],ENT_COMPAT,HSC_ENC), ); return $d; } } if ($s6){ c(jv('e2m_note', array ('*note' => nm($s6)))); } else { c(); } die; } function e2s_comment_edit_reply(){ global$_strings,$v,$_config; $d8=@$_POST['text']; if(trim($d8)=='')$d8=''; $s6=@$_POST['note-id']; $pf=nm($s6); $hh=@$_POST['comment-id']; $n6=uf($hh); $s8=isset ($_POST['mail-back']); $a8=time(); if (@$_POST['reply-action']=='new'){ $q8=time(); } @unlink(e2_note_cache_filename_with_id_($s6 .'-comments')); @unlink(e2_note_cache_filename_with_id_($s6 .'-comments-author')); if ($n6){ xn( "UPDATE `". $_config['db_table_prefix']."Comments` SET ". "`Reply`='". rn($d8) ."', ". ( isset ($q8)? ( "`ReplyStamp`='". $q8 ."', " ) : ( "" ) ). "`ReplyLastModified`='". $a8 ."', ". "`IsReplyVisible`='1' ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=".((int)$hh), 'update comment reply' ); $re=jv('e2m_note', array ('*note' => $pf)); if ($s8 and $d8!=''){ $tj['comment-time'] = array ($n6['Stamp'],sy()); $tj['commenter']=$n6['AuthorName']; $tj['commenter-email']=$n6['AuthorEmail']; $tj['comment-text']=$n6['Text']; $tj['note-title']=h3($pf['Title']); $tj['reply-time'] = array (time(),sy()); $tj['blog-author']=yd(); $tj['note-href']=$re; $tj['comment-href']=$re; $tj['reply-text']=$d8; if(1){ $l8=d1( 'comment-reply',$tj ); $z8=e2l_get_string( 'em--comment-reply', $tj ); $k8=$n6['AuthorEmail']; $x8='From: '. s1(); a1($k8,$z8,$l8,$x8); } if(1){ unset ($tj['commenter-email']); $x8='From: '. s1(); foreach (m2($pf,$n6['AuthorEmail']) as $e8){ $r8=$e8['AuthorEmail']; $t8=md5($e8['ID'].$e8['Stamp'].'x'); $tj['unsubscribe-href']=jv('e2m_unsubscribe', array ( '*note' => $pf, 'unsubscribe-email' => $r8, 'unsubscribe-key' => $t8, ) ); $k8=$r8; $l8=d1('comment-reply-to-public',$tj); $z8=e2l_get_string( 'em--comment-reply-to-public-subject', $tj ); a1($k8,$z8,$l8,$x8); } } } c($re); } else { v(); } die; } function wf($pf,$m6,$wv){ global$_config,$full_blog_url; if(Log::$p3)__log('Package comment '. $m6['ID'] .'...'); if ($pf===null){ $pf=nm($m6['NoteID']); } $tj['number']=$wv; $j8=!empty ($m6['IsGIPUsed']); $tj['gip-used?']=$j8; $tj['gip']=$tj['gip-used?']?$m6['GIP']:''; $tj['name']=htmlspecialchars($m6['AuthorName'],ENT_NOQUOTES,HSC_ENC); $tj['userpic-set?']=false; if ($j8){ $h8=AVATARS_FOLDER.$m6['GIP'] .'-'. $m6['GIPAuthorID'] .'.jpg'; if(is_file(MEDIA_ROOT_FOLDER.$h8)) { $tj['userpic-set?']=true; $tj['userpic-href']=$full_blog_url .'/'. $h8; } } $tj['name-href']=''; if ( $j8 and $g8=e2_get_user_profile_url($m6['GIP'],$m6['GIPAuthorID'],$m6['AuthorProfileLink']) ) { $tj['name-href']=$g8; } if (e2_()) { $tj['email']=htmlspecialchars($m6['AuthorEmail'],ENT_NOQUOTES,HSC_ENC); if (''!=trim($m6['IP'])) { $tj['ip']=$m6['IP']; } } $tj['author-name']=yd(); $tj['important?'] = (bool)$m6['IsFavourite']; $tj['reply-visible?'] = (bool) ($m6['IsVisible'] && $m6['IsReplyVisible']); $tj['reply-important?'] = (bool)$m6['IsReplyFavourite']; $tj['spam-suspect?'] = (bool)$m6['IsSpamSuspect']; $w8=array ((int)$m6['Stamp'],fy($pf)); $tj['time']=$w8; $tj['last-modified']=$w8; if ($m6['LastModified']) $tj['last-modified'] = array ((int)$m6['LastModified'],fy($pf)); if ($m6['ReplyStamp']) $tj['reply-time'] = array ((int)$m6['ReplyStamp'],fy($pf)); if ($m6['ReplyLastModified']) $tj['reply-last-modified'] = array ((int)$m6['ReplyLastModified'],fy($pf)); if (e2_()) { $tj['subscriber?'] = (bool)$m6['IsSubscriber']; $tj['new?'] = (bool)$m6['IsNew']; $tj['first-new?']=false; if (!@$_config['read_only']) { if ($m6['IsFavourite']) { $tj['important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ('*note' => $pf,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 0) ); } else { $tj['important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ('*note' => $pf,'comment-number' => $wv,'flag' => 'IsFavourite','value' => 1) ); } if ($m6['IsReplyFavourite']) { $tj['reply-important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 0 ) ); } else { $tj['reply-important-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv,'flag' => 'IsReplyFavourite','value' => 1 ) ); } $tj['edit-href']=jv( 'e2m_comment_edit', array ('*note' => $pf,'comment-number' => $wv) ); $tj['removed-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv, 'flag' => 'IsVisible','value' => !$m6['IsVisible'] ) ); $tj['removed-reply-toggle-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => !$m6['IsVisible'] ) ); $tj['removed-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 0 ) ); $tj['removed-reply-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 0 ) ); $tj['replaced-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv, 'flag' => 'IsVisible','value' => 1 ) ); $tj['replaced-reply-href']=jv( 'e2m_comment_flag_ajax', array ( '*note' => $pf,'comment-number' => $wv, 'flag' => 'IsReplyVisible','value' => 1 ) ); $u8=jv( 'e2m_comment_reply', array ('*note' => $pf,'comment-number' => $wv) ); if ($m6['Reply']=='' or !$m6['IsReplyVisible']) { $tj['reply-href']=$u8; } else { $tj['edit-reply-href']=$u8; } } } if(mb_strlen($m6['Text']) > $_config['max_comment_length']) { $m6['Text']=mb_substr($m6['Text'],0,$_config['max_comment_length']); } $i8=$pf['FormatterID']==='raw'?'neasden':$pf['FormatterID']; $d1=w3($i8,$m6['Text'],'simple'); $tj['text']=$d1['text-final']; $tj['reply']=''; $tj['replying?'] = (bool)false; $tj['replied?'] = (bool) ( (trim($m6['Reply']) != '') && ($m6['IsReplyVisible']) ); if ((string)$m6['Reply']!==''){ $d1=w3($pf['FormatterID'],$m6['Reply'],'full'); $tj['reply']=$d1['text-final']; } if(Log::$p3)__log('Comments: done'); return $tj; } function uf($as_){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $as_ ."'" ); $ib=en(); if(count($ib) > 0){ return $ib[0]; } else { return false; } } function if_($ht){ e2_comment_set_flag('IsVisible',$ht); } function of($o8){ e2_comment_set_flag('IsReplyVisible',$o8); } function pf($gq){ global$_strings,$_config,$settings; $p8=@$_COOKIE[b('commenter_name')]; $cg=@$_COOKIE[b('commenter_email')]; $vg=@$_COOKIE[b('commenter_ph')]; $bg=false; if ($cg and $vg){ foreach (m2($gq) as $e8){ $y8=md5($e8['ID'].$e8['Stamp'] .'x'); if ( $e8['AuthorEmail']==$cg and $vg==$y8 ){ $bg=true; break; } } } $vr=$_strings['fb--submit']; $rh=kf(); $uh=array ( '.note-id' => $gq['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool)$bg, 'cookie-name' => ef($gq['ID']), 'cookie-value' => rf(), 'email-field-name' => zf(), 'nospam-field-name-part-1' => substr($rh,0,4), 'nospam-field-name-part-2' => substr($rh,4), 'create:edit?' => true, 'form-action' => jv('e2s_comment_process'), 'submit-text' => $vr, 'show-subscribe?' => (bool) !$bg, 'emailing-possible?' => MAIL_ENABLED, 'subscribe?' => (bool)$bg, 'subscription-status' => $bg? $_strings['gs--you-are-already-subscribed']:'', 'name' => htmlspecialchars($p8,ENT_COMPAT,HSC_ENC), 'email' => htmlspecialchars($cg,ENT_COMPAT,HSC_ENC), 'text' => htmlspecialchars($m6['Text'],ENT_COMPAT,HSC_ENC), 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => array (), ); $yg=false; $ng=''; foreach(e2_list_gips() as $mg){ if (!is_file(SYSTEM_FOLDER .'gips/'. $mg .'.json')) { continue; } $fg=e2_is_logged_in($mg); $uh['gips'][$mg] = ( e2_get_gip_auth_url($mg) ); if ($fg){ $yg=true; $dg=e2_get_gip_session($mg); $ng=$dg['GIP']; $uh['name']=htmlspecialchars( $dg['AuthorName'],ENT_COMPAT,HSC_ENC ); } } if (!$uh['email-comments-enabled?'] and !count($uh['gips'])) { return false; } $uh['email-comments-only?'] = (count($uh['gips']) === 0); $uh['logged-in?']=$yg; $uh['logged-in-gip']=$ng; $uh['logout-url']=$yg?jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $uh; } function c2($s6){ return b2($s6,'`IsNew` = 1'); } function v2($s6){ return b2($s6,'`IsVisible` = 1'); } function b2($s6,$b){ global$_config; if (!is_numeric($s6)) return 0; $sg=0; xn( "SELECT count(*) ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". $s6 ." ". "AND (". $b. ")", 'count comments' ); $m1=en(); $m1=(int)$m1[0]['count(*)']; $sg=$m1; return (int)$sg; } function y2(){ global$_config; if(Log::$p3)__log('Count new comments'); $ag=0; $qg=''; $lq=''; try { xn( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsNew`=1 ORDER BY `Stamp`", 'count new comments for author menu' ); $m1=en(); $ag=count($m1); if ($ag){ $s6=$m1[0]['NoteID']; $lq=jv( 'e2m_note', array ('*note' => nm($s6)) ); } } catch (AeMySQLException $e){ kv($e); if(Log::$p3)__log('Could not count new comments or provide link to the latest one'); } return array ((int)$ag,$qg,$lq); } function n2($s6){ global$_config; if(Log::$p3)__log('Comments: getting comments for note '. $s6); xn( "SELECT * FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$s6." ". "ORDER BY `Stamp`", 'get comments including deleted' ); $m1=en(); return $m1; } function m2($pf,$lg=''){ global$_config; $c8="ORDER BY `ID` DESC"; $d=$zg=[]; xn( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `IsVisible`, ". "`AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `NoteID`=". @$pf['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `IsVisible`=1 ". "AND `AuthorEmail`!='". rn($lg) ."' ". $c8, 'get subscribers by note' ); $m1=en(); foreach ($m1 as $e8){ if (!in_array($e8['AuthorEmail'],$zg)) { $d[] = $e8; } $zg[] = $e8['AuthorEmail']; } return $d; } function f2($pf,$wr=NOTE_COMMENTABLE_NOW){ global$settings,$_config; $kg=true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($pf['Stamp'] < time()-$_config['comment_freshness_days']*SECONDS_IN_A_DAY) $kg=false; $xg=$pf['IsCommentable']; if ($wr==NOTE_COMMENTABLE_NOW_CONDITIONALLY){ $xg=true; } return ( em($pf)==='public' and $kg and $xg ); } function e2_commentrec_with_parameters_($parameters=array ()) { $pf=$parameters['*note']; $b6=n2($pf['ID']); $n6=@$b6[$parameters['comment-number']-1]; if ($n6){ $n6['noterec']=$pf; return $n6; } } function s2($yt=''){ global$settings,$ph,$_config,$_fp_error; $_fp_error=false; $eh=zf(); $s6=$hh=$name=$l3=$tv=''; if(array_key_exists('note-id',$_POST)) $s6=trim(@$_POST['note-id']); if(array_key_exists('comment-id',$_POST)) $hh=trim(@$_POST['comment-id']); if(array_key_exists('comment-number',$_POST)) $wv=trim(@$_POST['comment-number']); if(array_key_exists('name',$_POST)) $name=trim(@$_POST['name']); if(array_key_exists($eh,$_POST)) $l3=trim(@$_POST[$eh]); if(array_key_exists('text',$_POST)) $tv=trim(@$_POST['text']); $eg=cn('Comments'); if(stripos($eg['Collation'],'utf8mb4')!==0){ $name=nb($name); $tv=nb($tv); } if ($hh=='new'){ $rg=e2_get_logged_gip_name(); if ($rg){ $dg=e2_get_gip_session($rg); $name=trim($dg['AuthorName']); $l3=''; $tg=$dg['GIPAuthorID']; } } else { if(array_key_exists('gip',$_POST))$rg=trim(@$_POST['gip']); } $jg=( (array_key_exists('already-subscribed',$_POST) and $_POST['already-subscribed']) or (array_key_exists('subscribe',$_POST) and $_POST['subscribe']) ); $hg=time(); $n8['text']=$tv; if ($hh=='new' and !$rg){ y('commenter_name',$name); y('commenter_email',$l3); } $gg=($hh=='new' and ( tf() or e2_cookie_data_is_spam_suspicios_for_note_id_($s6) )); $wg=1; $m1=false; if (!is_numeric($s6)) { $_fp_error=FP_NO_ID_OR_NEW; } elseif (!is_numeric($hh) and !($hh=='new')) { $_fp_error=FP_NO_ID_OR_NEW; } else { if ( $tv=='' or ( !$rg and ($name=='' or $l3=='') ) ) { $_fp_error=FP_EMPTY_FIELD; } if ($hh=='new'){ $ug=@unserialize(file_get_contents(USER_FOLDER. '/last-comment.psa')); if(md5($name.$l3.$tv)==$ug['md5']) { $_fp_error=FP_COMMENT_DOUBLE_POST; } if ( isset ($_config['max_comment_length']) and strlen(@$_POST['text']) > ($_config['max_comment_length']) ){ $_fp_error=FP_COMMENT_TOO_LONG; } $pf=nm($s6); if ($hh=='new' and !f2($pf)) { $_fp_error=FP_NOT_COMMENTABLE; } if ($gg){ $_fp_error=FP_COMMENT_SPAM_SUSPECT; } } } if (!$_fp_error){ e2_drop_caches_for_note_($s6,true); if ($hh=='new'){ $n6=array ( 'NoteID' => (int)$s6, 'AuthorName' => $name, 'AuthorEmail' => $l3, 'Text' => $tv, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int)$jg, 'IsSpamSuspect' => (int)$gg, 'IsNew' => (int)$wg, 'Stamp' => (int)time(), 'LastModified' => (int)time(), 'IP' => rn(z2()), 'IsGIPUsed' => intval(!empty ($rg) && !empty ($tg)), 'GIP' => !empty ($rg)?rn($rg):'', 'GIPAuthorID' => !empty ($tg)?rn($tg):'', ); $n6=bn('Comments',$n6); $hh=$n6['ID']; $ug=array ( 'id' => $hh, 'md5' => md5($name.$l3.$tv), ); @n3(USER_FOLDER. 'last-comment.psa',serialize($ug)); $m1=(int)$hh; $ig=md5($n6['ID'].$n6['Stamp'].'x'); y('commenter_ph',$ig); $pf=nm($s6); $re=jv('e2m_note', array ('*note' => $pf)); $tj['comment-time'] = array ($hg,sy()); $tj['commenter']=$name; $tj['commenter-email']=$l3; $tj['comment-text']=$tv; $tj['note-title']=$pf['Title']; $tj['note-href']=$re; $tj['comment-href']=$re; $tj['comments-disable-href']=jv('e2m_note_flag', array ( '*note' => $pf, 'flag' => 'IsCommentable', 'value' => 0 )); $tj['reply-href']=jv( 'e2m_comment_reply', array ( '*note' => $pf, 'comment-number' => $wv ) ); if (isset ($settings['author_email']) and @$settings['notifications']['new_comments']) { $l8=d1( 'comment-new-to-author',$tj ); $z8=e2l_get_string( 'em--comment-new-to-author-subject', $tj ); $k8=$settings['author_email']; $x8 = 'From: '. s1() ."\r\n". 'Reply-to: '. $name .' <'. $l3 .">"; a1($k8,$z8,$l8,$x8); } if (!$gg){ unset ($tj['commenter-email']); $x8='From: '. s1(); foreach (m2($pf,$l3) as $e8){ $r8=$e8['AuthorEmail']; $t8=md5($e8['ID'].$e8['Stamp'].'x'); $tj['unsubscribe-href']=jv('e2m_unsubscribe', array ( '*note' => $pf, 'unsubscribe-email' => $r8, 'unsubscribe-key' => $t8 ) ); $k8=$r8; $l8=d1('comment-new-to-public',$tj); $z8=e2l_get_string( 'em--comment-new-to-public-subject', $tj ); a1($k8,$z8,$l8,$x8); } } } else { $og=array ( 'ID' => $hh, 'Text' => $tv, 'IsSubscriber' => ((int)$jg), 'LastModified' => time(), ); if (!empty ($name))$og['AuthorName']=$name; if (!empty ($l3))$og['AuthorEmail']=$l3; yn('Comments',$og); $m1=(int)$hh; } } if ($yt=='ajaxresult') return $kt; else return array ((int)$s6,$m1,$n8); } function e2m_most_commented($parameters=[]) { global$settings,$_strings,$_config; $xe=e2_(); $mostCommentedView=new AePageableNotesView('e2m_most_commented',$parameters); $mostCommentedView -> setPortionSize($settings['appearance']['notes_per_page']); $mostCommentedView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $mostCommentedView -> setWantNewCommentsCount($xe); $mostCommentedView -> setWantReadHrefs($_config['count_reads']); $mostCommentedView -> setWantControls($xe and !@$_config['read_only']); $pg=@$_GET['period']; if ($pg=='')$pg=$_config['hot_period']; $cw=time()-a2($pg); $mostCommentedView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix'] ."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm($xe). "AND `ID` IN ( ". "SELECT `NoteID` FROM ( ". "SELECT `NoteID`, COUNT(*) CommentsCount ". "FROM `". $_config['db_table_prefix']."Comments` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsVisible` = 1 ". "AND `Stamp` > ". $cw." ". "GROUP BY `NoteID` ". "ORDER BY CommentsCount DESC ". ") As MostCommentedNotesIDs ". ")" ); $d=[ 'title' => e2l_get_string('pt--most-commented', ['period' => $pg]), 'heading' => e2l_get_string('pt--most-commented', ['period' => $pg]), 'notes' => $mostCommentedView -> getNotesCTree(), 'pages' => $mostCommentedView -> getPagesCTree(), ]; if($mostCommentedView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-such-notes']; } elseif (!$mostCommentedView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function e2m_favourites($parameters=[]) { global$settings,$_config,$_strings; $xe=e2_(); $favouritesView=new AePageableNotesView('e2m_favourites',$parameters); $favouritesView -> setPortionSize($settings['appearance']['notes_per_page']); $favouritesView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $favouritesView -> setWantNewCommentsCount($xe); $favouritesView -> setWantReadHrefs($_config['count_reads']); $favouritesView -> setWantControls($xe and !@$_config['read_only']); $favouritesView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `IsFavourite`=1 ". rm($xe). "ORDER BY `Stamp` DESC" ); $d=[ 'title' => $_strings['pt--favourites'], 'heading' => $_strings['pt--favourites'], 'notes' => $favouritesView -> getNotesCTree(), 'pages' => $favouritesView -> getPagesCTree(), ]; if($favouritesView -> isFirstPageOfEmptyView()) { $d['nothing']=$_strings['gs--no-favourites']; } elseif (!$favouritesView -> isExistingPage()) { return e2_error404_mode(); } return $d; } function a2($pg){ if ('year'==$pg) return SECONDS_IN_A_YEAR; elseif ('month'==$pg) return SECONDS_IN_A_MONTH; elseif ('week'==$pg) return SECONDS_IN_A_DAY*7; elseif ('day'==$pg) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function q2($qj=false){ global$_config,$_current_url; $cw=time()-a2($_config['popular_period']); $vw=$bw=''; if(E2_EDITION){ if ($qj!==false){ $vw="JOIN `". $_config['db_table_prefix'] ."NotesKeywords` nk ON nk.`NoteID` = n.`ID` "; $bw=( "AND nk.`SubsetID` = ". $_config['db_table_subset'] ." ". "AND nk.`KeywordID` = ". $qj ." " ); } } $mostReadNotesCollectionView=new AeArbitraryNotesCollectionView('most read or most read by tag'); $mostReadNotesCollectionView -> setCurrentURL($_current_url); $mostReadNotesCollectionView -> setSQLRequest( "SELECT n.*, a.`EntityID`, SUM(a.`ReadCount`) ReadCount ". "FROM `". $_config['db_table_prefix']."Actions` a, ". "`". $_config['db_table_prefix']."Notes` n ". $vw. "WHERE a.`SubsetID`=". $_config['db_table_subset'] ." ". "AND n.`SubsetID`=". $_config['db_table_subset'] ." ". $bw. "AND a.`Stamp` > ". $cw ." ". "AND n.`IsPublished` = 1 ". "AND n.`IsFavourite` = 1 ". rm(e2_()). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, ReadCount DESC ". "LIMIT 10" ); if ($qj===false){ if(CACHE_POPULAR){ $mostReadNotesCollectionView -> setViewExpiration(SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename(CACHE_FILENAME_POPULAR); $mostReadNotesCollectionView -> setCacheExpiresFilename(CACHE_FILENAME_POPULAR_EXPIRES); } } else { if(CACHE_POPULAR_WITH_TAG){ $mostReadNotesCollectionView -> setViewExpiration(SECONDS_IN_A_DAY); $mostReadNotesCollectionView -> setCacheFilename(e2_cache_filename_with_id_($qj,CACHE_FILENAMES_POPULAR_WITH_TAG)); $mostReadNotesCollectionView -> setCacheExpiresFilename( e2_cache_filename_with_id_($qj,CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES) ); } } return$mostReadNotesCollectionView -> getNotesCTree(); } function l2($qj=false){ global$_strings; $yw=[ 'title' => $_strings['nm--most-read'], ]; $yw['each']=q2($qj); $yw['seed']=$qj; if(count($yw['each']) < 7) unset ($yw['each']); return $yw; } function e2m_password_reset(){ global$_strings,$_superconfig,$settings; if (!is_file(USER_FOLDER. 'password-reset.psa')) { $lm=sha1(rand()); $ym=jv('e2m_password', array ('recovery-key' => $lm)); @n3(USER_FOLDER. 'password-reset.psa',$ym); } $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; $nw=(bool) ($k8=$settings['author_email']); $d['form']='form-password-reset-email'; $d['form-password-reset-email'] = array ( 'form-action' => jv('e2s_password_reset_email'), 'show-controls?' => $nw, 'submit-text' => $_strings['fb--send-link-by-email'], ); if (!@$_superconfig['user_has_no_access_to_files']) { $d['form-password-reset-email']['reset-info']=$_strings['gs--password-reset-link-saved']; } elseif (!$nw){ mv($_strings['er--cannot-reset-password']); } return $d; } function e2s_password_reset_email(){ global$_strings,$settings; if($_SERVER['REQUEST_METHOD']!='POST')c(); if(array_key_exists('email',$_POST))$l3=trim($_POST['email']); if (!$l3){ mv($_strings['er--cannot-send-link-email-empty']); c(jv('e2m_password_reset')); } $mw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($mw)==0){ mv($_strings['er--error-occurred']); c(jv('e2m_password_reset')); } if ($k8=$settings['author_email']) { if ($l3==$k8){ $l8=d1( 'password-reset', array ('reset-href' => $mw) ); $z8=$_strings['em--password-reset-subject']; $x8='From: '. s1(); a1($k8,$z8,$l8,$x8); } mv($_strings['gs--password-reset-link-sent-maybe'],E2E_MESSAGE); c(jv('e2m_password_reset')); } die; } function e2m_password($parameters){ global$settings,$_strings; $fw=false; $lm=''; if(array_key_exists('recovery-key',$parameters)) { $lm=$parameters['recovery-key']; $ym=jv('e2m_password', array ('recovery-key' => $lm)); $mw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($mw) > 0){ $fw=($ym==$mw); } } if (e2_() or $fw){ $d['title']=$_strings['pt--password']; $d['heading']=$_strings['pt--password-for-blog']; if ($fw){ $d['title']=$_strings['pt--password-reset']; $d['heading']=$_strings['pt--password-reset']; } $d['form']='form-password'; $d['form-password'] = array ( 'form-action' => jv('e2s_password_save'), '.recovery-key' => $lm, 'recovering?' => $fw, 'submit-text' => $_strings['fb--change'], ); return $d; } else { c(); } } function e2m_sessions(){ global$settings,$_strings; $pz=r2(); $d['title']=$_strings['pt--sessions']; $d['heading']=$_strings['pt--sessions']; $dw=array(); $lm=$_COOKIE[b('key')]; foreach ($pz['sessions'] as $t => $af){ $dw[] = array ( 'current?' => sha1($lm)===$af['key_hash'], 'opened' => array ((int)$af['stamp'],dy()), 'ip-address' => $af['remote_ip'], 'source' => ($af['remote_ip']=='127.0.0.1')? $_strings['gs--locally']:$af['remote_ip'], 'title' => g2($af['ua']), 'user-agent' => $af['ua']? $af['ua']:$_strings['gs--unknown'], ); } $dw=array_reverse($dw); $d['sessions']['each']=$dw; if(count($dw) > 1){ $d['form']='form-sessions'; $d['form-sessions'] = array ( 'form-action' => jv('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $d; } function e2m_sign_in(){ if (e2_()) { c(jv('e2m_frontpage', array ('page' => 1))); } else { return array (); } } function e2m_sign_out(){ global$_strings; $pz=r2(); $sw=-1; if(array_key_exists('sessions',$pz) and is_array($pz['sessions'])) { foreach ($pz['sessions'] as $t => $af){ $lm=$_COOKIE[b('key')]; if(sha1($lm)===$af['key_hash']) { $sw=$t; break; } } } if ($sw > -1) unset ($pz['sessions'][$sw]); if (!t2($pz)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } y('key',''); c(); } function e2s_password_save(){ global$settings,$_strings; $fw=false; $aw=trim($_POST['old-password']); if ($lm=trim($_POST['recovery-key'])) { $ym=jv('e2m_password', array ('recovery-key' => $lm)); $mw=@file_get_contents(USER_FOLDER. 'password-reset.psa'); if(strlen($mw) > 0){ $fw=($ym==$mw); } } if (k2($aw) or $fw){ $oz=trim($_POST['new-password']); if ($oz!=''){ if (@n3(USER_FOLDER. '/password-hash.psa',serialize(sha1($oz)))) { @unlink(USER_FOLDER. 'password-reset.psa'); mv($_strings['gs--password-changed'],E2E_MESSAGE); c(); } else { mv($_strings['er--could-not-change-password'],E2E_PERMISSIONS_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } } else { mv($_strings['er--no-password-entered'],E2E_USER_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } } else { mv($_strings['er--wrong-password'],E2E_USER_ERROR); c(jv('e2m_password', array ('recovery-key' => ''))); } die; } function z2(){ $gv=$_SERVER['REMOTE_ADDR']; if(array_key_exists('HTTP_X_FORWARDED_FOR',$_SERVER)) { $gv=array_pop(explode(',',$_SERVER['HTTP_X_FORWARDED_FOR'])); } return $gv; } function e2s_sign_in(){ global$_strings; $pz=r2(); if($_SERVER['REQUEST_METHOD']=='POST'){ $u4=@$_POST['password']; $qw=@$_POST['is_public_pc']; } else { $u4=@$_GET['password']; $qw=false; } if (k2($u4)) { @unlink(USER_FOLDER. 'password-reset.psa'); $lw=array ( 'stamp' => time(), 'remote_ip' => z2(), 'key_hash' => x2($qw), 'ua' => $_SERVER['HTTP_USER_AGENT'], ); $pz['sessions'][] = $lw; } elseif(strlen(trim($u4)) > 0){ u2(); mv($_strings['er--wrong-password'],E2E_USER_ERROR); } if (!t2($pz)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); c(); } v(); } function e2s_drop_other_sessions(){ global$_strings; $pz=r2(); foreach ($pz['sessions'] as $t => $af){ $lm=$_COOKIE[b('key')]; if(sha1($lm)===$af['key_hash']) { $lw=$af; break; } } $pz['sessions'] = array ($lw); if (!t2($pz)) { mv($_strings['er--cannot-write-auth-data'],E2E_PERMISSIONS_ERROR); } v(); die; } function k2($u4){ $zw=@unserialize(file_get_contents(USER_FOLDER. '/password-hash.psa')); return (sha1($u4)===$zw and trim($u4)!=''); } function x2($kw=false){ global$settings; $lm=w2(); $xw=sha1($lm); y('key',$lm, !$kw); return $xw; } function e2_(){ global $py,$settings,$_auth_sessions; if (isset ($py)) return $py; $py=false; if (isset ($_COOKIE[b('key')])) { $lm=$_COOKIE[b('key')]; $pz=r2(); $ew=array(); if(array_key_exists('sessions',$pz) and is_array($pz['sessions'])) { foreach ($pz['sessions'] as $lw){ $ew[] = $lw['key_hash']; } $_auth_sessions['count']=count($pz['sessions']); } if(1){ $py=(bool)in_array(sha1($lm),$ew,true); } if (!$py){ y('key',''); } } return $py; } function r2(){ if(is_file(USER_FOLDER.'auth.psa')) { $pz=unserialize(@file_get_contents(USER_FOLDER.'auth.psa')); if ($pz) return $pz; } return array (); } function t2($pz){ return n3(USER_FOLDER.'auth.psa',serialize($pz)); } function j2(){ if ($lm=$_COOKIE[b('key')]) { return b('key') .'='. $lm .""; } } function h2(){ if ($lm=$_COOKIE[b('key')]) { return 'Cookie: '. b('key') .'='. $lm ."\r\n"; } return "\r\n"; } function g2($xv){ global$_strings; if(strstr($xv,'iPhone')) return$_strings['gs--ua-iphone']; if(strstr($xv,'iPad')) return$_strings['gs--ua-ipad']; if(strstr($xv,'Opera'))$d=$_strings['gs--ua-opera']; if(strstr($xv,'Firefox'))$d=$_strings['gs--ua-firefox']; if(strstr($xv,'Chrome'))$d=$_strings['gs--ua-chrome']; if(strstr($xv,'Safari') and !strstr($xv,'Chrome'))$d=$_strings['gs--ua-safari']; if (!$d)$d=$_strings['gs--ua-unknown']; if(strstr($xv,'Macintosh')) { if ($d)$d.=' '. $_strings['gs--ua-for-mac']; } return $d; } function e2j_check_password(){ $zw=@unserialize(file_get_contents(USER_FOLDER. '/password-hash.psa')); $u4=''; if(array_key_exists('password',$_POST))$u4=$_POST['password']; u2(); $zv=[ 'success' => true, 'data' => [ 'password-correct' => trim($u4)!=='' and sha1($u4)===$zw ], ]; $zv=json_encode($zv); die ($zv); } function w2(){ $rw=''; $tw='0123456789abcdef'; for ($r=0; $r < 40; $r++)$rw.=$tw[mt_rand(0,15)]; $rw.=time(); $rw=sha1($rw); return $rw; } function u2(){ if(is_file(USER_FOLDER. 'password-wait.psa')) { $jw=unserialize( file_get_contents(USER_FOLDER. '/password-wait.psa') ); if ($jw['delay'] < 5){ $jw['delay'] ++; } if(time()-$jw['time'] > SECONDS_IN_A_MINUTE){ $jw['delay']=0; } $jw['time']=time(); } else { $jw=array ( 'time' => time(), 'delay' => 5, ); } n3(USER_FOLDER.'password-wait.psa',serialize($jw)); sleep($jw['delay']); } function i2(){ static $hw; if(empty($hw))$hw=md5('seсret'); return $hw; } function o2($x){ $lm=i2(); $gw=strlen($lm); $ww=strlen($x); $d=''; for ($r=0; $r < $ww+rand(16,64); ++ $r){ if ($r > $ww){ $uw=rand(0,127); } elseif ($r==$ww){ $uw=0; } else { $uw=ord($x[$r]); } $iw=chr(($uw+ord($lm[$r%$gw])) % 256); $d.=$iw; } $d=base64_encode($d); return $d; } function p2($x){ $lm=i2(); $gw=strlen($lm); $x=base64_decode($x); $ww=strlen($x); $d=''; for ($r=0; $r < $ww; ++ $r){ $ow=(ord($x[$r]) + 256-ord($lm[$r%$gw])) % 256; if ($ow===0) break; $d.=chr($ow); } return $d; } function cd(){ global$settings; if (e2_()) { return null; } else { return [ 'form-action' => jv('e2s_sign_in'), 'form-check-password-action' => jv('e2j_check_password'), 'login-name' => @$settings['author'], 'public-pc?' => false, 'reset-href' => jv('e2m_password_reset'), ]; } } $_candies_installer=array ( 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', 'e2s_update_perform', ); $_candies_public=array ( 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_tags', 'e2m_tag', 'e2m_untagged', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_sitemap_xml', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_notify', 'e2s_dump', ); $_candies_to_disallow_in_read_only=array ( 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2m_note_flag_favourite', 'e2m_note_flag', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2m_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ); $_candies_public=array_merge($_candies_public,$_candies_installer); $_candies_indexable=array ( 'e2m_note', ); $_candies_indexable_conditionally=array ( 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ); $_candies_ajax=array ( 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_userpic_remove', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2m_note_flag_favourite', 'e2m_comment_flag_ajax', 'e2m_tag_flag_ajax', ); function vd(){ global$settings,$_lang,$_config,$_strings,$c; if(Log::$p3)__log('Blog information'); $pw['author']=htmlspecialchars(yd(),ENT_NOQUOTES,HSC_ENC); if(array_key_exists('blog_subtitle',$settings)) { $d1=u3($settings['blog_subtitle'],'full'); $d3=$d1['text-final']; $pw['subtitle']=$d3; $pw['subtitle-format-info']=$d1['meta']; ya(@$d1['meta']['links-required']); } $pw['title']=htmlspecialchars(bd(),ENT_NOQUOTES,HSC_ENC); $pw['userpic-set?']=false; $pw['userpic-changeable?']=e2_(); if ($pw['userpic-href']=nd()) { $pw['userpic-set?']=true; $pw['userpic-large-href']=nd('large'); $pw['userpic-square-href']=nd('square'); $pw['userpic-changeable-href']=$pw['userpic-href']; } else { unset ($pw['userpic-href']); } if (e2_()) { $pw['userpic-upload-action']=jv('e2j_userpic_upload'); $pw['userpic-remove-action']=jv('e2j_userpic_remove'); } $pw['href']=jv('e2m_frontpage', array ('page' => 1)); $pw['rss-href']=jv('e2m_rss'); $pw['jsonfeed-href']=jv('e2m_json'); $pw['language']=$_lang; $pw['show-subscribe-button?']=false; if(E2_EDITION){ $pw['show-subscribe-button?']=true; } $rb=array (time(),sy()); $cu=ky('Y',$rb[0]); $pw['now']=$rb; $vu=$cu; $bu=ns('start'); if(array_key_exists('stamp',$bu)) { $vu=ky('Y',$bu['stamp']); $pw['start-time'] = array ((int)$bu['stamp'],$bu['timezone']); } $yu=false; $nu=km(true,true); if ($nu!==null){ if (e2_()) { $mu=km(true,false); if ($mu!==null){ $yu=($nu+$mu==0); } } else { $yu=($nu==0); } } $pw['notes-count'] = (int)$nu; $pw['virgin?']=$yu; $fu=$_config['years_range_separator']? $_config['years_range_separator']:$_strings['gs--range-separator']; $pw['years-range']=$vu . (($vu==$cu)? '':($fu.$cu)); if ($c){ $pw['parent-site-href']=substr($c, (int)strpos('/',$c)); } return $pw; } function bd(){ global$settings,$_strings; if ( array_key_exists('blog_title',$settings) and trim($settings['blog_title']) != '' ){ return trim($settings['blog_title']); } else { return$_strings['e2--default-blog-title']; } } function yd(){ global$settings,$_strings; if ( array_key_exists('author',$settings) and trim($settings['author']) != '' ){ return trim($settings['author']); } else { return$_strings['e2--default-blog-author']; } } function nd($size=''){ global$full_blog_url; if (!is_file($fb=USER_FOLDER .'userpic@2x.png')) { if (!is_file($fb=USER_FOLDER .'userpic@2x.jpg')) { return false; } } if($size=='large' and is_file(USER_FOLDER .'userpic-large@2x.jpg')) { $fb=USER_FOLDER .'userpic-large@2x.jpg'; } if($size=='square' and is_file(USER_FOLDER .'userpic-square@2x.jpg')) { $fb=USER_FOLDER .'userpic-square@2x.jpg'; } $ly=stat($fb); if ($ly['mtime']) { $fb.='?'. $ly['mtime']; } $du=$full_blog_url .'/'. $fb; return $du; } function md(){ global$_config,$_stopwatch,$i4; $su=round(w()-$_stopwatch,3); return [ 'show?' => ($_config['display_stat'] > (int) !e2_()), 'generation-time' => str_replace('.',',',$su), 'peak-memory-mb' => str_replace('.',',',round((memory_get_peak_usage()/1024/1024)*100)/100), 'db-query-count' => (int) @$i4, ]; } function e2m_info(){ global$settings,$_config,$v,$c,$_template; $hv=array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (mn()!==null), 'server_name' => $v, 'folder_on_server' => $c, '---', 'default formatter' => $_config['default_formatter'], '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba max_image_width' => $_template['max_image_width'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr(md5(file_get_contents('system/neasden/neasden.php')), 0,4), '---', ); echo '<pre>'; foreach ($hv as $t => $af){ if ($af=='---'){ echo "\n"; continue; } echo str_pad($t,24); echo '\''; print_r($af); echo '\''; echo "\n"; } echo '</pre>'; die; } function e2s_notify(){ global$_config; if($_config['holborn']) { $au=@$_GET['src']; if ($au==''){ if(Log::$p3)__log('Holborn: No src URL'); die; } $qu=file_get_contents($au); $qu=ad($qu); $lu=json_decode($qu,true); if (!$lu){ if(Log::$p3)__log('Holborn: No meaningful info from '. $au .' ('. json_last_error() .')'); if ($zu=dd($au)) { if(Log::$p3)__log('Holborn: Delete note with ID '. $zu['ID']); ym($zu['ID']); } die; } fd($lu,$au); } die; } function e2m_sources($parameters){ global$_config; $ku=$_GET['ord']; if (!$ku)$ku='ID'; $ku="`". rn($ku) ."`"; xn( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix']."Sources` " . "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "ORDER BY ". $ku ); $m1=en(); foreach ($m1 as $in){ $xu=$in['ID']; if ($in['ID']!=$in['TrueID'])$xu.='<br />'. $in['TrueID']; $h7=array ( 'id' => $xu, 'userpic-href' => $in['PictureURL'], 'href' => $in['URL'], 'href-display' => str_replace('/','/<wbr>',$in['URL']), 'href-filtered' => str_replace('/','/<wbr>',$in['_URLX']), 'title' => $in['Title'], 'author' => $in['AuthorName'], 'true?' => $in['ID']==$in['TrueID'], 'whitelisted?' => (bool)$in['IsWhiteListed'], 'trusted?' => (bool)$in['IsTrusted'], ); if (!$in['IsTrusted']) { $h7['trust-url']=jv( 'e2m_source_trust', array ('source' => $in['ID']) ); } if ($in['IsTrusted']) { $h7['premoderate-url']=jv( 'e2m_source_premoderate', array ('source' => $in['ID']) ); } $h7['ban-url']=jv( 'e2m_source_ban', array ('source' => $in['ID']) ); $h7['forget-url']=jv( 'e2m_source_forget', array ('source' => $in['ID']) ); $eu[] = $h7; } $d=array ( 'title' => 'Sources', 'heading' => 'Sources', ); if(count($eu)) { $d['sources']=$eu; } else { $d['nothing']='No sources'; } return $d; } function e2m_source_trust($parameters){ global$_config; $ru=$parameters['source']; xn( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ru, 'trust source' ); xn( "UPDATE  ". $_config['db_table_prefix']."Notes ". "SET `IsPublished`=1 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ru, 'publish all notes from the just trusted source' ); qa(); as_(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function e2m_source_premoderate($parameters){ global$_config; $ru=$parameters['source']; xn( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ru, 'distrust source, set to premoderation' ); as_(); c(); } function e2m_source_ban($parameters){ global$_config; $ru=$parameters['source']; xn( "UPDATE  ". $_config['db_table_prefix']."Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ru, 'ban source' ); xn( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ru, 'delete all notes from the just banned source' ); as_(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function e2m_source_forget($parameters){ global$_config; $ru=$parameters['source']; xn( "DELETE FROM  ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`=". $ru, 'forget source' ); xn( "DELETE FROM  ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`=". $ru, 'delete all notes from the just forgotten source' ); as_(); @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); c(); } function fd($tu,$au){ global$_config; $ju=qd(array ( 'author' => $tu['author']['name'], 'title' => $tu['title'], 'href' => $tu['author']['url'], 'userpic-href' => $tu['author']['avatar'], )); if (!$ju['IsWhiteListed']) return; if(preg_match('/\+(\d\d)\:(\d\d)/',$tu['items'][0]['date_published'],$y3)) { $oq=$y3[1]*SECONDS_IN_AN_HOUR+$y3[2]*SECONDS_IN_A_MINUTE; } $hu=@$tu['items'][0]['_e2_data'] or $hu=array(); $hu=json_encode($hu); $gu=$ju['IsTrusted']; $pf=array ( 'Title' => $tu['items'][0]['title'], 'Text' => $tu['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime($tu['items'][0]['date_published']), 'Offset' => (int)$oq, 'IsDST' => 0, 'LastModified' => strtotime($tu['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $gu, 'IsExternal' => 1, 'SourceID' => $ju['ID'], 'SourceNoteID' => $tu['items'][0]['id'], 'SourceNoteURL' => $tu['items'][0]['url'], 'SourceNoteJSONURL' => $au, 'SourceNoteData' => $hu, ); $s6=$tu['items'][0]['id']; if ( $zu=sd($ju['ID'],$s6) ) { $pf['ID']=$zu['ID']; yn('Notes',$pf); } else { $pf=bn('Notes',$pf); } if ($gu){ if (za($pf)) { $pf['IsIndexed']='1'; yn('Notes',$pf); } } e2_drop_caches_for_note_($pf['ID'],$gu); if($_config['backup_automatically']) { tn(); } } function dd($au){ global$_config; xn( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceNoteJSONURL`='". $au ."' ". "LIMIT 1", 'get note ID by source JSON URL' ); $m1=en(); return $m1[0]; } function sd($ru,$wu){ global$_config; xn( "SELECT `ID` FROM ". $_config['db_table_prefix']."Notes ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `SourceID`= '". $ru ."' ". "AND `SourceNoteID`= '". $wu ."' ". "LIMIT 1", 'get note ID by source ID and source note ID' ); $m1=en(); return $m1[0]; } function ad($qu){ for ($r=0; $r <= 31; ++$r){ $qu=str_replace(chr($r),'',$qu); } $qu=str_replace(chr(127),'',$qu); if(0===strpos(bin2hex($qu),'efbbbf')) { $qu=substr($qu,3); } return $qu; } function qd($uu){ global$_config; $iu=false; xn( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `URL`= '". $uu['href'] ."' ". "LIMIT 1", 'get source record by the URL from blog info' ); $m1=en(); if(count($m1)) { $iu=$m1[0]; if ($iu['ID']!=$iu['TrueID']) { xn( "SELECT * FROM ". $_config['db_table_prefix']."Sources ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID`= '". $iu['TrueID'] ."' ". "LIMIT 1", 'get true source record by using the TrueID of just found record' ); $m1=en(); if(count($m1)) { $iu=$m1[0]; } } } $ju=array ( 'Title' => $uu['title'], 'AuthorName' => $uu['author'], 'PictureURL' => $uu['userpic-href'], ); if ($iu!==false){ if ( $iu['Title']!==$uu['title'] or $iu['AuthorName']!==$uu['author'] or $iu['PictureURL']!==$uu['userpic-href'] ) { $ju['ID']=$iu['ID']; yn('Sources',$ju); } return $iu; } else { $ju['URL']=$uu['href']; $ju['IsWhiteListed']=1; $ju['IsTrusted']=0; $ju=bn('Sources',$ju); $ju['TrueID']=$ju['ID']; yn('Sources',$ju); return $ju; } } function ld($pf){ global$_config; $tj=array(); if (@$pf['IsExternal']) { if(array_key_exists('SourceID',$pf)) { xn( "SELECT * FROM `". $_config['db_table_prefix']."Sources` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `ID` = '". $pf['SourceID'] ."'", 'get source by id' ); $ib=en(); $tj['source']=$ib[0]['Title']; $tj['source-id'] = (int)$pf['SourceID']; $tj['source-true-id'] = (int)$ib[0]['TrueID']; $tj['source-whitelisted?'] = (bool)$ib[0]['IsWhiteListed']; $tj['source-trusted?'] = (bool)$ib[0]['IsTrusted']; if (!$ib[0]['IsTrusted']) { $tj['source-trust-url']=jv( 'e2m_source_trust', array ('source' => $pf['SourceID']) ); } if ($ib[0]['IsTrusted']) { $tj['source-premoderate-url']=jv( 'e2m_source_premoderate', array ('source' => $pf['SourceID']) ); } $tj['source-ban-url']=jv( 'e2m_source_ban', array ('source' => $pf['SourceID']) ); $tj['source-forget-url']=jv( 'e2m_source_forget', array ('source' => $pf['SourceID']) ); $tj['author']=$ib[0]['AuthorName']; $tj['author-href']=$ib[0]['URL']; $tj['userpic-href']=$ib[0]['PictureURL']; } if(array_key_exists('SourceNoteURL',$pf) and @$pf['SourceNoteURL']!=''){ $tj['href-external']=$pf['SourceNoteURL']; } } return $tj; } function e2m_frontpage($parameters=[]) { global$settings,$_strings,$_config; if(Log::$p3)__log('Frontpage {'); $xe=e2_(); $frontpageView=new AePageableNotesView('e2m_frontpage',$parameters); $frontpageView -> setPortionSize($settings['appearance']['notes_per_page']); $frontpageView -> setNextPrevPageTitles($_strings['gs--earlier'],$_strings['gs--later']); $frontpageView -> setWantNewCommentsCount($xe); $frontpageView -> setWantReadHrefs($_config['count_reads']); $frontpageView -> setWantControls($xe and !@$_config['read_only']); $frontpageView -> setWantRelatedNotes(true); if(CACHE_FRONTPAGE and $frontpageView -> isFirstPage()) { if ($xe){ $frontpageView -> setCacheFilename(CACHE_FILENAME_FRONTPAGE_AUTHOR); } else { $frontpageView -> setCacheFilename(CACHE_FILENAME_FRONTPAGE); } } $frontpageView -> setLimitlessSQLRequest( "SELECT * ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm($xe). "ORDER BY `Stamp` DESC" ); $d=[ 'title' => bd(), 'heading' => '', 'notes' => $frontpageView -> getNotesCTree(), 'pages' => $frontpageView -> getPagesCTree(), 'frontpage?' => $frontpageView -> isFirstPage(), ]; if ( !$frontpageView -> isExistingPage() and !$frontpageView -> isFirstPageOfEmptyView() ) { return e2_error404_mode(); } if(Log::$p3)__log('} // Frontpage'); return $d; } function e2m_json($parameters=array ()) { list ($ou,$hg)=td(); $qu=json_encode($ou,E2_JSON_STYLE); wd($qu,$hg,'json'); } function e2m_rss($parameters=array ()) { list ($ou,$hg)=td(); $pu=e2feeds__rss_using_jsonfeed_array_($ou); wd($pu,$hg,'rss'); } function e2m_tag_json($parameters=array ()) { if(array_key_exists('*tag',$parameters)) { $m2=$parameters['*tag']; } else { return e2_error404_mode(); } list ($ou,$hg)=jd($m2); $qu=json_encode($ou,E2_JSON_STYLE); wd($qu,$hg,'json'); } function e2m_tag_rss($parameters=array ()) { global$settings,$_config,$_strings; if(array_key_exists('*tag',$parameters)) { $m2=$parameters['*tag']; } else { return e2_error404_mode(); } list ($ou,$hg)=jd($m2); $pu=e2feeds__rss_using_jsonfeed_array_($ou); wd($pu,$hg,'rss'); } function e2m_note_json($parameters=array ()) { global$settings,$_current_url; $pf=$parameters['*note']; if ($pf==false) return e2_error404_mode(); $xe=e2_(); if (!( em($pf)==='public' or ($xe and $pf['IsPublished']) )) return e2_error404_mode(); $hg=$pf['Stamp']; $c0=e2_jsonfeed_item_array_from_noterec_($pf); $v0=array ($c0); $ou=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($v0); $ou['title']=bd(); $ou['_rss_description']=rd(); $ou['home_page_url']=jv('e2m_frontpage', array ('page' => 1)); $ou['feed_url']=$_current_url; wd(json_encode($ou,E2_JSON_STYLE),$hg,'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($v0){ global$_lang,$_config,$settings; $d=[ 'version' => 'https://jsonfeed.org/version/1', 'title' => null, '_rss_description' => null, '_rss_language' => $_lang, '_itunes_email' => '', '_itunes_categories_xml' => '', '_itunes_image' => '', '_itunes_explicit' => '', 'home_page_url' => null, 'feed_url' => null, 'icon' => nd(), 'author' => array ( 'name' => yd(), 'url' => jv('e2m_frontpage', array ('page' => 1)), 'avatar' => nd(), ), 'items' => $v0, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ]; if(E2_EDITION){ $d['_itunes_email']=htmlspecialchars(@$settings['author_email'],ENT_NOQUOTES,HSC_ENC); $d['_itunes_categories_xml']=$_config['rss_itunes_categories_xml']; $d['_itunes_image']=nd('square'); $d['_itunes_explicit']=$_config['rss_itunes_explicit']; } return $d; } function e2_jsonfeed_item_array_from_noterec_($pf){ global$settings; $ym=jv('e2m_note', array ('*note' => $pf)); $b0=( ky('Y-m-d\TH:i:s',$pf['Stamp']) . hy($pf['Stamp'],':') ); $y0=( ky('Y-m-d\TH:i:s',$pf['LastModified']) . hy($pf['LastModified'],':') ); $n0=( ky('D, d M Y H:i:s ',$pf['Stamp']) . hy($pf['Stamp']) ); $d1=w3($pf['FormatterID'], @$pf['Text'],'full-rss'); $ox=d3( sb( $d1['meta']['resources-detected'], q3('note',$pf['ID']) ) ); $aq=array ( 'id' => (string)$pf['ID'], 'url' => $ym, 'title' => h3($pf['Title']), 'content_html' => $d1['text-final'], 'date_published' => $b0, 'date_modified' => $y0, ); if ($pf['IsExternal']) { $f0=ld($pf); $aq['url']=$f0['href-external']; $aq['author'] = array ( 'name' => $f0['author'], 'url' => $f0['author-href'], 'avatar' => $f0['userpic-href'], ); } if(count($ox) > 0){ $aq['image']=$ox[0]; } $aq['_date_published_rfc2822']=$n0; if ($pf['Stamp'] < $settings['v3223_rss_permalinks_before_stamp']) { $aq['_rss_guid_is_permalink']='true'; $aq['_rss_guid']=$aq['url']; } else { $aq['_rss_guid_is_permalink']='false'; $aq['_rss_guid'] = (string)$pf['ID']; } if(E2_EDITION){ $aq['_rss_enclosures']=hb( $d1['meta']['resources-detected'] ); } $aq['_e2_data'] = array ( 'is_favourite' => (bool)$pf['IsFavourite'], 'links_required' => $d1['meta']['links-required'], 'og_images' => $ox, ); return $aq; } function xd($d0,$k6,$lq){ global$_newsfeeds; if (!isset ($_newsfeeds))$_newsfeeds=[]; $s0=''; if ($d0=='rss')$s0='application/rss+xml'; if ($d0=='json')$s0='application/json'; $_newsfeeds[] = [ 'type' => $s0, 'title' => htmlspecialchars($k6,ENT_NOQUOTES,HSC_ENC), 'href' => $lq ]; } function ed(){ global$_config; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm(). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get recent public noterecs for RSS or JSONFeed' ); return en(); } function rd(){ global$settings; if (!empty ($settings['meta_description'])) { $a0=strip_tags(h3(htmlspecialchars($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } elseif (!empty ($settings['blog_subtitle'])) { $d1=u3($settings['blog_subtitle'],'full'); $a0=$d1['text-final']; $a0=xm($a0); } else { $a0=bd(); } return $a0; } function td(){ global$settings,$_current_url; $hg=0; $v0=array(); $ou=array(); $gt=CACHE_FILENAME_FRONTPAGE_FEED; if(CACHE_FRONTPAGE_FEED and is_file($gt)) { if(Log::$p3)__log('Feed array (RSS, JSON): cached'); $ou=@unserialize(file_get_contents($gt)); $hg=filemtime($gt); } else { if(Log::$p3)__log('Feed array (RSS, JSON): not cached, will need to build'); $pr=ed(); foreach ($pr as $pf){ $v0[] = e2_jsonfeed_item_array_from_noterec_($pf); $hg=max($hg,$pf['Stamp']); } $ou=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($v0); $ou['title']=bd(); $ou['_rss_description']=rd(); $ou['home_page_url']=jv('e2m_frontpage', array ('page' => 1)); $ou['feed_url']=$_current_url; if(CACHE_FRONTPAGE_FEED)n3($gt,serialize($ou)); } return array ($ou,$hg); } function jd($m2){ global$settings,$_config,$_strings,$_current_url; $hg=0; $v0=array(); xn( "SELECT n.* ". "FROM `". $_config['db_table_prefix']."Notes` n ". "INNER JOIN `". $_config['db_table_prefix']."NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE n.`SubsetID`=". $_config['db_table_subset'] ." ". "AND nk.`SubsetID`=". $_config['db_table_subset'] ." ". "AND (nk.`KeywordID` = ". $m2['ID'] .") ". "AND n.`IsPublished` = 1 ". rm(e2_()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'], 'get tag noterecs for RSS or JSONFeed' ); $pr=en(); foreach ($pr as $pf){ $v0[] = e2_jsonfeed_item_array_from_noterec_($pf); $hg=max($hg,$pf['Stamp']); } if ((string)$m2['Summary']!==''){ $a0=strip_tags(h3(htmlspecialchars($m2['Summary'],ENT_NOQUOTES,HSC_ENC))); } else if ((string)$m2['Description']!==''){ $d1=u3($m2['Description'],'full'); $a0=$d1['text-final']; $a0=xm($a0); } else { $a0=rd(); } $vj=htmlspecialchars($m2['PageTitle'],ENT_COMPAT,HSC_ENC); if ((string)$vj!==''){ $k6=$vj; } else { $k6=( bd() .': '. $_strings['gs--posts-tagged'] .' '. htmlspecialchars($m2['Keyword'],ENT_COMPAT,HSC_ENC) ); } $ou=e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($v0); $ou['title']=$k6; $ou['_rss_description']=$a0; $ou['home_page_url']=jv('e2m_tag', array ('*tag' => $m2)); $ou['feed_url']=$_current_url; if(E2_EDITION){ $ox=d3( sb( $d1['resources-detected'], q3('tag',$m2['ID']) ) ); if(count($ox) > 0){ $ou['_itunes_image']=$ox[0]; } } return array ($ou,$hg); } function e2feeds__rss_using_jsonfeed_array_($content){ $q0=USER_FOLDER.'rss/rss.tmpl.php'; if (!is_file($q0)) { $q0=DEFAULTS_FOLDER.'rss/rss.tmpl.php'; } if(is_file($q0)) { ob_start(); include $q0; $pu=ob_get_contents(); ob_end_clean(); } return $pu; } function gd($pu){ $pu=str_replace("\x0",'',$pu); for ($r=0; $r < strlen($pu); ++$r){ if(ord($pu[$r]) < 32 and !in_array(ord($pu[$r]), array (10,13))) { $pu[$r]=''; } } return $pu; } function wd($l0,$hg,$d0){ global$_config; $z0=gmdate('r',$hg); $k0=md5($hg); if ($d0=='rss'){ if (@$_config['dev_xml_as_text']) { header('Content-Type: text/plain'); } else { header('Content-Type: application/xml; charset=utf-8'); } } elseif ($d0=='json'){ header('Content-Type: application/json'); } else { header('Content-Type: text/plain'); } header('Last-modified: '. $z0); header('Etag: '. $k0); header('Cache-Control: public'); header('Expires: '. date('r',$hg+SECONDS_IN_A_DAY)); $x0=isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $e0=isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$x0 && !$e0 or $e0 && $e0!=$k0 or $x0 && $x0!=$z0 ){ if ($d0=='rss'){ $pu=gd($pu); } ini_set('zlib.output_compression',0); echo $l0; ini_set('zlib.output_compression',1); } else { header('HTTP/1.1 304 Not Modified'); } die; } function e2m_year($parameters=array ()) { global$_strings,$_config; $r0=$parameters['year']; $t0=e2l_get_string('pt--nth-year', array ('year' => $r0)); if (!od($r0)) { return e2_error404_mode(); } $j0=gmmktime(0,0,0,1,1,$r0-1); $h0=gmmktime(0,0,0,1,1,$r0+1); list ($g0,$w0)=e2__fruitful_neighbours_with_ymd_($r0); $u0='e2m_year'; if ($g0){ $i0['prev-href']=jv( $u0,e2__parameters_with_timestamp_($g0) ); $i0['prev-jump?'] = (bool) (gmdate('Y',$j0)!=gmdate('Y',$g0)); $i0['prev-title']=gmdate('Y',$g0); } if ($w0){ $i0['next-href']=jv( $u0,e2__parameters_with_timestamp_($w0) ); $i0['next-jump?'] = (bool) (gmdate('Y',$h0)!=gmdate('Y',$w0)); $i0['next-title']=gmdate('Y',$w0); } $i0['timeline?']=false; $i0['this']=$r0; $i0['this-title']=$r0; $o0=ns('start'); $p0=ns('end'); if ( $r0==zy('Y',$o0['stamp'],$o0['timezone']) ) { $c9=zy('m',$o0['stamp'],$o0['timezone']); } else { $c9=1; } if ( $r0==ky('Y',time()) ) { $v9=ky('m',time()); } else { $v9=12; } $b9=bs($r0); for ($y9=1; $y9 <= 12; ++ $y9){ $n9=gmmktime(0,0,0,$y9,1,$r0); $m9[$y9] = array ( 'number' => $y9, 'start-time' => array ($n9,dy()), 'href' => gmdate('Y/m/',$n9), 'real?' => $y9 >= $c9 and $y9 <= $v9, 'fruitful?' => @in_array(gmdate('n',$n9),$b9), ); } list ($jr,$hr)=ty($r0); $d=[ 'title' => $t0, 'heading' => $t0, 'pages' => $i0, 'year' => (int)$r0, 'year-months' => $m9, ]; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". rm(e2_()). "AND `Stamp` BETWEEN ". $jr ." ". "AND ". $hr ." ". "ORDER BY `Stamp`", 'get all notes for the year' ); $m1=en(); $a5=vs($m1,$r0); if(count($a5)) { $d['notes-list']=$a5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_month($parameters=array ()) { global$_strings,$_config; $r0= $parameters['year']; $y9=$parameters['month']; $t0=e2l_get_string( 'pt--nth-month-of-nth-year', array ('year' => $r0,'month' => $y9) ); if (!od($r0,$y9)) { return e2_error404_mode(); } $j0=gmmktime(0,0,0,$y9-1,1,$r0); $h0=gmmktime(0,0,0,$y9+1,1,$r0); list ($g0,$w0)=e2__fruitful_neighbours_with_ymd_($r0,$y9); $u0='e2m_month'; if ($g0){ $i0['prev-href']=jv( $u0,e2__parameters_with_timestamp_($g0) ); $i0['prev-jump?'] = (bool) (gmdate('Y/m',$j0)!=gmdate('Y/m',$g0)); $i0['prev-title']=e2l_get_string( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate('Y',$g0),'month' => gmdate('n',$g0) ) ); } if ($w0){ $i0['next-href']=jv( $u0,e2__parameters_with_timestamp_($w0) ); $i0['next-jump?'] = (bool) (gmdate('Y/m',$h0)!=gmdate('Y/m',$w0)); $i0['next-title']=e2l_get_string( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate('Y',$w0),'month' => gmdate('n',$w0) ) ); } $i0['timeline?']=false; $i0['this-title']=$t0; list ($jr,$hr)=ty($r0,$y9); $d=[ 'title' => $t0, 'heading' => $t0, 'pages' => $i0, 'year' => (int)$r0, 'month' => (int)$y9, 'month-days' => e2_pack_month_days_with_ymd_($r0,$y9,false), ]; xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". rm(e2_()). "AND `Stamp` BETWEEN ". $jr ." ". "AND ". $hr ." ". "ORDER BY `Stamp`", 'get all notes for the month' ); $m1=en(); $a5=vs($m1,$r0,$y9); if(count($a5)) { $d['notes-list']=$a5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function e2m_day($parameters=array ()) { global$_strings,$_config; $r0= (int)$parameters['year']; $y9=(int)$parameters['month']; $d9= (int)$parameters['day']; if (!(od($r0,$y9,$d9))) { return e2_error404_mode(); } $t0=e2l_get_string( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $r0,'month' => $y9,'day' => $d9) ); $j0=gmmktime(0,0,0,$y9,$d9-1,$r0); $h0=gmmktime(0,0,0,$y9,$d9+1,$r0); list ($g0,$w0)=e2__fruitful_neighbours_with_ymd_($r0,$y9,$d9); $u0='e2m_day'; if ($g0){ $i0['prev-href']=jv( $u0,e2__parameters_with_timestamp_($g0) ); $i0['prev-jump?'] = (bool) (gmdate('Y/m/d',$j0)!=gmdate('Y/m/d',$g0)); $i0['prev-title']=e2l_get_string( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate('Y',$g0),'month' => gmdate('n',$g0),'day' => gmdate('j',$g0), ) ); } if ($w0){ $i0['next-href']=jv( $u0,e2__parameters_with_timestamp_($w0) ); $i0['next-jump?'] = (bool) (gmdate('Y/m/d',$h0)!=gmdate('Y/m/d',$w0)); $i0['next-title']=e2l_get_string( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate('Y',$w0),'month' => gmdate('n',$w0),'day' => gmdate('j',$w0), ) ); } $i0['timeline?']=false; $i0['this-title']=$t0; $d=[ 'title' => $t0, 'heading' => $t0, 'pages' => $i0, 'month-days' => e2_pack_month_days_with_ymd_($r0,$y9,$d9), ]; $m1=dm($r0,$y9,$d9); $m1=array_reverse($m1); $xe=e2_(); $a5=[]; foreach ($m1 as $t => $pf){ if (!( em($pf)==='public' or ($xe and $pf['IsPublished']) )) continue; $noteView=new AeNoteView($pf); $noteView -> setWantNewCommentsCount($xe); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($xe and !@$_config['read_only']); $noteView -> setWantCommentsLink(true); $a5[] = $noteView -> getNoteCTree(); } if(count($a5)) { $d['notes']=$a5; } else { $d['nothing']=$_strings['gs--no-such-notes']; } return $d; } function ud(){ global$_config; $a5=null; if(CACHE_FULLLIST and is_file(CACHE_FILENAME_FULLLIST)) { $a5=@unserialize(file_get_contents(CACHE_FILENAME_FULLLIST)); if(Log::$p3)__log('Retrieving full notes list from cache...'); } if (!is_array($a5)) { if(Log::$p3)__log('Retrieving full notes list from database...'); xn( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished` = 1 ". rm(). "ORDER BY `Stamp`", 'get full notes list' ); $m1=en(); $a5=vs($m1); if(CACHE_FULLLIST)n3(CACHE_FILENAME_FULLLIST,serialize($a5)); } return $a5; } function e2m_everything($parameters=array ()) { global$_strings; $a5=ud(); $s9=count($a5); $t0=e2l_get_string('pt--n-posts', array ('number' => $s9)); $d=[ 'title' => $t0, 'heading' => $t0, ]; if(count($a5)) { $d['notes-list']=$a5; } else { $d['nothing']=$_strings['gs--no-notes']; } return $d; } function e2m_sitemap_xml($parameters=array ()) { global$_config; $a5=ud(); if (@$_config['dev_xml_as_text']) { header('Content-Type: text/plain'); } else { header('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; if(count($a5)) { $hg=@$a5[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. jv('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo gmdate('Y-m-d\TH:i:s\Z',$hg[0]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($a5 as $f2){ echo '<url>'."\r\n"; echo '<loc>'; echo $f2['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo gmdate('Y-m-d\TH:i:s\Z',$f2['last-modified'][0]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function e2_pack_month_days_with_ymd_($r0,$y9,$d9){ $a9=zy('t',gmmktime(0,0,0,$y9,1,$r0),dy()); $o0=ns('start'); $p0=ns('end'); if ( $r0 .'/'. $y9 == zy('Y/n',$o0['stamp'],$o0['timezone']) ) { $q9=zy('d',$o0['stamp'],$o0['timezone']); } else { $q9=1; } if ( $r0 .'/'. $y9 == ky('Y/n',time()) ) { $l9=ky('d',time()); } else { $l9=$a9; } $z9=ys($r0,$y9); for ($r=1; $r <= $a9; ++ $r){ $n9=gmmktime(0,0,0,$y9,$r,$r0); $k9[$r] = array ( 'number' => $r, 'start-time' => array ($n9,dy()), 'href' => gmdate('Y/m/d/',$n9), 'this?' => (bool) ($r==$d9), 'real?' => $r >= $q9 and $r <= $l9, 'fruitful?' => @in_array(gmdate('d',$n9),$z9), ); } return $k9; } function od($r0,$y9=false,$d9=false){ $o0=ns('start'); if ($o0===false){ return false; } $x9=zy('Y',$o0['stamp'],$o0['timezone']); $e9=ky('Y',time()); if ($y9===false){ return (bool) ( $r0 >= $x9 and $r0 <= $e9 ); } else { $r9=zy('n',$o0['stamp'],$o0['timezone']); $t9=ky('n',time()); if ($d9===false){ return (bool) ( $y9 >= 1 and $y9 <= 12 and ( ($r0 > $x9 and $r0 < $e9) or ($r0==$x9 and $y9 >= $r9) or ($r0==$e9 and $y9 <= $t9) ) ); } else { $j9=zy('j',$o0['stamp'],$o0['timezone']); $h9=ky('j',time()); if(1){ return (bool) ( checkdate($y9,$d9,$r0) and ( ($r0 > $x9 and $r0 < $e9) or ($r0==$x9 and $y9 > $r9) or ($r0==$x9 and $y9==$r9 and $d9 >= $j9) or ($r0==$e9 and $y9 < $t9) or ($r0==$e9 and $y9==$t9 and $d9 <= $h9) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($hb,$jb=false,$tb=false){ global$_db,$_config; list ($g9,$w9)=ty($hb,$jb,$tb); $u9=SECONDS_IN_A_DAY; if ($tb===false)$u9=SECONDS_IN_A_MONTH; if ($jb===false)$u9=SECONDS_IN_A_YEAR; $i9=$o9=null; xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` < '". ($w9-$u9) ."' ". rm(e2_()). "ORDER BY Stamp DESC", 'get previous fruitful neighbour with ymd' ); while ($u=mysqli_fetch_array($_db['result'],MYSQLI_ASSOC)) { list ($r0,$y9,$d9)=explode('/', zy('Y/n/j',$u['Stamp'],fy($u)) ); $p9=$hb*10000 + ($jb? ($jb*100):0) + ($tb? $tb:0); $ci=$r0*10000 + ($jb? ($y9*100):0) + ($tb? $d9:0); if ($ci < $p9){ $i9=gmmktime(0,0,0,$y9,$d9,$r0); break; } } xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` > '". ($g9+$u9) ."' ". rm(e2_()). "ORDER BY Stamp", 'get next fruitful neighbour with ymd' ); while ($u=mysqli_fetch_array($_db['result'],MYSQLI_ASSOC)) { list ($r0,$y9,$d9)=explode('/', zy('Y/n/j',$u['Stamp'],fy($u)) ); $p9=$hb*10000 + ($jb? ($jb*100):0) + ($tb? $tb:0); $ci=$r0*10000 + ($jb? ($y9*100):0) + ($tb? $d9:0); if ($ci > $p9){ $o9=gmmktime(0,0,0,$y9,$d9,$r0); break; } } return [$i9,$o9]; } function e2__parameters_with_timestamp_($pl){ list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode('/',gmdate('Y/m/d',$pl)); return$parameters; } function vs($pr,$r0=false,$y9=false){ $vi=0; $a5=array(); $r7=''; $a5=array(); $bi=array(); foreach ($pr as $t => $pf){ $f2['href'] = jv('e2m_note', array ('*note' => $pf)); $f2['time'] = array ((int)min($pf['Stamp'],time()), fy($pf)); $f2['last-modified'] = array ((int)min($pf['LastModified'],time()), fy($pf)); $f2['favourite?'] = (bool) ($pf['IsFavourite'] && $pf['IsPublished']); $ke=em($pf); $f2['draft?'] = $ke==='draft'; $f2['scheduled?'] = $ke==='scheduled'; $f2['public?'] = $ke==='public'; $f2['hidden?'] = $ke==='hidden'; if(array_key_exists('SourceNoteURL',$pf) and @$pf['SourceNoteURL']!=''){ $f2['href']=$pf['SourceNoteURL']; $f2['href-original']=$pf['SourceNoteURL']; } if ( ($r0 and $y9 and ( ((int)$r0) .'/'. ((int)$y9) == zy('Y/n',$pf['Stamp'],fy($pf)) )) or ($r0 and !$y9 and ( (int)$r0 == zy('Y',$pf['Stamp'],fy($pf)) )) or (!$r0 and !$y9) ) { array_unshift($a5,$f2); array_unshift($bi,str_replace("\n",' ',$pf['Title'])); } } if(Log::$p3)__log('Will do typography'); $yi=implode("\n",$bi); $yi=h3(htmlspecialchars($yi,ENT_NOQUOTES,HSC_ENC)); $bi=explode("\n",$yi); foreach ($a5 as $t => $af){ $a5[$t]['title']=$bi[$t]; } return $a5; } function bs($hb){ global$_config; list ($ni,$mi)=ty($hb); xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $ni. "' AND '". $mi ."' ". rm(e2_()), 'get all notes for the year '. $hb .' to list months with notes' ); $m1=en(); $fi=array(); foreach ($m1 as $gr){ if ( ((int)$hb) == zy('Y',$gr['Stamp'],fy($gr)) ) { $fi[] = (int)zy('n',$gr['Stamp'],fy($gr)); } } $fi=@array_unique($fi); sort($fi); return $fi; } function ys($hb,$jb){ global$_config; list ($di,$si)=ty($hb,$jb); xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $di ."' AND '". $si ."' ". rm(e2_()), 'get all notes for the month '.$jb.' of the year '. $hb .' to list days with notes' ); $m1=en(); $ai=array(); foreach ($m1 as $gr){ if ( ((int)$hb) .'/'. ((int)$jb) == zy('Y/n',$gr['Stamp'],fy($gr)) ) { $ai[] = (int)zy('j',$gr['Stamp'],fy($gr)); } } $ai=@array_unique($ai); sort($ai); return $ai; } function ns($qi){ global$_config; $li='p1'; if (!e2_()) { $li='p1v1'; } $gt=CACHES_FOLDER.$qi .'-stamp-'. $li .'.e2time.psa'; if(CACHE_EDGE_TIMEINFO and is_file($gt)) { $d=@unserialize(file_get_contents($gt)); } if(is_array($d)) { return $d; } else { $d=array ( 'stamp' => time(), 'timezone' => sy(), ); if ($qi=='start'){ xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm(e2_()). "ORDER BY `Stamp` LIMIT 1", 'get blog start timestamp' ); } elseif ($qi=='end'){ xn( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ". rm(e2_()). "ORDER BY `Stamp` DESC LIMIT 1", 'get blog latest note timestamp' ); } $m1=en(); if(count($m1)) { $d=array ( 'stamp' => $m1[0]['Stamp'], 'timezone' => fy($m1[0]), ); if(CACHE_EDGE_TIMEINFO)n3($gt,serialize($d)); return $d; } return $d; } } define('CACHE',true); define('CACHE_ALIASMAP',CACHE and true); define('CACHE_NOTES',CACHE and true); define('CACHE_NOTES_RELATED',CACHE and true); define('CACHE_NOTES_COMMENTS',CACHE and true); define('CACHE_POPULAR',CACHE and true); define('CACHE_POPULAR_WITH_TAG',CACHE and true); define('CACHE_TAGS',CACHE and true); define('CACHE_FAVTAGS',CACHE and true); define('CACHE_NOTES_COUNTS',CACHE and true); define('CACHE_EDGE_TIMEINFO',CACHE and true); define('CACHE_FRONTPAGE',CACHE and true); define('CACHE_FRONTPAGE_FEED',CACHE and true); define('CACHE_TAG',CACHE and true); define('CACHE_FULLLIST',CACHE and true); define('CACHE_DRAFTS',CACHE and true); define('CACHE_DRAFTS_ALIAS_USE_COUNTS',CACHE and true); define('CACHE_LASTMODIFIEDS',CACHE and true); define('CACHE_FILENAME_ALIASMAP',CACHES_FOLDER.'aliasmap.psa'); define('CACHE_FILENAMES_NOTES',CACHES_FOLDER.'note-*.psa'); define('CACHE_FILENAMES_NOTES_RELATED',CACHES_FOLDER.'note-*-related.psa'); define('CACHE_FILENAMES_NOTES_COMMENTS',CACHES_FOLDER.'note-*-comments.ctree.psa'); define('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR',CACHES_FOLDER.'note-*-comments-author.ctree.psa'); define('CACHE_FILENAMES_NOTES_COUNTS',CACHES_FOLDER.'notes-count-*.txt'); define('CACHE_FILENAMES_EDGE_TIMEINFO',CACHES_FOLDER.'*.e2time.psa'); define('CACHE_FILENAME_POPULAR',CACHES_FOLDER.'popular.ctree.psa'); define('CACHE_FILENAME_POPULAR_EXPIRES',CACHES_FOLDER.'popular-expires.txt'); define('CACHE_FILENAMES_POPULAR_WITH_TAG',CACHES_FOLDER.'popular-*.ctree.psa'); define('CACHE_FILENAMES_POPULAR_WITH_TAG_EXPIRES',CACHES_FOLDER.'popular-*-expires.txt'); define('CACHE_FILENAME_TAGS',CACHES_FOLDER.'tags.ctree.psa'); define('CACHE_FILENAME_TAGS_FULL',CACHES_FOLDER.'tags-full.ctree.psa'); define('CACHE_FILENAME_TAGS_AUTHOR',CACHES_FOLDER.'tags-author.ctree.psa'); define('CACHE_FILENAME_TAGS_AUTHOR_FULL',CACHES_FOLDER.'tags-author-full.ctree.psa'); define('CACHE_FILENAME_FAVTAGS',CACHES_FOLDER.'favtags.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE',CACHES_FOLDER.'frontpage.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE_AUTHOR',CACHES_FOLDER.'frontpage-author.ctree.psa'); define('CACHE_FILENAME_FRONTPAGE_FEED',CACHES_FOLDER.'frontpage-feed.psa'); define('CACHE_FILENAMES_TAG',CACHES_FOLDER.'tag-*.ctree.psa'); define('CACHE_FILENAMES_TAG_AUTHOR',CACHES_FOLDER.'tag-*-author.ctree.psa'); define('CACHE_FILENAME_FULLLIST',CACHES_FOLDER.'notes-list.ctree.psa'); define('CACHE_FILENAME_DRAFTS',CACHES_FOLDER.'drafts.psa'); define('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS',CACHES_FOLDER.'drafts-auc.psa'); define('CACHE_FILENAME_LASTMODIFIEDS',CACHES_FOLDER.'last-modifieds-by-id.psa'); function e2_cache_filename_with_id_($as_,$li){ return str_replace('*',$as_,$li); } function e2_note_cache_filename_with_id_($as_){ return e2_cache_filename_with_id_($as_,CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($s6,$sr){ if(is_numeric($s6)) { if(Log::$p3)__log('Caches: Drop caches for note id '. $s6); @unlink(e2_note_cache_filename_with_id_($s6)); @unlink(e2_note_cache_filename_with_id_($s6 .'-comments')); @unlink(e2_note_cache_filename_with_id_($s6 .'-comments-author')); } else { r(CACHE_FILENAMES_NOTES); r(CACHE_FILENAMES_NOTES_COMMENTS); r(CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } qs(); if ($sr!==false){ ls(); r(CACHE_FILENAMES_NOTES_RELATED); r(CACHE_FILENAMES_POPULAR_WITH_TAG); r(CACHE_FILENAMES_TAG); r(CACHE_FILENAMES_TAG_AUTHOR); @unlink(CACHE_FILENAME_POPULAR); @unlink(CACHE_FILENAME_FRONTPAGE); @unlink(CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink(CACHE_FILENAME_FRONTPAGE_FEED); @unlink(CACHE_FILENAME_FULLLIST); @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); } if ($sr!==true){ @unlink(CACHE_FILENAME_DRAFTS); @unlink(CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } @unlink(CACHE_FILENAME_LASTMODIFIEDS); } function e2_drop_caches_for_tag_($qj){ if(is_numeric($qj)) { @unlink(e2_cache_filename_with_id_($qj,CACHE_FILENAMES_TAG)); @unlink(e2_cache_filename_with_id_($qj,CACHE_FILENAMES_TAG_AUTHOR)); } else { r(CACHE_FILENAMES_TAG); r(CACHE_FILENAMES_TAG_AUTHOR); } @unlink(CACHE_FILENAME_FAVTAGS); @unlink(CACHE_FILENAME_TAGS); @unlink(CACHE_FILENAME_TAGS_FULL); @unlink(CACHE_FILENAME_TAGS_AUTHOR); @unlink(CACHE_FILENAME_TAGS_AUTHOR_FULL); } function as_(){ if(Log::$p3)__log('Caches: Drop notes caches'); e2_drop_caches_for_note_(null,null); } function qs(){ if(Log::$p3)__log('Caches: Drop notes counts cache'); r(CACHE_FILENAMES_NOTES_COUNTS); } function ls(){ if(Log::$p3)__log('Caches: Drop egde time info cache'); r(CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache(){ if(Log::$p3)__log('Caches: Drop all kinds of caches'); r(CACHES_FOLDER.'*'); return true; } define('OLBA_SPECIAL_CHAR',"\x1"); define('OLBA_SPECIAL_SEQUENCE_LENGTH',6); function zs($zi=null){ global$_template,$_config,$settings; if ($zi===null)$zi=@$settings['template']; $ki=null; $xi=null; $ei=null; $ri=null; $ti=array(); $ji=$zi; if ($ji!==null){ while (1){ if(Log::$p3)__log('Prepare theme "'. $ji .'"'); $hi=TEMPLATES_FOLDER.$ji .'/'; if ( !is_dir($hi) or !is_file($hi .'/theme-info.php') ) { if(Log::$p3)__log('Theme "'. $ji .'" not found, using default theme "'. DEFAULT_TEMPLATE .'"'); $ji=DEFAULT_TEMPLATE; $hi=TEMPLATES_FOLDER.$ji .'/'; } array_push($ti,$hi); $gi=include $hi .'/theme-info.php'; $wi[$hi]=$gi; if(array_key_exists('max_image_width',$gi)) { if ($ki===null){ $ki=$gi['max_image_width']; } } if(array_key_exists('meta_viewport',$gi)) { if ($xi===null){ $xi=$gi['meta_viewport']; } } if(array_key_exists('supports_dark_mode',$gi)) { if ($ei===null){ $ei=$gi['supports_dark_mode']; } } if(array_key_exists('use_likely_light',$gi)) { if ($ri===null){ $ri=$gi['use_likely_light']; } } if(array_key_exists('based_on',$gi)) { $ji=$gi['based_on']; } else { break; } } } if ($ki===null){ $ki=$_config['max_image_width']; } if ($xi===null)$xi=''; if ($ei===null)$ei=false; if ($ri===null)$ri=false; $hi=SYSTEM_TEMPLATE_FOLDER; array_push($ti,$hi); $_template['name']=$zi; $_template['max_image_width']=$ki; $_template['meta_viewport']=$xi; $_template['supports_dark_mode']=$ei; $_template['use_likely_light']=$ri; $_template['stack']=$ti; $_template['infos']=$wi; }; function ks($ui){ global$content; if (!isset ($_olba_includes))$_olba_includes=0; ++ $_olba_includes; if(Log::$p3)__log('Eat "'. $ui .'"'); ob_start(); include $ui; return ob_get_clean(); } function xs($mz){ return ( OLBA_SPECIAL_CHAR. str_pad($mz,OLBA_SPECIAL_SEQUENCE_LENGTH,'0',STR_PAD_LEFT). OLBA_SPECIAL_CHAR ); } function es($name){ static $mz=0; na($name,'_olba_placeholders'); return xs($mz ++); } function rs($ii){ global$_olba_placeholders; foreach($_olba_placeholders as $mz => $s){ $oi=xs($mz); $pi=strpos($ii,$oi); $co=js($s,true); if ($pi!==false){ $ii=substr_replace( $ii,$co,$pi,strlen($oi) ); } else { break; } } return $ii; } function ts($vo){ if(is_dir(EXTRAS_FOLDER)) { $bo=EXTRAS_FOLDER.$vo .'.tmpl.php'; if(is_file($bo)) { return ks($bo); } } return ''; } function js($vo){ global$_template,$_olba_includes; $bo='templates/'. $vo .'.tmpl.php'; if ($ui=e2o__usable_file_with_basename_($bo)) { return ks($ui); } else { ob_end_clean(); throw new AeOlbaTemplateMissingException('Missing: '. $bo); } } function hs(){ global$_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists('raw',$_GET) ) { $yo='raw'; } else { $yo='main'; } return js($yo,true); } function gs($no){ na($no .'.css','_olba_used_stylesheets'); } function ws($mo){ na($mo .'.js','_olba_used_scripts'); } function us($fo){ foreach (array (SYSTEM_LIBRARY_FOLDER,USER_LIBRARY_FOLDER) as $do_){ foreach(glob($do_.$fo .'/*') as $by){ $da=pathinfo($by,PATHINFO_EXTENSION); if ($da=='js'){ na($by,'_olba_used_scripts'); } if ($da=='css'){ na($by,'_olba_used_stylesheets'); } } } } function is(){ global$_template,$_config,$settings; if ($so=@opendir(TEMPLATES_FOLDER)) { while (false !== ($ao=readdir($so))) { if(is_dir(TEMPLATES_FOLDER. $ao) and $ao!='.' and $ao!='..'){ if(is_file(TEMPLATES_FOLDER.$ao .'/theme-info.php')) { $qo[$ao]=TEMPLATES_FOLDER.$ao .'/'; } } } closedir($so); } $ta=array(); $lo=1000; foreach ($qo as$name => $za){ $gi=include $za .'theme-info.php'; $n3=@$gi['display_name']; if (!$n3) continue; if(is_array($n3)) { if(array_key_exists($settings['language'],$n3)) { $n3=$n3[$settings['language']]; } else { $n3=array_shift($n3); } } $mz=@$gi['index'] or $mz=$lo ++; $zo=@$gi['colors']; if (!$zo)$zo=array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $ko=(bool) ($name==$_template['name']); if ($ko){ $xo=jv('e2m_theme_preview', array ('theme' => '')); } else { $xo=jv('e2m_theme_preview', array ('theme' => $name)); } $ta[$mz] = array ( 'name' => $name, 'display-name' => $n3, 'colors' => $zo, 'current?' => $ko, 'preview-url' => $xo, 'supports-dark-mode?' => $gi['supports_dark_mode'], ); } ksort($ta); return $ta; } function os($fb){ return e2o__usable_file_with_basename_('images/'. $fb); } function ps($eo){ return file_get_contents(e2o__usable_file_with_basename_('images/'. $eo .'.svg')); } function ca($no){ global$_template; $qa='styles/'. $no .'.css'; $ro=array(); foreach($_template['stack'] as $hi){ if(is_file($fb=$hi.$qa)) { $ro[] = $fb; } if ( array_key_exists('reset_styles',$_template['infos'][$hi]) and in_array($no,$_template['infos'][$hi]['reset_styles']) ) { break; } } $ro=array_reverse($ro); } function va(){ global$_olba_used_stylesheets,$_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets=array_unique($_olba_used_stylesheets); $to=array(); foreach($_olba_used_stylesheets as $no){ if(is_file($no)) { $to[] = $no; continue; } if(is_file($fb=USER_FOLDER .'js/'. $no)) { $to[] = $fb; } $qa='styles/'. $no; $ro=array(); foreach($_template['stack'] as $hi){ if(is_file($fb=$hi.$qa)) { $ro[] = $fb; } if ( array_key_exists('reset_styles',$_template['infos'][$hi]) and in_array($no,$_template['infos'][$hi]['reset_styles']) ) { break; } } $ro=array_reverse($ro); $to=array_merge($to,$ro); } if(E2_EDITION){ foreach($_template['stack'] as $hi){ if(array_key_exists('global_styles',$_template['infos'][$hi])) { $to[] = $_template['infos'][$hi]['global_styles']; } } } foreach ($to as $t => $af){ $ly=stat($af); $to[$t].='?'. $ly['mtime']; } return $to; } function ba(){ global$_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts=array_unique($_olba_used_scripts); $jo=array(); foreach($_olba_used_scripts as $mo){ if ( substr($mo,0,7)=='http://' or substr($mo,0,8)=='https://' or substr($mo,0,2)=='//' ){ $jo[] = $mo; continue; } if(is_file($mo)) { $jo[] = $mo; continue; } if(is_file($ho=USER_FOLDER .'js/'. $mo)) { $jo[] = $ho; } $qa='js/'. $mo; if ($ho=e2o__usable_file_with_basename_($qa)) { $jo[] = $ho; } } foreach ($jo as $t => $af){ $ly=stat($af); if ($ly['mtime']) { $jo[$t].='?'. $ly['mtime']; } } return $jo; } function ya($go){ if (!is_array($go)) return; foreach ($go as $o4){ if(substr($o4, -3)=='.js'){ ws(substr($o4,0, -3)); } if(substr($o4, -4)=='.css'){ gs(substr($o4,0, -4)); } } } function na($s,$hv){ if (!isset ($GLOBALS[$hv])) { $GLOBALS[$hv] = array ($s); } else { $GLOBALS[$hv][] = $s; } } function e2o__usable_file_with_basename_($qa){ global$_template; if (!isset ($_template))zs(); foreach($_template['stack'] as $hi){ if(is_file($fb=$hi.$qa)) { return $fb; } } return ''; } function e2m_theme_preview($parameters){ global$_lang,$_strings,$_superconfig,$_template; if (@$_superconfig['disallow_themes_preview']) { return e2_error404_mode(); } if($parameters['theme']==$_template['name']) { c(jv('e2m_theme_preview', array ('theme' => ''))); } if($parameters['theme']) { zs($parameters['theme']); } $wo=$_lang; if (!is_file($by='system/preview/'. $wo .'.php')) { $wo=$_strings['--secondary-language']; $by='system/preview/'. $wo .'.php'; } if (!is_file($by='system/preview/'. $wo .'.php')) { $by='system/preview/'. DEFAULT_LANGUAGE .'.php'; } $aq=include $by; return $aq; } if(E2_EDITION){ function fa($uo){ if(substr($uo, -1)=='_'){ $d['has-horizontal-rule?']=true; $uo=substr($uo,0, -1); } else { $d['has-horizontal-rule?']=false; } if(substr($uo, -1)=='|'){ $d['has-vertical-rule?']=true; $uo=substr($uo,0, -1); } else { $d['has-vertical-rule?']=false; } $d['has-image?'] = (strpos('WwFftG',$uo[0]) !== false); $d['has-large-image?'] = (strpos('WwFG',$uo[0]) !== false); $d['has-thumb?'] = ('t'==$uo[0]); $d['has-side-image?'] = (strpos('|FL|FR|fl|fr|','|'. substr($uo,0,2) .'|')!==false); $d['has-large-side-image?'] = (strpos('|FL|FR|','|'. substr($uo,0,2) .'|')!==false); $d['has-large-left-image?'] = ('FL'==substr($uo,0,2)); $d['has-large-right-image?'] = ('FR'==substr($uo,0,2)); $d['has-large-title?'] = (strpos('HWFG',$uo[0]) !== false); $d['has-jumbo-title?'] = ('J'==$uo[0]); $d['has-summary?'] = (substr($uo, -1)=='s'); return $d; } function da($oo,$po){ global$_config; $cp=$_config['fitter_debug']; $vp=$_config['fitter_ignore_constraints']; $bp=$_config['fitter_ignore_default_constraints']; $yp=$_config['fitter_force_seed']; $np=$_config['fitter_force_layout']; $mp=require DEFAULTS_FOLDER. 'layouts.php'; $nu=count($oo); $fp=0; foreach ($oo as $f2) if(count($f2['images'])) ++ $fp; if ($cp){ echo '<div class="e2-error" style="background: #f0f0f0; padding: .5em 2em; margin-bottom: 1em">'; echo '<p><b>'. $nu .' notes to fit</b></p>'; echo '<div style="padding-left: 2em">'; echo '<ul>'; foreach ($oo as $dp => $f2){ echo '<li>#'.$dp.' "'.$f2['title'] .'" has '. count($f2['images']) .' image(s)<br />'; foreach ($f2['images'] as $sp => $pa){ echo '#'. $sp .'. w='. $pa['width'] .' h='. $pa['height'] .' v='. $pa['verticality'] .'. '; } echo '</li>'; } echo '</ul>'; echo '</div>'; echo '<br />'; echo '<p>'. $fp. ' of '. $nu .' notes contain images</p>'; echo '<p><b>h'. $nu .'i'. $fp. '</b> has to fit</p>'; echo '<br />'; } $ap=[]; $qp=[]; foreach ($mp as $lp => $zp){ $kp=0; $xp=0; $ep=[]; if ($cp) echo '<p><b>'. $lp .'</b></p>'; foreach ($zp['areas'] as $rp => $tp){ list ($jp,$hp,$gp)=$tp; if (!is_array($jp))$jp=[$jp]; foreach ($jp as $wp){ $kp ++; if (fa($wp) ['has-image?']) { $xp ++; } } $up=fa($jp[0]); if ($up['has-large-image?'] and !$bp){ if (empty ($gp['iv>']))$gp['iv>']=.34; if (empty ($gp['iv<=']))$gp['iv<=']=.67; } if ($up['has-thumb?'] and !$bp){ if (empty ($gp['iv>']))$gp['iv>']=.2; if (empty ($gp['iv<=']))$gp['iv<=']=2; } if ($vp){ $gp=null; } if(is_array(@$gp)) { if ($cp) echo '<div style="padding-left: 2em">'; if ($cp) echo '<p><b>area #'. $rp .'</b> has '. count($gp) .' constraint(s), finding a matching note...</p>'; if ($cp) echo '<div style="padding-left: 2em">'; if ($cp) echo '<ul>'; $ip=false; foreach ($oo as $dp => $f2){ if (@$ep[$f2['id']]) { if ($cp) echo '<li>note "'. $f2['title'] .'" already used once in layout '. $lp .', skipping</li>'; continue; } elseif ($up['has-image?'] and !count($f2['images'])) { if ($cp) echo '<li>note "'. $f2['title'] .'" has no images, but the area requires them</li>'; continue; } else { if ($cp) echo '<li>note "'. $f2['title'] .'": </li>'; } if(1){ if ($cp) echo '<li>title of "'. $f2['title'] .'" has length='. mb_strlen($f2['title']) .'<br />'; $ip=true; foreach ($gp as $op => $pp){ if ($op[0]!=='h') continue; if ($op=='hl<'){ $ip=$ip && (mb_strlen($f2['title']) < $pp); } elseif ($op=='hl>='){ $ip=$ip && (mb_strlen($f2['title']) >= $pp); } else { if ($cp) echo 'unknown text constraint '. $op .'<br />'; } if ($cp) echo ( 'checked '. $op.$pp .', '. 'pass='. (int)$ip .'<br />' ); if (!$ip) break; } if ($cp) echo '</li>'; if (!$ip) continue; if ($cp) echo '<b>title of note "'. $f2['title'] .'"</b> (#'. $dp .') may be used for area #'. $rp .' of layout '. $lp .' if everything is OK with images<br />'; $ep[$f2['id']] = true; $qp[$lp][$rp] = [$dp,0]; } if (!$up['has-image?']) { if ($cp) echo 'area accepts no images<br />'; } else { foreach ($f2['images'] as $ccv => $vcv){ if ($cp) echo '<li>'. basename($vcv['src']) .' (#'. $ccv .') of note "'. $f2['title'] .'" has '; if ($cp) echo 'width='. $vcv['width'] .', verticality='. $vcv['verticality'] .'<br />'; $ip=true; foreach ($gp as $op => $pp){ if ($op[0]!=='i') continue; if ($op=='iw>='){ $ip=$ip && ($vcv['width'] >= $pp); } elseif ($op=='iv<='){ $ip=$ip && ($vcv['verticality'] <= $pp); } elseif ($op=='iv>'){ $ip=$ip && ($vcv['verticality'] > $pp); } else { if ($cp) echo 'unknown image constraint '. $op .'<br />'; } if ($cp) echo 'checked '. $op.$pp .', pass='. (int)$ip .'<br />'; if (!$ip) break; } if ($ip){ if ($cp) echo '<b>' .basename($vcv['src']) .' (#'. $ccv .') of note "'. $f2['title'] .'"</b> (#'. $dp .') will be used for area #'. $rp .' of layout '. $lp .'<br />'; $ep[$f2['id']] = true; $qp[$lp][$rp] = [$dp,$ccv]; } if ($cp) echo '</li>'; if ($ip) break; } } if ($ip) break; } if ($cp){ if (!$ip) echo '<b>failed</b> to find fit, the layout can’t be used<br />'; echo '</div>'; echo '</ul>'; echo '</div>'; } if (!$ip) break; } else { $ip=true; } } if (!$ip) continue; if ($kp > $nu) continue; if ($xp > $fp) continue; if (!$kp) continue; $ap[$xp][] = $lp; if ($zp['rank'] >= 100){ $bcv[] = $lp; } if (!isset ($zp['rank'])) { $ycv=0; } else { $ycv=$zp['rank']; } $ycv *= 1+$xp; $ncv[$lp]=$ycv; } $mcv=$fp; while (empty ($ap[$mcv]) and $mcv > 0)--$mcv; $fcv=$ap[$mcv]; $fcv=array_merge($fcv,$bcv); $qcv=0; if (isset ($yp) and is_int($yp)) { $po=$yp; } else { } if (!empty ($fcv)) { $qcv=$po % count($fcv); } if (isset ($np) and is_string($np)) { $lp=$np; } else { $lp=$fcv[$qcv]; } $zp=$mp[$lp]; if ($cp){ echo '<br />'; echo '<p>Good options:</p>'; echo '<ul>'; foreach ($fcv as $zcv => $kcv){ if ($lp===$kcv){ echo '<li>#'. $zcv .'. <b>'. $kcv.'</b> (rank '. $ncv[$kcv] .') ← winner</li>'; } else { echo '<li>#'. $zcv .'. '. $kcv .' (rank '. $ncv[$kcv] .')</li>'; } } echo '</ul>'; echo '<br />'; if (isset ($yp) and is_int($yp)) echo '<p><b>Debugging with forced seed '. $yp .'</b></p>'; echo '<p>Using option '. $qcv. ' of 0...'. (count($fcv)-1) .' (seed is '. $po. ')</p>'; echo '<p><b>Layout '. $lp .'</b> wins, '. $mcv .' of '. $fp .' images will fit</p>'; echo '<br />'; } $xcv=[]; $ecv=[]; if (!empty ($qp[$lp])) { $xcv=$qp[$lp]; foreach ($xcv as $rcv){ list ($dp, ) = $rcv; $ecv[$dp]=true; } if ($cp){ echo '<p><b>Layout has constraints</b>, '. count($xcv) .' good fits were pre-selected</p>'; } } if ($cp){ echo '</div>'; } $tcv['debugging?'] = (bool)$cp; $tcv['grid-rows'] = @$zp['grid-rows'] or $tcv['grid-rows']=1; $tcv['areas'] = []; foreach ($zp['areas'] as $jcv => $tp){ list ($jp,$hp,$gp)=$tp; if (!is_array($jp))$jp=[$jp]; $hcv=false; $gcv=false; $wcv=[]; foreach ($jp as $ucv => $io){ $icv=fa($io); $icv['index']=$ucv; $icv['has-image?'] = ($icv['has-image?'] and $ucv < $mcv); if ( !empty ($xcv[$jcv]) and $ucv===0 ){ list ($dp,$ocv)=$xcv[$jcv]; if (!($ocv > 0))$ocv=0; $f2=$oo[$dp]; $pcv[$dp]=true; if ($cp){ $icv['debug-selectedness']='pre-selected: note #'. $dp; if ($ocv > 0){ $icv['debug-selectedness'].=' image #'. $ocv; } } } else { $ocv=0; foreach ($oo as $dp => $f2){ if (empty ($pcv[$dp]) and empty ($ecv[$dp])) { $f2=$oo[$dp]; $pcv[$dp]=true; break; } } if ($cp){ $icv['debug-selectedness']='whatever: note #'. $dp; } } $icv['note']=$f2; $icv['note-image-index']=$ocv; if ($cp){ $icv['debug-descriptor']=$io; } $wcv[] = $icv; $hcv=( $hcv or $icv['has-vertical-rule?'] ); $gcv=( $gcv or $icv['has-horizontal-rule?'] ); } $cvv=[ 'index' => $jcv, 'grid-area' => $hp, 'has-vertical-rule?' => $hcv, 'has-horizontal-rule?' => $gcv, 'items' => $wcv, ]; if ($cp){ $cvv['debug-descriptors-list']=implode($jp,','); } $tcv['areas'][$jcv]=$cvv; } return $tcv; } } define('SEARCH_EXTRA_PREFIX','Rose'); define('SEARCH_LIMIT',20); define('SEARCH_SNIPPETS_LIMIT',20); define('SEARCH_USE_ROSE',1); define('SEARCH_USE_MYSQL',1); define('BSI_SELECT_PORTION',10); define('BSI_GIVE_UP_TIMEOUT',10); define('BSI_UNLOCK_TIMEOUT',10); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Storage\Database\MysqlRepository; use S2\Rose\Stemmer\PorterStemmerEnglish; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Entity\ExternalContent; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found($parameters=array ()) { global$_strings,$_config,$settings,$full_blog_url; $parameters['query']=trim($parameters['query']); $im=$parameters['query']; if (!$im){ return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $vvv=false; $cj=[]; try { xn( "SELECT * FROM `". $_config['db_table_prefix']."Keywords` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `Keyword`='". rn($im) ."'", 'get tags matching the search query' ); $ib=en(); if (isset ($ib[0]['ID'])) { $vvv=[ 'href' => jv('e2m_tag', array ('*tag' => $ib[0])), 'name' => htmlspecialchars($im,ENT_NOQUOTES,HSC_ENC), ]; $cj=nf($ib[0]['ID'],4); array_unshift($cj,$vvv); } } catch (AeMySQLException $e){ kv($e,'Could not get tags matching the search query'); } $bvv=n(' ',$parameters['query']); if(SEARCH_USE_ROSE){ $yvv=new PorterStemmerRussian(new PorterStemmerEnglish()); foreach ($bvv as $t => $af){ $bvv[$t]=$yvv -> stemWord($bvv[$t]); } } $nvv=array(); $xe=e2_(); if(SEARCH_USE_ROSE){ try { $o3=ra(); $mvv=new Finder($o3,$yvv); $mvv -> setHighlightTemplate('<mark>%s</mark>'); $fvv=new Query($im); $fvv -> setInstanceId($_config['db_table_subset']); $fvv -> setLimit(SEARCH_LIMIT); $resultSet=$mvv -> find($fvv); foreach($resultSet -> getFoundExternalIds() as $dvv){ $svv=$dvv -> getId(); if ($svv[0]=='n'){ $s6=substr($svv,1); $pf=nm($s6); if (!empty ($_config['search_favourites_boost'])) { if ($pf['IsFavourite']) { $resultSet->setRelevanceRatio( $svv, $_config['search_favourites_boost'] ); } } } } $snippetBuilder=new SnippetBuilder($yvv); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets( $resultSet, static function (array $qvv){ $m1=new ExternalContent(); foreach ( array_slice($qvv,0,SEARCH_SNIPPETS_LIMIT) as $dvv ){ $svv=$dvv -> getId(); if ($svv[0]=='n'){ $s6=substr($svv,1); $pf=nm($s6); if ($pf){ $noteView=new AeNoteView($pf); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($xe and !@$_config['read_only']); $d6=$noteView -> getNoteCTree(); $lvv[$pf['ID']] = $d6; $m1 -> attach($dvv,$d6['text']); } } } return $m1; } ); foreach($resultSet -> getItems() as $zvv){ $kvv=$zvv -> getId(); if ($kvv[0]=='n'){ $s6=substr($kvv,1); $pf=nm($s6); if (!( em($pf)==='public' or ($xe and $pf['IsPublished']) )) continue; $pf['_']['_srprovider']='Rose'; $pf['_']['_rose_relevance']=$zvv -> getRelevance(); $pf['_']['_rose_title']=$zvv -> getHighlightedTitle($yvv); $pf['_']['_rose_snippet']=$zvv -> getSnippet(); $nvv[] = $pf; } } if (@$_config['dev_rose_info']) { $xvv=print_r($resultSet -> getTrace(),true); } } catch (EmptyIndexException $e){ kv($e,'Rose index is empty'); } catch (AeMySQLException $e){ kv($e,'Could not do something with the database while working on Rose search results'); } } if(SEARCH_USE_MYSQL){ $evv=rn(preg_quote($im)); $rvv=( "SELECT * FROM `". $_config['db_table_prefix']."Notes` n ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 AND MATCH (`Title`, `Text`) AGAINST ('". $evv ."') ". rm($xe). "LIMIT ". SEARCH_LIMIT ); try { xn( $rvv, 'search using MySQL fulltext search' ); $m1=en(); foreach ($m1 as $t => $pf){ $pf['_']['_srprovider']='MySQL'; $nvv[] = $pf; } } catch (AeMySQLException $e){ kv($e,'Could not search using MySQL fulltext search'); } } $tvv=array(); $a5=array(); $r=0; foreach ($nvv as $pf){ if (!in_array($pf['ID'],$tvv)) { if (!empty ($lvv[$pf['ID']])) { $f2=$lvv[$pf['ID']]; } else { $noteView=new AeNoteView($pf); $noteView -> setWantReadHref($_config['count_reads']); $noteView -> setWantControls($xe and !@$_config['read_only']); $f2=$noteView -> getNoteCTree(); } $f2['search-result-provider']=$pf['_']['_srprovider']; if ($pf['_']['_srprovider']=='Rose'){ $f2['search-rose'] = [ 'relevance' => $pf['_']['_rose_relevance'], 'title' => $pf['_']['_rose_title'], 'snippet' => $pf['_']['_rose_snippet'], ]; } if (@$pf['_']['_rose_title']) { $f2['title']=$pf['_']['_rose_title']; } else { $f2['title']=ta($f2['title'],$bvv); } $f2['title']=h3($f2['title']); if (!empty ($pf['_']['_rose_snippet'])) { $f2['snippet-text']=$pf['_']['_rose_snippet']; } else { $tv=$f2['text']; $tv=preg_replace('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i','',$tv); $tv=preg_replace('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i','',$tv); $tv=str_replace( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $tv ); $tv=strip_tags($tv); $jvv=array(); $hvv=preg_split('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis',$tv); $gvv=0; $wvv=''; foreach ($hvv as $uvv){ $uvv=trim($uvv); if (!$uvv) continue; if (!$wvv)$wvv=$uvv; $ivv=$uvv; $ivv=ta($ivv,$bvv); if ($ivv!=$uvv){ $jvv[] = ja($ivv); $gvv ++; if ($gvv > 3) break; } } if(count($jvv)) { $f2['snippet-text']=implode(' · ',$jvv); } else { $f2['snippet-text']=$wvv; } } $f2['has-highlighed-thumbs?']=false; if ($es=@$f2['format-info']['resources-detected']) { $ovv=qb( db($es) ); foreach ($ovv as $t => $af){ $ovv[$t]['highlighted?'] = ( strstr($af['original-filename'],$im)!==false ); if ($ovv[$t]['highlighted?']) { $f2['has-highlighted-thumbs?']=true; } } $f2['thumbs']=$ovv; } $a5[] = $f2; $tvv[] = $pf['ID']; $r ++; if ($r >= SEARCH_LIMIT) break; } } $nj=count($a5); if ($nj){ $pvv=e2l_get_string( 'pt--n-posts', array ('number' => $nj) ); } else { $pvv=$_strings['pt--no-posts']; $d['nothing']=$_strings['gs--nothing-found']; } if ($r >= SEARCH_LIMIT){ $pvv=$_strings['gs--many-posts']; } if ($cj){ $d['search-related-tags']=$cj; } $d['notes']=$a5; $d['pages'] = array (); $d['title']=$pvv .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars($im,ENT_NOQUOTES,HSC_ENC); $d['heading']=$im; if (@$xvv){ $d['rose-debug-info']=$xvv; } return $d; } function sa($parameters){ if(Log::$p3)__log('Search form'); $im=trim((string) @$parameters['query']); return [ 'form-action' => jv('e2s_search'), 'query' => htmlspecialchars($im,ENT_COMPAT,HSC_ENC), ]; } function e2s_search(){ $im=@$_POST['query']; $im=str_replace('?',urlencode('?'),$im); $im=str_replace('/',' ',$im); $im=trim($im); $im=str_replace(' ','+',$im); c(jv('e2m_found', array ('query' => $im))); } function aa(){ global$_config; $cbv=@unserialize(file_get_contents(USER_FOLDER.'indexing.psa')); if (!is_array($cbv))$cbv=array ('spent' => '?'); $vbv=$bbv=$dv='?'; try { xn( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsPublished`=1 ", 'count total published notes' ); $yy=en(); $vbv=$yy[0]['c']; xn( "SELECT count(*) c FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=1 AND `IsPublished`=1 ", 'count indexed published notes' ); $yy=en(); $bbv=$yy[0]['c']; } catch (AeMySQLException $e){ kv($e,'Could not count some notes'); return false; } return [ 'indexed_count' => $bbv, 'total_count' => $vbv, 'time_spent' => $cbv['spent']? $cbv['spent']:false, ]; } function e2s_bsi_step(){ global$_db,$_config,$_strings; echo '<pre>'; if($_config['log_bsi']) { Log::$p3=true; if(Log::$p3)bv('bsi'); } if(Log::$p3)__log('BSI step'); if (!la()) { if(Log::$p3)__log('Not indexing'); die ('Not indexing</pre>'); } $cbv=@unserialize(file_get_contents(USER_FOLDER.'indexing.psa')); if (!is_array($cbv))$cbv=array ('spent' => '?'); if ( !isset ($cbv['lock']) or $cbv['lock'] < time() - (BSI_GIVE_UP_TIMEOUT+BSI_UNLOCK_TIMEOUT) ) { if (isset ($cbv['lock'])) { if(Log::$p3)__log('Indexer: old lock is '. $cbv['lock']); echo 'Old lock is '. $cbv['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $cbv['lock']=time(); if (!@n3(USER_FOLDER.'indexing.psa',serialize($cbv))) { if(Log::$p3)__log('Indexer: can’t get a new lock'); die ('Can’t get a new lock<br />'); } if(Log::$p3)__log('Indexer: new lock is '. $cbv['lock']); echo 'New lock is '. $cbv['lock'] .'<br /><br />'; try { $r=0; $ybv=0; $nbv=w(); $mbv=false; $yn=false; while ($ybv < BSI_GIVE_UP_TIMEOUT){ xn( "SELECT * FROM `". $_config['db_table_prefix']."Notes` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION, 'get portion of unindexed notes for indexing' ); $yy=en(); if(count($yy)) { ++ $r; if(Log::$p3)__log('Indexer: portion '. $r); echo 'Portion '. $r .'<br />'; foreach ($yy as $gq){ if(Log::$p3)__log('Indexer: indexing "'. $gq['Title'].'"'); echo 'Indexing: '. $gq['Title'] .'<br />'; if (za($gq)) { $gq['IsIndexed']='1'; yn('Notes',$gq); } else { $yn=true; break 2; } if($_config['broadcast_on_indexing']) { vy($gq); } } $ybv=round(w()-$nbv,3); if(Log::$p3)__log('Indexer: step done '. count($yy) .', spent '. $ybv .' ms so far'); echo 'Step done '. count($yy) .', spent '. $ybv .' ms so far<br /><br />'; if(Log::$p3)__log($ii); } else { $mbv=true; break; } } if ($mbv){ if(Log::$p3)__log('Indexer: indexing complete'); echo 'Indexing complete<br /><br />'; @unlink(USER_FOLDER.'indexing.psa'); } elseif ($yn){ if(Log::$p3)__log('Indexer: indexing failed'); echo 'Indexing failed<br /><br />'; } else { echo 'Time out<br />'; unset ($cbv['lock']); $cbv['done']=count($yy); if ($cbv['spent']!='?')$cbv['spent']+=$ybv; @n3(USER_FOLDER.'indexing.psa',serialize($cbv)); } } catch (AeMySQLException $e){ kv($e,'Could not index notes'); if(Log::$p3)__log('Indexer: DB unaccessible'); echo 'DB unaccessible<br />'; } } else { if(Log::$p3)__log('Indexer: locked'); echo 'Locked<br />'; } die ('</pre>'); } function e2s_bsi_drop(){ global$_db,$_config; if($_SERVER['REQUEST_METHOD']!='POST'){ c(jv('e2m_underhood')); } try { ha(); mv('Notes marked for reindexing',E2E_MESSAGE); $o3=ra(); try { $o3 -> erase(); mv('Indexes erased',E2E_MESSAGE); } catch (\S2\Rose\Exception\RuntimeException $e){ kv($e,'Rose threw RuntimeException'); } qa(); } catch (AeMySQLException $e){ kv($e,'Could not make all notes for reindexing'); } c(jv('e2m_underhood')); } function qa(){ $cbv=array(); @n3(USER_FOLDER.'indexing.psa',serialize($cbv)); } function la(){ return (is_file(USER_FOLDER.'indexing.psa')); } function za($pf){ global$_config; if(Log::$p3)__log('Indexer: index noterec'); static $fbv=null; try { if ($fbv===null){ $yvv=new PorterStemmerRussian(new PorterStemmerEnglish()); $fbv=new Indexer(ra(),$yvv); } $d1=w3($pf['FormatterID'], @$pf['Text'],'full-rss'); f3( 'note',$pf, $d1['meta']['resources-detected'] ); $tv=strip_tags($d1['text-final']); $dbv=new Indexable( 'n'. $pf['ID'], $pf['Title'], $tv, $_config['db_table_subset'] ); $fbv -> index($dbv); return true; } catch (\Exception $e){ kv($e,'Could not index note'); return false; } } function ka($as_){ global$_config; static $fbv=null; try { if ($fbv===null){ $yvv=new PorterStemmerRussian(new PorterStemmerEnglish()); $fbv=new Indexer(ra(),$yvv); } return $fbv -> removeById('n'. $as_,$_config['db_table_subset']); } catch (\Exception $e){ kv($e,'Could not index note'); return false; } } function xa($sbv){ $bz='S2\\Rose\\'; $abv=__DIR__.'/library/rose/'; $q2=strlen($bz); if(strncmp($bz,$sbv,$q2)!==0) return; $qbv=substr($sbv,$q2); $by=$abv.str_replace('\\','/',$qbv).'.php'; if(file_exists($by)) require $by; } function ea(){ return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function ra(){ global$_config,$settings; static $lbv=null; if ($lbv===null and SEARCH_USE_ROSE){ $zbv=new \PDO( 'mysql:'. 'host='. $settings['db']['server'] .';'. 'dbname='. $settings['db']['name'], $settings['db']['user_name'], p2($settings['db']['passw']) ); $wz=$zbv -> getAttribute(\PDO::ATTR_SERVER_VERSION); $kbv=version_compare($wz,'5.5.3','>=')?'utf8mb4':'utf8'; $zbv -> exec('SET NAMES '.$kbv); $zbv -> setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); $xbv=ea(); $lbv=new PdoStorage( $zbv, $_config['db_table_prefix'].SEARCH_EXTRA_PREFIX, array ( MysqlRepository::TOC => $xbv['TOC'], MysqlRepository::WORD => $xbv['WORD'], MysqlRepository::FULLTEXT_INDEX => $xbv['FULLTEXT_INDEX'], MysqlRepository::KEYWORD_INDEX => $xbv['KEYWORD_INDEX'], MysqlRepository::KEYWORD_MULTIPLE_INDEX => $xbv['KEYWORD_MULTIPLE_INDEX'], ) ); } return $lbv; } function ta($tv,$bvv){ foreach ($bvv as $wl){ if ($wl=='-') continue; $wl=preg_quote($wl,'/'); $wl=str_replace('е','[её]',$wl); $wl=str_replace('Е','[ЕЁ]',$wl); $tv=preg_replace('/(?<=^|\W)('.$wl.'[\w\p{M}]*)/iu','<mark>$1</mark>',$tv); } $tv=str_replace('</mark> <mark>',' ',$tv); $tv=str_replace('</mark> <mark>',' ',$tv); return $tv; } function ja($h2){ $ebv=mb_strtoupper(mb_substr($h2,0,1)); return $ebv.mb_substr($h2,1); } function ha(){ global$_config; xn( "UPDATE `". $_config['db_table_prefix']."Notes` ". "SET `IsIndexed`=0 ". "WHERE `SubsetID`=". $_config['db_table_subset'], 'mark all notes for reindexing' ); } function e2_check_timeout(){ static $rbv; if(is_null($rbv)) { $tbv=ini_get('max_execution_time'); if ($tbv){ $rbv=time()+$tbv-5; } else { $rbv=0; } } return ($rbv==0)?true:$rbv >= time(); } function e2_write_dump_header($by){ $hq=( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($by,$hq); return true; } function e2_write_dump_footer($by){ $jbv='COMMIT;' .PHP_EOL; $jbv .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" .PHP_EOL ."/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" .PHP_EOL ."/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" .PHP_EOL ."/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;".PHP_EOL ."/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" .PHP_EOL ."/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" .PHP_EOL; fwrite($by,$jbv); return true; } function e2_get_table_definition($hbv,$vz){ $gbv=null; $m1=mysqli_query($hbv,"SHOW CREATE TABLE `{$vz}`"); if ($m1){ $wbv=mysqli_fetch_array($m1); $gbv=$wbv['Create Table']; } return $gbv; } function e2_write_table_definition($by,$hbv,$vz){ $ubv=e2_get_table_definition($hbv,$vz); if(e2_check_timeout() && $ubv){ fwrite($by,$ubv); fwrite($by,';'); fwrite($by,PHP_EOL.PHP_EOL); return true; } return false; } function e2_get_table_data($hbv,$vz,$oq,$limit){ $im="SELECT * FROM `{$vz}` LIMIT {$oq}, {$limit}"; $m1=mysqli_query($hbv,$im); if (!$m1){ return false; } $ibv=''; $obv="INSERT INTO `{$vz}` VALUES"; while ($r4=mysqli_fetch_row($m1)) { $wcv=array(); foreach($r4 as $s){ $wcv[] = is_null($s)?"NULL":"'".mysqli_real_escape_string($hbv,$s)."'"; } $ibv.=$obv.'('.join(', ',$wcv).');'.PHP_EOL; } return $ibv; } function e2_table_disable_keys($vz){ return "ALTER TABLE `{$vz}` DISABLE KEYS;".PHP_EOL; } function e2_table_enable_keys($vz){ return "ALTER TABLE `{$vz}` ENABLE KEYS;".PHP_EOL; } function e2_get_total_records($hbv,$vz){ $t=mysqli_fetch_row(mysqli_query($hbv,"SELECT COUNT(*) FROM `{$vz}`")); return $t[0]; } function e2_backup_select_chuck_size_for_table_($vz){ $limit=5000; if(substr($vz, -7)==='Actions')$limit=50000; if(substr($vz, -7)==='Aliases')$limit=20000; if(substr($vz, -7)==='NotesKeywords')$limit=50000; if(Log::$p3)__log('Backup: chunk size '. (int)$limit); return$limit; } function e2_write_table_data($by,$hbv,$vz){ $nj=e2_get_total_records($hbv,$vz); $oq=0; $limit=e2_backup_select_chuck_size_for_table_($vz); $m1=true; $pbv=20000; $c3v=30; if ($nj){ $v3v=e2_table_disable_keys($vz); fwrite($by,$v3v); } $ibv="INSERT INTO `{$vz}` VALUES"; $b3v=$nj; while ($b3v > 0){ $im="SELECT * FROM `{$vz}` ORDER BY `ID` LIMIT {$oq}, {$limit}"; $m1=mysqli_query($hbv,$im); $y3v=mysqli_num_rows($m1); if (!$m1 || !e2_check_timeout()) { $m1=false; break; } $n3v=array(); $m3v=0; $f3v=0; while ($r4=mysqli_fetch_row($m1)) { if (!e2_check_timeout()) { $m1=false; break; } $y3v--; $yz=array(); foreach($r4 as $s){ $yz[] = is_null($s)?"NULL":"'".mysqli_real_escape_string($hbv,$s)."'"; } $lv='('.join(', ',$yz).')'; $m3v+=strlen($lv); $n3v[] = $lv; $f3v++; if ( ($m3v >= $pbv) || ($f3v >= $c3v) || ($y3v==0)) { $im=$ibv.join(', ',$n3v).';'; fwrite($by,$im); fwrite($by,PHP_EOL); $m3v=0; $f3v=0; $n3v=array(); } } $oq+=$limit; $b3v -= $limit; } if ($nj){ $d3v=e2_table_enable_keys($vz); fwrite($by,$d3v); } return $m1; } function e2_backup($hbv,$l7,$s3v,$cb=array()) { $a3v=tmpfile(); e2_write_dump_header($a3v); if(Log::$p3)__log('Backup: wrote header'); $q3v=true; foreach($l7 as $vz){ if(Log::$p3)__log('Backup: table '. $vz); $l3v=e2_write_table_definition($a3v,$hbv,$vz); if(Log::$p3)__log('Backup: wrote table definition with result '. (int)$l3v); $z3v=e2_write_table_data($a3v,$hbv,$vz); if(Log::$p3)__log('Backup: wrote table data with result '. (int)$z3v); $q3v=$l3v && $z3v; if ($q3v===false){ break; } } if(Log::$p3)__log('Backup: wrote data with running == '. (int)$q3v); if ($q3v){ e2_write_dump_footer($a3v); fseek($a3v,0); $by=fopen($s3v,'w+'); while ($q3v && ($lv=fread($a3v,1024))) { if(e2_check_timeout()) { fwrite($by,$lv); } else { $q3v=false; } } fclose($by); } fclose($a3v); return $q3v; } function d1($k3v,$content){ $x3v=MTMPL_FOLDER.$k3v .'.mtmpl.php'; if(is_file($x3v)) { ob_start(); include $x3v; $l8=ob_get_contents(); ob_end_clean(); return trim($l8); } } function s1(){ global$_config,$_superconfig; $e3v=$_config['mail_from']; if (@$_superconfig['mail_from']) { $e3v=$_superconfig['mail_from']; } if ($e3v[strlen($e3v)-1]=='@'){ $e3v.=$_SERVER['HTTP_HOST']; } return $e3v; } function a1($w,$subject,$an,$r3v=''){ global$_superconfig; if (@$_superconfig['mail_debug']) { $za='mail-debug'; $bn=basename(tempnam($za,'m-')); $tv=( 'To:       '.$w ."\n". 'Subject:  '.$subject ."\n". $r3v ."\n". "--------------------------------------------------\n". $an ); n3($za .'/'. $bn,$tv); chmod($za .'/'. $bn,E2_NEW_FILES_RIGHTS); rename($za .'/'. $bn,$za .'/'. $bn.'.txt'); } $subject='=?UTF-8?B?'. base64_encode($subject) .'?='; $r3v.="\r\nContent-Type: text/plain; charset=utf-8"; if(MAIL_ENABLED){ mail($w,$subject,$an,trim($r3v)); } } function _A($tv){ global$_candy,$_protocol,$v,$c,$_current_url; if ( preg_match('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si',$tv,$y3) and ( $y3[1]==='' or $y3[1]===$_current_url or $_protocol .'://'. $v.$y3[1]===$_current_url or $_protocol .'://'. $v.$c .'/'. $y3[1]===$_current_url or $_candy=='e2m_install' ) ) { return $y3[2]; } else { return $tv; } } function _AT($lq){ global$_candy,$v,$c,$_current_url; return ( $lq==='' or $lq===$_current_url or $_protocol .'://'. $v.$lq===$_current_url or $_protocol .'://'. $v.$c .'/'. $lq===$_current_url ); } function _IMGSRC($fb){ return os($fb); } function _SVG($fb){ return ps($fb); } function _COLOR($dx,$sx,$t3v,$j3v=1){ if(strlen($dx)!=3 and strlen($dx)!=6) return 'f0f'; if(strlen($sx)!=3 and strlen($sx)!=6) return 'f0f'; if(strlen($dx)==3)$dx=$dx[0].$dx[0].$dx[1].$dx[1].$dx[2].$dx[2]; if(strlen($sx)==3)$sx=$sx[0].$sx[0].$sx[1].$sx[1].$sx[2].$sx[2]; $lz=array ( $dx[0].$dx[1],$dx[2].$dx[3],$dx[4].$dx[5], $sx[0].$sx[1],$sx[2].$sx[3],$sx[4].$sx[5], ); foreach ($lz as $t => $af){ $lz[$t]=hexdec($af); } $zy=array ( $lz[0]+pow($t3v,$j3v) * ($lz[3]-$lz[0]), $lz[1]+pow($t3v,$j3v) * ($lz[4]-$lz[1]), $lz[2]+pow($t3v,$j3v) * ($lz[5]-$lz[2]), ); $h3v=''; foreach ($zy as $t => $af){ $h3v.=str_pad(dechex($af),2,'0',STR_PAD_LEFT); } return $h3v; } function _DT($kl,$g3v){ if (!$g3v) return ''; list ($pl,$fl)=$g3v; $d=$kl; $y9=zy('m',$pl,$fl); $d=str_replace('{zone}',e2__escape_all(ny($fl['offset'])), $d); $d=str_replace('{month}',e2__escape_all(e2l_get_string('um--month', array ('month' => $y9))), $d); $d=str_replace('{month-short}',e2__escape_all(e2l_get_string('um--month-short', array ('month' => $y9))), $d); $d=str_replace('{month-g}',e2__escape_all(e2l_get_string('um--month-g', array ('month' => $y9))), $d); $d=zy($d,$pl,$fl); return $d; } function _AGO($g3v){ return iy($g3v[0], array ('offset' => $g3v[1]['offset'],'is_dst' => $g3v[1]['is_dst']) ); } function _NUM($tv){ return e2_decline_for_number($tv); } function _CSS($w3v){ return gs($w3v); } function _CSS_HREF($w3v){ return ca($w3v); } function _JS($u3v){ return ws($u3v); } function _LIB($fo){ return us($fo); } function _T($vo){ echo js($vo); } function _T_DEFER($name){ echo es($name); } function _X($vo){ echo ts($vo); } function _T_FOR($vo,$i3v=null){ global$content; if ($i3v===null)$i3v=$vo; if(array_key_exists($i3v,$content)) { echo js($vo); } else { echo ''; } } function _FIT($oo,$po){ if(E2_EDITION){ return da($oo,$po);; } } function _GUIDES($o3v=false){ global$_olba_guides; if(is_array($o3v))$_olba_guides=$o3v; if (!is_array($_olba_guides)) return; $p3v='<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $cyv=0; $vyv=$_olba_guides; $vyv[] = 100; foreach ($vyv as $r => $ek){ if ($ek==100) break; $cyv+=$ek; $p3v.='<div style="position: fixed; left: '. $ek .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $byv='position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($vyv[$r+1]-$vyv[$r] < 4){ $p3v.='<div style="'. $byv.'; right: '. (100-$ek) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $ek .'%</div>'; } else { $p3v.='<div style="'. $byv.'; left: '. $ek .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $ek .'%</div>'; } } $p3v.='</div>'; $_olba_current_col=0; return $p3v; } function _S($x){ global$_strings; return$_strings[$x]; } function _SHORTCUT($name){ return a($name); } function e2__escape_all($x){ $d=''; for ($r=0; $r < mb_strlen($x); ++ $r){ $d.='\\'. mb_substr($x,$r,1); } return $d; } abstract class E2GIP { protected $gip_cookie_name='gip'; protected $gip_token_cookie_name='gip_access_token'; protected $gip_token=null; abstract public function get_auth_url(); abstract public static function get_profile_url($as_,$o4); abstract public function callback(); const PHP_VERSION_VK_FEATURE=70100; public static function set_session_data($lm,$s){ if(session_status()==PHP_SESSION_NONE){ session_start(); } $_SESSION[$lm]=$s; } public static function get_session_data($lm,$yyv=false){ if(session_status()==PHP_SESSION_NONE){ session_start(); } if(!isset($_SESSION[$lm])) { return null; } $s=$_SESSION[$lm]; if($yyv){ unset($_SESSION[$lm]); } return $s; } public static function get_gips_order(){ return [ 'twitter' => 0, 'facebook' => 1, 'vk' => 2, 'telegram' => 3 ]; } public function get_config($lm){ $nyv='gips/'. $this->type .'.json'; if(is_file(USER_FOLDER.$nyv)) { $qu=@file_get_contents(USER_FOLDER.$nyv); } else { $qu=@file_get_contents(SYSTEM_FOLDER.$nyv); } if ($qu!==false){ $d=json_decode($qu,true,512,JSON_BIGINT_AS_STRING)[$lm]; if ($d) return $d; } return null; } public function get_callback_url(){ return jv('e2m_gip_sign_in_callback', array('provider' => $this->type)); } protected function get_proxy_param(){ global$settings; $wo=DEFAULT_LANGUAGE; if(array_key_exists('language',$settings))$wo=$settings['language']; return '?language='.$wo.'&type='.$this->type.'&callback_url='.urlencode($this->get_callback_url()); } public function get_gip_session_data(){ global$_config; $myv=$this->gip_token?$this->gip_token:$_COOKIE[b($this->gip_token_cookie_name)]; xn( "SELECT * FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '". $this->type ."' ". "AND `SessionToken` = '".rn($myv)."' ". "ORDER BY `ID` DESC LIMIT 1", 'get GIP session data' ); $m1=en(); return $m1?$m1[0] : array(); } public function is_logged_in(){ if(empty($_COOKIE[b($this->gip_cookie_name)]) || !in_array($_COOKIE[b($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[b($this->gip_cookie_name)] != $this->type || empty($_COOKIE[b($this->gip_token_cookie_name)])) { return false; } $lv=$this->get_gip_session_data(); return (bool)$lv; } protected function save_session($as_,$name,$accessToken,$fyv='',$userEmail='',$userLink=''){ $pl=time(); bn( 'GIPsSessions', array ( 'GIP' => $this->type, 'GIPAuthorID' => $as_, 'AuthorName' => $name, 'AuthorEmail' => $userEmail, 'AuthorProfileLink' => $userLink, 'SessionToken' => $accessToken, 'Stamp' => $pl, ), 'INSERT', 'ON DUPLICATE KEY UPDATE '. '`SessionToken` = "'.rn($accessToken).'", '. '`AuthorName` = "'.rn($name).'", '. '`Stamp` = "'.$pl.'"' ); y($this->gip_cookie_name,$this->type); y($this->gip_token_cookie_name,$accessToken); if(isset($userEmail) && !empty($userEmail))y('commenter_email',$userEmail); $this->gip_token=$accessToken; } public static function get_logout_key(){ if ($dyv=self::get_session_data('logout_key')) { return $dyv; } $dyv=md5(microtime()); self::set_session_data('logout_key',$dyv); return $dyv; } public static function is_valid_logout_key($lm){ $syv=self::get_session_data('logout_key',true); if (empty($syv) || empty($lm) || $syv!=$lm){ return false; } return true; } public function logout(){ global$_config; y($this->gip_cookie_name); y($this->gip_token_cookie_name); xn( "DELETE FROM `". $_config['db_table_prefix']."GIPsSessions` ". "WHERE `SubsetID`=". $_config['db_table_subset'] ." ". "AND `GIP` = '".$this->type."' ". "AND `SessionToken` = '" . rn($_COOKIE[b($this->gip_token_cookie_name)]) . "'", 'logout' ); } public function get_avatar_width(){ return USERPIC_WIDTH; } public function get_avatar_height(){ return USERPIC_HEIGHT; } public function save_avatar($as_,$ayv){ global$_config; @j(MEDIA_ROOT_FOLDER.AVATARS_FOLDER); @chmod(MEDIA_ROOT_FOLDER.AVATARS_FOLDER,$_config['uploaded_files_mode']); $fb=MEDIA_ROOT_FOLDER.AVATARS_FOLDER.$this->type .'-'. $as_ .'.jpg'; if ($qyv=file_get_contents($ayv)) { file_put_contents($fb,$qyv); } return $fb; } } function e2m_gip_sign_in($lv){ global$_config,$settings; $type=$lv['provider']; $gz=e2_get_gip_instance($type); if (!$gz)v(); header('Location: '.$gz->get_auth_url()); die; } function e2m_gip_sign_in_callback($lv){ global$_config; $type=$lv['provider']; $gz=e2_get_gip_instance($type); if (!$gz){ die($type.' is not defined'); } $lyv=$gz->callback(); echo '<script>'; if ($lyv===true){ $dg=$gz->get_gip_session_data(); $zyv=[ 'name' => $dg['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => jv('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized('.json_encode($zyv).');'; } else { echo 'alert (\''. $lyv. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($lv){ global$_config; $dyv=$lv['provider']; if (!E2GIP::is_valid_logout_key($dyv)) { die('invalid logout key'); } $gz=e2_get_logged_gip(); if($gz){ $gz->logout(); } v(); } function e2_list_gips(){ static $kyv=null; if(!is_null($kyv)) { return $kyv; } $xyv=SYSTEM_FOLDER. 'gips/'; $eyv=opendir($xyv); $kyv=[]; $ryv=E2GIP::get_gips_order(); $tyv=count($ryv); while (($by=readdir($eyv)) !== false){ if(pathinfo($by,PATHINFO_EXTENSION)!='php') continue; $jyv=pathinfo($by,PATHINFO_FILENAME); if ($jyv=='vk'){ if(PHP_VERSION_ID < E2GIP::PHP_VERSION_VK_FEATURE) continue; } $lm=isset($ryv[$jyv]) ? $ryv[$jyv] : ++$tyv; $kyv[$lm]=$jyv; } closedir($eyv); ksort($kyv); return $kyv; } function e2_get_gip_class_name($type){ return "E2GIP".ucfirst($type); } function e2_get_gip_instance($type){ if (!in_array($type,e2_list_gips())) { return false; } $hyv=e2_get_gip_class_name($type); $gz=new $hyv; return $gz; } function e2_get_gip_auth_url($type){ return jv('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type=''){ $gyv=!$type?e2_list_gips() : array($type); foreach($gyv as$type){ $gz=e2_get_gip_instance($type); if ($gz && $gz->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip(){ foreach(e2_list_gips() as$type){ $gz=e2_get_gip_instance($type); if ($gz && $gz->is_logged_in()) { return $gz; } } return false; } function e2_get_logged_gip_name(){ foreach(e2_list_gips() as$type){ $gz=e2_get_gip_instance($type); if ($gz && $gz->is_logged_in()) { return$type; } } return false; } function e2_get_user_profile_url($type,$as_,$o4){ $hyv=e2_get_gip_class_name($type); return $hyv::get_profile_url($as_,$o4); } function e2_get_gip_session($type){ $gz=e2_get_gip_instance($type); if (!$gz || !$gz->is_logged_in()) { return false; } return $gz->get_gip_session_data(); } foreach(e2_list_gips() as $mg){ require_once 'system/gips/'.$mg.'.php'; } define('__DEV', (@$_config['dev_verbose'] > (int) !e2_())); $_stopwatch=w($_stopwatch); spl_autoload_register('xa'); vv(); o(); $_strings=cv(); if(!BUILT) @include 'builder.php'; function e2(){ global$settings,$content, $_candy, $_lang, $_config, $_strings, $_candies_installer, $_candies_public, $_candies_ajax, $_candies_to_disallow_in_read_only, $_template, $_diagnose; k(); set_error_handler('dv'); set_exception_handler('ev'); header('X-Powered-By: E2 Aegea v'. E2_VERSION); header('Content-type: text/html; charset=UTF-8'); list ($candy,$parameters)=hv(); try { $content=[]; $_candy=$candy; if ( @$_config['dev_slow_ajax'] and ( in_array($candy,$_candies_ajax) ) ) { sleep(1+2 * (rand()/getrandmax())); } if (!in_array($candy,$_candies_installer)) { sn(); } if (@$_config['read_only'] and in_array($candy,$_candies_to_disallow_in_read_only)) { $candy='e2m_error404'; } $wyv=(bool)e2_(); $uyv=!in_array($candy,$_candies_public); if(Log::$p3)__log('User signed in? '. ($wyv? 'Yes':'No')); $_newsfeeds=[]; xd('rss',bd(),jv('e2m_rss')); xd('json',bd(),jv('e2m_json')); if(E2_EDITION){ hm(); } if(substr($candy,0,4)=='e2m_'){ zs(); } if(is_callable($candy)) { if ($uyv && !$wyv){ if(substr($candy,0,4)=='e2s_'){ c(jv('e2m_sign_in')); } else { $content['title']=$_strings['pt--sign-in']; } } else { if(Log::$p3)__log('Candy call {'); $content=call_user_func($candy,$parameters); if(Log::$p3)__log('}'); } } else { $uyv=false; $content=e2_error404_mode(); } } catch (AeMySQLException $e){ if(substr($candy,0,4)=='e2s_'){ xv($e); } else { kv($e); $parameters=array(); $content['unavailable?']=true; } } if (!is_array($content))$content=array(); $content['template']['respond-to-dark-mode?'] = ( $_template['supports_dark_mode'] and (bool) @$settings['appearance']['respond_to_dark_mode'] ); $content['template']['use-likely-light?']=$_template['use_likely_light']; if (!array_key_exists('class',$content)) { $content['class']=str_replace('_','-',str_replace('e2m_','',$candy)); } if (!array_key_exists('notes',$content))$content['notes'] = array (); if (!array_key_exists('drafts',$content))$content['drafts'] = array (); if (!array_key_exists('comments',$content))$content['comments'] = array (); if (!array_key_exists('notes-list',$content))$content['notes-list'] = array (); if (mn()!==null){ if(Log::$p3)__log('Stuff for installed engine {'); $content['sign-in'] = [ 'done?' => $wyv, 'required?' => $uyv, 'necessary?' => $uyv && !$wyv, 'href' => jv('e2m_sign_in'), 'prompt' => $_strings['gs--need-password'], ]; $content['hrefs'] = array ( 'everything' => jv('e2m_everything'), ); if (!array_key_exists('tags',$content)) $content['tags']=ff($parameters); $content['blog']=vd(); $content['form-search']=sa($parameters); $content['engine']=im(); $content['form-login']=cd(); if($content['form-login']===null) unset($content['form-login']); if (!array_key_exists('summary',$content)) { if (!empty ($settings['meta_description'])) { $content['summary']=strip_tags(h3(htmlspecialchars($settings['meta_description'],ENT_NOQUOTES,HSC_ENC))); } else { $content['summary']=trim(strip_tags($content['blog']['subtitle'])); } } if (e2_()) { $content['admin']=pm(); $content['last-modifieds-by-id']='{}'; if (@$_COOKIE[b('local_copies')]) { $content['last-modifieds-by-id'] = ( fm($_COOKIE[b('local_copies')]) ); } } if(Log::$p3)__log('}'); } $content['title']=strip_tags(h3(htmlspecialchars($content['title'],ENT_NOQUOTES,HSC_ENC))); if (@$content['heading']) { $content['heading']=strip_tags(h3(htmlspecialchars($content['heading'],ENT_NOQUOTES,HSC_ENC))); } $content['language']=$_lang; if (!@isset ($_diagnose['ok?'])) { if (@$_COOKIE[b('diagnose')] or @$_diagnose['need?']) { fv(); } } if (mn()!==null){ if ( $settings['appearance']['show_view_counts'] and is_array($content['notes']) and count($content['notes']) > 0 ){ $content['notes']=e2_populate_read_counts_in_notes_ctree_($content['notes']); } foreach($content['notes'] as $f2){ ya($f2['format-info']['links-required']); } if(E2_EDITION){ if (!e2_()) { $content['embed']['pre-head-end']=$settings['embed']['google-analytics']; $content['embed']['pre-body-end']=$settings['embed']['yandex-metrika']; } } } $content['message']=av(); $ii=hs(); $content['meta']=om( $candy, $content['notes'], $content['tag'], $content['blog'], $content['pages'] ); $content['stat']=md(); $ii=rs($ii); if (mn()!==null){ $iyv=false; if (mn()!==null and la()) { if(is_writable(USER_FOLDER.'indexing.psa')) { $iyv=true; } else { $_diagnose['need?']=true; y('diagnose','1'); } } } echo $ii; if (mn()!==null){ if (mn()!==null and $iyv){ if(Log::$p3)__log('Spawn BSI step'); o3(jv('e2s_bsi_step', array ())); } if(E2_EDITION){ i(); } } if (@$_config['dev_dump_ctree'])yv($content); } ?>